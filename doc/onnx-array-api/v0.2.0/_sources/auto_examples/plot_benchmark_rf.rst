
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_benchmark_rf.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_benchmark_rf.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_benchmark_rf.py:


.. _l-example-benchmark-tree-implementation:

Benchmark of TreeEnsemble implementation
========================================

The following example compares the inference time between
:epkg:`onnxruntime` and :class:`sklearn.ensemble.RandomForestRegressor`,
fow different number of estimators, max depth, and parallelization.
It does it for a fixed number of rows and features.

import and registration of necessary converters
++++++++++++++++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 15-68

.. code-block:: Python


    import pickle
    import os
    import time
    from itertools import product

    import matplotlib.pyplot as plt
    import numpy
    import pandas
    from lightgbm import LGBMRegressor
    from onnxruntime import InferenceSession, SessionOptions
    from psutil import cpu_count
    from sphinx_runpython.runpython import run_cmd
    from skl2onnx import to_onnx, update_registered_converter
    from skl2onnx.common.shape_calculator import calculate_linear_regressor_output_shapes
    from sklearn import set_config
    from sklearn.ensemble import RandomForestRegressor
    from tqdm import tqdm
    from xgboost import XGBRegressor
    from onnxmltools.convert.xgboost.operator_converters.XGBoost import convert_xgboost


    def skl2onnx_convert_lightgbm(scope, operator, container):
        from onnxmltools.convert.lightgbm.operator_converters.LightGbm import (
            convert_lightgbm,
        )

        options = scope.get_options(operator.raw_operator)
        if "split" in options:
            operator.split = options["split"]
        else:
            operator.split = None
        convert_lightgbm(scope, operator, container)


    update_registered_converter(
        LGBMRegressor,
        "LightGbmLGBMRegressor",
        calculate_linear_regressor_output_shapes,
        skl2onnx_convert_lightgbm,
        options={"split": None},
    )
    update_registered_converter(
        XGBRegressor,
        "XGBoostXGBRegressor",
        calculate_linear_regressor_output_shapes,
        convert_xgboost,
    )

    # The following instruction reduces the time spent by scikit-learn
    # to validate the data.
    set_config(assume_finite=True)








.. GENERATED FROM PYTHON SOURCE LINES 69-71

Machine details
+++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 71-75

.. code-block:: Python



    print(f"Number of cores: {cpu_count()}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of cores: 8




.. GENERATED FROM PYTHON SOURCE LINES 76-78

But this information is not usually enough.
Let's extract the cache information.

.. GENERATED FROM PYTHON SOURCE LINES 78-85

.. code-block:: Python


    try:
        out, err = run_cmd("lscpu")
        print(out)
    except Exception as e:
        print(f"lscpu not available: {e}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <Popen: returncode: None args: ['lscpu']>




.. GENERATED FROM PYTHON SOURCE LINES 86-87

Or with the following command.

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: Python

    out, err = run_cmd("cat /proc/cpuinfo")
    print(out)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <Popen: returncode: None args: ['cat', '/proc/cpuinfo']>




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Fonction to measure inference time
++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 93-124

.. code-block:: Python



    def measure_inference(fct, X, repeat, max_time=5, quantile=1):
        """
        Run *repeat* times the same function on data *X*.

        :param fct: fonction to run
        :param X: data
        :param repeat: number of times to run
        :param max_time: maximum time to use to measure the inference
        :return: number of runs, sum of the time, average, median
        """
        times = []
        for n in range(repeat):
            perf = time.perf_counter()
            fct(X)
            delta = time.perf_counter() - perf
            times.append(delta)
            if len(times) < 3:
                continue
            if max_time is not None and sum(times) >= max_time:
                break
        times.sort()
        quantile = 0 if (len(times) - quantile * 2) < 3 else quantile
        if quantile == 0:
            tt = times
        else:
            tt = times[quantile:-quantile]
        return (len(times), sum(times), sum(tt) / len(tt), times[len(times) // 2])









.. GENERATED FROM PYTHON SOURCE LINES 125-131

Benchmark
+++++++++

The following script benchmarks the inference for the same
model for a random forest and onnxruntime after it was converted
into ONNX and for the following configurations.

.. GENERATED FROM PYTHON SOURCE LINES 131-153

.. code-block:: Python


    small = cpu_count() < 12
    if small:
        N = 1000
        n_features = 10
        n_jobs = [1, cpu_count() // 2, cpu_count()]
        n_ests = [10, 20, 30]
        depth = [4, 6, 8, 10]
        Regressor = RandomForestRegressor
    else:
        N = 100000
        n_features = 50
        n_jobs = [cpu_count(), cpu_count() // 2, 1]
        n_ests = [100, 200, 400]
        depth = [6, 8, 10, 12, 14]
        Regressor = RandomForestRegressor

    legend = f"parallel-nf-{n_features}-"

    # avoid duplicates on machine with 1 or 2 cores.
    n_jobs = list(sorted(set(n_jobs), reverse=True))








.. GENERATED FROM PYTHON SOURCE LINES 154-155

Benchmark parameters

.. GENERATED FROM PYTHON SOURCE LINES 155-159

.. code-block:: Python

    repeat = 7  # repeat n times the same inference
    quantile = 1  # exclude extreme times
    max_time = 5  # maximum number of seconds to spend on one configuration








.. GENERATED FROM PYTHON SOURCE LINES 160-161

Data

.. GENERATED FROM PYTHON SOURCE LINES 161-251

.. code-block:: Python



    X = numpy.random.randn(N, n_features).astype(numpy.float32)
    noise = (numpy.random.randn(X.shape[0]) / (n_features // 5)).astype(numpy.float32)
    y = X.mean(axis=1) + noise
    n_train = min(N, N // 3)


    data = []
    couples = list(product(n_jobs, depth, n_ests))
    bar = tqdm(couples)
    cache_dir = "_cache"
    if not os.path.exists(cache_dir):
        os.mkdir(cache_dir)

    for n_j, max_depth, n_estimators in bar:
        if n_j == 1 and n_estimators > n_ests[0]:
            # skipping
            continue

        # parallelization
        cache_name = os.path.join(
            cache_dir, f"nf-{X.shape[1]}-rf-J-{n_j}-E-{n_estimators}-D-{max_depth}.pkl"
        )
        if os.path.exists(cache_name):
            with open(cache_name, "rb") as f:
                rf = pickle.load(f)
        else:
            bar.set_description(f"J={n_j} E={n_estimators} D={max_depth} train rf")
            if n_j == 1 and issubclass(Regressor, RandomForestRegressor):
                rf = Regressor(max_depth=max_depth, n_estimators=n_estimators, n_jobs=-1)
                rf.fit(X[:n_train], y[:n_train])
                rf.n_jobs = 1
            else:
                rf = Regressor(max_depth=max_depth, n_estimators=n_estimators, n_jobs=n_j)
                rf.fit(X[:n_train], y[:n_train])
            with open(cache_name, "wb") as f:
                pickle.dump(rf, f)

        bar.set_description(f"J={n_j} E={n_estimators} D={max_depth} ISession")
        so = SessionOptions()
        so.intra_op_num_threads = n_j
        cache_name = os.path.join(
            cache_dir, f"nf-{X.shape[1]}-rf-J-{n_j}-E-{n_estimators}-D-{max_depth}.onnx"
        )
        if os.path.exists(cache_name):
            sess = InferenceSession(cache_name, so, providers=["CPUExecutionProvider"])
        else:
            bar.set_description(f"J={n_j} E={n_estimators} D={max_depth} cvt onnx")
            onx = to_onnx(rf, X[:1])
            with open(cache_name, "wb") as f:
                f.write(onx.SerializeToString())
            sess = InferenceSession(cache_name, so, providers=["CPUExecutionProvider"])
        onx_size = os.stat(cache_name).st_size

        # run once to avoid counting the first run
        bar.set_description(f"J={n_j} E={n_estimators} D={max_depth} predict1")
        rf.predict(X)
        sess.run(None, {"X": X})

        # fixed data
        obs = dict(
            n_jobs=n_j,
            max_depth=max_depth,
            n_estimators=n_estimators,
            repeat=repeat,
            max_time=max_time,
            name=rf.__class__.__name__,
            n_rows=X.shape[0],
            n_features=X.shape[1],
            onnx_size=onx_size,
        )

        # baseline
        bar.set_description(f"J={n_j} E={n_estimators} D={max_depth} predictB")
        r, t, mean, med = measure_inference(rf.predict, X, repeat=repeat, max_time=max_time)
        o1 = obs.copy()
        o1.update(dict(avg=mean, med=med, n_runs=r, ttime=t, name="base"))
        data.append(o1)

        # onnxruntime
        bar.set_description(f"J={n_j} E={n_estimators} D={max_depth} predictO")
        r, t, mean, med = measure_inference(
            lambda x: sess.run(None, {"X": x}), X, repeat=repeat, max_time=max_time
        )
        o2 = obs.copy()
        o2.update(dict(avg=mean, med=med, n_runs=r, ttime=t, name="ort_"))
        data.append(o2)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/36 [00:00<?, ?it/s]    J=8 E=10 D=4 ISession:   0%|          | 0/36 [00:00<?, ?it/s]    J=8 E=10 D=4 predict1:   0%|          | 0/36 [00:00<?, ?it/s]    J=8 E=10 D=4 predictB:   0%|          | 0/36 [00:00<?, ?it/s]    J=8 E=10 D=4 predictO:   0%|          | 0/36 [00:00<?, ?it/s]    J=8 E=10 D=4 predictO:   3%|▎         | 1/36 [00:00<00:03,  9.15it/s]    J=8 E=20 D=4 ISession:   3%|▎         | 1/36 [00:00<00:03,  9.15it/s]    J=8 E=20 D=4 predict1:   3%|▎         | 1/36 [00:00<00:03,  9.15it/s]    J=8 E=20 D=4 predictB:   3%|▎         | 1/36 [00:00<00:03,  9.15it/s]    J=8 E=20 D=4 predictO:   3%|▎         | 1/36 [00:00<00:03,  9.15it/s]    J=8 E=20 D=4 predictO:   6%|▌         | 2/36 [00:00<00:03,  9.17it/s]    J=8 E=30 D=4 ISession:   6%|▌         | 2/36 [00:00<00:03,  9.17it/s]    J=8 E=30 D=4 predict1:   6%|▌         | 2/36 [00:00<00:03,  9.17it/s]    J=8 E=30 D=4 predictB:   6%|▌         | 2/36 [00:00<00:03,  9.17it/s]    J=8 E=30 D=4 predictO:   6%|▌         | 2/36 [00:00<00:03,  9.17it/s]    J=8 E=30 D=4 predictO:   8%|▊         | 3/36 [00:00<00:04,  7.55it/s]    J=8 E=10 D=6 ISession:   8%|▊         | 3/36 [00:00<00:04,  7.55it/s]    J=8 E=10 D=6 predict1:   8%|▊         | 3/36 [00:00<00:04,  7.55it/s]    J=8 E=10 D=6 predictB:   8%|▊         | 3/36 [00:00<00:04,  7.55it/s]    J=8 E=10 D=6 predictO:   8%|▊         | 3/36 [00:00<00:04,  7.55it/s]    J=8 E=20 D=6 ISession:   8%|▊         | 3/36 [00:00<00:04,  7.55it/s]    J=8 E=20 D=6 predict1:   8%|▊         | 3/36 [00:00<00:04,  7.55it/s]    J=8 E=20 D=6 predictB:   8%|▊         | 3/36 [00:00<00:04,  7.55it/s]    J=8 E=20 D=6 predictO:   8%|▊         | 3/36 [00:00<00:04,  7.55it/s]    J=8 E=20 D=6 predictO:  14%|█▍        | 5/36 [00:00<00:03,  9.48it/s]    J=8 E=30 D=6 ISession:  14%|█▍        | 5/36 [00:00<00:03,  9.48it/s]    J=8 E=30 D=6 predict1:  14%|█▍        | 5/36 [00:00<00:03,  9.48it/s]    J=8 E=30 D=6 predictB:  14%|█▍        | 5/36 [00:00<00:03,  9.48it/s]    J=8 E=30 D=6 predictO:  14%|█▍        | 5/36 [00:00<00:03,  9.48it/s]    J=8 E=30 D=6 predictO:  17%|█▋        | 6/36 [00:00<00:03,  7.95it/s]    J=8 E=10 D=8 ISession:  17%|█▋        | 6/36 [00:00<00:03,  7.95it/s]    J=8 E=10 D=8 predict1:  17%|█▋        | 6/36 [00:00<00:03,  7.95it/s]    J=8 E=10 D=8 predictB:  17%|█▋        | 6/36 [00:00<00:03,  7.95it/s]    J=8 E=10 D=8 predictO:  17%|█▋        | 6/36 [00:00<00:03,  7.95it/s]    J=8 E=20 D=8 ISession:  17%|█▋        | 6/36 [00:00<00:03,  7.95it/s]    J=8 E=20 D=8 predict1:  17%|█▋        | 6/36 [00:00<00:03,  7.95it/s]    J=8 E=20 D=8 predictB:  17%|█▋        | 6/36 [00:00<00:03,  7.95it/s]    J=8 E=20 D=8 predictO:  17%|█▋        | 6/36 [00:00<00:03,  7.95it/s]    J=8 E=20 D=8 predictO:  22%|██▏       | 8/36 [00:00<00:03,  8.79it/s]    J=8 E=30 D=8 ISession:  22%|██▏       | 8/36 [00:00<00:03,  8.79it/s]    J=8 E=30 D=8 predict1:  22%|██▏       | 8/36 [00:00<00:03,  8.79it/s]    J=8 E=30 D=8 predictB:  22%|██▏       | 8/36 [00:00<00:03,  8.79it/s]    J=8 E=30 D=8 predictO:  22%|██▏       | 8/36 [00:01<00:03,  8.79it/s]    J=8 E=30 D=8 predictO:  25%|██▌       | 9/36 [00:01<00:03,  8.57it/s]    J=8 E=10 D=10 ISession:  25%|██▌       | 9/36 [00:01<00:03,  8.57it/s]    J=8 E=10 D=10 predict1:  25%|██▌       | 9/36 [00:01<00:03,  8.57it/s]    J=8 E=10 D=10 predictB:  25%|██▌       | 9/36 [00:01<00:03,  8.57it/s]    J=8 E=10 D=10 predictO:  25%|██▌       | 9/36 [00:01<00:03,  8.57it/s]    J=8 E=20 D=10 ISession:  25%|██▌       | 9/36 [00:01<00:03,  8.57it/s]    J=8 E=20 D=10 predict1:  25%|██▌       | 9/36 [00:01<00:03,  8.57it/s]    J=8 E=20 D=10 predictB:  25%|██▌       | 9/36 [00:01<00:03,  8.57it/s]    J=8 E=20 D=10 predictO:  25%|██▌       | 9/36 [00:01<00:03,  8.57it/s]    J=8 E=20 D=10 predictO:  31%|███       | 11/36 [00:01<00:02,  9.57it/s]    J=8 E=30 D=10 ISession:  31%|███       | 11/36 [00:01<00:02,  9.57it/s]    J=8 E=30 D=10 predict1:  31%|███       | 11/36 [00:01<00:02,  9.57it/s]    J=8 E=30 D=10 predictB:  31%|███       | 11/36 [00:01<00:02,  9.57it/s]    J=8 E=30 D=10 predictO:  31%|███       | 11/36 [00:01<00:02,  9.57it/s]    J=8 E=30 D=10 predictO:  33%|███▎      | 12/36 [00:01<00:02,  8.59it/s]    J=4 E=10 D=4 ISession:  33%|███▎      | 12/36 [00:01<00:02,  8.59it/s]     J=4 E=10 D=4 predict1:  33%|███▎      | 12/36 [00:01<00:02,  8.59it/s]    J=4 E=10 D=4 predictB:  33%|███▎      | 12/36 [00:01<00:02,  8.59it/s]    J=4 E=10 D=4 predictO:  33%|███▎      | 12/36 [00:01<00:02,  8.59it/s]    J=4 E=20 D=4 ISession:  33%|███▎      | 12/36 [00:01<00:02,  8.59it/s]    J=4 E=20 D=4 predict1:  33%|███▎      | 12/36 [00:01<00:02,  8.59it/s]    J=4 E=20 D=4 predictB:  33%|███▎      | 12/36 [00:01<00:02,  8.59it/s]    J=4 E=20 D=4 predictO:  33%|███▎      | 12/36 [00:01<00:02,  8.59it/s]    J=4 E=20 D=4 predictO:  39%|███▉      | 14/36 [00:01<00:02,  9.78it/s]    J=4 E=30 D=4 ISession:  39%|███▉      | 14/36 [00:01<00:02,  9.78it/s]    J=4 E=30 D=4 predict1:  39%|███▉      | 14/36 [00:01<00:02,  9.78it/s]    J=4 E=30 D=4 predictB:  39%|███▉      | 14/36 [00:01<00:02,  9.78it/s]    J=4 E=30 D=4 predictO:  39%|███▉      | 14/36 [00:01<00:02,  9.78it/s]    J=4 E=30 D=4 predictO:  42%|████▏     | 15/36 [00:01<00:02,  9.30it/s]    J=4 E=10 D=6 ISession:  42%|████▏     | 15/36 [00:01<00:02,  9.30it/s]    J=4 E=10 D=6 predict1:  42%|████▏     | 15/36 [00:01<00:02,  9.30it/s]    J=4 E=10 D=6 predictB:  42%|████▏     | 15/36 [00:01<00:02,  9.30it/s]    J=4 E=10 D=6 predictO:  42%|████▏     | 15/36 [00:01<00:02,  9.30it/s]    J=4 E=20 D=6 ISession:  42%|████▏     | 15/36 [00:01<00:02,  9.30it/s]    J=4 E=20 D=6 predict1:  42%|████▏     | 15/36 [00:01<00:02,  9.30it/s]    J=4 E=20 D=6 predictB:  42%|████▏     | 15/36 [00:01<00:02,  9.30it/s]    J=4 E=20 D=6 predictO:  42%|████▏     | 15/36 [00:01<00:02,  9.30it/s]    J=4 E=20 D=6 predictO:  47%|████▋     | 17/36 [00:01<00:01,  9.71it/s]    J=4 E=30 D=6 ISession:  47%|████▋     | 17/36 [00:01<00:01,  9.71it/s]    J=4 E=30 D=6 predict1:  47%|████▋     | 17/36 [00:01<00:01,  9.71it/s]    J=4 E=30 D=6 predictB:  47%|████▋     | 17/36 [00:01<00:01,  9.71it/s]    J=4 E=30 D=6 predictO:  47%|████▋     | 17/36 [00:01<00:01,  9.71it/s]    J=4 E=30 D=6 predictO:  50%|█████     | 18/36 [00:02<00:02,  8.92it/s]    J=4 E=10 D=8 ISession:  50%|█████     | 18/36 [00:02<00:02,  8.92it/s]    J=4 E=10 D=8 predict1:  50%|█████     | 18/36 [00:02<00:02,  8.92it/s]    J=4 E=10 D=8 predictB:  50%|█████     | 18/36 [00:02<00:02,  8.92it/s]    J=4 E=10 D=8 predictO:  50%|█████     | 18/36 [00:02<00:02,  8.92it/s]    J=4 E=20 D=8 ISession:  50%|█████     | 18/36 [00:02<00:02,  8.92it/s]    J=4 E=20 D=8 predict1:  50%|█████     | 18/36 [00:02<00:02,  8.92it/s]    J=4 E=20 D=8 predictB:  50%|█████     | 18/36 [00:02<00:02,  8.92it/s]    J=4 E=20 D=8 predictO:  50%|█████     | 18/36 [00:02<00:02,  8.92it/s]    J=4 E=20 D=8 predictO:  56%|█████▌    | 20/36 [00:02<00:01,  9.92it/s]    J=4 E=30 D=8 ISession:  56%|█████▌    | 20/36 [00:02<00:01,  9.92it/s]    J=4 E=30 D=8 predict1:  56%|█████▌    | 20/36 [00:02<00:01,  9.92it/s]    J=4 E=30 D=8 predictB:  56%|█████▌    | 20/36 [00:02<00:01,  9.92it/s]    J=4 E=30 D=8 predictO:  56%|█████▌    | 20/36 [00:02<00:01,  9.92it/s]    J=4 E=30 D=8 predictO:  58%|█████▊    | 21/36 [00:02<00:01,  9.24it/s]    J=4 E=10 D=10 ISession:  58%|█████▊    | 21/36 [00:02<00:01,  9.24it/s]    J=4 E=10 D=10 predict1:  58%|█████▊    | 21/36 [00:02<00:01,  9.24it/s]    J=4 E=10 D=10 predictB:  58%|█████▊    | 21/36 [00:02<00:01,  9.24it/s]    J=4 E=10 D=10 predictO:  58%|█████▊    | 21/36 [00:02<00:01,  9.24it/s]    J=4 E=20 D=10 ISession:  58%|█████▊    | 21/36 [00:02<00:01,  9.24it/s]    J=4 E=20 D=10 predict1:  58%|█████▊    | 21/36 [00:02<00:01,  9.24it/s]    J=4 E=20 D=10 predictB:  58%|█████▊    | 21/36 [00:02<00:01,  9.24it/s]    J=4 E=20 D=10 predictO:  58%|█████▊    | 21/36 [00:02<00:01,  9.24it/s]    J=4 E=20 D=10 predictO:  64%|██████▍   | 23/36 [00:02<00:01, 10.22it/s]    J=4 E=30 D=10 ISession:  64%|██████▍   | 23/36 [00:02<00:01, 10.22it/s]    J=4 E=30 D=10 predict1:  64%|██████▍   | 23/36 [00:02<00:01, 10.22it/s]    J=4 E=30 D=10 predictB:  64%|██████▍   | 23/36 [00:02<00:01, 10.22it/s]    J=4 E=30 D=10 predictO:  64%|██████▍   | 23/36 [00:02<00:01, 10.22it/s]    J=1 E=10 D=4 ISession:  64%|██████▍   | 23/36 [00:02<00:01, 10.22it/s]     J=1 E=10 D=4 predict1:  64%|██████▍   | 23/36 [00:02<00:01, 10.22it/s]    J=1 E=10 D=4 predictB:  64%|██████▍   | 23/36 [00:02<00:01, 10.22it/s]    J=1 E=10 D=4 predictO:  64%|██████▍   | 23/36 [00:02<00:01, 10.22it/s]    J=1 E=10 D=4 predictO:  69%|██████▉   | 25/36 [00:02<00:00, 11.04it/s]    J=1 E=10 D=6 ISession:  69%|██████▉   | 25/36 [00:02<00:00, 11.04it/s]    J=1 E=10 D=6 predict1:  69%|██████▉   | 25/36 [00:02<00:00, 11.04it/s]    J=1 E=10 D=6 predictB:  69%|██████▉   | 25/36 [00:02<00:00, 11.04it/s]    J=1 E=10 D=6 predictO:  69%|██████▉   | 25/36 [00:02<00:00, 11.04it/s]    J=1 E=10 D=8 ISession:  69%|██████▉   | 25/36 [00:02<00:00, 11.04it/s]    J=1 E=10 D=8 predict1:  69%|██████▉   | 25/36 [00:02<00:00, 11.04it/s]    J=1 E=10 D=8 predictB:  69%|██████▉   | 25/36 [00:02<00:00, 11.04it/s]    J=1 E=10 D=8 predictO:  69%|██████▉   | 25/36 [00:02<00:00, 11.04it/s]    J=1 E=10 D=10 ISession:  69%|██████▉   | 25/36 [00:02<00:00, 11.04it/s]    J=1 E=10 D=10 predict1:  69%|██████▉   | 25/36 [00:02<00:00, 11.04it/s]    J=1 E=10 D=10 predictB:  69%|██████▉   | 25/36 [00:02<00:00, 11.04it/s]    J=1 E=10 D=10 predictO:  69%|██████▉   | 25/36 [00:02<00:00, 11.04it/s]    J=1 E=10 D=10 predictO: 100%|██████████| 36/36 [00:02<00:00, 13.39it/s]




.. GENERATED FROM PYTHON SOURCE LINES 252-254

Saving data
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 254-263

.. code-block:: Python


    name = os.path.join(cache_dir, "plot_beanchmark_rf")
    print(f"Saving data into {name!r}")

    df = pandas.DataFrame(data)
    df2 = df.copy()
    df2["legend"] = legend
    df2.to_csv(f"{name}-{legend}.csv", index=False)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Saving data into '_cache/plot_beanchmark_rf'




.. GENERATED FROM PYTHON SOURCE LINES 264-265

Printing the data

.. GENERATED FROM PYTHON SOURCE LINES 265-267

.. code-block:: Python

    df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>n_jobs</th>
          <th>max_depth</th>
          <th>n_estimators</th>
          <th>repeat</th>
          <th>max_time</th>
          <th>name</th>
          <th>n_rows</th>
          <th>n_features</th>
          <th>onnx_size</th>
          <th>avg</th>
          <th>med</th>
          <th>n_runs</th>
          <th>ttime</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>8</td>
          <td>4</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>11016</td>
          <td>0.008059</td>
          <td>0.008305</td>
          <td>7</td>
          <td>0.064896</td>
        </tr>
        <tr>
          <th>1</th>
          <td>8</td>
          <td>4</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>11016</td>
          <td>0.000122</td>
          <td>0.000119</td>
          <td>7</td>
          <td>0.001116</td>
        </tr>
        <tr>
          <th>2</th>
          <td>8</td>
          <td>4</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>21920</td>
          <td>0.010397</td>
          <td>0.009973</td>
          <td>7</td>
          <td>0.073086</td>
        </tr>
        <tr>
          <th>3</th>
          <td>8</td>
          <td>4</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>21920</td>
          <td>0.000197</td>
          <td>0.000193</td>
          <td>7</td>
          <td>0.018644</td>
        </tr>
        <tr>
          <th>4</th>
          <td>8</td>
          <td>4</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>31581</td>
          <td>0.014009</td>
          <td>0.013726</td>
          <td>7</td>
          <td>0.117249</td>
        </tr>
        <tr>
          <th>5</th>
          <td>8</td>
          <td>4</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>31581</td>
          <td>0.000234</td>
          <td>0.000227</td>
          <td>7</td>
          <td>0.018801</td>
        </tr>
        <tr>
          <th>6</th>
          <td>8</td>
          <td>6</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>32334</td>
          <td>0.005623</td>
          <td>0.005928</td>
          <td>7</td>
          <td>0.040000</td>
        </tr>
        <tr>
          <th>7</th>
          <td>8</td>
          <td>6</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>32334</td>
          <td>0.000137</td>
          <td>0.000135</td>
          <td>7</td>
          <td>0.015484</td>
        </tr>
        <tr>
          <th>8</th>
          <td>8</td>
          <td>6</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>63384</td>
          <td>0.009197</td>
          <td>0.009705</td>
          <td>7</td>
          <td>0.063185</td>
        </tr>
        <tr>
          <th>9</th>
          <td>8</td>
          <td>6</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>63384</td>
          <td>0.000201</td>
          <td>0.000200</td>
          <td>7</td>
          <td>0.008112</td>
        </tr>
        <tr>
          <th>10</th>
          <td>8</td>
          <td>6</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>93267</td>
          <td>0.015458</td>
          <td>0.013936</td>
          <td>7</td>
          <td>0.111482</td>
        </tr>
        <tr>
          <th>11</th>
          <td>8</td>
          <td>6</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>93267</td>
          <td>0.000984</td>
          <td>0.001171</td>
          <td>7</td>
          <td>0.008292</td>
        </tr>
        <tr>
          <th>12</th>
          <td>8</td>
          <td>8</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>70250</td>
          <td>0.007109</td>
          <td>0.007691</td>
          <td>7</td>
          <td>0.050002</td>
        </tr>
        <tr>
          <th>13</th>
          <td>8</td>
          <td>8</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>70250</td>
          <td>0.000188</td>
          <td>0.000176</td>
          <td>7</td>
          <td>0.001608</td>
        </tr>
        <tr>
          <th>14</th>
          <td>8</td>
          <td>8</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>136595</td>
          <td>0.010403</td>
          <td>0.010489</td>
          <td>7</td>
          <td>0.073281</td>
        </tr>
        <tr>
          <th>15</th>
          <td>8</td>
          <td>8</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>136595</td>
          <td>0.000235</td>
          <td>0.000218</td>
          <td>7</td>
          <td>0.001886</td>
        </tr>
        <tr>
          <th>16</th>
          <td>8</td>
          <td>8</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>200526</td>
          <td>0.013901</td>
          <td>0.013794</td>
          <td>7</td>
          <td>0.095357</td>
        </tr>
        <tr>
          <th>17</th>
          <td>8</td>
          <td>8</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>200526</td>
          <td>0.000318</td>
          <td>0.000329</td>
          <td>7</td>
          <td>0.002452</td>
        </tr>
        <tr>
          <th>18</th>
          <td>8</td>
          <td>10</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>110896</td>
          <td>0.005046</td>
          <td>0.004331</td>
          <td>7</td>
          <td>0.036955</td>
        </tr>
        <tr>
          <th>19</th>
          <td>8</td>
          <td>10</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>110896</td>
          <td>0.000195</td>
          <td>0.000193</td>
          <td>7</td>
          <td>0.001651</td>
        </tr>
        <tr>
          <th>20</th>
          <td>8</td>
          <td>10</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>205168</td>
          <td>0.009787</td>
          <td>0.009735</td>
          <td>7</td>
          <td>0.070975</td>
        </tr>
        <tr>
          <th>21</th>
          <td>8</td>
          <td>10</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>205168</td>
          <td>0.000341</td>
          <td>0.000329</td>
          <td>7</td>
          <td>0.002545</td>
        </tr>
        <tr>
          <th>22</th>
          <td>8</td>
          <td>10</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>337667</td>
          <td>0.015894</td>
          <td>0.016135</td>
          <td>7</td>
          <td>0.110542</td>
        </tr>
        <tr>
          <th>23</th>
          <td>8</td>
          <td>10</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>337667</td>
          <td>0.000423</td>
          <td>0.000450</td>
          <td>7</td>
          <td>0.003040</td>
        </tr>
        <tr>
          <th>24</th>
          <td>4</td>
          <td>4</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>10651</td>
          <td>0.006571</td>
          <td>0.006656</td>
          <td>7</td>
          <td>0.046083</td>
        </tr>
        <tr>
          <th>25</th>
          <td>4</td>
          <td>4</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>10651</td>
          <td>0.000100</td>
          <td>0.000096</td>
          <td>7</td>
          <td>0.000862</td>
        </tr>
        <tr>
          <th>26</th>
          <td>4</td>
          <td>4</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>22066</td>
          <td>0.009687</td>
          <td>0.009409</td>
          <td>7</td>
          <td>0.068101</td>
        </tr>
        <tr>
          <th>27</th>
          <td>4</td>
          <td>4</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>22066</td>
          <td>0.000187</td>
          <td>0.000189</td>
          <td>7</td>
          <td>0.001471</td>
        </tr>
        <tr>
          <th>28</th>
          <td>4</td>
          <td>4</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>32019</td>
          <td>0.013959</td>
          <td>0.013730</td>
          <td>7</td>
          <td>0.100615</td>
        </tr>
        <tr>
          <th>29</th>
          <td>4</td>
          <td>4</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>32019</td>
          <td>0.000363</td>
          <td>0.000350</td>
          <td>7</td>
          <td>0.002796</td>
        </tr>
        <tr>
          <th>30</th>
          <td>4</td>
          <td>6</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>29122</td>
          <td>0.010356</td>
          <td>0.010596</td>
          <td>7</td>
          <td>0.071284</td>
        </tr>
        <tr>
          <th>31</th>
          <td>4</td>
          <td>6</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>29122</td>
          <td>0.000175</td>
          <td>0.000156</td>
          <td>7</td>
          <td>0.001587</td>
        </tr>
        <tr>
          <th>32</th>
          <td>4</td>
          <td>6</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>60902</td>
          <td>0.009367</td>
          <td>0.009151</td>
          <td>7</td>
          <td>0.067881</td>
        </tr>
        <tr>
          <th>33</th>
          <td>4</td>
          <td>6</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>60902</td>
          <td>0.000242</td>
          <td>0.000239</td>
          <td>7</td>
          <td>0.001878</td>
        </tr>
        <tr>
          <th>34</th>
          <td>4</td>
          <td>6</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>90785</td>
          <td>0.016756</td>
          <td>0.016786</td>
          <td>7</td>
          <td>0.118466</td>
        </tr>
        <tr>
          <th>35</th>
          <td>4</td>
          <td>6</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>90785</td>
          <td>0.000333</td>
          <td>0.000328</td>
          <td>7</td>
          <td>0.002602</td>
        </tr>
        <tr>
          <th>36</th>
          <td>4</td>
          <td>8</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>63147</td>
          <td>0.007990</td>
          <td>0.008152</td>
          <td>7</td>
          <td>0.056213</td>
        </tr>
        <tr>
          <th>37</th>
          <td>4</td>
          <td>8</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>63147</td>
          <td>0.000143</td>
          <td>0.000133</td>
          <td>7</td>
          <td>0.001182</td>
        </tr>
        <tr>
          <th>38</th>
          <td>4</td>
          <td>8</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>129927</td>
          <td>0.009747</td>
          <td>0.009624</td>
          <td>7</td>
          <td>0.069242</td>
        </tr>
        <tr>
          <th>39</th>
          <td>4</td>
          <td>8</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>129927</td>
          <td>0.000320</td>
          <td>0.000318</td>
          <td>7</td>
          <td>0.002462</td>
        </tr>
        <tr>
          <th>40</th>
          <td>4</td>
          <td>8</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>199897</td>
          <td>0.014127</td>
          <td>0.013040</td>
          <td>7</td>
          <td>0.102263</td>
        </tr>
        <tr>
          <th>41</th>
          <td>4</td>
          <td>8</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>199897</td>
          <td>0.000430</td>
          <td>0.000432</td>
          <td>7</td>
          <td>0.003159</td>
        </tr>
        <tr>
          <th>42</th>
          <td>4</td>
          <td>10</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>115188</td>
          <td>0.006567</td>
          <td>0.006794</td>
          <td>7</td>
          <td>0.046063</td>
        </tr>
        <tr>
          <th>43</th>
          <td>4</td>
          <td>10</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>115188</td>
          <td>0.000174</td>
          <td>0.000175</td>
          <td>7</td>
          <td>0.001444</td>
        </tr>
        <tr>
          <th>44</th>
          <td>4</td>
          <td>10</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>206338</td>
          <td>0.009754</td>
          <td>0.009427</td>
          <td>7</td>
          <td>0.069542</td>
        </tr>
        <tr>
          <th>45</th>
          <td>4</td>
          <td>10</td>
          <td>20</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>206338</td>
          <td>0.000309</td>
          <td>0.000298</td>
          <td>7</td>
          <td>0.002365</td>
        </tr>
        <tr>
          <th>46</th>
          <td>4</td>
          <td>10</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>321591</td>
          <td>0.013553</td>
          <td>0.013157</td>
          <td>7</td>
          <td>0.095630</td>
        </tr>
        <tr>
          <th>47</th>
          <td>4</td>
          <td>10</td>
          <td>30</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>321591</td>
          <td>0.000645</td>
          <td>0.000649</td>
          <td>7</td>
          <td>0.004497</td>
        </tr>
        <tr>
          <th>48</th>
          <td>1</td>
          <td>4</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>11527</td>
          <td>0.001613</td>
          <td>0.001609</td>
          <td>7</td>
          <td>0.011519</td>
        </tr>
        <tr>
          <th>49</th>
          <td>1</td>
          <td>4</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>11527</td>
          <td>0.000301</td>
          <td>0.000295</td>
          <td>7</td>
          <td>0.002174</td>
        </tr>
        <tr>
          <th>50</th>
          <td>1</td>
          <td>6</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>35181</td>
          <td>0.001426</td>
          <td>0.001380</td>
          <td>7</td>
          <td>0.010524</td>
        </tr>
        <tr>
          <th>51</th>
          <td>1</td>
          <td>6</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>35181</td>
          <td>0.000322</td>
          <td>0.000316</td>
          <td>7</td>
          <td>0.002378</td>
        </tr>
        <tr>
          <th>52</th>
          <td>1</td>
          <td>8</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>69863</td>
          <td>0.001542</td>
          <td>0.001527</td>
          <td>7</td>
          <td>0.010840</td>
        </tr>
        <tr>
          <th>53</th>
          <td>1</td>
          <td>8</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>69863</td>
          <td>0.000422</td>
          <td>0.000418</td>
          <td>7</td>
          <td>0.003022</td>
        </tr>
        <tr>
          <th>54</th>
          <td>1</td>
          <td>10</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>base</td>
          <td>1000</td>
          <td>10</td>
          <td>110504</td>
          <td>0.001771</td>
          <td>0.001779</td>
          <td>7</td>
          <td>0.013240</td>
        </tr>
        <tr>
          <th>55</th>
          <td>1</td>
          <td>10</td>
          <td>10</td>
          <td>7</td>
          <td>5</td>
          <td>ort_</td>
          <td>1000</td>
          <td>10</td>
          <td>110504</td>
          <td>0.000507</td>
          <td>0.000500</td>
          <td>7</td>
          <td>0.003619</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 268-270

Plot
++++

.. GENERATED FROM PYTHON SOURCE LINES 270-312

.. code-block:: Python


    n_rows = len(n_jobs)
    n_cols = len(n_ests)


    fig, axes = plt.subplots(n_rows, n_cols, figsize=(4 * n_cols, 4 * n_rows))
    fig.suptitle(f"{rf.__class__.__name__}\nX.shape={X.shape}")

    for n_j, n_estimators in tqdm(product(n_jobs, n_ests)):
        i = n_jobs.index(n_j)
        j = n_ests.index(n_estimators)
        ax = axes[i, j]

        subdf = df[(df.n_estimators == n_estimators) & (df.n_jobs == n_j)]
        if subdf.shape[0] == 0:
            continue
        piv = subdf.pivot(index="max_depth", columns="name", values=["avg", "med"])
        piv.plot(ax=ax, title=f"jobs={n_j}, trees={n_estimators}")
        ax.set_ylabel(f"n_jobs={n_j}", fontsize="small")
        ax.set_xlabel("max_depth", fontsize="small")

        # ratio
        ax2 = ax.twinx()
        piv1 = subdf.pivot(index="max_depth", columns="name", values="avg")
        piv1["speedup"] = piv1.base / piv1.ort_
        ax2.plot(piv1.index, piv1.speedup, "b--", label="speedup avg")

        piv1 = subdf.pivot(index="max_depth", columns="name", values="med")
        piv1["speedup"] = piv1.base / piv1.ort_
        ax2.plot(piv1.index, piv1.speedup, "y--", label="speedup med")
        ax2.legend(fontsize="x-small")

        # 1
        ax2.plot(piv1.index, [1 for _ in piv1.index], "k--", label="no speedup")

    for i in range(axes.shape[0]):
        for j in range(axes.shape[1]):
            axes[i, j].legend(fontsize="small")

    fig.tight_layout()
    fig.savefig(f"{name}-{legend}.png")
    # plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_benchmark_rf_001.png
   :alt: RandomForestRegressor X.shape=(1000, 10), jobs=8, trees=10, jobs=8, trees=20, jobs=8, trees=30, jobs=4, trees=10, jobs=4, trees=20, jobs=4, trees=30, jobs=1, trees=10
   :srcset: /auto_examples/images/sphx_glr_plot_benchmark_rf_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0it [00:00, ?it/s]    1it [00:00,  3.24it/s]    4it [00:00, 11.16it/s]    7it [00:00, 15.23it/s]    9it [00:00, 16.06it/s]
    2024-04-18 15:37:51,091 matplotlib.legend [WARNING] - No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
    2024-04-18 15:37:51,092 matplotlib.legend [WARNING] - No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.944 seconds)


.. _sphx_glr_download_auto_examples_plot_benchmark_rf.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_benchmark_rf.ipynb <plot_benchmark_rf.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_benchmark_rf.py <plot_benchmark_rf.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
