
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profiling.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_profiling.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profiling.py:


.. _l-onnx-array-onnxruntime-profiling:

Profiling with onnxruntime
==========================

*onnxruntime* optimizes the onnx graph by default before running
the inference. It modifies, fuses or add new operators.
Some of them are standard onnx operators, some of them
are implemented in onnxruntime (see `Supported Operators
<https://github.com/microsoft/onnxruntime/blob/main/docs/OperatorKernels.md>`_).
This example profiles the two models.

Optimize a model with onnxruntime
+++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 18-34

.. code-block:: default

    import os
    import numpy
    import matplotlib.pyplot as plt
    from onnxruntime import get_available_providers
    from onnx_array_api.ext_test_case import example_path
    from onnx_array_api.ort.ort_optimizers import ort_optimized_model
    from onnx_array_api.ort.ort_profile import ort_profile


    filename = example_path("data/small.onnx")
    optimized = filename + ".optimized.onnx"

    if not os.path.exists(optimized):
        ort_optimized_model(filename, output=optimized)
    print(optimized)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    data/small.onnx.optimized.onnx




.. GENERATED FROM PYTHON SOURCE LINES 35-37

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 37-43

.. code-block:: default


    feeds = {"input": numpy.random.random((1, 3, 112, 112)).astype(numpy.float32)}
    prof_base = ort_profile(filename, feeds, repeat=6, disable_optimization=True)
    prof_base.to_excel("prof_base.xlsx", index=False)
    prof_base






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>cat</th>
          <th>pid</th>
          <th>tid</th>
          <th>dur</th>
          <th>ts</th>
          <th>ph</th>
          <th>name</th>
          <th>args_op_name</th>
          <th>op_name</th>
          <th>args_thread_scheduling_stats</th>
          <th>args_output_type_shape</th>
          <th>args_output_size</th>
          <th>args_parameter_size</th>
          <th>args_activation_size</th>
          <th>args_node_index</th>
          <th>args_input_type_shape</th>
          <th>args_provider</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Session</td>
          <td>911</td>
          <td>911</td>
          <td>784</td>
          <td>3</td>
          <td>X</td>
          <td>model_loading_uri</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Session</td>
          <td>911</td>
          <td>911</td>
          <td>690</td>
          <td>818</td>
          <td>X</td>
          <td>session_initialization</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Node</td>
          <td>911</td>
          <td>911</td>
          <td>0</td>
          <td>1731</td>
          <td>X</td>
          <td>n0_fence_before</td>
          <td>Conv</td>
          <td>n0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Node</td>
          <td>911</td>
          <td>911</td>
          <td>721</td>
          <td>1737</td>
          <td>X</td>
          <td>n0_kernel_time</td>
          <td>Conv</td>
          <td>n0</td>
          <td>{'main_thread': {'thread_pool_name': 'session-...</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>3211264</td>
          <td>7168</td>
          <td>150528</td>
          <td>0</td>
          <td>[{'float': [1, 3, 112, 112]}, {'float': [64, 3...</td>
          <td>CPUExecutionProvider</td>
        </tr>
        <tr>
          <th>4</th>
          <td>Node</td>
          <td>911</td>
          <td>911</td>
          <td>0</td>
          <td>2475</td>
          <td>X</td>
          <td>n0_fence_after</td>
          <td>Conv</td>
          <td>n0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>261</th>
          <td>Node</td>
          <td>911</td>
          <td>911</td>
          <td>0</td>
          <td>81182</td>
          <td>X</td>
          <td>n13_fence_before</td>
          <td>Add</td>
          <td>n13</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>262</th>
          <td>Node</td>
          <td>911</td>
          <td>911</td>
          <td>139</td>
          <td>81185</td>
          <td>X</td>
          <td>n13_kernel_time</td>
          <td>Add</td>
          <td>n13</td>
          <td>{'main_thread': {'thread_pool_name': 'session-...</td>
          <td>[{'float': [1, 64, 56, 56]}]</td>
          <td>802816</td>
          <td>0</td>
          <td>1605632</td>
          <td>13</td>
          <td>[{'float': [1, 64, 56, 56]}, {'float': [1, 64,...</td>
          <td>CPUExecutionProvider</td>
        </tr>
        <tr>
          <th>263</th>
          <td>Node</td>
          <td>911</td>
          <td>911</td>
          <td>0</td>
          <td>81331</td>
          <td>X</td>
          <td>n13_fence_after</td>
          <td>Add</td>
          <td>n13</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>264</th>
          <td>Session</td>
          <td>911</td>
          <td>911</td>
          <td>12284</td>
          <td>69053</td>
          <td>X</td>
          <td>SequentialExecutor::Execute</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>265</th>
          <td>Session</td>
          <td>911</td>
          <td>911</td>
          <td>12314</td>
          <td>69035</td>
          <td>X</td>
          <td>model_run</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    <p>266 rows Ã— 17 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 44-45

And the optimized model.

.. GENERATED FROM PYTHON SOURCE LINES 45-49

.. code-block:: default


    prof_opt = ort_profile(optimized, feeds, repeat=6, disable_optimization=True)
    prof_opt






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>cat</th>
          <th>pid</th>
          <th>tid</th>
          <th>dur</th>
          <th>ts</th>
          <th>ph</th>
          <th>name</th>
          <th>args_op_name</th>
          <th>op_name</th>
          <th>args_thread_scheduling_stats</th>
          <th>args_output_type_shape</th>
          <th>args_output_size</th>
          <th>args_parameter_size</th>
          <th>args_activation_size</th>
          <th>args_node_index</th>
          <th>args_input_type_shape</th>
          <th>args_provider</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Session</td>
          <td>911</td>
          <td>911</td>
          <td>802</td>
          <td>2</td>
          <td>X</td>
          <td>model_loading_uri</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Session</td>
          <td>911</td>
          <td>911</td>
          <td>500</td>
          <td>835</td>
          <td>X</td>
          <td>session_initialization</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Node</td>
          <td>911</td>
          <td>911</td>
          <td>0</td>
          <td>1467</td>
          <td>X</td>
          <td>r0_nchwc_fence_before</td>
          <td>Conv</td>
          <td>r0_nchwc</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Node</td>
          <td>911</td>
          <td>911</td>
          <td>366</td>
          <td>1474</td>
          <td>X</td>
          <td>r0_nchwc_kernel_time</td>
          <td>Conv</td>
          <td>r0_nchwc</td>
          <td>{'main_thread': {'thread_pool_name': 'session-...</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>3211264</td>
          <td>7168</td>
          <td>150528</td>
          <td>0</td>
          <td>[{'float': [1, 3, 112, 112]}, {'float': [64, 3...</td>
          <td>CPUExecutionProvider</td>
        </tr>
        <tr>
          <th>4</th>
          <td>Node</td>
          <td>911</td>
          <td>911</td>
          <td>0</td>
          <td>1848</td>
          <td>X</td>
          <td>r0_nchwc_fence_after</td>
          <td>Conv</td>
          <td>r0_nchwc</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>351</th>
          <td>Node</td>
          <td>911</td>
          <td>911</td>
          <td>0</td>
          <td>65438</td>
          <td>X</td>
          <td>ReorderOutput_fence_before</td>
          <td>ReorderOutput</td>
          <td>ReorderOutput</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>352</th>
          <td>Node</td>
          <td>911</td>
          <td>911</td>
          <td>99</td>
          <td>65439</td>
          <td>X</td>
          <td>ReorderOutput_kernel_time</td>
          <td>ReorderOutput</td>
          <td>ReorderOutput</td>
          <td>{'main_thread': {'thread_pool_name': 'session-...</td>
          <td>[{'float': [1, 64, 56, 56]}]</td>
          <td>802816</td>
          <td>0</td>
          <td>802816</td>
          <td>18</td>
          <td>[{'float': [1, 64, 56, 56]}]</td>
          <td>CPUExecutionProvider</td>
        </tr>
        <tr>
          <th>353</th>
          <td>Node</td>
          <td>911</td>
          <td>911</td>
          <td>0</td>
          <td>65544</td>
          <td>X</td>
          <td>ReorderOutput_fence_after</td>
          <td>ReorderOutput</td>
          <td>ReorderOutput</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>354</th>
          <td>Session</td>
          <td>911</td>
          <td>911</td>
          <td>11103</td>
          <td>54445</td>
          <td>X</td>
          <td>SequentialExecutor::Execute</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>355</th>
          <td>Session</td>
          <td>911</td>
          <td>911</td>
          <td>11133</td>
          <td>54428</td>
          <td>X</td>
          <td>model_run</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    <p>356 rows Ã— 17 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 50-51

And the graph is:

.. GENERATED FROM PYTHON SOURCE LINES 51-79

.. code-block:: default



    def plot_profile(df, ax0, ax1=None, title=None):
        gr_dur = (
            df[["dur", "args_op_name"]].groupby("args_op_name").sum().sort_values("dur")
        )
        gr_dur.plot.barh(ax=ax0)
        if title is not None:
            ax0.set_title(title)
        if ax1 is not None:
            gr_n = (
                df[["dur", "args_op_name"]]
                .groupby("args_op_name")
                .count()
                .sort_values("dur")
            )
            gr_n = gr_n.loc[gr_dur.index, :]
            gr_n.plot.barh(ax=ax1)
            ax1.set_title("n occurences")


    unique_op = set(prof_base["args_op_name"])
    fig, ax = plt.subplots(2, 2, figsize=(10, len(unique_op)), sharex="col")
    plot_profile(prof_base, ax[0, 0], ax[0, 1], title="baseline")
    plot_profile(prof_opt, ax[1, 0], ax[1, 1], title="optimized")

    fig.savefig("plot_profiling.png")




.. image-sg:: /auto_examples/images/sphx_glr_plot_profiling_001.png
   :alt: baseline, n occurences, optimized, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profiling_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 80-86

Merging profiles
++++++++++++++++

Let's try to compare both profiles assuming every iteration
process the same image and the input and output size are the
same at every iteration.

.. GENERATED FROM PYTHON SOURCE LINES 86-139

.. code-block:: default



    def preprocess(df):
        groupkey = [
            "args_op_name",
            "args_output_type_shape",
            "args_input_type_shape",
            "args_provider",
        ]

        def _idx(row):
            """
            There may be multiple node with the same
            input/output types and shapes.
            This function gives every instance a distinct id.
            First unique op with same I/O receives the index 0.
            The counter restart when the session goes to the
            next image.
            """
            if row["cat"] == "Session":
                occurences[0] = {}
                return -1
            assert "idx" not in groupkey
            vals = [row[k] for k in groupkey]
            key = tuple(map(str, vals))
            if key not in occurences[0]:
                occurences[0][key] = 0
            else:
                occurences[0][key] += 1
            return occurences[0][key]

        df = df.copy()
        occurences = [{}]
        df["idx"] = df.apply(_idx, axis=1)
        df = df[(df["cat"] == "Node") & df["name"].str.contains("kernel_time")]
        groupkey.append("idx")
        for c in groupkey:
            if c != "idx":
                df[c] = df[c].apply(str)
        gr = df[groupkey + ["dur"]].groupby(groupkey)
        return gr.sum()


    base = preprocess(prof_base)
    opti = preprocess(prof_opt)
    merge = base.merge(
        opti, how="outer", suffixes=("base", "opti"), left_index=True, right_index=True
    )
    merge = merge.reset_index(drop=False)
    merge.to_excel("plot_profiling_merged.xlsx", index=False)
    merge







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>args_op_name</th>
          <th>args_output_type_shape</th>
          <th>args_input_type_shape</th>
          <th>args_provider</th>
          <th>idx</th>
          <th>durbase</th>
          <th>duropti</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Add</td>
          <td>[{'float': [1, 64, 56, 56]}]</td>
          <td>[{'float': [1, 64, 56, 56]}, {'float': [1, 64,...</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>1012.0</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>1</th>
          <td>BatchNormalization</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>[{'float': [1, 64, 112, 112]}, {'float': [64]}...</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>2637.0</td>
          <td>2163.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Concat</td>
          <td>[{'float': [1, 2, 112, 112]}]</td>
          <td>[{'float': [1, 1, 112, 112]}, {'float': [1, 1,...</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>180.0</td>
          <td>153.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Conv</td>
          <td>[{'float': [1, 1, 112, 112]}]</td>
          <td>[{'float': [1, 2, 112, 112]}, {'float': [1, 2,...</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>1331.0</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>4</th>
          <td>Conv</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>[{'float': [1, 3, 112, 112]}, {'float': [64, 3...</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>3166.0</td>
          <td>2222.0</td>
        </tr>
        <tr>
          <th>5</th>
          <td>Conv</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>[{'float': [1, 64, 112, 112]}, {'float': [64, ...</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>42555.0</td>
          <td>29146.0</td>
        </tr>
        <tr>
          <th>6</th>
          <td>Conv</td>
          <td>[{'float': [1, 64, 56, 56]}]</td>
          <td>[{'float': [1, 64, 112, 112]}, {'float': [64, ...</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>2269.0</td>
          <td>998.0</td>
        </tr>
        <tr>
          <th>7</th>
          <td>Conv</td>
          <td>[{'float': [1, 64, 56, 56]}]</td>
          <td>[{'float': [1, 64, 112, 112]}, {'float': [64, ...</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>NaN</td>
          <td>7343.0</td>
        </tr>
        <tr>
          <th>8</th>
          <td>Conv</td>
          <td>[{'float': [1, 64, 56, 56]}]</td>
          <td>[{'float': [1, 64, 112, 112]}, {'float': [64, ...</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>12741.0</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>9</th>
          <td>Conv</td>
          <td>[{'float': [1, 8, 112, 112]}]</td>
          <td>[{'float': [1, 2, 112, 112]}, {'float': [8, 2,...</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>NaN</td>
          <td>1432.0</td>
        </tr>
        <tr>
          <th>10</th>
          <td>Mul</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>[{'float': [1, 1, 112, 112]}, {'float': [1, 64...</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>1524.0</td>
          <td>1570.0</td>
        </tr>
        <tr>
          <th>11</th>
          <td>PRelu</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>[{'float': [1, 64, 112, 112]}, {'float': [64, ...</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>2891.0</td>
          <td>2472.0</td>
        </tr>
        <tr>
          <th>12</th>
          <td>PRelu</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>[{'float': [1, 64, 112, 112]}, {'float': [64, ...</td>
          <td>CPUExecutionProvider</td>
          <td>1</td>
          <td>2291.0</td>
          <td>1852.0</td>
        </tr>
        <tr>
          <th>13</th>
          <td>ReduceMax</td>
          <td>[{'float': [1, 1, 112, 112]}]</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>2341.0</td>
          <td>1690.0</td>
        </tr>
        <tr>
          <th>14</th>
          <td>ReduceMean</td>
          <td>[{'float': [1, 1, 112, 112]}]</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>1927.0</td>
          <td>1749.0</td>
        </tr>
        <tr>
          <th>15</th>
          <td>ReorderInput</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>NaN</td>
          <td>1242.0</td>
        </tr>
        <tr>
          <th>16</th>
          <td>ReorderInput</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>CPUExecutionProvider</td>
          <td>1</td>
          <td>NaN</td>
          <td>1037.0</td>
        </tr>
        <tr>
          <th>17</th>
          <td>ReorderInput</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>CPUExecutionProvider</td>
          <td>2</td>
          <td>NaN</td>
          <td>1231.0</td>
        </tr>
        <tr>
          <th>18</th>
          <td>ReorderOutput</td>
          <td>[{'float': [1, 1, 112, 112]}]</td>
          <td>[{'float': [1, 8, 112, 112]}]</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>NaN</td>
          <td>190.0</td>
        </tr>
        <tr>
          <th>19</th>
          <td>ReorderOutput</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>NaN</td>
          <td>2276.0</td>
        </tr>
        <tr>
          <th>20</th>
          <td>ReorderOutput</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>[{'float': [1, 64, 112, 112]}]</td>
          <td>CPUExecutionProvider</td>
          <td>1</td>
          <td>NaN</td>
          <td>1950.0</td>
        </tr>
        <tr>
          <th>21</th>
          <td>ReorderOutput</td>
          <td>[{'float': [1, 64, 56, 56]}]</td>
          <td>[{'float': [1, 64, 56, 56]}]</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>NaN</td>
          <td>635.0</td>
        </tr>
        <tr>
          <th>22</th>
          <td>Sigmoid</td>
          <td>[{'float': [1, 1, 112, 112]}]</td>
          <td>[{'float': [1, 1, 112, 112]}]</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
          <td>211.0</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 140-141

Aggregation

.. GENERATED FROM PYTHON SOURCE LINES 141-186

.. code-block:: default



    def classify(row):
        if numpy.isnan(row["duropti"]):
            return "-"
        if numpy.isnan(row["durbase"]):
            return "+"
        return "="


    keys = {"float": "f"}


    def process_shape(s):
        value = eval(s)
        ns = []
        for v in value:
            if len(v) != 1:
                raise NotImplementedError(f"Unexpected value {v} in {s!r}.")
            k, v = list(v.items())[0]
            n = "-".join([keys[k], "x".join(map(str, v))])
            ns.append(n)
        return ",".join(ns)


    def label(row):
        name = row["args_op_name"]
        inshape = process_shape(row["args_input_type_shape"])
        outshape = process_shape(row["args_output_type_shape"])
        side = row["side"][0]
        prov = row["args_provider"][:3]
        idx = row["idx"]
        return f"[{side}{prov}]{name}({inshape})->{outshape}[{idx}]"


    df = merge.copy()
    df["side"] = df.apply(classify, axis=1)
    df["label"] = df.apply(label, axis=1)
    gr = (
        df[["label", "durbase", "duropti", "idx"]]
        .groupby("label")
        .agg({"durbase": numpy.sum, "duropti": numpy.sum, "idx": max})
    )
    gr






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>durbase</th>
          <th>duropti</th>
          <th>idx</th>
        </tr>
        <tr>
          <th>label</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>[+CPU]Conv(f-1x2x112x112,f-8x2x7x7)-&gt;f-1x8x112x112[0]</th>
          <td>0.0</td>
          <td>1432.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[+CPU]Conv(f-1x64x112x112,f-64x64x3x3,f-64,f-1x64x56x56)-&gt;f-1x64x56x56[0]</th>
          <td>0.0</td>
          <td>7343.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[+CPU]ReorderInput(f-1x64x112x112)-&gt;f-1x64x112x112[0]</th>
          <td>0.0</td>
          <td>1242.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[+CPU]ReorderInput(f-1x64x112x112)-&gt;f-1x64x112x112[1]</th>
          <td>0.0</td>
          <td>1037.0</td>
          <td>1</td>
        </tr>
        <tr>
          <th>[+CPU]ReorderInput(f-1x64x112x112)-&gt;f-1x64x112x112[2]</th>
          <td>0.0</td>
          <td>1231.0</td>
          <td>2</td>
        </tr>
        <tr>
          <th>[+CPU]ReorderOutput(f-1x64x112x112)-&gt;f-1x64x112x112[0]</th>
          <td>0.0</td>
          <td>2276.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[+CPU]ReorderOutput(f-1x64x112x112)-&gt;f-1x64x112x112[1]</th>
          <td>0.0</td>
          <td>1950.0</td>
          <td>1</td>
        </tr>
        <tr>
          <th>[+CPU]ReorderOutput(f-1x64x56x56)-&gt;f-1x64x56x56[0]</th>
          <td>0.0</td>
          <td>635.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[+CPU]ReorderOutput(f-1x8x112x112)-&gt;f-1x1x112x112[0]</th>
          <td>0.0</td>
          <td>190.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[-CPU]Add(f-1x64x56x56,f-1x64x56x56)-&gt;f-1x64x56x56[0]</th>
          <td>1012.0</td>
          <td>0.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[-CPU]Conv(f-1x2x112x112,f-1x2x7x7)-&gt;f-1x1x112x112[0]</th>
          <td>1331.0</td>
          <td>0.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[-CPU]Conv(f-1x64x112x112,f-64x64x3x3,f-64)-&gt;f-1x64x56x56[0]</th>
          <td>12741.0</td>
          <td>0.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[-CPU]Sigmoid(f-1x1x112x112)-&gt;f-1x1x112x112[0]</th>
          <td>211.0</td>
          <td>0.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[=CPU]BatchNormalization(f-1x64x112x112,f-64,f-64,f-64,f-64)-&gt;f-1x64x112x112[0]</th>
          <td>2637.0</td>
          <td>2163.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[=CPU]Concat(f-1x1x112x112,f-1x1x112x112)-&gt;f-1x2x112x112[0]</th>
          <td>180.0</td>
          <td>153.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[=CPU]Conv(f-1x3x112x112,f-64x3x3x3,f-64)-&gt;f-1x64x112x112[0]</th>
          <td>3166.0</td>
          <td>2222.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[=CPU]Conv(f-1x64x112x112,f-64x64x1x1,f-64)-&gt;f-1x64x56x56[0]</th>
          <td>2269.0</td>
          <td>998.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[=CPU]Conv(f-1x64x112x112,f-64x64x3x3,f-64)-&gt;f-1x64x112x112[0]</th>
          <td>42555.0</td>
          <td>29146.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[=CPU]Mul(f-1x1x112x112,f-1x64x112x112)-&gt;f-1x64x112x112[0]</th>
          <td>1524.0</td>
          <td>1570.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[=CPU]PRelu(f-1x64x112x112,f-64x1x1)-&gt;f-1x64x112x112[0]</th>
          <td>2891.0</td>
          <td>2472.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[=CPU]PRelu(f-1x64x112x112,f-64x1x1)-&gt;f-1x64x112x112[1]</th>
          <td>2291.0</td>
          <td>1852.0</td>
          <td>1</td>
        </tr>
        <tr>
          <th>[=CPU]ReduceMax(f-1x64x112x112)-&gt;f-1x1x112x112[0]</th>
          <td>2341.0</td>
          <td>1690.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>[=CPU]ReduceMean(f-1x64x112x112)-&gt;f-1x1x112x112[0]</th>
          <td>1927.0</td>
          <td>1749.0</td>
          <td>0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 187-189

Final plot
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 189-207

.. code-block:: default


    # let's filter out unsignificant operator.
    grmax = gr["durbase"] + gr["duropti"]
    total = grmax.sum()
    grmax /= total
    gr = gr[grmax >= 0.01]


    fig, ax = plt.subplots(1, 2, figsize=(14, min(gr.shape[0], 500)), sharey=True)
    gr[["durbase", "duropti"]].plot.barh(ax=ax[0])
    ax[0].set_title("Side by side duration")
    gr["idx"] += 1
    gr[["idx"]].plot.barh(ax=ax[1])
    ax[1].set_title("Side by side count")
    fig.tight_layout()
    fig.savefig("plot_profiling_side_by_side.png")





.. image-sg:: /auto_examples/images/sphx_glr_plot_profiling_002.png
   :alt: Side by side duration, Side by side count
   :srcset: /auto_examples/images/sphx_glr_plot_profiling_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/xadupre/github/onnx-array-api/_doc/examples/plot_profiling.py:200: SettingWithCopyWarning: 
    A value is trying to be set on a copy of a slice from a DataFrame.
    Try using .loc[row_indexer,col_indexer] = value instead

    See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
      gr["idx"] += 1




.. GENERATED FROM PYTHON SOURCE LINES 208-210

On CUDA
+++++++

.. GENERATED FROM PYTHON SOURCE LINES 210-239

.. code-block:: default



    if "CUDAExecutionProvider" in get_available_providers():
        print("Profiling on CUDA")
        prof_base = ort_profile(
            filename,
            feeds,
            repeat=6,
            disable_optimization=True,
            provider=["CUDAExecutionProvider"],
        )
        prof_opti = ort_profile(
            optimized,
            feeds,
            repeat=6,
            disable_optimization=True,
            provider=["CUDAExecutionProvider"],
        )

        unique_op = set(prof_base["args_op_name"])
        fig, ax = plt.subplots(2, 2, figsize=(10, len(unique_op)), sharex="col")
        plot_profile(prof_base, ax[0, 0], ax[0, 1], title="baseline")
        plot_profile(prof_opt, ax[1, 0], ax[1, 1], title="optimized")
        fig.save("plot_profiling_cuda.png")
    else:
        print(f"CUDA not available in {get_available_providers()}")
        fig, ax = None, None

    ax




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    CUDA not available in ['CPUExecutionProvider']





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.833 seconds)


.. _sphx_glr_download_auto_examples_plot_profiling.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profiling.py <plot_profiling.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profiling.ipynb <plot_profiling.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
