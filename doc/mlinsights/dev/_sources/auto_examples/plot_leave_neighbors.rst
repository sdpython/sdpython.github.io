
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_leave_neighbors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_leave_neighbors.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_leave_neighbors.py:


Close leaves in a decision trees
================================

A decision tree computes a partition of the feature space.
We can wonder which leave is close to another one even though
the predict the same value (or class). Do they share a border?

.. GENERATED FROM PYTHON SOURCE LINES 12-14

A simple tree
+++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 14-37

.. code-block:: default



    import matplotlib.pyplot as plt
    import numpy
    from mlinsights.mltree import predict_leaves, tree_leave_index, tree_leave_neighbors
    from sklearn.datasets import load_iris
    from sklearn.tree import DecisionTreeClassifier

    X = numpy.array(
        [[10, 0], [10, 1], [10, 2], [11, 0], [11, 1], [11, 2], [12, 0], [12, 1], [12, 2]]
    )
    y = list(range(X.shape[0]))


    # In[5]:


    fig, ax = plt.subplots(1, 1)
    for i in range(X.shape[0]):
        ax.plot([X[i, 0]], [X[i, 1]], "o", ms=19, label="y=%d" % y[i])
    ax.legend()
    ax.set_title("Simple grid")




.. image-sg:: /auto_examples/images/sphx_glr_plot_leave_neighbors_001.png
   :alt: Simple grid
   :srcset: /auto_examples/images/sphx_glr_plot_leave_neighbors_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Simple grid')



.. GENERATED FROM PYTHON SOURCE LINES 39-44

.. code-block:: default



    clr = DecisionTreeClassifier(max_depth=5)
    clr.fit(X, y)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-6 {color: black;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-6" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>DecisionTreeClassifier(max_depth=5)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-19" type="checkbox" checked><label for="sk-estimator-id-19" class="sk-toggleable__label sk-toggleable__label-arrow">DecisionTreeClassifier</label><div class="sk-toggleable__content"><pre>DecisionTreeClassifier(max_depth=5)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 45-46

The contains the following list of leaves.

.. GENERATED FROM PYTHON SOURCE LINES 46-51

.. code-block:: default



    tree_leave_index(clr)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [2, 4, 5, 8, 9, 12, 13, 15, 16]



.. GENERATED FROM PYTHON SOURCE LINES 52-53

Let's compute the neighbors for each leave.

.. GENERATED FROM PYTHON SOURCE LINES 53-58

.. code-block:: default



    neighbors = tree_leave_neighbors(clr)
    neighbors





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {(2, 8): [(0, (10.0, 0.0), (11.0, 0.0))], (2, 4): [(1, (10.0, 0.0), (10.0, 1.0))], (4, 12): [(0, (10.0, 1.0), (11.0, 1.0))], (4, 5): [(1, (10.0, 1.0), (10.0, 2.0))], (5, 15): [(0, (10.0, 2.0), (11.0, 2.0))], (8, 9): [(0, (11.0, 0.0), (12.0, 0.0))], (8, 12): [(1, (11.0, 0.0), (11.0, 1.0))], (12, 13): [(0, (11.0, 1.0), (12.0, 1.0))], (12, 15): [(1, (11.0, 1.0), (11.0, 2.0))], (15, 16): [(0, (11.0, 2.0), (12.0, 2.0))], (9, 13): [(1, (12.0, 0.0), (12.0, 1.0))], (13, 16): [(1, (12.0, 1.0), (12.0, 2.0))]}



.. GENERATED FROM PYTHON SOURCE LINES 59-60

And let's explain the results by drawing the segments ``[x1, x2]``.

.. GENERATED FROM PYTHON SOURCE LINES 60-83

.. code-block:: default



    leaves = predict_leaves(clr, X)


    fig, ax = plt.subplots(1, 2, figsize=(14, 4))
    for i in range(X.shape[0]):
        ax[0].plot([X[i, 0]], [X[i, 1]], "o", ms=19)
        ax[1].plot([X[i, 0]], [X[i, 1]], "o", ms=19)
        ax[0].text(X[i, 0] + 0.1, X[i, 1] - 0.1, "y=%d\nl=%d" % (y[i], leaves[i]))

    for edge, segments in neighbors.items():
        for segment in segments:
            # leaves l1, l2 are neighbors
            l1, l2 = edge
            # the common border is [x1, x2]
            x1 = segment[1]
            x2 = segment[2]
            ax[1].plot([x1[0], x2[0]], [x1[1], x2[1]], "b--")
            ax[1].text((x1[0] + x2[0]) / 2, (x1[1] + x2[1]) / 2, "%d->%d" % edge)
    ax[0].set_title("Classes and leaves")
    ax[1].set_title("Segments")




.. image-sg:: /auto_examples/images/sphx_glr_plot_leave_neighbors_002.png
   :alt: Classes and leaves, Segments
   :srcset: /auto_examples/images/sphx_glr_plot_leave_neighbors_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Segments')



.. GENERATED FROM PYTHON SOURCE LINES 84-86

On Iris
+++++++

.. GENERATED FROM PYTHON SOURCE LINES 86-91

.. code-block:: default



    iris = load_iris()









.. GENERATED FROM PYTHON SOURCE LINES 93-99

.. code-block:: default



    X = iris.data[:, :2]
    y = iris.target









.. GENERATED FROM PYTHON SOURCE LINES 101-107

.. code-block:: default



    clr = DecisionTreeClassifier(max_depth=3)
    clr.fit(X, y)







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-7 {color: black;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-7" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>DecisionTreeClassifier(max_depth=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-20" type="checkbox" checked><label for="sk-estimator-id-20" class="sk-toggleable__label sk-toggleable__label-arrow">DecisionTreeClassifier</label><div class="sk-toggleable__content"><pre>DecisionTreeClassifier(max_depth=3)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 109-154

.. code-block:: default



    def draw_border(
        clr, X, y, fct=None, incx=1, incy=1, figsize=None, border=True, ax=None
    ):
        # see https://sashat.me/2017/01/11/list-of-20-simple-distinct-colors/
        # https://matplotlib.org/examples/color/colormaps_reference.html

        h = 0.02  # step size in the mesh
        # Plot the decision boundary. For that, we will assign a color to each
        # point in the mesh [x_min, x_max]x[y_min, y_max].
        x_min, x_max = X[:, 0].min() - incx, X[:, 0].max() + incx
        y_min, y_max = X[:, 1].min() - incy, X[:, 1].max() + incy
        xx, yy = numpy.meshgrid(
            numpy.arange(x_min, x_max, h), numpy.arange(y_min, y_max, h)
        )
        if fct is None:
            Z = clr.predict(numpy.c_[xx.ravel(), yy.ravel()])
        else:
            Z = fct(clr, numpy.c_[xx.ravel(), yy.ravel()])

        # Put the result into a color plot
        cmap = plt.cm.tab20
        Z = Z.reshape(xx.shape)
        if ax is None:
            fig, ax = plt.subplots(1, 1, figsize=figsize or (4, 3))
        ax.pcolormesh(xx, yy, Z, cmap=cmap)

        # Plot also the training points
        ax.scatter(X[:, 0], X[:, 1], c=y, edgecolors="k", cmap=cmap)
        ax.set_xlabel("Sepal length")
        ax.set_ylabel("Sepal width")

        ax.set_xlim(xx.min(), xx.max())
        ax.set_ylim(yy.min(), yy.max())
        return ax


    fig, ax = plt.subplots(1, 2, figsize=(14, 4))
    draw_border(clr, X, y, border=False, ax=ax[0])
    ax[0].set_title("Iris")
    draw_border(clr, X, y, border=False, ax=ax[1], fct=lambda m, x: predict_leaves(m, x))
    ax[1].set_title("Leaves")





.. image-sg:: /auto_examples/images/sphx_glr_plot_leave_neighbors_003.png
   :alt: Iris, Leaves
   :srcset: /auto_examples/images/sphx_glr_plot_leave_neighbors_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Leaves')



.. GENERATED FROM PYTHON SOURCE LINES 156-162

.. code-block:: default



    neighbors = tree_leave_neighbors(clr)
    list(neighbors.items())[:2]






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [((3, 4), [(0, (4.650000095367432, 2.4750000834465027), (5.025000095367432, 2.4750000834465027))]), ((3, 6), [(1, (4.650000095367432, 2.4750000834465027), (4.650000095367432, 3.1250000596046448))])]



.. GENERATED FROM PYTHON SOURCE LINES 164-189

.. code-block:: default



    fig, ax = plt.subplots(1, 1, figsize=(8, 8))
    draw_border(
        clr,
        X,
        y,
        incx=1,
        incy=1,
        figsize=(6, 4),
        border=False,
        ax=ax,
        fct=lambda m, x: predict_leaves(m, x),
    )

    for edge, segments in neighbors.items():
        for segment in segments:
            # leaves l1, l2 are neighbors
            l1, l2 = edge
            # the common border is [x1, x2]
            x1 = segment[1]
            x2 = segment[2]
            ax.plot([x1[0], x2[0]], [x1[1], x2[1]], "b--")
            ax.text((x1[0] + x2[0]) / 2, (x1[1] + x2[1]) / 2, "%d->%d" % edge)
    ax.set_title("Leaves and segments")



.. image-sg:: /auto_examples/images/sphx_glr_plot_leave_neighbors_004.png
   :alt: Leaves and segments
   :srcset: /auto_examples/images/sphx_glr_plot_leave_neighbors_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Leaves and segments')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.071 seconds)


.. _sphx_glr_download_auto_examples_plot_leave_neighbors.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_leave_neighbors.py <plot_leave_neighbors.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_leave_neighbors.ipynb <plot_leave_neighbors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
