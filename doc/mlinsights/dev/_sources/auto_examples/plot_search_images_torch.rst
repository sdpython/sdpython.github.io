
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_search_images_torch.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_search_images_torch.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_search_images_torch.py:


.. _l-search-images-torch-example:

Search images with deep learning (torch)
========================================

Images are usually very different if we compare them at pixel level but
that's quite different if we look at them after they were processed by a
deep learning model. We convert each image into a feature vector
extracted from an intermediate layer of the network.

Get a pre-trained model
-----------------------

We choose the model described in paper `SqueezeNet: AlexNet-level
accuracy with 50x fewer parameters and <0.5MB model
size <https://arxiv.org/abs/1602.07360>`_.

.. GENERATED FROM PYTHON SOURCE LINES 19-34

.. code-block:: default


    import os
    import matplotlib.pyplot as plt
    from sklearn.neighbors import NearestNeighbors
    from torchvision import datasets, transforms, models
    from torch.utils.data import DataLoader, ConcatDataset
    from mlinsights.ext_test_case import unzip_files
    from mlinsights.plotting import plot_gallery_images
    from torchvision.models.squeezenet import SqueezeNet1_0_Weights


    model = models.squeezenet1_0(weights=SqueezeNet1_0_Weights.IMAGENET1K_V1)
    model






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    SqueezeNet(
      (features): Sequential(
        (0): Conv2d(3, 96, kernel_size=(7, 7), stride=(2, 2))
        (1): ReLU(inplace=True)
        (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
        (3): Fire(
          (squeeze): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1))
          (squeeze_activation): ReLU(inplace=True)
          (expand1x1): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))
          (expand1x1_activation): ReLU(inplace=True)
          (expand3x3): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (expand3x3_activation): ReLU(inplace=True)
        )
        (4): Fire(
          (squeeze): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
          (squeeze_activation): ReLU(inplace=True)
          (expand1x1): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))
          (expand1x1_activation): ReLU(inplace=True)
          (expand3x3): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (expand3x3_activation): ReLU(inplace=True)
        )
        (5): Fire(
          (squeeze): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
          (squeeze_activation): ReLU(inplace=True)
          (expand1x1): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))
          (expand1x1_activation): ReLU(inplace=True)
          (expand3x3): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (expand3x3_activation): ReLU(inplace=True)
        )
        (6): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
        (7): Fire(
          (squeeze): Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1))
          (squeeze_activation): ReLU(inplace=True)
          (expand1x1): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))
          (expand1x1_activation): ReLU(inplace=True)
          (expand3x3): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (expand3x3_activation): ReLU(inplace=True)
        )
        (8): Fire(
          (squeeze): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1))
          (squeeze_activation): ReLU(inplace=True)
          (expand1x1): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1))
          (expand1x1_activation): ReLU(inplace=True)
          (expand3x3): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (expand3x3_activation): ReLU(inplace=True)
        )
        (9): Fire(
          (squeeze): Conv2d(384, 48, kernel_size=(1, 1), stride=(1, 1))
          (squeeze_activation): ReLU(inplace=True)
          (expand1x1): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1))
          (expand1x1_activation): ReLU(inplace=True)
          (expand3x3): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (expand3x3_activation): ReLU(inplace=True)
        )
        (10): Fire(
          (squeeze): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
          (squeeze_activation): ReLU(inplace=True)
          (expand1x1): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
          (expand1x1_activation): ReLU(inplace=True)
          (expand3x3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (expand3x3_activation): ReLU(inplace=True)
        )
        (11): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
        (12): Fire(
          (squeeze): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
          (squeeze_activation): ReLU(inplace=True)
          (expand1x1): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
          (expand1x1_activation): ReLU(inplace=True)
          (expand3x3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (expand3x3_activation): ReLU(inplace=True)
        )
      )
      (classifier): Sequential(
        (0): Dropout(p=0.5, inplace=False)
        (1): Conv2d(512, 1000, kernel_size=(1, 1), stride=(1, 1))
        (2): ReLU(inplace=True)
        (3): AdaptiveAvgPool2d(output_size=(1, 1))
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 35-36

The model is stored here:

.. GENERATED FROM PYTHON SOURCE LINES 36-51

.. code-block:: default



    path = os.path.join(
        os.environ.get("USERPROFILE", os.environ.get("HOME", ".")),
        ".cache",
        "torch",
        "checkpoints",
    )
    if os.path.exists(path):
        res = os.listdir(path)
    else:
        res = ["not found", path]
    res






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['not found', '/home/xadupre/.cache/torch/checkpoints']



.. GENERATED FROM PYTHON SOURCE LINES 52-57

`pytorch <https://pytorch.org/>`_\ 's design relies on two methods
*forward* and *backward* which implement the propagation and
backpropagation of the gradient, the structure is not known and could
even be dyanmic. That's why it is difficult to define a number of
layers.

.. GENERATED FROM PYTHON SOURCE LINES 57-62

.. code-block:: default



    len(model.features), len(model.classifier)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (13, 4)



.. GENERATED FROM PYTHON SOURCE LINES 63-70

Images
------

We collect images from `pixabay <https://pixabay.com/>`_.

Raw images
~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 70-81

.. code-block:: default



    if not os.path.exists("simages/category"):
        os.makedirs("simages/category")

    url = "https://github.com/sdpython/mlinsights/raw/ref/_doc/examples/data/dog-cat-pixabay.zip"
    files = unzip_files(url, where_to="simages/category")
    if len(files) == 0:
        raise FileNotFoundError(f"No images where unzipped from {url!r}.")
    len(files), files[0]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (31, 'simages/category/cat-1151519__480.jpg')



.. GENERATED FROM PYTHON SOURCE LINES 83-86

.. code-block:: default


    plot_gallery_images(files[:2])




.. image-sg:: /auto_examples/images/sphx_glr_plot_search_images_torch_001.png
   :alt: plot search images torch
   :srcset: /auto_examples/images/sphx_glr_plot_search_images_torch_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([<Axes: >, <Axes: >, <Axes: >, <Axes: >], dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 88-99

.. code-block:: default


    trans = transforms.Compose(
        [
            transforms.Resize((224, 224)),  # essayer avec 224 seulement
            transforms.CenterCrop(224),
            transforms.ToTensor(),
        ]
    )
    imgs = datasets.ImageFolder("simages", trans)
    imgs





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Dataset ImageFolder
        Number of datapoints: 31
        Root location: simages
        StandardTransform
    Transform: Compose(
                   Resize(size=(224, 224), interpolation=bilinear, max_size=None, antialias=warn)
                   CenterCrop(size=(224, 224))
                   ToTensor()
               )



.. GENERATED FROM PYTHON SOURCE LINES 101-106

.. code-block:: default



    dataloader = DataLoader(imgs, batch_size=1, shuffle=False, num_workers=1)
    dataloader





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <torch.utils.data.dataloader.DataLoader object at 0x7f9771c4c0a0>



.. GENERATED FROM PYTHON SOURCE LINES 108-111

.. code-block:: default

    img_seq = iter(dataloader)
    img, cl = next(img_seq)








.. GENERATED FROM PYTHON SOURCE LINES 113-115

.. code-block:: default

    type(img), type(cl)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<class 'torch.Tensor'>, <class 'torch.Tensor'>)



.. GENERATED FROM PYTHON SOURCE LINES 117-120

.. code-block:: default

    array = img.numpy().transpose((2, 3, 1, 0))
    array.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (224, 224, 3, 1)



.. GENERATED FROM PYTHON SOURCE LINES 122-126

.. code-block:: default


    plt.imshow(array[:, :, :, 0])
    plt.axis("off")




.. image-sg:: /auto_examples/images/sphx_glr_plot_search_images_torch_002.png
   :alt: plot search images torch
   :srcset: /auto_examples/images/sphx_glr_plot_search_images_torch_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (-0.5, 223.5, 223.5, -0.5)



.. GENERATED FROM PYTHON SOURCE LINES 128-134

.. code-block:: default

    img, cl = next(img_seq)
    array = img.numpy().transpose((2, 3, 1, 0))
    plt.imshow(array[:, :, :, 0])
    plt.axis("off")





.. image-sg:: /auto_examples/images/sphx_glr_plot_search_images_torch_003.png
   :alt: plot search images torch
   :srcset: /auto_examples/images/sphx_glr_plot_search_images_torch_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (-0.5, 223.5, 223.5, -0.5)



.. GENERATED FROM PYTHON SOURCE LINES 135-137

`torch <https://pytorch.org/>`_ implements optimized function to load
and process images.

.. GENERATED FROM PYTHON SOURCE LINES 137-151

.. code-block:: default



    trans = transforms.Compose(
        [
            transforms.Resize((224, 224)),  # essayer avec 224 seulement
            transforms.RandomRotation((-10, 10), expand=True),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
        ]
    )
    imgs = datasets.ImageFolder("simages", trans)
    dataloader = DataLoader(imgs, batch_size=1, shuffle=True, num_workers=1)
    img_seq = iter(dataloader)
    imgs = list(img[0] for i, img in zip(range(2), img_seq))







.. GENERATED FROM PYTHON SOURCE LINES 153-157

.. code-block:: default


    plot_gallery_images([img.numpy().transpose((2, 3, 1, 0))[:, :, :, 0] for img in imgs])





.. image-sg:: /auto_examples/images/sphx_glr_plot_search_images_torch_004.png
   :alt: plot search images torch
   :srcset: /auto_examples/images/sphx_glr_plot_search_images_torch_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([<Axes: >, <Axes: >, <Axes: >, <Axes: >], dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 158-161

We can multiply the data by implementing a custom
`sampler <https://github.com/keras-team/keras/issues/7359>`_ or just
concatenate loaders.

.. GENERATED FROM PYTHON SOURCE LINES 161-186

.. code-block:: default



    trans1 = transforms.Compose(
        [
            transforms.Resize((224, 224)),  # essayer avec 224 seulement
            transforms.RandomRotation((-10, 10), expand=True),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
        ]
    )
    trans2 = transforms.Compose(
        [
            transforms.Resize((224, 224)),  # essayer avec 224 seulement
            transforms.Grayscale(num_output_channels=3),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
        ]
    )
    imgs1 = datasets.ImageFolder("simages", trans1)
    imgs2 = datasets.ImageFolder("simages", trans2)
    dataloader = DataLoader(
        ConcatDataset([imgs1, imgs2]), batch_size=1, shuffle=True, num_workers=1
    )
    img_seq = iter(dataloader)
    imgs = list(img[0] for i, img in zip(range(10), img_seq))







.. GENERATED FROM PYTHON SOURCE LINES 188-192

.. code-block:: default


    plot_gallery_images([img.numpy().transpose((2, 3, 1, 0))[:, :, :, 0] for img in imgs])





.. image-sg:: /auto_examples/images/sphx_glr_plot_search_images_torch_005.png
   :alt: plot search images torch
   :srcset: /auto_examples/images/sphx_glr_plot_search_images_torch_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([[<Axes: >, <Axes: >, <Axes: >, <Axes: >],
           [<Axes: >, <Axes: >, <Axes: >, <Axes: >],
           [<Axes: >, <Axes: >, <Axes: >, <Axes: >]], dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 193-195

Which leaves 52 images to process out of 61 = 31*2 (the folder contains
31 images).

.. GENERATED FROM PYTHON SOURCE LINES 195-200

.. code-block:: default



    len(list(img_seq))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    52



.. GENERATED FROM PYTHON SOURCE LINES 201-205

Search among images
-------------------

We use the class ``SearchEnginePredictionImages``.

.. GENERATED FROM PYTHON SOURCE LINES 208-219

The idea of the search engine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The deep network is able to classify images coming from a competition
called `ImageNet <http://image-net.org/>`_ which was trained to
classify different images. But still, the network has 88 layers which
slightly transform the images into classification results. We assume the
last layers contains information which allows the network to classify
into objects: it is less related to the images than the content of it.
In particular, we would like that an image with a daark background does
not necessarily return images with a dark background.

.. GENERATED FROM PYTHON SOURCE LINES 219-231

.. code-block:: default


    # We reshape an image into *(224x224)* which is the size the network
    # ingests. We propagate the inputs until the layer just before the last
    # one. Its output will be considered as the *featurized image*. We do that
    # for a specific set of images called the *neighbors*. When a new image
    # comes up, we apply the same process and find the closest images among
    # the set of neighbors.


    model = models.squeezenet1_0(weights=SqueezeNet1_0_Weights.IMAGENET1K_V1)









.. GENERATED FROM PYTHON SOURCE LINES 232-233

The model outputs the probability for each class.

.. GENERATED FROM PYTHON SOURCE LINES 233-237

.. code-block:: default



    res = model.forward(imgs[1])
    res.shape




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    torch.Size([1, 1000])



.. GENERATED FROM PYTHON SOURCE LINES 239-241

.. code-block:: default


    res.detach().numpy().ravel()[:10]




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([4.2197995, 4.027468 , 4.754075 , 5.2620425, 5.3206525, 2.925042 ,
           2.9175375, 5.7398133, 4.923601 , 5.0563126], dtype=float32)



.. GENERATED FROM PYTHON SOURCE LINES 243-251

.. code-block:: default


    fig, ax = plt.subplots(1, 2, figsize=(12, 3))
    ax[0].plot(res.detach().numpy().ravel(), ".")
    ax[0].set_title("Output of SqueezeNet")
    ax[1].imshow(imgs[1].numpy().transpose((2, 3, 1, 0))[:, :, :, 0])
    ax[1].axis("off")





.. image-sg:: /auto_examples/images/sphx_glr_plot_search_images_torch_006.png
   :alt: Output of SqueezeNet
   :srcset: /auto_examples/images/sphx_glr_plot_search_images_torch_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (-0.5, 223.5, 223.5, -0.5)



.. GENERATED FROM PYTHON SOURCE LINES 252-254

We have features for one image. We build the neighbors, the output for
each image in the training datasets.

.. GENERATED FROM PYTHON SOURCE LINES 254-266

.. code-block:: default



    trans = transforms.Compose(
        [transforms.Resize((224, 224)), transforms.CenterCrop(224), transforms.ToTensor()]
    )
    imgs = datasets.ImageFolder("simages", trans)
    dataloader = DataLoader(imgs, batch_size=1, shuffle=False, num_workers=1)
    img_seq = iter(dataloader)
    imgs = list(img[0] for img in img_seq)

    all_outputs = [model.forward(img).detach().numpy().ravel() for img in imgs]








.. GENERATED FROM PYTHON SOURCE LINES 268-274

.. code-block:: default



    knn = NearestNeighbors()
    knn.fit(all_outputs)







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {--sklearn-color-text: black;--sklearn-color-line: gray;--sklearn-color-background: white;--sklearn-color-background-box: #f0f8ff;--sklearn-color-border-box: black;--sklearn-color-icon: #696969;--sklearn-color-active: #d4ebff;--sklearn-color-highlight: #d4ebff;@media (prefers-color-scheme: dark) {--sklearn-color-text: white;--sklearn-color-line: gray;--sklearn-color-background: #111;--sklearn-color-background-box: #424242;--sklearn-color-border-box: white;--sklearn-color-icon: #878787;--sklearn-color-active: #616161;--sklearn-color-highlight: #616161;}}#sk-container-id-1 {color: var(--sklearn-color-text);}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: var(--sklearn-color-background);}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: var(--sklearn-color-icon);}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: var(--sklearn-color-text);}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: var(--sklearn-color-text);}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: var(--sklearn-color-background-box);}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: var(--sklearn-color-text);border-radius: 0.25em;background-color: var(--sklearn-color-background-box);}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: var(--sklearn-color-active);}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: var(--sklearn-color-active);}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: var(--sklearn-color-background-box);border: 1px dotted var(--sklearn-color-border-box);border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: var(--sklearn-color-highlight);}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid var(--sklearn-color-line);flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: var(--sklearn-color-highlight);}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid var(--sklearn-color-line);box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: var(--sklearn-color-background);padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: var(--sklearn-color-background);position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid var(--sklearn-color-line);box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: var(--sklearn-color-background);}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed var(--sklearn-color-line);margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: var(--sklearn-color-background);}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>NearestNeighbors()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">NearestNeighbors</label><div class="sk-toggleable__content"><pre>NearestNeighbors()</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 275-276

We extract the neighbors for a new image.

.. GENERATED FROM PYTHON SOURCE LINES 276-284

.. code-block:: default



    one_output = model.forward(imgs[5]).detach().numpy().ravel()

    score, index = knn.kneighbors([one_output])
    score, index






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([[25.26125145, 59.17851639, 63.87075424, 68.82238007, 71.54613495]]), array([[5, 1, 9, 6, 2]]))



.. GENERATED FROM PYTHON SOURCE LINES 285-286

We need to retrieve images for indexes stored in *index*.

.. GENERATED FROM PYTHON SOURCE LINES 286-294

.. code-block:: default



    names = os.listdir("simages/category")
    names = [os.path.join("simages/category", n) for n in names if ".zip" not in n]
    disp = [names[5]] + [names[i] for i in index.ravel()]
    disp






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['simages/category/cat-2083492__480.jpg', 'simages/category/cat-2083492__480.jpg', 'simages/category/dog-1765910__480.jpg', 'simages/category/cat-2917592__480.jpg', 'simages/category/dog-2684073__480.jpg', 'simages/category/dog-2863719__480.jpg']



.. GENERATED FROM PYTHON SOURCE LINES 295-296

We check the first one is exactly the same as the searched image.

.. GENERATED FROM PYTHON SOURCE LINES 296-301

.. code-block:: default



    plot_gallery_images(disp)





.. image-sg:: /auto_examples/images/sphx_glr_plot_search_images_torch_007.png
   :alt: plot search images torch
   :srcset: /auto_examples/images/sphx_glr_plot_search_images_torch_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([[<Axes: >, <Axes: >, <Axes: >, <Axes: >],
           [<Axes: >, <Axes: >, <Axes: >, <Axes: >]], dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 302-339

It is possible to access intermediate layers output however it means
rewriting the method forward to capture it: `Accessing intermediate
layers of a pretrained network
forward? <https://discuss.pytorch.org/t/accessing-intermediate-layers-of-a-pretrained-network-forward/12113/2>`_.

Going further
-------------

The original neural network has not been changed and was chosen to be
small (88 layers). Other options are available for better performances.
The imported model can be also be trained on a classification problem if
there is such information to leverage. Even if the model was trained on
millions of images, a couple of thousands are enough to train the last
layers. The model can also be trained as long as there exists a way to
compute a gradient. We could imagine to label the result of this search
engine and train the model on pairs of images ranked in the other.

We can use the `pairwise
transform <http://fa.bianp.net/blog/2012/learning-to-rank-with-scikit-learn-the-pairwise-transform/>`_
(example of code:
`ranking.py <https://gist.github.com/fabianp/2020955>`_). For every
pair :math:`(X_i, X_j)`, we tell if the search engine should have
:math:`X_i \prec X_j` (:math:`Y_{ij} = 1`) or the order order
(:math:`Y_{ij} = 0`). :math:`X_i` is the features produced by the neural
network : :math:`X_i = f(\Omega, img_i)`. We train a classifier on the
database:

.. math::

      (f(\Omega, img_i) - f(\Omega, img_j), Y_{ij})_{ij}

A training algorithm based on a gradient will have to propagate the gradient:

.. math::

      \frac{\partial f}{\partial \Omega}(img_i) -
      \frac{\partial f}{\partial \Omega}(img_j)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 9.670 seconds)


.. _sphx_glr_download_auto_examples_plot_search_images_torch.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_search_images_torch.py <plot_search_images_torch.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_search_images_torch.ipynb <plot_search_images_torch.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
