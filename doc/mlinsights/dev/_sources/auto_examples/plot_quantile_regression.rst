
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_quantile_regression.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_quantile_regression.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_quantile_regression.py:


.. _l-quantile-regression-example:

Quantile Regression
===================

`scikit-learn <http://scikit-learn.org/stable/>`_ does not have a
quantile regression.
`mlinsights <https://sdpython.github.io/doc/dev/mlinsights/index.html>`_
implements a version of it.

Simple example
--------------

We first generate some dummy data.

.. GENERATED FROM PYTHON SOURCE LINES 17-31

.. code-block:: default


    import numpy
    import matplotlib.pyplot as plt
    from pandas import DataFrame
    from sklearn.linear_model import LinearRegression
    from mlinsights.mlmodel import QuantileLinearRegression

    X = numpy.random.random(1000)
    eps1 = (numpy.random.random(900) - 0.5) * 0.1
    eps2 = (numpy.random.random(100)) * 10
    eps = numpy.hstack([eps1, eps2])
    X = X.reshape((1000, 1))
    Y = X.ravel() * 3.4 + 5.6 + eps








.. GENERATED FROM PYTHON SOURCE LINES 33-38

.. code-block:: default



    clr = LinearRegression()
    clr.fit(X, Y)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-4 {--sklearn-color-text: black;--sklearn-color-line: gray;--sklearn-color-background: white;--sklearn-color-background-box: #f0f8ff;--sklearn-color-border-box: black;--sklearn-color-icon: #696969;--sklearn-color-active: #d4ebff;--sklearn-color-highlight: #d4ebff;@media (prefers-color-scheme: dark) {--sklearn-color-text: white;--sklearn-color-line: gray;--sklearn-color-background: #111;--sklearn-color-background-box: #424242;--sklearn-color-border-box: white;--sklearn-color-icon: #878787;--sklearn-color-active: #616161;--sklearn-color-highlight: #616161;}}#sk-container-id-4 {color: var(--sklearn-color-text);}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: var(--sklearn-color-background);}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: var(--sklearn-color-icon);}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: var(--sklearn-color-text);}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: var(--sklearn-color-text);}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: var(--sklearn-color-background-box);}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: var(--sklearn-color-text);border-radius: 0.25em;background-color: var(--sklearn-color-background-box);}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: var(--sklearn-color-active);}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: var(--sklearn-color-active);}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: var(--sklearn-color-background-box);border: 1px dotted var(--sklearn-color-border-box);border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: var(--sklearn-color-highlight);}#sk-container-id-4 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid var(--sklearn-color-line);flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: var(--sklearn-color-highlight);}#sk-container-id-4 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid var(--sklearn-color-line);box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: var(--sklearn-color-background);padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: var(--sklearn-color-background);position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid var(--sklearn-color-line);box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: var(--sklearn-color-background);}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed var(--sklearn-color-line);margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: var(--sklearn-color-background);}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-4" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-4" type="checkbox" checked><label for="sk-estimator-id-4" class="sk-toggleable__label sk-toggleable__label-arrow">LinearRegression</label><div class="sk-toggleable__content"><pre>LinearRegression()</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 40-50

.. code-block:: default



    clq = QuantileLinearRegression()
    clq.fit(X, Y)


    data = dict(X=X.ravel(), Y=Y, clr=clr.predict(X), clq=clq.predict(X))
    df = DataFrame(data)
    df.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>X</th>
          <th>Y</th>
          <th>clr</th>
          <th>clq</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.773438</td>
          <td>8.243858</td>
          <td>8.773762</td>
          <td>8.246713</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.454221</td>
          <td>7.169176</td>
          <td>7.606491</td>
          <td>7.158057</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.839753</td>
          <td>8.464771</td>
          <td>9.016253</td>
          <td>8.472872</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.019658</td>
          <td>5.685327</td>
          <td>6.017434</td>
          <td>5.676024</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.112335</td>
          <td>6.009066</td>
          <td>6.356323</td>
          <td>5.992089</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 52-68

.. code-block:: default



    fig, ax = plt.subplots(1, 1, figsize=(10, 4))
    choice = numpy.random.choice(X.shape[0] - 1, size=100)
    xx = X.ravel()[choice]
    yy = Y[choice]
    ax.plot(xx, yy, ".", label="data")
    xx = numpy.array([[0], [1]])
    y1 = clr.predict(xx)
    y2 = clq.predict(xx)
    ax.plot(xx, y1, "--", label="L2")
    ax.plot(xx, y2, "--", label="L1")
    ax.set_title("Quantile (L1) vs Square (L2)")
    ax.legend()





.. image-sg:: /auto_examples/images/sphx_glr_plot_quantile_regression_001.png
   :alt: Quantile (L1) vs Square (L2)
   :srcset: /auto_examples/images/sphx_glr_plot_quantile_regression_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f5c028a8700>



.. GENERATED FROM PYTHON SOURCE LINES 69-74

The L1 is clearly less sensible to extremas. The optimization algorithm
is based on `Iteratively reweighted least
squares <https://en.wikipedia.org/wiki/Iteratively_reweighted_least_squares>`_.
It estimates a linear regression with error L2 then reweights each
oberservation with the inverse of the error L1.

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: default



    clq = QuantileLinearRegression(verbose=True, max_iter=20)
    clq.fit(X, Y)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [QuantileLinearRegression.fit] iter=1 error=858.9237896197124
    [QuantileLinearRegression.fit] iter=2 error=566.3105335432022
    [QuantileLinearRegression.fit] iter=3 error=508.1708537485612
    [QuantileLinearRegression.fit] iter=4 error=505.66768751156144
    [QuantileLinearRegression.fit] iter=5 error=503.9779658951674
    [QuantileLinearRegression.fit] iter=6 error=502.80817981579963
    [QuantileLinearRegression.fit] iter=7 error=501.8780988035064
    [QuantileLinearRegression.fit] iter=8 error=501.1659305166399
    [QuantileLinearRegression.fit] iter=9 error=500.6053325155516
    [QuantileLinearRegression.fit] iter=10 error=500.310318123856
    [QuantileLinearRegression.fit] iter=11 error=499.9876909285035
    [QuantileLinearRegression.fit] iter=12 error=499.8282333137285
    [QuantileLinearRegression.fit] iter=13 error=499.69438893772525
    [QuantileLinearRegression.fit] iter=14 error=499.5498443541893
    [QuantileLinearRegression.fit] iter=15 error=499.4688226130957
    [QuantileLinearRegression.fit] iter=16 error=499.39493187581314
    [QuantileLinearRegression.fit] iter=17 error=499.3467325682446
    [QuantileLinearRegression.fit] iter=18 error=499.318357568729
    [QuantileLinearRegression.fit] iter=19 error=499.2963411256337
    [QuantileLinearRegression.fit] iter=20 error=499.2803032754046


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-5 {--sklearn-color-text: black;--sklearn-color-line: gray;--sklearn-color-background: white;--sklearn-color-background-box: #f0f8ff;--sklearn-color-border-box: black;--sklearn-color-icon: #696969;--sklearn-color-active: #d4ebff;--sklearn-color-highlight: #d4ebff;@media (prefers-color-scheme: dark) {--sklearn-color-text: white;--sklearn-color-line: gray;--sklearn-color-background: #111;--sklearn-color-background-box: #424242;--sklearn-color-border-box: white;--sklearn-color-icon: #878787;--sklearn-color-active: #616161;--sklearn-color-highlight: #616161;}}#sk-container-id-5 {color: var(--sklearn-color-text);}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: var(--sklearn-color-background);}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: var(--sklearn-color-icon);}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: var(--sklearn-color-text);}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: var(--sklearn-color-text);}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: var(--sklearn-color-background-box);}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: var(--sklearn-color-text);border-radius: 0.25em;background-color: var(--sklearn-color-background-box);}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: var(--sklearn-color-active);}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: var(--sklearn-color-active);}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: var(--sklearn-color-background-box);border: 1px dotted var(--sklearn-color-border-box);border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: var(--sklearn-color-highlight);}#sk-container-id-5 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid var(--sklearn-color-line);flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: var(--sklearn-color-highlight);}#sk-container-id-5 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid var(--sklearn-color-line);box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: var(--sklearn-color-background);padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: var(--sklearn-color-background);position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid var(--sklearn-color-line);box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: var(--sklearn-color-background);}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed var(--sklearn-color-line);margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: var(--sklearn-color-background);}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-5" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>QuantileLinearRegression(max_iter=20, verbose=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-5" type="checkbox" checked><label for="sk-estimator-id-5" class="sk-toggleable__label sk-toggleable__label-arrow">QuantileLinearRegression</label><div class="sk-toggleable__content"><pre>QuantileLinearRegression(max_iter=20, verbose=True)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 80-85

.. code-block:: default



    clq.score(X, Y)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.4992803032754046



.. GENERATED FROM PYTHON SOURCE LINES 86-88

Regression with various quantiles
---------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 88-96

.. code-block:: default



    X = numpy.random.random(1200)
    eps1 = (numpy.random.random(900) - 0.5) * 0.5
    eps2 = (numpy.random.random(300)) * 2
    eps = numpy.hstack([eps1, eps2])
    X = X.reshape((1200, 1))
    Y = X.ravel() * 3.4 + 5.6 + eps + X.ravel() * X.ravel() * 8







.. GENERATED FROM PYTHON SOURCE LINES 98-106

.. code-block:: default



    fig, ax = plt.subplots(1, 1, figsize=(10, 4))
    choice = numpy.random.choice(X.shape[0] - 1, size=100)
    xx = X.ravel()[choice]
    yy = Y[choice]
    ax.plot(xx, yy, ".", label="data")
    ax.set_title("Almost linear dataset")



.. image-sg:: /auto_examples/images/sphx_glr_plot_quantile_regression_002.png
   :alt: Almost linear dataset
   :srcset: /auto_examples/images/sphx_glr_plot_quantile_regression_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Almost linear dataset')



.. GENERATED FROM PYTHON SOURCE LINES 108-115

.. code-block:: default



    clqs = {}
    for qu in [0.1, 0.25, 0.5, 0.75, 0.9]:
        clq = QuantileLinearRegression(quantile=qu)
        clq.fit(X, Y)
        clqs["q=%1.2f" % qu] = clq







.. GENERATED FROM PYTHON SOURCE LINES 117-130

.. code-block:: default



    fig, ax = plt.subplots(1, 1, figsize=(10, 4))
    choice = numpy.random.choice(X.shape[0] - 1, size=100)
    xx = X.ravel()[choice]
    yy = Y[choice]
    ax.plot(xx, yy, ".", label="data")
    xx = numpy.array([[0], [1]])
    for qu in sorted(clqs):
        y = clqs[qu].predict(xx)
        ax.plot(xx, y, "--", label=qu)
    ax.set_title("Various quantiles")
    ax.legend()



.. image-sg:: /auto_examples/images/sphx_glr_plot_quantile_regression_003.png
   :alt: Various quantiles
   :srcset: /auto_examples/images/sphx_glr_plot_quantile_regression_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f5c0e31fa60>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.367 seconds)


.. _sphx_glr_download_auto_examples_plot_quantile_regression.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_quantile_regression.py <plot_quantile_regression.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_quantile_regression.ipynb <plot_quantile_regression.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
