
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_visualize_pipeline.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_visualize_pipeline.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_visualize_pipeline.py:


.. _l-visualize-pipeline-example:

Visualize a scikit-learn pipeline
=================================

Pipeline can be big with *scikit-learn*, let's dig into a visual way to
look a them.

Simple model
------------

Let's vizualize a simple pipeline, a single model not even trained.

.. GENERATED FROM PYTHON SOURCE LINES 15-45

.. code-block:: default


    from numpy.random import randn
    import pandas
    from PIL import Image
    from sphinx_runpython.runpython import run_cmd
    from sklearn import datasets
    from sklearn.compose import ColumnTransformer
    from sklearn.impute import SimpleImputer
    from sklearn.linear_model import LinearRegression, LogisticRegression
    from sklearn.pipeline import Pipeline, FeatureUnion
    from sklearn.preprocessing import (
        OneHotEncoder,
        StandardScaler,
        MinMaxScaler,
        PolynomialFeatures,
    )
    from mlinsights.helpers.pipeline import (
        alter_pipeline_for_debugging,
        enumerate_pipeline_models,
    )
    from mlinsights.plotting import pipeline2dot, pipeline2str


    iris = datasets.load_iris()
    X = iris.data[:, :4]
    df = pandas.DataFrame(X)
    df.columns = ["X1", "X2", "X3", "X4"]
    clf = LogisticRegression()
    clf






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {--sklearn-color-text: black;--sklearn-color-line: gray;--sklearn-color-background: white;--sklearn-color-background-box: #f0f8ff;--sklearn-color-border-box: black;--sklearn-color-icon: #696969;--sklearn-color-active: #d4ebff;--sklearn-color-highlight: #d4ebff;@media (prefers-color-scheme: dark) {--sklearn-color-text: white;--sklearn-color-line: gray;--sklearn-color-background: #111;--sklearn-color-background-box: #424242;--sklearn-color-border-box: white;--sklearn-color-icon: #878787;--sklearn-color-active: #616161;--sklearn-color-highlight: #616161;}}#sk-container-id-1 {color: var(--sklearn-color-text);}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: var(--sklearn-color-background);}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: var(--sklearn-color-icon);}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: var(--sklearn-color-text);}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: var(--sklearn-color-text);}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: var(--sklearn-color-background-box);}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: var(--sklearn-color-text);border-radius: 0.25em;background-color: var(--sklearn-color-background-box);}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: var(--sklearn-color-active);}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: var(--sklearn-color-active);}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: var(--sklearn-color-background-box);border: 1px dotted var(--sklearn-color-border-box);border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: var(--sklearn-color-highlight);}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid var(--sklearn-color-line);flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: var(--sklearn-color-highlight);}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid var(--sklearn-color-line);box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: var(--sklearn-color-background);padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: var(--sklearn-color-background);position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid var(--sklearn-color-line);box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: var(--sklearn-color-background);}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed var(--sklearn-color-line);margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: var(--sklearn-color-background);}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression()</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 46-49

The trick consists in converting the pipeline in a graph through the
`DOT <https://en.wikipedia.org/wiki/DOT_(graph_description_language)>`_
language.

.. GENERATED FROM PYTHON SOURCE LINES 49-55

.. code-block:: default



    dot = pipeline2dot(clf, df)
    print(dot)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    digraph{
      orientation=portrait;
      nodesep=0.05;
      ranksep=0.25;
      sch0[label="<f0> X1|<f1> X2|<f2> X3|<f3> X4",shape=record,fontsize=8];

      node1[label="union",shape=box,style="filled,rounded",color=cyan,fontsize=12];
      sch0:f0 -> node1;
      sch0:f1 -> node1;
      sch0:f2 -> node1;
      sch0:f3 -> node1;
      sch1[label="<f0> -v-0",shape=record,fontsize=8];
      node1 -> sch1:f0;

      node2[label="LogisticRegression",shape=box,style="filled,rounded",color=yellow,fontsize=12];
      sch1:f0 -> node2;
      sch2[label="<f0> PredictedLabel|<f1> Probabilities",shape=record,fontsize=8];
      node2 -> sch2:f0;
      node2 -> sch2:f1;
    }




.. GENERATED FROM PYTHON SOURCE LINES 56-57

It is lot better with an image.

.. GENERATED FROM PYTHON SOURCE LINES 57-64

.. code-block:: default



    dot_file = "graph.dot"
    with open(dot_file, "w", encoding="utf-8") as f:
        f.write(dot)









.. GENERATED FROM PYTHON SOURCE LINES 66-76

.. code-block:: default



    cmd = "dot -G=300 -Tpng {0} -o{0}.png".format(dot_file)
    run_cmd(cmd, wait=True)


    img = Image.open("graph.dot.png")
    img






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <PIL.PngImagePlugin.PngImageFile image mode=RGBA size=200x351 at 0x7FD870EAE5F0>



.. GENERATED FROM PYTHON SOURCE LINES 77-84

Complex pipeline
----------------

*scikit-learn* instroduced a couple of transform to play with features
in a single pipeline. The following example is taken from `Column
Transformer with Mixed
Types <https://scikit-learn.org/stable/auto_examples/compose/plot_column_transformer_mixed_types.html#sphx-glr-auto-examples-compose-plot-column-transformer-mixed-types-py>`_.

.. GENERATED FROM PYTHON SOURCE LINES 84-131

.. code-block:: default



    columns = [
        "pclass",
        "name",
        "sex",
        "age",
        "sibsp",
        "parch",
        "ticket",
        "fare",
        "cabin",
        "embarked",
        "boat",
        "body",
        "home.dest",
    ]

    numeric_features = ["age", "fare"]
    numeric_transformer = Pipeline(
        steps=[("imputer", SimpleImputer(strategy="median")), ("scaler", StandardScaler())]
    )

    categorical_features = ["embarked", "sex", "pclass"]
    categorical_transformer = Pipeline(
        steps=[
            ("imputer", SimpleImputer(strategy="constant", fill_value="missing")),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        transformers=[
            ("num", numeric_transformer, numeric_features),
            ("cat", categorical_transformer, categorical_features),
        ]
    )

    clf = Pipeline(
        steps=[
            ("preprocessor", preprocessor),
            ("classifier", LogisticRegression(solver="lbfgs")),
        ]
    )
    clf







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-2 {--sklearn-color-text: black;--sklearn-color-line: gray;--sklearn-color-background: white;--sklearn-color-background-box: #f0f8ff;--sklearn-color-border-box: black;--sklearn-color-icon: #696969;--sklearn-color-active: #d4ebff;--sklearn-color-highlight: #d4ebff;@media (prefers-color-scheme: dark) {--sklearn-color-text: white;--sklearn-color-line: gray;--sklearn-color-background: #111;--sklearn-color-background-box: #424242;--sklearn-color-border-box: white;--sklearn-color-icon: #878787;--sklearn-color-active: #616161;--sklearn-color-highlight: #616161;}}#sk-container-id-2 {color: var(--sklearn-color-text);}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: var(--sklearn-color-background);}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: var(--sklearn-color-icon);}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: var(--sklearn-color-text);}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: var(--sklearn-color-text);}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: var(--sklearn-color-background-box);}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: var(--sklearn-color-text);border-radius: 0.25em;background-color: var(--sklearn-color-background-box);}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: var(--sklearn-color-active);}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: var(--sklearn-color-active);}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: var(--sklearn-color-background-box);border: 1px dotted var(--sklearn-color-border-box);border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: var(--sklearn-color-highlight);}#sk-container-id-2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid var(--sklearn-color-line);flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: var(--sklearn-color-highlight);}#sk-container-id-2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid var(--sklearn-color-line);box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: var(--sklearn-color-background);padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: var(--sklearn-color-background);position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid var(--sklearn-color-line);box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: var(--sklearn-color-background);}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed var(--sklearn-color-line);margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: var(--sklearn-color-background);}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,
                     ColumnTransformer(transformers=[(&#x27;num&#x27;,
                                                      Pipeline(steps=[(&#x27;imputer&#x27;,
                                                                       SimpleImputer(strategy=&#x27;median&#x27;)),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;fare&#x27;]),
                                                     (&#x27;cat&#x27;,
                                                      Pipeline(steps=[(&#x27;imputer&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;embarked&#x27;, &#x27;sex&#x27;,
                                                       &#x27;pclass&#x27;])])),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" ><label for="sk-estimator-id-2" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,
                     ColumnTransformer(transformers=[(&#x27;num&#x27;,
                                                      Pipeline(steps=[(&#x27;imputer&#x27;,
                                                                       SimpleImputer(strategy=&#x27;median&#x27;)),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;fare&#x27;]),
                                                     (&#x27;cat&#x27;,
                                                      Pipeline(steps=[(&#x27;imputer&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;embarked&#x27;, &#x27;sex&#x27;,
                                                       &#x27;pclass&#x27;])])),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-3" type="checkbox" ><label for="sk-estimator-id-3" class="sk-toggleable__label sk-toggleable__label-arrow">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,
                                     Pipeline(steps=[(&#x27;imputer&#x27;,
                                                      SimpleImputer(strategy=&#x27;median&#x27;)),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;fare&#x27;]),
                                    (&#x27;cat&#x27;,
                                     Pipeline(steps=[(&#x27;imputer&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;embarked&#x27;, &#x27;sex&#x27;, &#x27;pclass&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-4" type="checkbox" ><label for="sk-estimator-id-4" class="sk-toggleable__label sk-toggleable__label-arrow">num</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;fare&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-5" type="checkbox" ><label for="sk-estimator-id-5" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(strategy=&#x27;median&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-6" type="checkbox" ><label for="sk-estimator-id-6" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-7" type="checkbox" ><label for="sk-estimator-id-7" class="sk-toggleable__label sk-toggleable__label-arrow">cat</label><div class="sk-toggleable__content"><pre>[&#x27;embarked&#x27;, &#x27;sex&#x27;, &#x27;pclass&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-8" type="checkbox" ><label for="sk-estimator-id-8" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-9" type="checkbox" ><label for="sk-estimator-id-9" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-10" type="checkbox" ><label for="sk-estimator-id-10" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 132-133

Let's see it first as a simplified text.

.. GENERATED FROM PYTHON SOURCE LINES 133-137

.. code-block:: default



    print(pipeline2str(clf))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Pipeline
       ColumnTransformer
          Pipeline(age,fare)
             SimpleImputer
             StandardScaler
          Pipeline(embarked,sex,pclass)
             SimpleImputer
             OneHotEncoder
       LogisticRegression




.. GENERATED FROM PYTHON SOURCE LINES 139-154

.. code-block:: default



    dot = pipeline2dot(clf, columns)

    dot_file = "graph2.dot"
    with open(dot_file, "w", encoding="utf-8") as f:
        f.write(dot)

    cmd = "dot -G=300 -Tpng {0} -o{0}.png".format(dot_file)
    run_cmd(cmd, wait=True)

    img = Image.open("graph2.dot.png")
    img






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <PIL.PngImagePlugin.PngImageFile image mode=RGBA size=591x787 at 0x7FD8495F11E0>



.. GENERATED FROM PYTHON SOURCE LINES 155-157

Example with FeatureUnion
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 157-181

.. code-block:: default



    model = Pipeline(
        [
            ("poly", PolynomialFeatures()),
            (
                "union",
                FeatureUnion([("scaler2", MinMaxScaler()), ("scaler3", StandardScaler())]),
            ),
        ]
    )
    dot = pipeline2dot(model, columns)

    dot_file = "graph3.dot"
    with open(dot_file, "w", encoding="utf-8") as f:
        f.write(dot)

    cmd = "dot -G=300 -Tpng {0} -o{0}.png".format(dot_file)
    run_cmd(cmd, wait=True)

    img = Image.open("graph3.dot.png")
    img






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <PIL.PngImagePlugin.PngImageFile image mode=RGB size=306x569 at 0x7FD8495F3430>



.. GENERATED FROM PYTHON SOURCE LINES 182-184

Compute intermediate outputs
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-205

.. code-block:: default


    # It is difficult to access intermediate outputs with *scikit-learn* but
    # it may be interesting to do so. The method
    # `alter_pipeline_for_debugging <find://alter_pipeline_for_debugging>`_
    # modifies the pipeline to intercept intermediate outputs.


    model = Pipeline(
        [
            ("scaler1", StandardScaler()),
            (
                "union",
                FeatureUnion([("scaler2", StandardScaler()), ("scaler3", MinMaxScaler())]),
            ),
            ("lr", LinearRegression()),
        ]
    )

    X = randn(4, 5)
    y = randn(4)
    model.fit(X, y)





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-3 {--sklearn-color-text: black;--sklearn-color-line: gray;--sklearn-color-background: white;--sklearn-color-background-box: #f0f8ff;--sklearn-color-border-box: black;--sklearn-color-icon: #696969;--sklearn-color-active: #d4ebff;--sklearn-color-highlight: #d4ebff;@media (prefers-color-scheme: dark) {--sklearn-color-text: white;--sklearn-color-line: gray;--sklearn-color-background: #111;--sklearn-color-background-box: #424242;--sklearn-color-border-box: white;--sklearn-color-icon: #878787;--sklearn-color-active: #616161;--sklearn-color-highlight: #616161;}}#sk-container-id-3 {color: var(--sklearn-color-text);}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: var(--sklearn-color-background);}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: var(--sklearn-color-icon);}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: var(--sklearn-color-text);}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: var(--sklearn-color-text);}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: var(--sklearn-color-background-box);}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: var(--sklearn-color-text);border-radius: 0.25em;background-color: var(--sklearn-color-background-box);}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: var(--sklearn-color-active);}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: var(--sklearn-color-active);}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: var(--sklearn-color-background-box);border: 1px dotted var(--sklearn-color-border-box);border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: var(--sklearn-color-highlight);}#sk-container-id-3 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid var(--sklearn-color-line);flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: var(--sklearn-color-highlight);}#sk-container-id-3 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid var(--sklearn-color-line);box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: var(--sklearn-color-background);padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: var(--sklearn-color-background);position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid var(--sklearn-color-line);box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: var(--sklearn-color-background);}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed var(--sklearn-color-line);margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: var(--sklearn-color-background);}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-3" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;scaler1&#x27;, StandardScaler()),
                    (&#x27;union&#x27;,
                     FeatureUnion(transformer_list=[(&#x27;scaler2&#x27;, StandardScaler()),
                                                    (&#x27;scaler3&#x27;, MinMaxScaler())])),
                    (&#x27;lr&#x27;, LinearRegression())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-11" type="checkbox" ><label for="sk-estimator-id-11" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;scaler1&#x27;, StandardScaler()),
                    (&#x27;union&#x27;,
                     FeatureUnion(transformer_list=[(&#x27;scaler2&#x27;, StandardScaler()),
                                                    (&#x27;scaler3&#x27;, MinMaxScaler())])),
                    (&#x27;lr&#x27;, LinearRegression())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-12" type="checkbox" ><label for="sk-estimator-id-12" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-13" type="checkbox" ><label for="sk-estimator-id-13" class="sk-toggleable__label sk-toggleable__label-arrow">union: FeatureUnion</label><div class="sk-toggleable__content"><pre>FeatureUnion(transformer_list=[(&#x27;scaler2&#x27;, StandardScaler()),
                                   (&#x27;scaler3&#x27;, MinMaxScaler())])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>scaler2</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-14" type="checkbox" ><label for="sk-estimator-id-14" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>scaler3</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-15" type="checkbox" ><label for="sk-estimator-id-15" class="sk-toggleable__label sk-toggleable__label-arrow">MinMaxScaler</label><div class="sk-toggleable__content"><pre>MinMaxScaler()</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-16" type="checkbox" ><label for="sk-estimator-id-16" class="sk-toggleable__label sk-toggleable__label-arrow">LinearRegression</label><div class="sk-toggleable__content"><pre>LinearRegression()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 207-211

.. code-block:: default


    print(pipeline2str(model))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Pipeline
       StandardScaler
       FeatureUnion
          StandardScaler
          MinMaxScaler
       LinearRegression




.. GENERATED FROM PYTHON SOURCE LINES 212-213

Let's now modify the pipeline to get the intermediate outputs.

.. GENERATED FROM PYTHON SOURCE LINES 213-218

.. code-block:: default



    alter_pipeline_for_debugging(model)









.. GENERATED FROM PYTHON SOURCE LINES 219-221

The function adds a member ``_debug`` which stores inputs and outputs in
every piece of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 221-224

.. code-block:: default



    model.steps[0][1]._debug




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    BaseEstimatorDebugInformation(StandardScaler)



.. GENERATED FROM PYTHON SOURCE LINES 226-230

.. code-block:: default


    model.predict(X)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([ 0.95926992, -0.17291168,  0.21500399, -0.65959391])



.. GENERATED FROM PYTHON SOURCE LINES 231-232

The member was populated with inputs and outputs.

.. GENERATED FROM PYTHON SOURCE LINES 232-237

.. code-block:: default



    model.steps[0][1]._debug






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    BaseEstimatorDebugInformation(StandardScaler)
      transform(
       shape=(4, 5) type=<class 'numpy.ndarray'>
       [[-0.20129562 -0.70728345  1.35128658 -0.34377977 -1.72257271]
        [-3.06384891 -1.7758477   0.21264841  0.39915003  0.15712885]
        [ 0.49985028 -1.81658768  0.93273564 -0.84052872  2.36678292]
        [-2.33753408  2.3685058   1.20550215 -1.20297738 -0.3144253 ]]
      ) -> (
       shape=(4, 5) type=<class 'numpy.ndarray'>
       [[ 0.73138767 -0.13164183  0.9716819   0.25516    -1.25538213]
        [-1.21724771 -0.75827952 -1.62705279  1.49209825  0.02409641]
        [ 1.20868105 -0.78217065  0.01641545 -0.57190034  1.5281676 ]
        [-0.72282101  1.672092    0.63895543 -1.17535791 -0.29688189]]
      )



.. GENERATED FROM PYTHON SOURCE LINES 238-239

Every piece behaves the same way.

.. GENERATED FROM PYTHON SOURCE LINES 239-244

.. code-block:: default



    for coor, model, vars in enumerate_pipeline_models(model):
        print(coor)
        print(model._debug)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (0,)
    BaseEstimatorDebugInformation(Pipeline)
      predict(
       shape=(4, 5) type=<class 'numpy.ndarray'>
       [[-0.20129562 -0.70728345  1.35128658 -0.34377977 -1.72257271]
        [-3.06384891 -1.7758477   0.21264841  0.39915003  0.15712885]
        [ 0.49985028 -1.81658768  0.93273564 -0.84052872  2.36678292]
        [-2.33753408  2.3685058   1.20550215 -1.20297738 -0.3144253 ]]
      ) -> (
       shape=(4,) type=<class 'numpy.ndarray'>
       [ 0.95926992 -0.17291168  0.21500399 -0.65959391]
      )
    (0, 0)
    BaseEstimatorDebugInformation(StandardScaler)
      transform(
       shape=(4, 5) type=<class 'numpy.ndarray'>
       [[-0.20129562 -0.70728345  1.35128658 -0.34377977 -1.72257271]
        [-3.06384891 -1.7758477   0.21264841  0.39915003  0.15712885]
        [ 0.49985028 -1.81658768  0.93273564 -0.84052872  2.36678292]
        [-2.33753408  2.3685058   1.20550215 -1.20297738 -0.3144253 ]]
      ) -> (
       shape=(4, 5) type=<class 'numpy.ndarray'>
       [[ 0.73138767 -0.13164183  0.9716819   0.25516    -1.25538213]
        [-1.21724771 -0.75827952 -1.62705279  1.49209825  0.02409641]
        [ 1.20868105 -0.78217065  0.01641545 -0.57190034  1.5281676 ]
        [-0.72282101  1.672092    0.63895543 -1.17535791 -0.29688189]]
      )
    (0, 1)
    BaseEstimatorDebugInformation(FeatureUnion)
      transform(
       shape=(4, 5) type=<class 'numpy.ndarray'>
       [[ 0.73138767 -0.13164183  0.9716819   0.25516    -1.25538213]
        [-1.21724771 -0.75827952 -1.62705279  1.49209825  0.02409641]
        [ 1.20868105 -0.78217065  0.01641545 -0.57190034  1.5281676 ]
        [-0.72282101  1.672092    0.63895543 -1.17535791 -0.29688189]]
      ) -> (
       shape=(4, 10) type=<class 'numpy.ndarray'>
       [[ 0.73138767 -0.13164183  0.9716819   0.25516    -1.25538213  0.80325334
          0.2650608   1.          0.53628544  0.        ]
        [-1.21724771 -0.75827952 -1.62705279  1.49209825  0.02409641  0.
          0.00973454  0.          1.          0.45965715]
        [ 1.20868105 -0.78217065  0.01641545 -0.57190034  1.5281676   1.
       ...
      )
    (0, 1, 0)
    BaseEstimatorDebugInformation(StandardScaler)
      transform(
       shape=(4, 5) type=<class 'numpy.ndarray'>
       [[ 0.73138767 -0.13164183  0.9716819   0.25516    -1.25538213]
        [-1.21724771 -0.75827952 -1.62705279  1.49209825  0.02409641]
        [ 1.20868105 -0.78217065  0.01641545 -0.57190034  1.5281676 ]
        [-0.72282101  1.672092    0.63895543 -1.17535791 -0.29688189]]
      ) -> (
       shape=(4, 5) type=<class 'numpy.ndarray'>
       [[ 0.73138767 -0.13164183  0.9716819   0.25516    -1.25538213]
        [-1.21724771 -0.75827952 -1.62705279  1.49209825  0.02409641]
        [ 1.20868105 -0.78217065  0.01641545 -0.57190034  1.5281676 ]
        [-0.72282101  1.672092    0.63895543 -1.17535791 -0.29688189]]
      )
    (0, 1, 1)
    BaseEstimatorDebugInformation(MinMaxScaler)
      transform(
       shape=(4, 5) type=<class 'numpy.ndarray'>
       [[ 0.73138767 -0.13164183  0.9716819   0.25516    -1.25538213]
        [-1.21724771 -0.75827952 -1.62705279  1.49209825  0.02409641]
        [ 1.20868105 -0.78217065  0.01641545 -0.57190034  1.5281676 ]
        [-0.72282101  1.672092    0.63895543 -1.17535791 -0.29688189]]
      ) -> (
       shape=(4, 5) type=<class 'numpy.ndarray'>
       [[0.80325334 0.2650608  1.         0.53628544 0.        ]
        [0.         0.00973454 0.         1.         0.45965715]
        [1.         0.         0.63241094 0.22622961 1.        ]
        [0.20380924 1.         0.87196597 0.         0.34434457]]
      )
    (0, 2)
    BaseEstimatorDebugInformation(LinearRegression)
      predict(
       shape=(4, 10) type=<class 'numpy.ndarray'>
       [[ 0.73138767 -0.13164183  0.9716819   0.25516    -1.25538213  0.80325334
          0.2650608   1.          0.53628544  0.        ]
        [-1.21724771 -0.75827952 -1.62705279  1.49209825  0.02409641  0.
          0.00973454  0.          1.          0.45965715]
        [ 1.20868105 -0.78217065  0.01641545 -0.57190034  1.5281676   1.
       ...
      ) -> (
       shape=(4,) type=<class 'numpy.ndarray'>
       [ 0.95926992 -0.17291168  0.21500399 -0.65959391]
      )





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.012 seconds)


.. _sphx_glr_download_auto_examples_plot_visualize_pipeline.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_visualize_pipeline.py <plot_visualize_pipeline.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_visualize_pipeline.ipynb <plot_visualize_pipeline.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
