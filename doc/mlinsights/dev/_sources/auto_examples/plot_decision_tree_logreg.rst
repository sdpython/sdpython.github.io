
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_decision_tree_logreg.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_decision_tree_logreg.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_decision_tree_logreg.py:


Decision Tree and Logistic Regression
=====================================

The notebook demonstrates the model *DecisionTreeLogisticRegression*
which replaces the decision based on one variable by a logistic
regression.

Iris dataset and logistic regression
------------------------------------

The following code shows the border defined by two machine learning
models on the `Iris
dataset <https://scikit-learn.org/stable/auto_examples/datasets/plot_iris_dataset.html>`_.

.. GENERATED FROM PYTHON SOURCE LINES 16-56

.. code-block:: default

    import numpy
    from scipy.spatial.distance import cdist
    import matplotlib.pyplot as plt
    from pandas import DataFrame
    from tqdm import tqdm
    from sklearn.datasets import load_iris
    from sklearn.linear_model import LogisticRegression
    from sklearn.model_selection import train_test_split
    from sklearn.tree import DecisionTreeClassifier
    from mlinsights.mlmodel import DecisionTreeLogisticRegression
    from mlinsights.mltree import predict_leaves


    def plot_classifier_decision_zone(clf, X, y, title=None, ax=None):
        if ax is None:
            ax = plt.gca()

        x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
        y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
        dhx = (x_max - x_min) / 100
        dhy = (y_max - y_min) / 100
        xx, yy = numpy.meshgrid(
            numpy.arange(x_min, x_max, dhx), numpy.arange(y_min, y_max, dhy)
        )

        Z = clf.predict(numpy.c_[xx.ravel(), yy.ravel()])
        Z = Z.reshape(xx.shape)

        ax.contourf(xx, yy, Z, alpha=0.5)
        ax.scatter(X[:, 0], X[:, 1], c=y, s=20, edgecolor="k", lw=0.5)
        if title is not None:
            ax.set_title(title)


    iris = load_iris()
    X = iris.data[:, [0, 2]]
    y = iris.target
    y = y % 2
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.6, shuffle=True)








.. GENERATED FROM PYTHON SOURCE LINES 58-62

.. code-block:: default


    lr = LogisticRegression()
    lr.fit(X_train, y_train)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-27 {color: black;}#sk-container-id-27 pre{padding: 0;}#sk-container-id-27 div.sk-toggleable {background-color: white;}#sk-container-id-27 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-27 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-27 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-27 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-27 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-27 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-27 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-27 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-27 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-27 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-27 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-27 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-27 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-27 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-27 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-27 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-27 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-27 div.sk-item {position: relative;z-index: 1;}#sk-container-id-27 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-27 div.sk-item::before, #sk-container-id-27 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-27 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-27 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-27 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-27 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-27 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-27 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-27 div.sk-label-container {text-align: center;}#sk-container-id-27 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-27 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-27" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-66" type="checkbox" checked><label for="sk-estimator-id-66" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression()</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 64-68

.. code-block:: default


    dt = DecisionTreeClassifier(criterion="entropy")
    dt.fit(X_train, y_train)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-28 {color: black;}#sk-container-id-28 pre{padding: 0;}#sk-container-id-28 div.sk-toggleable {background-color: white;}#sk-container-id-28 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-28 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-28 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-28 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-28 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-28 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-28 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-28 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-28 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-28 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-28 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-28 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-28 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-28 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-28 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-28 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-28 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-28 div.sk-item {position: relative;z-index: 1;}#sk-container-id-28 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-28 div.sk-item::before, #sk-container-id-28 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-28 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-28 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-28 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-28 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-28 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-28 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-28 div.sk-label-container {text-align: center;}#sk-container-id-28 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-28 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-28" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-67" type="checkbox" checked><label for="sk-estimator-id-67" class="sk-toggleable__label sk-toggleable__label-arrow">DecisionTreeClassifier</label><div class="sk-toggleable__content"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 70-78

.. code-block:: default


    fig, ax = plt.subplots(1, 2, figsize=(10, 4))
    plot_classifier_decision_zone(lr, X_test, y_test, ax=ax[0], title="LogisticRegression")
    plot_classifier_decision_zone(
        dt, X_test, y_test, ax=ax[1], title="DecisionTreeClassifier"
    )





.. image-sg:: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_001.png
   :alt: LogisticRegression, DecisionTreeClassifier
   :srcset: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 79-81

The logistic regression is not very stable on this sort of problem. No
linear separator can work on this dataset. Let's dig into it.

.. GENERATED FROM PYTHON SOURCE LINES 84-86

DecisionTreeLogisticRegression
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 86-97

.. code-block:: default



    dtlr = DecisionTreeLogisticRegression(
        estimator=LogisticRegression(solver="liblinear"),
        min_samples_leaf=10,
        min_samples_split=10,
        max_depth=1,
        fit_improve_algo="none",
    )
    dtlr.fit(X_train, y_train)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-29 {color: black;}#sk-container-id-29 pre{padding: 0;}#sk-container-id-29 div.sk-toggleable {background-color: white;}#sk-container-id-29 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-29 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-29 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-29 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-29 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-29 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-29 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-29 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-29 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-29 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-29 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-29 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-29 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-29 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-29 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-29 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-29 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-29 div.sk-item {position: relative;z-index: 1;}#sk-container-id-29 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-29 div.sk-item::before, #sk-container-id-29 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-29 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-29 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-29 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-29 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-29 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-29 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-29 div.sk-label-container {text-align: center;}#sk-container-id-29 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-29 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-29" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>DecisionTreeLogisticRegression(estimator=LogisticRegression(solver=&#x27;liblinear&#x27;),
                                   fit_improve_algo=&#x27;none&#x27;, max_depth=1,
                                   min_samples_leaf=10, min_samples_split=10)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-68" type="checkbox" ><label for="sk-estimator-id-68" class="sk-toggleable__label sk-toggleable__label-arrow">DecisionTreeLogisticRegression</label><div class="sk-toggleable__content"><pre>DecisionTreeLogisticRegression(estimator=LogisticRegression(solver=&#x27;liblinear&#x27;),
                                   fit_improve_algo=&#x27;none&#x27;, max_depth=1,
                                   min_samples_leaf=10, min_samples_split=10)</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-69" type="checkbox" ><label for="sk-estimator-id-69" class="sk-toggleable__label sk-toggleable__label-arrow">estimator: LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(solver=&#x27;liblinear&#x27;)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-70" type="checkbox" ><label for="sk-estimator-id-70" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(solver=&#x27;liblinear&#x27;)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 99-141

.. code-block:: default



    dtlr2 = DecisionTreeLogisticRegression(
        estimator=LogisticRegression(solver="liblinear"),
        min_samples_leaf=4,
        min_samples_split=4,
        max_depth=10,
        fit_improve_algo="intercept_sort_always",
    )
    dtlr2.fit(X_train, y_train)

    fig, ax = plt.subplots(2, 2, figsize=(10, 8))
    plot_classifier_decision_zone(
        dtlr,
        X_train,
        y_train,
        ax=ax[0, 0],
        title="DecisionTreeLogisticRegression\ndepth=%d - train" % dtlr.tree_depth_,
    )
    plot_classifier_decision_zone(
        dtlr2,
        X_train,
        y_train,
        ax=ax[0, 1],
        title="DecisionTreeLogisticRegression\ndepth=%d - train" % dtlr2.tree_depth_,
    )
    plot_classifier_decision_zone(
        dtlr,
        X_test,
        y_test,
        ax=ax[1, 0],
        title="DecisionTreeLogisticRegression\ndepth=%d - test" % dtlr.tree_depth_,
    )
    plot_classifier_decision_zone(
        dtlr2,
        X_test,
        y_test,
        ax=ax[1, 1],
        title="DecisionTreeLogisticRegression\ndepth=%d - test" % dtlr2.tree_depth_,
    )





.. image-sg:: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_002.png
   :alt: DecisionTreeLogisticRegression depth=1 - train, DecisionTreeLogisticRegression depth=4 - train, DecisionTreeLogisticRegression depth=1 - test, DecisionTreeLogisticRegression depth=4 - test
   :srcset: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 143-156

.. code-block:: default



    rows = []
    for model in [lr, dt, dtlr, dtlr2]:
        val = (" - depth=%d" % model.tree_depth_) if hasattr(model, "tree_depth_") else ""
        obs = dict(
            name="%s%s" % (model.__class__.__name__, val), score=model.score(X_test, y_test)
        )
        rows.append(obs)

    DataFrame(rows)







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>name</th>
          <th>score</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>LogisticRegression</td>
          <td>0.655556</td>
        </tr>
        <tr>
          <th>1</th>
          <td>DecisionTreeClassifier</td>
          <td>0.877778</td>
        </tr>
        <tr>
          <th>2</th>
          <td>DecisionTreeLogisticRegression - depth=1</td>
          <td>0.655556</td>
        </tr>
        <tr>
          <th>3</th>
          <td>DecisionTreeLogisticRegression - depth=4</td>
          <td>0.877778</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 157-159

A first example
---------------

.. GENERATED FROM PYTHON SOURCE LINES 159-174

.. code-block:: default



    def random_set_simple(n):
        X = numpy.random.rand(n, 2)
        y = ((X[:, 0] ** 2 + X[:, 1] ** 2) <= 1).astype(numpy.int32).ravel()
        return X, y


    X, y = random_set_simple(2000)
    X_train, X_test, y_train, y_test = train_test_split(X, y)
    dt = DecisionTreeClassifier(max_depth=3)
    dt.fit(X_train, y_train)
    dt8 = DecisionTreeClassifier(max_depth=10)
    dt8.fit(X_train, y_train)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-30 {color: black;}#sk-container-id-30 pre{padding: 0;}#sk-container-id-30 div.sk-toggleable {background-color: white;}#sk-container-id-30 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-30 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-30 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-30 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-30 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-30 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-30 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-30 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-30 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-30 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-30 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-30 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-30 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-30 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-30 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-30 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-30 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-30 div.sk-item {position: relative;z-index: 1;}#sk-container-id-30 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-30 div.sk-item::before, #sk-container-id-30 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-30 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-30 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-30 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-30 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-30 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-30 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-30 div.sk-label-container {text-align: center;}#sk-container-id-30 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-30 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-30" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>DecisionTreeClassifier(max_depth=10)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-71" type="checkbox" checked><label for="sk-estimator-id-71" class="sk-toggleable__label sk-toggleable__label-arrow">DecisionTreeClassifier</label><div class="sk-toggleable__content"><pre>DecisionTreeClassifier(max_depth=10)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 176-229

.. code-block:: default



    fig, ax = plt.subplots(1, 2, figsize=(10, 4), sharey=True)
    plot_classifier_decision_zone(
        dt,
        X_test,
        y_test,
        ax=ax[0],
        title="DecisionTree - max_depth=%d\nacc=%1.2f"
        % (dt.max_depth, dt.score(X_test, y_test)),
    )
    plot_classifier_decision_zone(
        dt8,
        X_test,
        y_test,
        ax=ax[1],
        title="DecisionTree - max_depth=%d\nacc=%1.2f"
        % (dt8.max_depth, dt8.score(X_test, y_test)),
    )
    ax[0].set_xlim([0, 1])
    ax[1].set_xlim([0, 1])
    ax[0].set_ylim([0, 1])

    dtlr = DecisionTreeLogisticRegression(
        max_depth=3, fit_improve_algo="intercept_sort_always", verbose=1
    )
    dtlr.fit(X_train, y_train)
    dtlr8 = DecisionTreeLogisticRegression(
        max_depth=10, min_samples_split=4, fit_improve_algo="intercept_sort_always"
    )
    dtlr8.fit(X_train, y_train)

    fig, ax = plt.subplots(1, 2, figsize=(10, 4), sharey=True)
    plot_classifier_decision_zone(
        dtlr,
        X_test,
        y_test,
        ax=ax[0],
        title="DecisionTreeLogReg - depth=%d\nacc=%1.2f"
        % (dtlr.tree_depth_, dtlr.score(X_test, y_test)),
    )
    plot_classifier_decision_zone(
        dtlr8,
        X_test,
        y_test,
        ax=ax[1],
        title="DecisionTreeLogReg - depth=%d\nacc=%1.2f"
        % (dtlr8.tree_depth_, dtlr8.score(X_test, y_test)),
    )
    ax[0].set_xlim([0, 1])
    ax[1].set_xlim([0, 1])
    ax[0].set_ylim([0, 1])




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_003.png
         :alt: DecisionTree - max_depth=3 acc=0.93, DecisionTree - max_depth=10 acc=0.98
         :srcset: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_004.png
         :alt: DecisionTreeLogReg - depth=3 acc=0.77, DecisionTreeLogReg - depth=10 acc=0.99
         :srcset: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [DTLR ]   trained acc 0.96 N=1500
    [DTLRI]   change intercept 11.478318 --> 10.628104 in [0.226731, 16.393060]
    [DTLR*]  above: n_class=2 N=1500 - 1096/1500
    [DTLR ]    trained acc 0.99 N=1096
    [DTLRI]    change intercept 5.865884 --> 1.491733 in [0.043774, 2.004978]
    [DTLR*]   above: n_class=1 N=1096 - 691/1500
    [DTLR*]   below: n_class=2 N=1096 - 405/1500
    [DTLR ]     trained acc 0.97 N=405
    [DTLRI]     change intercept 4.038701 --> 0.555244 in [0.414455, 0.668887]
    [DTLR*]  below: n_class=2 N=1500 - 404/1500
    [DTLR ]    trained acc 0.76 N=404
    [DTLRI]    change intercept 5.333382 --> 6.243991 in [5.618261, 8.700843]
    [DTLR*]   above: n_class=2 N=404 - 155/1500
    [DTLR ]     trained acc 0.61 N=155
    [DTLRI]     change intercept 1.123080 --> 0.690918 in [0.612642, 0.765920]
    [DTLR*]   below: n_class=2 N=404 - 249/1500
    [DTLR ]     trained acc 1.00 N=249
    [DTLRI]     change intercept -5.358885 --> 0.153720 in [0.116177, 0.190284]

    (0.0, 1.0)



.. GENERATED FROM PYTHON SOURCE LINES 231-280

.. code-block:: default



    def draw_border(
        clr,
        X,
        y,
        fct=None,
        incx=0.1,
        incy=0.1,
        figsize=None,
        border=True,
        ax=None,
        s=10.0,
        linewidths=0.1,
    ):
        h = 0.02
        x_min, x_max = X[:, 0].min() - incx, X[:, 0].max() + incx
        y_min, y_max = X[:, 1].min() - incy, X[:, 1].max() + incy
        xx, yy = numpy.meshgrid(
            numpy.arange(x_min, x_max, h), numpy.arange(y_min, y_max, h)
        )
        if fct is None:
            Z = clr.predict(numpy.c_[xx.ravel(), yy.ravel()])
        else:
            Z = fct(clr, numpy.c_[xx.ravel(), yy.ravel()])

        # Put the result into a color plot
        cmap = plt.cm.tab20
        Z = Z.reshape(xx.shape)
        if ax is None:
            fig, ax = plt.subplots(1, 1, figsize=figsize or (4, 3))
        ax.pcolormesh(xx, yy, Z, cmap=cmap)

        # Plot also the training points
        ax.scatter(
            X[:, 0], X[:, 1], c=y, edgecolors="k", cmap=cmap, s=s, linewidths=linewidths
        )

        ax.set_xlim(xx.min(), xx.max())
        ax.set_ylim(yy.min(), yy.max())
        return ax


    fig, ax = plt.subplots(1, 2, figsize=(14, 4))
    draw_border(dt, X_test, y_test, border=False, ax=ax[0])
    ax[0].set_title("Iris")
    draw_border(dt, X, y, border=False, ax=ax[1], fct=lambda m, x: predict_leaves(m, x))
    ax[1].set_title("DecisionTree")




.. image-sg:: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_005.png
   :alt: Iris, DecisionTree
   :srcset: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'DecisionTree')



.. GENERATED FROM PYTHON SOURCE LINES 282-328

.. code-block:: default



    fig, ax = plt.subplots(6, 4, figsize=(12, 16))
    for i, depth in tqdm(enumerate((1, 2, 3, 4, 5, 6))):
        dtl = DecisionTreeLogisticRegression(
            max_depth=depth, fit_improve_algo="intercept_sort_always", min_samples_leaf=2
        )
        dtl.fit(X_train, y_train)
        draw_border(dtl, X_test, y_test, border=False, ax=ax[i, 0], s=4.0)
        draw_border(
            dtl,
            X,
            y,
            border=False,
            ax=ax[i, 1],
            fct=lambda m, x: predict_leaves(m, x),
            s=4.0,
        )
        ax[i, 0].set_title(
            "Depth=%d nodes=%d score=%1.2f"
            % (dtl.tree_depth_, dtl.n_nodes_, dtl.score(X_test, y_test))
        )
        ax[i, 1].set_title("DTLR Leaves zones")

        dtl = DecisionTreeClassifier(max_depth=depth)
        dtl.fit(X_train, y_train)
        draw_border(dtl, X_test, y_test, border=False, ax=ax[i, 2], s=4.0)
        draw_border(
            dtl,
            X,
            y,
            border=False,
            ax=ax[i, 3],
            fct=lambda m, x: predict_leaves(m, x),
            s=4.0,
        )
        ax[i, 2].set_title(
            "Depth=%d nodes=%d score=%1.2f"
            % (dtl.max_depth, dtl.tree_.node_count, dtl.score(X_test, y_test))
        )
        ax[i, 3].set_title("DT Leaves zones")

        for k in range(ax.shape[1]):
            ax[i, k].get_xaxis().set_visible(False)





.. image-sg:: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_006.png
   :alt: Depth=1 nodes=1 score=0.95, DTLR Leaves zones, Depth=1 nodes=3 score=0.78, DT Leaves zones, Depth=2 nodes=3 score=0.72, DTLR Leaves zones, Depth=2 nodes=7 score=0.90, DT Leaves zones, Depth=3 nodes=7 score=0.77, DTLR Leaves zones, Depth=3 nodes=15 score=0.93, DT Leaves zones, Depth=4 nodes=13 score=0.86, DTLR Leaves zones, Depth=4 nodes=31 score=0.95, DT Leaves zones, Depth=5 nodes=23 score=0.90, DTLR Leaves zones, Depth=5 nodes=51 score=0.97, DT Leaves zones, Depth=6 nodes=39 score=0.93, DTLR Leaves zones, Depth=6 nodes=67 score=0.98, DT Leaves zones
   :srcset: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0it [00:00, ?it/s]    1it [00:00,  2.91it/s]    2it [00:00,  2.05it/s]    3it [00:01,  1.51it/s]    4it [00:02,  1.66it/s]    5it [00:02,  1.68it/s]    6it [00:03,  1.59it/s]    6it [00:03,  1.67it/s]




.. GENERATED FROM PYTHON SOURCE LINES 329-333

Another example designed to fail
--------------------------------

Designed to be difficult with a regular decision tree.

.. GENERATED FROM PYTHON SOURCE LINES 333-374

.. code-block:: default



    def random_set(n):
        X = numpy.random.rand(n, 2)
        y = (
            (cdist(X, numpy.array([[0.5, 0.5]]), metric="minkowski", p=1) <= 0.5)
            .astype(numpy.int32)
            .ravel()
        )
        return X, y


    X, y = random_set(2000)
    X_train, X_test, y_train, y_test = train_test_split(X, y)
    dt = DecisionTreeClassifier(max_depth=3)
    dt.fit(X_train, y_train)
    dt8 = DecisionTreeClassifier(max_depth=10)
    dt8.fit(X_train, y_train)

    fig, ax = plt.subplots(1, 2, figsize=(10, 4), sharey=True)
    plot_classifier_decision_zone(
        dt,
        X_test,
        y_test,
        ax=ax[0],
        title="DecisionTree - max_depth=%d\nacc=%1.2f"
        % (dt.max_depth, dt.score(X_test, y_test)),
    )
    plot_classifier_decision_zone(
        dt8,
        X_test,
        y_test,
        ax=ax[1],
        title="DecisionTree - max_depth=%d\nacc=%1.2f"
        % (dt8.max_depth, dt8.score(X_test, y_test)),
    )
    ax[0].set_xlim([0, 1])
    ax[1].set_xlim([0, 1])
    ax[0].set_ylim([0, 1])





.. image-sg:: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_007.png
   :alt: DecisionTree - max_depth=3 acc=0.79, DecisionTree - max_depth=10 acc=0.95
   :srcset: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (0.0, 1.0)



.. GENERATED FROM PYTHON SOURCE LINES 375-378

The example is a square rotated by 45 degrees. Every sample in the
square is a positive sample, every sample outside is a negative one. The
tree approximates the border with horizontal and vertical lines.

.. GENERATED FROM PYTHON SOURCE LINES 378-411

.. code-block:: default



    dtlr = DecisionTreeLogisticRegression(
        max_depth=3, fit_improve_algo="intercept_sort_always", verbose=1
    )
    dtlr.fit(X_train, y_train)
    dtlr8 = DecisionTreeLogisticRegression(
        max_depth=10, min_samples_split=4, fit_improve_algo="intercept_sort_always"
    )
    dtlr8.fit(X_train, y_train)

    fig, ax = plt.subplots(1, 2, figsize=(10, 4), sharey=True)
    plot_classifier_decision_zone(
        dtlr,
        X_test,
        y_test,
        ax=ax[0],
        title="DecisionTreeLogReg - depth=%d\nacc=%1.2f"
        % (dtlr.tree_depth_, dtlr.score(X_test, y_test)),
    )
    plot_classifier_decision_zone(
        dtlr8,
        X_test,
        y_test,
        ax=ax[1],
        title="DecisionTreeLogReg - depth=%d\nacc=%1.2f"
        % (dtlr8.tree_depth_, dtlr8.score(X_test, y_test)),
    )
    ax[0].set_xlim([0, 1])
    ax[1].set_xlim([0, 1])
    ax[0].set_ylim([0, 1])





.. image-sg:: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_008.png
   :alt: DecisionTreeLogReg - depth=3 acc=0.65, DecisionTreeLogReg - depth=10 acc=0.95
   :srcset: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [DTLR ]   trained acc 0.57 N=1500
    [DTLRI]   change intercept -0.080469 --> -0.093607 in [-0.233916, 0.040679]
    [DTLR*]  above: n_class=2 N=1500 - 750/1500
    [DTLR ]    trained acc 0.75 N=750
    [DTLRI]    change intercept 4.906253 --> 4.847229 in [2.620617, 6.539003]
    [DTLR*]   above: n_class=2 N=750 - 388/1500
    [DTLR ]     trained acc 0.78 N=388
    [DTLRI]     change intercept 2.374749 --> 1.141016 in [0.808634, 1.475214]
    [DTLR*]   below: n_class=2 N=750 - 362/1500
    [DTLR ]     trained acc 0.74 N=362
    [DTLRI]     change intercept 0.986362 --> 1.980711 in [1.727847, 2.349192]
    [DTLR*]  below: n_class=2 N=1500 - 750/1500
    [DTLR ]    trained acc 0.73 N=750
    [DTLRI]    change intercept -1.713276 --> -1.674185 in [-3.716095, 0.156787]
    [DTLR*]   above: n_class=2 N=750 - 370/1500
    [DTLR ]     trained acc 0.72 N=370
    [DTLRI]     change intercept -0.073116 --> -0.981557 in [-1.542754, -0.667705]
    [DTLR*]   below: n_class=2 N=750 - 380/1500
    [DTLR ]     trained acc 0.75 N=380
    [DTLRI]     change intercept -1.488024 --> -0.444482 in [-0.834095, 0.101622]

    (0.0, 1.0)



.. GENERATED FROM PYTHON SOURCE LINES 412-414

Leave zones
-----------

.. GENERATED FROM PYTHON SOURCE LINES 414-425

.. code-block:: default


    # We use method *decision_path* to understand which leaf is responsible
    # for which zone.


    fig, ax = plt.subplots(1, 2, figsize=(14, 4))
    draw_border(dtlr, X_test, y_test, border=False, ax=ax[0])
    ax[0].set_title("Iris")
    draw_border(dtlr, X, y, border=False, ax=ax[1], fct=lambda m, x: predict_leaves(m, x))
    ax[1].set_title("DecisionTreeLogisticRegression")




.. image-sg:: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_009.png
   :alt: Iris, DecisionTreeLogisticRegression
   :srcset: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'DecisionTreeLogisticRegression')



.. GENERATED FROM PYTHON SOURCE LINES 427-468

.. code-block:: default



    fig, ax = plt.subplots(6, 4, figsize=(12, 16))
    for i, depth in tqdm(enumerate((1, 2, 3, 4, 5, 6))):
        dtl = DecisionTreeLogisticRegression(
            max_depth=depth, fit_improve_algo="intercept_sort_always", min_samples_leaf=2
        )
        dtl.fit(X_train, y_train)
        draw_border(dtl, X_test, y_test, border=False, ax=ax[i, 0], s=4.0)
        draw_border(
            dtl,
            X,
            y,
            border=False,
            ax=ax[i, 1],
            fct=lambda m, x: predict_leaves(m, x),
            s=4.0,
        )
        ax[i, 0].set_title(
            "Depth=%d nodes=%d score=%1.2f"
            % (dtl.tree_depth_, dtl.n_nodes_, dtl.score(X_test, y_test))
        )
        ax[i, 1].set_title("DTLR Leaves zones")

        dtl = DecisionTreeClassifier(max_depth=depth)
        dtl.fit(X_train, y_train)
        draw_border(dtl, X_test, y_test, border=False, ax=ax[i, 2], s=4.0)
        draw_border(
            dtl,
            X,
            y,
            border=False,
            ax=ax[i, 3],
            fct=lambda m, x: predict_leaves(m, x),
            s=4.0,
        )
        ax[i, 2].set_title(
            "Depth=%d nodes=%d score=%1.2f"
            % (dtl.max_depth, dtl.tree_.node_count, dtl.score(X_test, y_test))
        )
        ax[i, 3].set_title("DT Leaves zones")



.. image-sg:: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_010.png
   :alt: Depth=1 nodes=1 score=0.54, DTLR Leaves zones, Depth=1 nodes=3 score=0.61, DT Leaves zones, Depth=2 nodes=3 score=0.77, DTLR Leaves zones, Depth=2 nodes=7 score=0.74, DT Leaves zones, Depth=3 nodes=7 score=0.65, DTLR Leaves zones, Depth=3 nodes=13 score=0.79, DT Leaves zones, Depth=4 nodes=15 score=0.61, DTLR Leaves zones, Depth=4 nodes=23 score=0.85, DT Leaves zones, Depth=5 nodes=31 score=0.80, DTLR Leaves zones, Depth=5 nodes=35 score=0.88, DT Leaves zones, Depth=6 nodes=63 score=0.86, DTLR Leaves zones, Depth=6 nodes=51 score=0.89, DT Leaves zones
   :srcset: /auto_examples/images/sphx_glr_plot_decision_tree_logreg_010.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0it [00:00, ?it/s]    1it [00:00,  3.88it/s]    2it [00:00,  3.25it/s]    3it [00:01,  2.69it/s]    4it [00:01,  1.71it/s]    5it [00:03,  1.27it/s]    6it [00:04,  1.04it/s]    6it [00:04,  1.36it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 22.276 seconds)


.. _sphx_glr_download_auto_examples_plot_decision_tree_logreg.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_decision_tree_logreg.py <plot_decision_tree_logreg.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_decision_tree_logreg.ipynb <plot_decision_tree_logreg.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
