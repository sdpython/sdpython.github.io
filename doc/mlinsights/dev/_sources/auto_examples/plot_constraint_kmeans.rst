
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_constraint_kmeans.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_constraint_kmeans.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_constraint_kmeans.py:


=================
Constraint KMeans
=================

Simple example to show how to cluster keeping
approximatively the same number of points in every
cluster.

Data
====

.. GENERATED FROM PYTHON SOURCE LINES 13-46

.. code-block:: default

    from collections import Counter

    import matplotlib.pyplot as plt
    import numpy
    from mlinsights.mlmodel import ConstraintKMeans
    from sklearn.cluster import KMeans
    from sklearn.datasets import make_blobs

    n_samples = 100
    data = make_blobs(
        n_samples=n_samples,
        n_features=2,
        centers=2,
        cluster_std=1.0,
        center_box=(-10.0, 0.0),
        shuffle=True,
        random_state=2,
    )
    X1 = data[0]
    data = make_blobs(
        n_samples=n_samples // 2,
        n_features=2,
        centers=2,
        cluster_std=1.0,
        center_box=(0.0, 10.0),
        shuffle=True,
        random_state=2,
    )
    X2 = data[0]

    X = numpy.vstack([X1, X2])
    X.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (150, 2)



.. GENERATED FROM PYTHON SOURCE LINES 47-48

Plots.

.. GENERATED FROM PYTHON SOURCE LINES 48-53

.. code-block:: default


    fig, ax = plt.subplots(1, 1, figsize=(4, 4))
    ax.plot(X[:, 0], X[:, 1], ".")
    ax.set_title("4 clusters")




.. image-sg:: /auto_examples/images/sphx_glr_plot_constraint_kmeans_001.png
   :alt: 4 clusters
   :srcset: /auto_examples/images/sphx_glr_plot_constraint_kmeans_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, '4 clusters')



.. GENERATED FROM PYTHON SOURCE LINES 54-56

Standard KMeans
===============

.. GENERATED FROM PYTHON SOURCE LINES 56-72

.. code-block:: default


    km = KMeans(n_clusters=4)
    km.fit(X)
    cl = km.predict(X)
    hist = Counter(cl)

    colors = "brgy"
    fig, ax = plt.subplots(1, 1, figsize=(4, 4))
    for i in range(0, max(cl) + 1):
        ax.plot(X[cl == i, 0], X[cl == i, 1], colors[i] + ".", label="cl%d" % i)
        x = [km.cluster_centers_[i, 0], km.cluster_centers_[i, 0]]
        y = [km.cluster_centers_[i, 1], km.cluster_centers_[i, 1]]
        ax.plot(x, y, colors[i] + "+")
    ax.set_title(f"KMeans 4 clusters\n{hist!r}")
    ax.legend()




.. image-sg:: /auto_examples/images/sphx_glr_plot_constraint_kmeans_002.png
   :alt: KMeans 4 clusters Counter({2: 50, 0: 50, 1: 27, 3: 23})
   :srcset: /auto_examples/images/sphx_glr_plot_constraint_kmeans_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/xadupre/install/scikit-learn/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
      super()._check_params_vs_input(X, default_n_init=10)

    <matplotlib.legend.Legend object at 0x7f0e24d34400>



.. GENERATED FROM PYTHON SOURCE LINES 73-75

Constraint KMeans
=================

.. GENERATED FROM PYTHON SOURCE LINES 75-82

.. code-block:: default


    km1 = ConstraintKMeans(n_clusters=4, strategy="gain", balanced_predictions=True)
    km1.fit(X)

    km2 = ConstraintKMeans(n_clusters=4, strategy="distance", balanced_predictions=True)
    km2.fit(X)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-20 {--sklearn-color-text: black;--sklearn-color-line: gray;--sklearn-color-background: white;--sklearn-color-background-box: #f0f8ff;--sklearn-color-border-box: black;--sklearn-color-icon: #696969;--sklearn-color-active: #d4ebff;--sklearn-color-highlight: #d4ebff;@media (prefers-color-scheme: dark) {--sklearn-color-text: white;--sklearn-color-line: gray;--sklearn-color-background: #111;--sklearn-color-background-box: #424242;--sklearn-color-border-box: white;--sklearn-color-icon: #878787;--sklearn-color-active: #616161;--sklearn-color-highlight: #616161;}}#sk-container-id-20 {color: var(--sklearn-color-text);}#sk-container-id-20 pre{padding: 0;}#sk-container-id-20 div.sk-toggleable {background-color: var(--sklearn-color-background);}#sk-container-id-20 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-20 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: var(--sklearn-color-icon);}#sk-container-id-20 label.sk-toggleable__label-arrow:hover:before {color: var(--sklearn-color-text);}#sk-container-id-20 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: var(--sklearn-color-text);}#sk-container-id-20 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: var(--sklearn-color-background-box);}#sk-container-id-20 div.sk-toggleable__content pre {margin: 0.2em;color: var(--sklearn-color-text);border-radius: 0.25em;background-color: var(--sklearn-color-background-box);}#sk-container-id-20 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-20 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-20 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: var(--sklearn-color-active);}#sk-container-id-20 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: var(--sklearn-color-active);}#sk-container-id-20 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-20 div.sk-estimator {font-family: monospace;background-color: var(--sklearn-color-background-box);border: 1px dotted var(--sklearn-color-border-box);border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-20 div.sk-estimator:hover {background-color: var(--sklearn-color-highlight);}#sk-container-id-20 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid var(--sklearn-color-line);flex-grow: 1;}#sk-container-id-20 div.sk-label:hover label.sk-toggleable__label {background-color: var(--sklearn-color-highlight);}#sk-container-id-20 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid var(--sklearn-color-line);box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-20 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: var(--sklearn-color-background);padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-20 div.sk-item {position: relative;z-index: 1;}#sk-container-id-20 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: var(--sklearn-color-background);position: relative;}#sk-container-id-20 div.sk-item::before, #sk-container-id-20 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid var(--sklearn-color-line);box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-20 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: var(--sklearn-color-background);}#sk-container-id-20 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-20 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-20 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-20 div.sk-dashed-wrapped {border: 1px dashed var(--sklearn-color-line);margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: var(--sklearn-color-background);}#sk-container-id-20 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-20 div.sk-label-container {text-align: center;}#sk-container-id-20 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-20 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-20" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ConstraintKMeans(balanced_predictions=True, n_clusters=4, strategy=&#x27;distance&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-50" type="checkbox" checked><label for="sk-estimator-id-50" class="sk-toggleable__label sk-toggleable__label-arrow">ConstraintKMeans</label><div class="sk-toggleable__content"><pre>ConstraintKMeans(balanced_predictions=True, n_clusters=4, strategy=&#x27;distance&#x27;)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 83-85

This algorithm tries to exchange points
between clusters.

.. GENERATED FROM PYTHON SOURCE LINES 85-89

.. code-block:: default


    cl1 = km1.predict(X)
    hist1 = Counter(cl1)








.. GENERATED FROM PYTHON SOURCE LINES 91-95

.. code-block:: default


    cl2 = km2.predict(X)
    hist2 = Counter(cl2)








.. GENERATED FROM PYTHON SOURCE LINES 97-114

.. code-block:: default


    fig, ax = plt.subplots(1, 2, figsize=(10, 4))
    for i in range(0, max(cl1) + 1):
        ax[0].plot(X[cl1 == i, 0], X[cl1 == i, 1], colors[i] + ".", label="cl%d" % i)
        ax[1].plot(X[cl2 == i, 0], X[cl2 == i, 1], colors[i] + ".", label="cl%d" % i)
        x = [km1.cluster_centers_[i, 0], km1.cluster_centers_[i, 0]]
        y = [km1.cluster_centers_[i, 1], km1.cluster_centers_[i, 1]]
        ax[0].plot(x, y, colors[i] + "+")
        x = [km2.cluster_centers_[i, 0], km2.cluster_centers_[i, 0]]
        y = [km2.cluster_centers_[i, 1], km2.cluster_centers_[i, 1]]
        ax[1].plot(x, y, colors[i] + "+")
    ax[0].set_title(f"ConstraintKMeans 4 clusters (gains)\n{hist1!r}")
    ax[0].legend()
    ax[1].set_title(f"ConstraintKMeans 4 clusters (distances)\n{hist2!r}")
    ax[1].legend()





.. image-sg:: /auto_examples/images/sphx_glr_plot_constraint_kmeans_003.png
   :alt: ConstraintKMeans 4 clusters (gains) Counter({0: 39, 2: 37, 3: 37, 1: 37}), ConstraintKMeans 4 clusters (distances) Counter({1: 38, 3: 38, 0: 37, 2: 37})
   :srcset: /auto_examples/images/sphx_glr_plot_constraint_kmeans_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f0e26442a10>



.. GENERATED FROM PYTHON SOURCE LINES 115-117

Another algorithm tries to extend the area of attraction of
each cluster.

.. GENERATED FROM PYTHON SOURCE LINES 117-124

.. code-block:: default


    km = ConstraintKMeans(n_clusters=4, strategy="weights", max_iter=1000, history=True)
    km.fit(X)

    cl = km.predict(X)
    hist = Counter(cl)








.. GENERATED FROM PYTHON SOURCE LINES 125-126

Let's plot Delaunay edges as well.

.. GENERATED FROM PYTHON SOURCE LINES 126-152

.. code-block:: default



    def plot_delaunay(ax, edges, points):
        for a, b in edges:
            ax.plot(points[[a, b], 0], points[[a, b], 1], "--", color="#555555")


    edges = km.cluster_edges()


    fig, ax = plt.subplots(1, 2, figsize=(10, 4))
    for i in range(0, max(cl) + 1):
        ax[0].plot(X[cl == i, 0], X[cl == i, 1], colors[i] + ".", label="cl%d" % i)
        x = [km.cluster_centers_[i, 0], km.cluster_centers_[i, 0]]
        y = [km.cluster_centers_[i, 1], km.cluster_centers_[i, 1]]
        ax[0].plot(x, y, colors[i] + "+")
    ax[0].set_title(f"ConstraintKMeans 4 clusters\nstrategy='weights'\n{hist!r}")
    ax[0].legend()

    cls = km.cluster_centers_iter_
    ax[1].plot(X[:, 0], X[:, 1], ".", label="X", color="#AAAAAA", ms=3)
    for i in range(0, max(cl) + 1):
        ms = numpy.arange(cls.shape[-1]).astype(numpy.float64) / cls.shape[-1] * 50 + 1
        ax[1].scatter(cls[i, 0, :], cls[i, 1, :], color=colors[i], s=ms, label="cl%d" % i)
        plot_delaunay(ax[1], edges, km.cluster_centers_)
    ax[1].set_title("Centers movement")



.. image-sg:: /auto_examples/images/sphx_glr_plot_constraint_kmeans_004.png
   :alt: ConstraintKMeans 4 clusters strategy='weights' Counter({3: 49, 1: 49, 0: 48, 2: 4}), Centers movement
   :srcset: /auto_examples/images/sphx_glr_plot_constraint_kmeans_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Centers movement')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.151 seconds)


.. _sphx_glr_download_auto_examples_plot_constraint_kmeans.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_constraint_kmeans.py <plot_constraint_kmeans.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_constraint_kmeans.ipynb <plot_constraint_kmeans.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
