
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profile_existing_onnx.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_profile_existing_onnx.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profile_existing_onnx.py:


Profile an existing model
=========================

Profiles any onnx model on CPU.

Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 10-42

.. code-block:: Python


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    from experimental_experiment.ext_test_case import get_parsed_args

    try:
        from onnx_extended.tools.js_profile import (
            js_profile_to_dataframe,
            plot_ort_profile,
        )
    except ImportError:
        js_profile_to_dataframe = None

    try:
        filename = os.path.join(
            os.path.dirname(__file__ or ""), "example_4700-CPUep-opt.onnx"
        )
    except NameError:
        filename = "example_4700-CPUep-opt.onnx"

    script_args = get_parsed_args(
        "plot_profile_existing_onnx",
        filename=(filename, "input file"),
        repeat=10,
        expose="",
    )


    for att in "filename,repeat".split(","):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    filename=example_4700-CPUep-opt.onnx
    repeat=10




.. GENERATED FROM PYTHON SOURCE LINES 43-44

Random inputs.

.. GENERATED FROM PYTHON SOURCE LINES 44-75

.. code-block:: Python



    def create_random_input(sess):
        feeds = {}
        for i in sess.get_inputs():
            shape = i.shape
            ot = i.type
            if ot == "tensor(float)":
                dtype = np.float32
            else:
                raise ValueError(f"Unsupposed onnx type {ot}.")
            t = np.random.rand(*shape).astype(dtype)
            feeds[i.name] = t
        return feeds


    def create_session(filename, profiling=False):
        from onnxruntime import InferenceSession, SessionOptions

        if not profiling:
            return InferenceSession(filename, providers=["CPUExecutionProvider"])
        opts = SessionOptions()
        opts.enable_profiling = True
        return InferenceSession(filename, opts, providers=["CPUExecutionProvider"])


    sess = create_session(script_args.filename)
    feeds = create_random_input(sess)
    sess.run(None, feeds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [2024-02-06 01:26:08,735] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)

    [array([[0.22716433, 0.642355  , 0.08302658, ..., 0.39913985, 0.925505  ,
            0.37640023],
           [0.98648435, 0.30556285, 0.70134234, ..., 0.5551272 , 0.7741102 ,
            0.82418686],
           [0.54042584, 0.2549982 , 0.21614042, ..., 0.34107348, 0.8963622 ,
            0.85447156],
           ...,
           [0.16653132, 0.4208267 , 0.36833766, ..., 0.5799534 , 0.33223665,
            0.9883498 ],
           [0.3402977 , 0.8929004 , 0.34544024, ..., 0.85223544, 0.888768  ,
            0.5457919 ],
           [0.35579878, 0.83379334, 0.44058108, ..., 0.03338636, 0.29458284,
            0.64561576]], dtype=float32), array([[0.09106781, 0.5738359 , 0.01990874, ..., 0.6155384 , 0.36685556,
            0.9759759 ],
           [0.43439332, 0.25673133, 0.987796  , ..., 0.55825776, 0.3004231 ,
            0.37847072],
           [0.02802572, 0.1841006 , 0.40066758, ..., 0.65733844, 0.14516748,
            0.47570494],
           ...,
           [0.10898405, 0.99316627, 0.4932495 , ..., 0.58059764, 0.73531157,
            0.30616608],
           [0.01364807, 0.36755332, 0.24891606, ..., 0.37868112, 0.35123128,
            0.14378183],
           [0.9581462 , 0.33972782, 0.7094195 , ..., 0.06950174, 0.6516847 ,
            0.0626073 ]], dtype=float32), array([[0.92268085, 0.40554526, 0.01055187, ..., 0.80893236, 0.23773211,
            0.4128545 ],
           [0.43957782, 0.4506987 , 0.18714654, ..., 0.36704278, 0.57260996,
            0.23477083],
           [0.41005483, 0.10182983, 0.13185838, ..., 0.08146195, 0.84076273,
            0.49762738],
           ...,
           [0.5869092 , 0.09400484, 0.21671255, ..., 0.47720975, 0.78601557,
            0.932834  ],
           [0.6833752 , 0.91461116, 0.41884148, ..., 0.6385049 , 0.92720515,
            0.0303773 ],
           [0.54649824, 0.00458358, 0.06905705, ..., 0.9754046 , 0.82303196,
            0.0397622 ]], dtype=float32), array([[[[6.8780403, 6.922937 , 7.748275 , ..., 6.710476 , 6.7517147,
              7.872851 ],
             [5.7637534, 7.5714693, 7.324022 , ..., 7.072465 , 6.8969245,
              8.010185 ],
             [5.337053 , 6.039088 , 6.4656215, ..., 7.8429794, 7.082104 ,
              6.200628 ],
             ...,
             [5.8470325, 6.1076107, 6.0052204, ..., 5.4582853, 6.699426 ,
              6.0897584],
             [5.0187297, 6.0542912, 5.002329 , ..., 7.0357985, 6.549265 ,
              6.310928 ],
             [6.4206095, 5.526001 , 6.040769 , ..., 6.6257615, 7.194505 ,
              7.6466403]],

            [[6.231985 , 7.450508 , 8.216831 , ..., 6.643682 , 7.3244076,
              8.491497 ],
             [7.0527964, 7.442278 , 7.64947  , ..., 7.284844 , 7.5847063,
              7.731652 ],
             [6.252473 , 6.2814717, 6.5782247, ..., 7.2594323, 7.4862375,
              7.6282215],
             ...,
             [6.7830114, 6.3609276, 4.8467107, ..., 6.9470267, 5.9190516,
              5.311853 ],
             [6.2354236, 6.0229917, 5.059861 , ..., 7.6256175, 7.0199776,
              6.2080045],
             [5.717794 , 6.2387934, 6.4225817, ..., 7.0477624, 8.032475 ,
              6.6974397]],

            [[4.103054 , 5.1147637, 4.99063  , ..., 4.630738 , 4.593536 ,
              5.863354 ],
             [5.22707  , 4.508402 , 5.7145743, ..., 4.5707235, 5.663673 ,
              4.9612966],
             [3.912483 , 4.3669643, 4.3416023, ..., 5.0296316, 5.398714 ,
              4.49631  ],
             ...,
             [4.0542717, 3.949836 , 4.0732965, ..., 4.679947 , 3.8705037,
              4.070305 ],
             [4.4870095, 3.2206733, 4.045558 , ..., 4.441333 , 4.003667 ,
              4.6800528],
             [3.654995 , 4.2490377, 4.2205462, ..., 4.896993 , 5.087123 ,
              5.021636 ]],

            ...,

            [[5.6349735, 6.2968016, 6.740759 , ..., 5.622659 , 6.4690475,
              7.077789 ],
             [5.826725 , 7.2487874, 6.915916 , ..., 6.1781063, 5.7085676,
              6.0724316],
             [4.679414 , 5.320134 , 5.3783517, ..., 6.0525894, 5.74466  ,
              6.169994 ],
             ...,
             [4.6904416, 4.9037924, 4.824571 , ..., 5.122126 , 5.0232625,
              4.4206424],
             [5.483167 , 5.383672 , 4.4564004, ..., 6.0094495, 5.7195907,
              5.5536394],
             [6.393601 , 5.129305 , 5.3777404, ..., 7.2529216, 5.96471  ,
              6.1345067]],

            [[6.031075 , 5.7553926, 7.0703893, ..., 5.757337 , 6.848085 ,
              7.6742845],
             [6.390192 , 6.7332697, 7.17021  , ..., 6.2188416, 6.520779 ,
              6.4045324],
             [5.555749 , 5.8363366, 6.270012 , ..., 6.987903 , 7.5714793,
              6.333626 ],
             ...,
             [5.1482944, 4.679238 , 5.4918456, ..., 5.338304 , 5.0398684,
              5.9022617],
             [5.5966754, 5.1993675, 4.7779675, ..., 6.5200872, 5.0649242,
              5.722456 ],
             [5.347056 , 4.8695793, 5.832191 , ..., 6.23902  , 6.274536 ,
              7.011941 ]],

            [[6.781167 , 7.8541136, 7.8276687, ..., 6.5935783, 7.867651 ,
              8.799418 ],
             [6.971402 , 8.251391 , 7.979444 , ..., 7.6337605, 7.381488 ,
              6.9452147],
             [6.001371 , 7.0008926, 7.084465 , ..., 7.379814 , 7.120801 ,
              7.1995964],
             ...,
             [5.4307947, 5.7537346, 5.73609  , ..., 6.189144 , 5.86736  ,
              6.3033104],
             [6.1996675, 5.4867315, 5.43501  , ..., 6.4758677, 6.8239803,
              6.429833 ],
             [6.9226165, 6.5803227, 6.553292 , ..., 8.628633 , 7.0443993,
              6.975088 ]]]], dtype=float32), array([[[[    3,   254,   259, ...,   238,   366,   247],
             [  871,   627,   629, ...,   611,   614,   989],
             [  993,  1121,  1000, ...,  1476,  1482,  1238],
             ...,
             [14261, 14018, 14023, ..., 14248, 14377, 14256],
             [14633, 14762, 14395, ..., 14499, 14500, 14507],
             [15252, 14885, 15012, ..., 15367, 15369, 15375]],

            [[    2,   128,    11, ...,   487,   240,   123],
             [  870,   751,   629, ...,   611,   614,   989],
             [ 1119,   998,  1001, ...,  1476,  1110,  1362],
             ...,
             [13891, 14141, 13899, ..., 14249, 14379, 14256],
             [14634, 14391, 14395, ..., 14499, 14624, 14631],
             [15004, 14886, 15136, ..., 14992, 15369, 15374]],

            [[  126,     4,   383, ...,   363,   365,   123],
             [  869,   751,   630, ...,   611,   986,   617],
             [  995,  1121,  1001, ...,  1228,  1110,  1362],
             ...,
             [13891, 14019, 14270, ..., 14000, 14378, 14256],
             [14757, 14390, 14395, ..., 14499, 14872, 14505],
             [14880, 14886, 15136, ..., 15366, 15369, 15248]],

            ...,

            [[  125,   379,   258, ...,   114,   243,   123],
             [  870,   751,   629, ...,   611,   738,   991],
             [  993,  1121,  1375, ...,  1476,  1482,  1486],
             ...,
             [13889, 13893, 14147, ..., 14000, 14377, 14380],
             [14385, 14760, 14392, ..., 14623, 14874, 14631],
             [15252, 14884, 15260, ..., 15367, 14997, 15372]],

            [[  126,     4,    11, ...,   239,   366,   123],
             [  871,   751,   629, ...,   611,   614,   617],
             [  993,  1122,  1001, ...,  1230,  1111,  1362],
             ...,
             [13891, 13893, 14020, ..., 14248, 14379, 14256],
             [14757, 14639, 14395, ..., 14871, 14872, 14630],
             [15254, 15008, 15012, ..., 14992, 15369, 15375]],

            [[  125,   378,   381, ...,   362,   366,   123],
             [  871,   750,   629, ...,   735,   738,   991],
             [  993,  1121,  1001, ...,  1476,  1483,  1486],
             ...,
             [13891, 13893, 14145, ..., 14248, 14377, 14132],
             [14385, 14391, 14392, ..., 14499, 14624, 14631],
             [15252, 14884, 15012, ..., 15364, 15368, 15373]]]], dtype=int64), array([[7.838498 , 7.39933  , 7.7474947, ..., 7.9107575, 8.485791 ,
            8.628633 ]], dtype=float32), array([[121365.61 , 120056.6  , 120989.07 , ..., 120560.18 , 121034.195,
            120783.984]], dtype=float32), array([[61305940., 63596052., 63139048., 62665136., 60499864., 61596768.,
            61334536., 60487936., 60504844., 60102636., 61622720., 62280472.,
            61784572., 63577688., 60817824., 60779592., 62232836., 61562788.,
            61272488., 62549816., 60899964., 59960540., 63336328., 61951816.,
            62460560., 61074376., 62385040., 61746444., 61746832., 62330428.,
            61988352., 62434008., 60377896., 62476076., 61614016., 61638724.,
            62359928., 62444192., 60581688., 61336784., 62479152., 61392660.,
            61569496., 62327720., 63544184., 61451504., 61955276., 60560864.,
            63404888., 59793604., 62459888., 60843664., 63592016., 61765844.,
            62220672., 62158368., 62475880., 62079372., 60825328., 62307676.,
            61572736., 62401972., 62009704., 61363984., 59238692., 61781584.,
            62204128., 62092248., 62001428., 61308112., 63799912., 64250084.,
            61407036., 62756040., 63584984., 62274372., 61160088., 63993044.,
            62177576., 62556688., 62085828., 61739652., 61424704., 62849776.,
            62201908., 63332212., 60778412., 60564044., 62404944., 62332528.,
            60168680., 61624068., 60783980., 64076328., 61149308., 63458280.,
            63019048., 60543308., 60451008., 63321128., 63573496., 60311128.,
            61289204., 62364580., 59637852., 62541732., 62482776., 62766688.,
            61787536., 62316840., 61222064., 63281576., 61415776., 62792420.,
            61798592., 63249744., 61826224., 62256340., 61402120., 61171264.,
            60957648., 64344236., 60087296., 62237408., 62238088., 62165724.,
            61705672., 63156680.]], dtype=float32), array([[4.1425592e+09, 3.8903332e+09, 3.8953073e+09, 4.1128643e+09,
            4.0044083e+09, 3.7200154e+09, 3.8498808e+09, 4.2442683e+09,
            3.9724616e+09, 3.7540160e+09]], dtype=float32)]



.. GENERATED FROM PYTHON SOURCE LINES 76-78

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 78-95

.. code-block:: Python


    sess = create_session(script_args.filename, profiling=True)

    for i in range(script_args.repeat):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    if js_profile_to_dataframe is not None:
        df = js_profile_to_dataframe(prof, first_it_out=True)
        df.to_csv("plot_profile_existing_onnx.csv")
        df.to_excel("plot_profile_existing_onnx.xlsx")
        fig, ax = plt.subplots(1, 2, figsize=(10, 5))

        plot_ort_profile(df, ax[0], ax[1], "dort")
        fig.savefig("plot_profile_existing_onnx.png")
    else:
        print("Install onnx-extended first.")



.. image-sg:: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_001.png
   :alt: dort, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 9.157 seconds)


.. _sphx_glr_download_auto_examples_plot_profile_existing_onnx.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_existing_onnx.ipynb <plot_profile_existing_onnx.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_existing_onnx.py <plot_profile_existing_onnx.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
