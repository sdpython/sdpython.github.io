
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profile_existing_onnx.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_profile_existing_onnx.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profile_existing_onnx.py:


Profile an existing model
=========================

Profiles any onnx model on CPU.

Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 10-42

.. code-block:: Python


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    from experimental_experiment.args import get_parsed_args

    try:
        from onnx_extended.tools.js_profile import (
            js_profile_to_dataframe,
            plot_ort_profile,
        )
    except ImportError:
        js_profile_to_dataframe = None

    try:
        filename = os.path.join(
            os.path.dirname(__file__ or ""), "data", "example_4700-CPUep-opt.onnx"
        )
    except NameError:
        filename = "data/example_4700-CPUep-opt.onnx"

    script_args = get_parsed_args(
        "plot_profile_existing_onnx",
        filename=(filename, "input file"),
        repeat=10,
        expose="",
    )


    for att in "filename,repeat".split(","):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    filename=data/example_4700-CPUep-opt.onnx
    repeat=10




.. GENERATED FROM PYTHON SOURCE LINES 43-44

Random inputs.

.. GENERATED FROM PYTHON SOURCE LINES 44-75

.. code-block:: Python



    def create_random_input(sess):
        feeds = {}
        for i in sess.get_inputs():
            shape = i.shape
            ot = i.type
            if ot == "tensor(float)":
                dtype = np.float32
            else:
                raise ValueError(f"Unsupposed onnx type {ot}.")
            t = np.random.rand(*shape).astype(dtype)
            feeds[i.name] = t
        return feeds


    def create_session(filename, profiling=False):
        from onnxruntime import InferenceSession, SessionOptions

        if not profiling:
            return InferenceSession(filename, providers=["CPUExecutionProvider"])
        opts = SessionOptions()
        opts.enable_profiling = True
        return InferenceSession(filename, opts, providers=["CPUExecutionProvider"])


    sess = create_session(script_args.filename)
    feeds = create_random_input(sess)
    sess.run(None, feeds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [array([[0.6036851 , 0.08978011, 0.01148821, ..., 0.32305488, 0.6963321 ,
            0.77759457],
           [0.44899774, 0.03618258, 0.97806996, ..., 0.9657207 , 0.995928  ,
            0.9129241 ],
           [0.9651198 , 0.4629508 , 0.1357251 , ..., 0.76510674, 0.60882586,
            0.08878591],
           ...,
           [0.29031998, 0.6816627 , 0.5491646 , ..., 0.39926267, 0.8822937 ,
            0.87205297],
           [0.47702494, 0.5064091 , 0.2047826 , ..., 0.7575682 , 0.9178523 ,
            0.7669526 ],
           [0.27173397, 0.5813077 , 0.14376175, ..., 0.9882583 , 0.6606377 ,
            0.7207539 ]], dtype=float32), array([[0.45693806, 0.3295989 , 0.17438129, ..., 0.6495158 , 0.18333729,
            0.29189077],
           [0.34263897, 0.5520489 , 0.30869704, ..., 0.6385462 , 0.88063884,
            0.21461526],
           [0.81695205, 0.33698165, 0.5750813 , ..., 0.3869438 , 0.22512196,
            0.98016137],
           ...,
           [0.48952314, 0.9011819 , 0.75287366, ..., 0.01309267, 0.33156252,
            0.08233298],
           [0.37311268, 0.6494535 , 0.48879063, ..., 0.44751084, 0.47768953,
            0.9633248 ],
           [0.75705916, 0.6096879 , 0.10296013, ..., 0.3709951 , 0.98013544,
            0.0051489 ]], dtype=float32), array([[0.56204975, 0.02689577, 0.5039214 , ..., 0.15768176, 0.7941031 ,
            0.83888566],
           [0.67305136, 0.7972401 , 0.4661629 , ..., 0.14029521, 0.83568144,
            0.01713219],
           [0.09838615, 0.29439917, 0.1852572 , ..., 0.3284441 , 0.3759471 ,
            0.41751587],
           ...,
           [0.68589705, 0.26021683, 0.10168821, ..., 0.29603317, 0.69422865,
            0.23870349],
           [0.85724473, 0.8034891 , 0.91822404, ..., 0.31472096, 0.98525596,
            0.41002014],
           [0.8417655 , 0.27943817, 0.91583806, ..., 0.440922  , 0.3857148 ,
            0.8827027 ]], dtype=float32), array([[[[7.2837768, 7.4703517, 7.9233565, ..., 8.621268 , 7.6951756,
              7.520347 ],
             [7.4891663, 7.8429275, 8.508079 , ..., 7.370308 , 6.273216 ,
              6.3773203],
             [8.097989 , 6.3815365, 7.7875295, ..., 8.634732 , 7.976128 ,
              7.4696074],
             ...,
             [5.9984426, 6.043802 , 6.3579583, ..., 6.593217 , 7.3545976,
              7.818921 ],
             [5.447113 , 5.5531006, 6.1011972, ..., 6.7075777, 7.496029 ,
              6.9494658],
             [6.98823  , 6.380397 , 7.225058 , ..., 7.4742613, 7.719006 ,
              7.600912 ]],

            [[7.1760173, 6.969922 , 6.916301 , ..., 7.7601547, 7.0258775,
              7.0527453],
             [6.543208 , 7.83482  , 6.9741707, ..., 7.118996 , 6.448987 ,
              5.8886123],
             [6.731884 , 6.874882 , 7.5325747, ..., 7.698364 , 7.3293433,
              7.8278785],
             ...,
             [6.433748 , 5.8955   , 5.461887 , ..., 6.327452 , 7.0561647,
              7.6026697],
             [5.1209283, 4.5882483, 5.471854 , ..., 6.3803425, 6.76953  ,
              6.3086443],
             [5.950395 , 6.3316836, 6.904038 , ..., 7.7687464, 7.558104 ,
              5.733047 ]],

            [[7.071969 , 6.6530323, 6.377079 , ..., 7.165679 , 6.662589 ,
              6.6552906],
             [6.3782463, 6.8324575, 7.4140797, ..., 7.1211557, 6.267277 ,
              5.930995 ],
             [6.2969713, 6.5806284, 7.0665064, ..., 7.778982 , 6.894369 ,
              6.8446045],
             ...,
             [6.3690996, 5.136484 , 5.2924395, ..., 6.3290396, 7.0290422,
              7.696007 ],
             [5.6303015, 5.1261024, 5.6216965, ..., 6.183816 , 7.187978 ,
              6.120989 ],
             [5.596114 , 6.526    , 6.6997433, ..., 6.878639 , 7.0212317,
              5.8738413]],

            ...,

            [[6.8288093, 5.5379186, 7.3195443, ..., 8.134382 , 6.9902   ,
              6.584599 ],
             [5.928798 , 6.950006 , 6.6206408, ..., 6.9897265, 6.5135365,
              6.7617946],
             [5.940836 , 6.6713967, 7.01965  , ..., 6.818011 , 6.7057977,
              7.0420356],
             ...,
             [5.830525 , 4.7336535, 6.03979  , ..., 6.4050694, 6.8999114,
              6.440472 ],
             [5.103546 , 4.6204963, 5.297385 , ..., 6.705049 , 6.5469985,
              5.979968 ],
             [5.959171 , 5.3152256, 5.53623  , ..., 7.339925 , 7.243483 ,
              6.057599 ]],

            [[6.818566 , 5.921786 , 6.9789553, ..., 7.8440633, 6.8925967,
              7.6127133],
             [6.492689 , 6.628954 , 7.9654913, ..., 7.0879226, 5.999384 ,
              6.699539 ],
             [6.103503 , 7.280075 , 7.134378 , ..., 7.8144283, 6.8732033,
              6.6601715],
             ...,
             [5.662463 , 5.8157535, 6.4215126, ..., 7.2694874, 8.213273 ,
              7.370152 ],
             [5.088153 , 6.376469 , 5.7222433, ..., 6.1642404, 6.590859 ,
              6.7733626],
             [6.2324176, 6.620452 , 6.029947 , ..., 6.8664827, 7.59548  ,
              7.005132 ]],

            [[7.311255 , 7.540045 , 7.9417977, ..., 9.358401 , 8.189809 ,
              8.36306  ],
             [7.679027 , 7.886585 , 8.350942 , ..., 7.6793985, 6.9107804,
              7.0114675],
             [7.749448 , 6.238317 , 8.370962 , ..., 9.15607  , 8.015438 ,
              7.2822986],
             ...,
             [6.618557 , 6.8155456, 6.7465105, ..., 7.302754 , 8.833122 ,
              8.410613 ],
             [5.39423  , 5.95285  , 6.5979104, ..., 6.9046044, 7.5727916,
              6.5781317],
             [6.910727 , 6.720425 , 7.026198 , ..., 7.9956155, 8.134542 ,
              7.694283 ]]]], dtype=float32), array([[[[  372,   377,   382, ...,   115,   119,   244],
             [  744,   500,   631, ...,   859,   985,   867],
             [  992,   996,  1125, ...,  1228,  1109,  1114],
             ...,
             [13891, 13894, 14270, ..., 14248, 14007, 14008],
             [14511, 14515, 14642, ..., 14496, 14503, 14879],
             [15254, 15259, 14889, ..., 15367, 15369, 15003]],

            [[  375,   377,   257, ...,   114,   119,   368],
             [  620,   501,   507, ...,   983,   984,   867],
             [ 1116,  1371,  1125, ...,  1476,  1110,  1112],
             ...,
             [13891, 14017, 14021, ..., 14248, 14007, 14008],
             [14510, 14513, 14766, ..., 14496, 14503, 14879],
             [15255, 15259, 15260, ..., 15243, 15369, 15003]],

            [[  375,   129,   381, ...,   361,   118,   368],
             [  620,   500,   505, ...,   983,   984,   866],
             [  992,  1371,  1373, ...,  1107,  1108,  1114],
             ...,
             [13891, 13895, 14270, ..., 14248, 14255, 14008],
             [14511, 14763, 14766, ..., 14620, 14503, 14879],
             [15254, 15259, 15261, ..., 15119, 15369, 15003]],

            ...,

            [[  127,     6,   381, ...,   237,   119,   121],
             [  744,   501,   629, ...,   983,   986,   988],
             [ 1117,  1123,  1375, ...,  1478,  1110,  1112],
             ...,
             [14138, 13893, 13896, ..., 14372, 14007, 14008],
             [14385, 14639, 14642, ..., 14744, 14503, 14755],
             [14880, 15259, 15260, ..., 15367, 15370, 15373]],

            [[  372,   129,   258, ...,   114,   116,   120],
             [  744,   501,   505, ...,   859,   984,   866],
             [  993,  1123,  1249, ...,  1229,  1109,  1114],
             ...,
             [13890, 14017, 14269, ..., 14248, 14007, 14008],
             [14511, 14639, 14395, ..., 14744, 14501, 14755],
             [14880, 15135, 15013, ..., 15367, 15244, 15126]],

            [[  375,   253,   134, ...,   115,   117,   120],
             [  744,   502,   505, ...,   983,   861,   866],
             [  992,  1120,  1125, ...,  1228,  1110,  1360],
             ...,
             [13891, 14016, 14270, ..., 14373, 14007, 14008],
             [14508, 14514, 14642, ..., 14496, 14503, 14879],
             [15007, 15259, 15260, ..., 15367, 15369, 15126]]]], dtype=int64), array([[8.650833, 8.729345, 7.956744, ..., 8.353842, 9.102577, 8.833122]],
          dtype=float32), array([[119173.87, 119178.26, 120088.93, ..., 119113.76, 119637.62,
            119528.75]], dtype=float32), array([[61590264., 62068728., 61544056., 59653840., 59495720., 61737968.,
            63729524., 60257568., 59921628., 62288416., 59223340., 59715788.,
            59208312., 61928000., 62810752., 60537360., 63521168., 61400156.,
            62194752., 62053316., 60942128., 62004464., 60969808., 60588592.,
            62198680., 60894672., 64113592., 60984168., 62555712., 61341208.,
            60378216., 62627016., 63475896., 59299352., 63861096., 61844568.,
            61077080., 62082928., 61557392., 62121044., 62486620., 62682488.,
            62520152., 62500544., 60843160., 60194488., 62809720., 60365152.,
            60791856., 60753400., 62557968., 61231744., 62218216., 60750792.,
            61677764., 62200272., 61380148., 63438856., 61180552., 62423000.,
            61553708., 61095732., 61623500., 62465640., 61329620., 62796360.,
            60708696., 60576828., 61921776., 61960684., 63116952., 61137840.,
            61674832., 61246304., 62417512., 63408960., 61148432., 62524616.,
            60888940., 61225280., 61138176., 63701000., 63135208., 61141608.,
            62517672., 61555488., 60353264., 61582904., 59744588., 58933284.,
            62007208., 60380000., 61010452., 59595804., 62078520., 60619212.,
            59409620., 62927344., 62172448., 62613192., 60793888., 60679248.,
            61023888., 62226640., 62291168., 59852604., 63676816., 60031248.,
            61312256., 62656952., 60511096., 61773680., 60987896., 60560124.,
            60244468., 61193640., 60259240., 62053728., 62961160., 60455108.,
            59864420., 59506628., 62237088., 59752152., 61627416., 60567968.,
            60022512., 60986968.]], dtype=float32), array([[3.7709827e+09, 3.7108242e+09, 4.0348221e+09, 3.7143547e+09,
            3.9196751e+09, 3.7729027e+09, 3.7935485e+09, 3.7872883e+09,
            3.9031578e+09, 4.0057871e+09]], dtype=float32)]



.. GENERATED FROM PYTHON SOURCE LINES 76-78

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 78-97

.. code-block:: Python


    sess = create_session(script_args.filename, profiling=True)

    for i in range(script_args.repeat):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    if js_profile_to_dataframe is not None:
        df = js_profile_to_dataframe(prof, first_it_out=True)
        print(df.columns)
        df.to_csv("plot_profile_existing_onnx.csv")
        df.to_excel("plot_profile_existing_onnx.xlsx")
        fig, ax = plt.subplots(1, 2, figsize=(10, 5))

        plot_ort_profile(df, ax[0], ax[1], "dort")
        fig.tight_layout()
        fig.savefig("plot_profile_existing_onnx.png")
    else:
        print("Install onnx-extended first.")



.. image-sg:: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_001.png
   :alt: dort, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['cat', 'pid', 'tid', 'dur', 'ts', 'ph', 'name', 'args_op_name',
           'op_name', 'args_thread_scheduling_stats', 'args_output_size',
           'args_parameter_size', 'args_activation_size', 'args_node_index',
           'args_provider', 'event_name', 'iteration', 'it==0'],
          dtype='object')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.953 seconds)


.. _sphx_glr_download_auto_examples_plot_profile_existing_onnx.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_existing_onnx.ipynb <plot_profile_existing_onnx.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_existing_onnx.py <plot_profile_existing_onnx.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
