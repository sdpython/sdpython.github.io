
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_torch_aot_201.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_torch_aot_201.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_torch_aot_201.py:


.. _l-torch-aot-201:

201: Evaluate DORT Training
===========================

It compares DORT to eager mode and :epkg:`onnxrt backend`.

To run the script:

::

    python _doc/examples/plot_torch_aot --help

Some helpers
++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 18-87

.. code-block:: Python


    import warnings

    try:
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            import onnxruntime

            has_cuda = "CUDAExecutionProvider" in onnxruntime.get_available_providers()
    except ImportError:
        print("onnxruntime not available.")
        import sys

        sys.exit(0)

    import torch._dynamo
    import contextlib
    import itertools
    import os
    import gc
    import platform

    # import pickle
    import pprint
    import multiprocessing
    import time
    import cProfile
    import pstats
    import io
    import logging
    from pstats import SortKey

    import numpy as np
    import matplotlib.pyplot as plt
    import pandas
    import onnx
    from onnx_array_api.profiling import profile2graph
    import torch
    from torch import nn
    import torch.nn.functional as F
    import experimental_experiment
    from experimental_experiment.plotting.memory import memory_peak_plot
    from experimental_experiment.ext_test_case import measure_time, get_figure
    from experimental_experiment.args import get_parsed_args
    from experimental_experiment.memory_peak import start_spying_on
    from experimental_experiment.torch_models.training_helper import make_aot_ort
    from tqdm import tqdm

    has_cuda = has_cuda and torch.cuda.is_available()
    logging.disable(logging.ERROR)


    def system_info():
        obs = {}
        obs["processor"] = platform.processor()
        obs["cores"] = multiprocessing.cpu_count()
        try:
            obs["cuda"] = 1 if torch.cuda.is_available() else 0
            obs["cuda_count"] = torch.cuda.device_count()
            obs["cuda_name"] = torch.cuda.get_device_name()
            obs["cuda_capa"] = torch.cuda.get_device_capability()
        except (RuntimeError, AssertionError):
            # no cuda
            pass
        return obs


    pprint.pprint(system_info())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'cores': 20,
     'cuda': 1,
     'cuda_capa': (8, 9),
     'cuda_count': 1,
     'cuda_name': 'NVIDIA GeForce RTX 4060 Laptop GPU',
     'processor': 'x86_64'}




.. GENERATED FROM PYTHON SOURCE LINES 88-89

Scripts arguments

.. GENERATED FROM PYTHON SOURCE LINES 89-118

.. code-block:: Python



    script_args = get_parsed_args(
        "plot_torch_aot",
        description=__doc__,
        scenarios={
            "small": "small model to test",
            "middle": "55Mb model",
            "large": "1Gb model",
        },
        warmup=5,
        repeat=5,
        repeat1=(1, "repeat for the first iteration"),
        maxtime=(
            2,
            "maximum time to run a model to measure the computation time, "
            "it is 0.1 when scenario is small",
        ),
        expose="scenarios,repeat,repeat1,warmup",
    )

    if script_args.scenario in (None, "small"):
        script_args.maxtime = 0.1
    print(f"scenario={script_args.scenario or 'small'}")
    print(f"warmup={script_args.warmup}")
    print(f"repeat={script_args.repeat}")
    print(f"repeat1={script_args.repeat1}")
    print(f"maxtime={script_args.maxtime}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    scenario=small
    warmup=5
    repeat=5
    repeat1=1
    maxtime=0.1




.. GENERATED FROM PYTHON SOURCE LINES 119-123

The model
+++++++++

A simple model to convert.

.. GENERATED FROM PYTHON SOURCE LINES 123-215

.. code-block:: Python



    class MyModelClass(nn.Module):
        def __init__(self, scenario=script_args.scenario):
            super().__init__()
            if scenario == "middle":
                self.large = False
                self.conv1 = nn.Conv2d(1, 32, 5)
                # self.conv2 = nn.Conv2d(128, 16, 5)
                self.fc1 = nn.Linear(30752, 1024)
                self.fcs = []
                self.fc2 = nn.Linear(1024, 128)
                self.fc3 = nn.Linear(128, 10)
            elif scenario in (None, "small"):
                self.large = False
                self.conv1 = nn.Conv2d(1, 16, 5)
                # self.conv2 = nn.Conv2d(16, 16, 5)
                self.fc1 = nn.Linear(144, 512)
                self.fcs = []
                self.fc2 = nn.Linear(512, 128)
                self.fc3 = nn.Linear(128, 10)
            elif scenario in (None, "large"):
                self.large = True
                self.conv1 = nn.Conv2d(1, 32, 5)
                # self.conv2 = nn.Conv2d(128, 16, 5)
                self.fc1 = nn.Linear(30752, 4096)
                # torch script does not support loops.
                self.fca = nn.Linear(4096, 4096)
                self.fcb = nn.Linear(4096, 4096)
                self.fcc = nn.Linear(4096, 4096)
                self.fcd = nn.Linear(4096, 4096)
                self.fce = nn.Linear(4096, 4096)
                self.fcf = nn.Linear(4096, 4096)
                self.fcg = nn.Linear(4096, 4096)
                self.fch = nn.Linear(4096, 4096)
                self.fci = nn.Linear(4096, 4096)
                # end of the unfolded loop.
                self.fc2 = nn.Linear(4096, 128)
                self.fc3 = nn.Linear(128, 10)
            else:
                raise ValueError(f"Unsupported scenario={scenario!r}.")

        def forward(self, x):
            x = F.max_pool2d(F.relu(self.conv1(x)), (4, 4))
            # x = F.max_pool2d(F.relu(self.conv2(x)), 2)
            x = torch.flatten(x, 1)
            x = F.relu(self.fc1(x))
            if self.large:
                # loop
                x = F.relu(self.fca(x))
                x = F.relu(self.fcb(x))
                x = F.relu(self.fcc(x))
                x = F.relu(self.fcd(x))
                x = F.relu(self.fce(x))
                x = F.relu(self.fcf(x))
                x = F.relu(self.fcg(x))
                x = F.relu(self.fch(x))
                x = F.relu(self.fci(x))
                # end of the loop
            x = F.relu(self.fc2(x))
            y = self.fc3(x)
            return y


    def create_model_and_input(scenario=script_args.scenario):
        if scenario == "middle":
            shape = [1, 1, 128, 128]
        elif scenario in (None, "small"):
            shape = [1, 1, 16, 16]
        elif scenario == "large":
            shape = [1, 1, 128, 128]
        else:
            raise ValueError(f"Unsupported scenario={scenario!r}.")
        input_tensor = torch.rand(*shape).to(torch.float32)
        y = torch.rand((1, 10)).to(torch.float32)
        model = MyModelClass(scenario=scenario)
        assert model(input_tensor) is not None
        return model, (input_tensor, y)


    def torch_model_size(model):
        size_model = 0
        for param in model.parameters():
            size = param.numel() * torch.finfo(param.data.dtype).bits / 8
            size_model += size
        return size_model


    model, input_tensors = create_model_and_input()
    model_size = torch_model_size(model)
    print(f"model size={model_size / 2 ** 20} Mb")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    model size=0.5401992797851562 Mb




.. GENERATED FROM PYTHON SOURCE LINES 216-218

Backends
++++++++

.. GENERATED FROM PYTHON SOURCE LINES 218-271

.. code-block:: Python



    def run(model, tensor_x, tensor_y):
        tensor_x = tensor_x.detach()
        tensor_y = tensor_y.detach()
        for param in model.parameters():
            param.grad = None
        try:
            output = model(tensor_x)
        except Exception as e:
            raise AssertionError(f"issue with {type(tensor_x)}") from e
        loss = F.mse_loss(output, tensor_y)

        # return loss
        def _backward_():
            loss.backward()

        _backward_()
        return loss, (param.grad for param in model.parameters())


    def get_torch_eager(model, *args):
        def my_compiler(gm, example_inputs):
            return gm.forward

        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, fullgraph=True, backend=my_compiler)
                assert run(optimized_mod, *args)
                return optimized_mod


    def get_torch_default(model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, fullgraph=True, mode="reduce-overhead")
                assert run(optimized_mod, *args)
                return optimized_mod


    def get_torch_dort(model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                local_aot_ort, _ = make_aot_ort(dynamic=True, rewrite=True)
                optimized_mod = torch.compile(model, backend=local_aot_ort, fullgraph=True)
                run(optimized_mod, *args)
                assert run(optimized_mod, *args)
                return optimized_mod









.. GENERATED FROM PYTHON SOURCE LINES 272-273

Let's check they are working.

.. GENERATED FROM PYTHON SOURCE LINES 273-299

.. code-block:: Python


    export_functions = [
        get_torch_eager,
        get_torch_default,
        get_torch_dort,
    ]

    exporters = {f.__name__.replace("get_", ""): f for f in export_functions}

    supported_exporters = {}
    for k, v in exporters.items():
        print(f"run function {k}")
        filename = f"plot_torch_aot_{k}.onnx"
        torch._dynamo.reset()
        model, input_tensors = create_model_and_input()
        try:
            run(model, *input_tensors)
        except Exception as e:
            print(f"skipped due to {str(e)[:1000]}")  # noqa: F821
            continue
        supported_exporters[k] = v
        del model
        gc.collect()
        time.sleep(1)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run function torch_eager
    run function torch_default
    run function torch_dort




.. GENERATED FROM PYTHON SOURCE LINES 300-302

Compile and Memory
++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 302-351

.. code-block:: Python



    def flatten(ps):
        obs = ps["cpu"].to_dict(unit=2**20)
        if "gpus" in ps:
            for i, g in enumerate(ps["gpus"]):
                for k, v in g.to_dict(unit=2**20).items():
                    obs[f"gpu{i}_{k}"] = v
        return obs


    data = []

    for k in supported_exporters:
        print(f"run compile for memory {k} on cpu")
        filename = f"plot_torch_aot_{k}.onnx"
        if has_cuda:
            torch.cuda.set_device(0)
        torch._dynamo.reset()
        # CPU
        model, input_tensors = create_model_and_input()
        stat = start_spying_on(cuda=1 if has_cuda else 0)
        run(model, *input_tensors)
        obs = flatten(stat.stop())
        print("done.")
        obs.update(dict(export=k, p="cpu"))
        data.append(obs)
        del model
        gc.collect()
        time.sleep(1)

        if not has_cuda:
            continue
        torch._dynamo.reset()
        # CUDA
        model, input_tensors = create_model_and_input()
        model = model.cuda()
        input_tensors = [i.cuda() for i in input_tensors]
        print(f"run compile for memory {k} on cuda")
        stat = start_spying_on(cuda=1 if has_cuda else 0)
        run(model, *input_tensors)
        obs = flatten(stat.stop())
        print("done.")
        obs.update(dict(export=k, p="cuda"))
        data.append(obs)
        del model
        gc.collect()
        time.sleep(1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run compile for memory torch_eager on cpu
    done.
    run compile for memory torch_eager on cuda
    done.
    run compile for memory torch_default on cpu
    done.
    run compile for memory torch_default on cuda
    done.
    run compile for memory torch_dort on cpu
    done.
    run compile for memory torch_dort on cuda
    done.




.. GENERATED FROM PYTHON SOURCE LINES 352-353

The result.

.. GENERATED FROM PYTHON SOURCE LINES 353-370

.. code-block:: Python

    df1 = pandas.DataFrame(data)
    df1.to_csv("plot_torch_aot_1_memory.csv", index=False)
    df1.to_excel("plot_torch_aot_1_memory.xlsx", index=False)
    print(df1)

    for p in ["cpu", "cuda"]:
        if not has_cuda and p == "cuda":
            continue
        ax = memory_peak_plot(
            df1[df1["p"] == p],
            key=("export",),
            bars=[model_size * i / 2**20 for i in range(1, 5)],
            suptitle=f"Memory Consumption of the Compilation on {p}\n"
            f"model size={model_size / 2**20:1.0f} Mb",
        )
        get_figure(ax).savefig(f"plot_torch_aot_1_memory_{p}.png")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_aot_201_001.png
         :alt: Memory Consumption of the Compilation on cpu model size=1 Mb, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_aot_201_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_aot_201_002.png
         :alt: Memory Consumption of the Compilation on cuda model size=1 Mb, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_aot_201_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              peak         mean   n        begin          end    gpu0_peak    gpu0_mean  gpu0_n   gpu0_begin     gpu0_end         export     p
    0  6473.878906  6472.151855   8  6473.878906  6471.914062  1577.617188  1577.617188       8  1577.617188  1577.617188    torch_eager   cpu
    1  6476.925781  6473.377232   7  6471.914062  6476.925781  1605.617188  1600.474330       7  1577.617188  1605.617188    torch_eager  cuda
    2  6478.910156  6478.908026  11  6478.910156  6478.910156  1605.617188  1605.617188      11  1605.617188  1605.617188  torch_default   cpu
    3  6478.976562  6478.954427   3  6478.910156  6478.976562  1605.617188  1605.617188       3  1605.617188  1605.617188  torch_default  cuda
    4  6479.015625  6477.930990  15  6479.015625  6476.996094  1605.617188  1605.617188      15  1605.617188  1605.617188     torch_dort   cpu
    5  6477.003906  6477.003906   3  6477.003906  6477.003906  1605.617188  1605.617188       3  1605.617188  1605.617188     torch_dort  cuda




.. GENERATED FROM PYTHON SOURCE LINES 371-373

dort first iteration speed
++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 373-436

.. code-block:: Python


    data = []

    for k in supported_exporters:
        print(f"run dort cpu {k}: {script_args.repeat1}")
        times = []
        for _ in range(int(script_args.repeat1)):
            model, input_tensors = create_model_and_input()
            torch._dynamo.reset()
            begin = time.perf_counter()
            run(model, *input_tensors)
            duration = time.perf_counter() - begin
            times.append(duration)
            del model
            gc.collect()
            time.sleep(1)

        print(f"done: {times[-1]}")
        data.append(
            dict(
                export=k,
                time=np.mean(times),
                min=min(times),
                max=max(times),
                first=times[0],
                last=times[-1],
                std=np.std(times),
                p="cpu",
            )
        )

        if not has_cuda:
            continue

        print(f"run dort cuda {k}: {script_args.repeat1}")
        times = []
        for i in range(int(script_args.repeat1)):
            model, input_tensors = create_model_and_input()
            model = model.cuda()
            input_tensors = [i.cuda() for i in input_tensors]
            torch._dynamo.reset()
            begin = time.perf_counter()
            run(model, *input_tensors)
            duration = time.perf_counter() - begin
            times.append(duration)
            del model
            gc.collect()
            time.sleep(1)

        print(f"done: {times[-1]}")
        data.append(
            dict(
                export=k,
                time=np.mean(times),
                min=min(times),
                max=max(times),
                first=times[0],
                last=times[-1],
                std=np.std(times),
                p="cuda",
            )
        )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run dort cpu torch_eager: 1
    done: 0.09646514500036574
    run dort cuda torch_eager: 1
    done: 0.0054936589999670105
    run dort cpu torch_default: 1
    done: 0.09184145399967747
    run dort cuda torch_default: 1
    done: 0.004193444999600615
    run dort cpu torch_dort: 1
    done: 0.07428595999999743
    run dort cuda torch_dort: 1
    done: 0.00433121600008235




.. GENERATED FROM PYTHON SOURCE LINES 437-438

The result.

.. GENERATED FROM PYTHON SOURCE LINES 438-449

.. code-block:: Python

    df1 = pandas.DataFrame(data)
    df1.to_csv("plot_torch_aot_1_time.csv", index=False)
    df1.to_excel("plot_torch_aot_1_time.xlsx", index=False)
    print(df1)

    fig, ax = plt.subplots(1, 1)
    dfi = df1[["export", "p", "time", "std"]].set_index(["export", "p"])
    dfi["time"].plot.bar(ax=ax, title="Compilation time", yerr=dfi["std"], rot=30)
    fig.tight_layout()
    fig.savefig("plot_torch_aot_1_time.png")




.. image-sg:: /auto_examples/images/sphx_glr_plot_torch_aot_201_003.png
   :alt: Compilation time
   :srcset: /auto_examples/images/sphx_glr_plot_torch_aot_201_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              export      time       min       max     first      last  std     p
    0    torch_eager  0.096465  0.096465  0.096465  0.096465  0.096465  0.0   cpu
    1    torch_eager  0.005494  0.005494  0.005494  0.005494  0.005494  0.0  cuda
    2  torch_default  0.091841  0.091841  0.091841  0.091841  0.091841  0.0   cpu
    3  torch_default  0.004193  0.004193  0.004193  0.004193  0.004193  0.0  cuda
    4     torch_dort  0.074286  0.074286  0.074286  0.074286  0.074286  0.0   cpu
    5     torch_dort  0.004331  0.004331  0.004331  0.004331  0.004331  0.0  cuda




.. GENERATED FROM PYTHON SOURCE LINES 450-452

Compilation Profiling
+++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 452-519

.. code-block:: Python



    def clean_text(text):
        pathes = [
            os.path.abspath(os.path.normpath(os.path.join(os.path.dirname(torch.__file__), ".."))),
            os.path.abspath(os.path.normpath(os.path.join(os.path.dirname(onnx.__file__), ".."))),
            os.path.abspath(
                os.path.normpath(
                    os.path.join(os.path.dirname(experimental_experiment.__file__), "..")
                )
            ),
        ]
        for p in pathes:
            text = text.replace(p, "")
        text = text.replace("experimental_experiment", "experimental_experiment".upper())
        return text


    def profile_function(name, export_function, with_args=True, verbose=False, suffix="export"):
        if verbose:
            print(f"profile {name}: {export_function}")
        if with_args:
            model, input_tensors = create_model_and_input()
            export_function(model, input_tensors)
            pr = cProfile.Profile()
            pr.enable()
            for _ in range(int(script_args.repeat1)):
                export_function(model, input_tensors)
            pr.disable()
        else:
            pr = cProfile.Profile()
            pr.enable()
            for _ in range(int(script_args.repeat1)):
                export_function()
            pr.disable()
        s = io.StringIO()
        sortby = SortKey.CUMULATIVE
        ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
        ps.print_stats()
        # with open(f"plot_torch_aot_profile_{name}_{suffix}.pickle", "wb") as f:
        #     pickle.dump(ps, f)

        raw = s.getvalue()
        text = "\n".join(raw.split("\n")[:200])
        if verbose:
            print(text)
        with open(f"plot_torch_aot_profile_{name}_{suffix}.txt", "w") as f:
            f.write(raw)

        root, nodes = profile2graph(ps, clean_text=clean_text)
        text = root.to_text()
        with open(f"plot_torch_aot_profile_{name}_{suffix}_h.txt", "w") as f:
            f.write(text)
        if verbose:
            print("done.")


    model, input_tensors = create_model_and_input()


    def function_to_profile(model=model, input_tensors=input_tensors):
        return get_torch_dort(model, *input_tensors)


    profile_function("dort", function_to_profile, verbose=True, suffix="1")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    profile dort: <function function_to_profile at 0x7fa8be79b6a0>
             1640971 function calls (1602230 primitive calls) in 2.426 seconds

       Ordered by: cumulative time

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
         13/8    0.000    0.000    0.998    0.125 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/symbolic_convert.py:903(call_function)
         16/5    0.000    0.000    0.987    0.197 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/lazy.py:197(realize_and_forward)
            1    0.000    0.000    0.829    0.829 /home/xadupre/github/experimental-experiment/experimental_experiment/torch_models/training_helper.py:7(make_aot_ort)
            1    0.000    0.000    0.828    0.828 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/onnxruntime.py:751(__init__)
            1    0.000    0.000    0.728    0.728 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/_exporter_legacy.py:307(__init__)
            1    0.000    0.000    0.438    0.438 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/_exporter_legacy.py:96(__init__)
            1    0.002    0.002    0.438    0.438 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/_exporter_legacy.py:120(_initiate_registry_from_torchlib)
            1    0.008    0.008    0.431    0.431 /home/xadupre/github/onnxscript/onnxscript/_framework_apis/torch_2_5.py:82(get_torchlib_ops)
          192    0.003    0.000    0.420    0.002 /home/xadupre/github/onnxscript/onnxscript/values.py:640(function_ir)
            1    0.001    0.001    0.290    0.290 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/fx/decomposition_table.py:73(create_onnx_friendly_decomposition_table)
      593/496    0.001    0.000    0.269    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_ops.py:748(__call__)
            2    0.043    0.022    0.214    0.107 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/fx/decomposition_table.py:14(_create_onnx_supports_op_overload_table)
          128    0.038    0.000    0.201    0.002 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_subclasses/functional_tensor.py:352(__torch_dispatch__)
          192    0.002    0.000    0.167    0.001 /home/xadupre/github/onnxscript/onnxscript/_internal/ast_utils.py:16(get_src_and_ast)
            1    0.000    0.000    0.162    0.162 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/export/decomp_utils.py:125(items)
            1    0.000    0.000    0.162    0.162 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/export/decomp_utils.py:142(_materialize_if_needed)
            1    0.000    0.000    0.162    0.162 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/export/decomp_utils.py:129(materialize)
            1    0.000    0.000    0.160    0.160 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_export/utils.py:1088(_collect_all_valid_cia_ops)
           25    0.003    0.000    0.160    0.006 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_export/utils.py:1071(_collect_all_valid_cia_ops_for_namespace)
           25    0.056    0.002    0.145    0.006 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_export/utils.py:1006(_materialize_cpp_cia_ops)
            2    0.000    0.000    0.142    0.071 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/onnxruntime.py:1087(compile)
            2    0.000    0.000    0.138    0.069 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/passes/infra/partitioner.py:385(partition_and_fuse)
      591/586    0.007    0.000    0.135    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py:1781(dispatch)
            2    0.000    0.000    0.133    0.066 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/passes/infra/partitioner.py:298(fuse_partitions)
            2    0.000    0.000    0.133    0.066 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/passes/utils/fuser_utils.py:250(fuse_by_partitions)
            1    0.000    0.000    0.128    0.128 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/backends/common.py:52(_wrapped_bw_compiler)
          192    0.001    0.000    0.128    0.001 /home/xadupre/github/onnxscript/onnxscript/converter.py:1466(translate_function_signature)
          192    0.009    0.000    0.127    0.001 /home/xadupre/github/onnxscript/onnxscript/converter.py:1381(_translate_function_signature_common)
          212    0.002    0.000    0.126    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py:1341(_cached_dispatch_impl)
           82    0.000    0.000    0.126    0.002 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/interpreter.py:294(call_function)
          193    0.000    0.000    0.120    0.001 /usr/lib/python3.12/inspect.py:1279(getsource)
          193    0.009    0.000    0.119    0.001 /usr/lib/python3.12/inspect.py:1258(getsourcelines)
          192    0.009    0.000    0.117    0.001 /usr/lib/python3.12/inspect.py:1606(getclosurevars)
    185860/180857    0.055    0.000    0.114    0.000 {built-in method builtins.isinstance}
      297/276    0.002    0.000    0.112    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py:1327(__torch_dispatch__)
            1    0.000    0.000    0.108    0.108 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_functorch/partitioners.py:1728(min_cut_rematerialization_partition)
       103/35    0.001    0.000    0.105    0.003 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/symbolic_convert.py:960(step)
         8622    0.041    0.000    0.103    0.000 /usr/lib/python3.12/dis.py:434(_get_instructions_bytes)
        16792    0.014    0.000    0.100    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/_exporter_legacy.py:205(is_registered_op)
        69/54    0.004    0.000    0.100    0.002 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py:760(proxy_call)
         12/6    0.000    0.000    0.096    0.016 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/symbolic_convert.py:678(wrapper)
         12/6    0.000    0.000    0.095    0.016 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/symbolic_convert.py:2376(CALL)
         12/6    0.000    0.000    0.095    0.016 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/symbolic_convert.py:2335(_call)
          192    0.027    0.000    0.094    0.000 /usr/lib/python3.12/inspect.py:1239(getblock)
            8    0.000    0.000    0.089    0.011 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/fx/_pass.py:240(run)
        16851    0.020    0.000    0.087    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/_exporter_legacy.py:183(get_op_functions)
            4    0.000    0.000    0.087    0.022 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py:1691(_run)
           86    0.001    0.000    0.079    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py:1596(run_node)
    7798/1897    0.017    0.000    0.076    0.000 /home/xadupre/github/onnxscript/onnxscript/type_annotation.py:131(is_value_type)
           11    0.000    0.000    0.075    0.007 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph.py:1558(python_code)
          590    0.018    0.000    0.073    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph.py:1100(create_node)
           12    0.000    0.000    0.072    0.006 /home/xadupre/github/onnxscript/onnxscript/rewriter/__init__.py:28(rewrite)
           28    0.000    0.000    0.070    0.002 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/symbolic_convert.py:1824(LOAD_ATTR)
           28    0.000    0.000    0.069    0.002 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/symbolic_convert.py:1817(_load_attr)
            4    0.000    0.000    0.066    0.017 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/nn_module.py:854(call_function)
          397    0.003    0.000    0.066    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph.py:1489(node_copy)
       104639    0.063    0.000    0.065    0.000 {built-in method builtins.getattr}
          5/4    0.000    0.000    0.064    0.016 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/functions.py:299(call_function)
          5/4    0.000    0.000    0.064    0.016 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/functions.py:114(call_function)
           13    0.000    0.000    0.064    0.005 {built-in method torch._to_functional_tensor}
    30158/29718    0.014    0.000    0.061    0.000 {built-in method builtins.next}
          5/4    0.000    0.000    0.061    0.015 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/symbolic_convert.py:925(inline_user_function_return)
          5/4    0.000    0.000    0.061    0.015 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/symbolic_convert.py:3108(inline_call)
          5/4    0.000    0.000    0.060    0.015 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/symbolic_convert.py:3240(inline_call_)
        27889    0.033    0.000    0.059    0.000 /usr/lib/python3.12/tokenize.py:569(_generate_tokens_from_c_tokenizer)
      6330/50    0.007    0.000    0.059    0.001 /home/xadupre/github/onnxscript/onnxscript/ir/serde.py:95(wrapper)
           11    0.000    0.000    0.059    0.005 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph.py:1635(_python_code)
           11    0.004    0.000    0.059    0.005 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph.py:397(_gen_python_code)
         1641    0.059    0.000    0.059    0.000 {built-in method builtins.compile}
            4    0.000    0.000    0.058    0.014 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/passes/utils/fuser_utils.py:95(fuse_as_graphmodule)
            8    0.000    0.000    0.057    0.007 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph_module.py:794(recompile)
          198    0.001    0.000    0.056    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py:1715(_output_from_cache_entry)
      428/388    0.001    0.000    0.056    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py:1229(__torch_function__)
      143/114    0.001    0.000    0.055    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/module.py:1942(__setattr__)
    11524/5330    0.033    0.000    0.055    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/node.py:900(map_aggregate)
          167    0.003    0.000    0.055    0.000 /home/xadupre/github/onnxscript/onnxscript/optimizer/_legacy/constant_folding.py:165(process_node)
          202    0.006    0.000    0.055    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py:1649(_get_output_tensor_from_cache_entry)
         6208    0.015    0.000    0.055    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/node.py:870(__setattr__)
           13    0.000    0.000    0.054    0.004 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph_module.py:550(graph)
           14    0.000    0.000    0.052    0.004 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py:2587(from_tensor)
          212    0.002    0.000    0.052    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py:1384(_cache_key)
          314    0.001    0.000    0.052    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/utils/_pytree.py:1157(tree_map_only)
           10    0.000    0.000    0.052    0.005 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph_module.py:437(__init__)
         1067    0.001    0.000    0.049    0.000 /home/xadupre/github/onnxscript/onnxscript/type_annotation.py:172(is_valid_type)
          6/2    0.000    0.000    0.049    0.024 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py:397(run_node)
      804/219    0.006    0.000    0.049    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py:1460(_prep_args_for_hash)
          3/2    0.000    0.000    0.049    0.024 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py:560(placeholder)
          3/2    0.000    0.000    0.048    0.024 /home/xadupre/github/onnxscript/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py:613(add_input)
        27/14    0.001    0.000    0.048    0.003 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py:322(from_real_tensor)
            4    0.002    0.000    0.048    0.012 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_functorch/partitioners.py:159(_extract_graph_with_inputs_outputs)
            4    0.000    0.000    0.046    0.011 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/passes/utils/common.py:26(lift_subgraph_as_module)
         67/2    0.000    0.000    0.045    0.023 /home/xadupre/github/onnxscript/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py:270(_wrap_torch_value_to_tensor)
          4/2    0.264    0.066    0.045    0.023 /home/xadupre/github/onnxscript/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py:199(dtype)
          4/2    0.264    0.066    0.045    0.022 /home/xadupre/github/onnxscript/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py:170(shape)
        10074    0.020    0.000    0.042    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/fx/registration.py:55(from_qualified_name)
        31/29    0.000    0.000    0.041    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/builtin.py:1062(call_function)
        42256    0.023    0.000    0.041    0.000 {method 'get' of 'dict' objects}
           29    0.000    0.000    0.041    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/builtin.py:915(builtin_dispatch)
           28    0.000    0.000    0.041    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/builtin.py:835(call_self_handler)
           28    0.000    0.000    0.040    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/builtin.py:1703(call_getattr)
          142    0.000    0.000    0.039    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/lazy.py:64(realize)
        51/35    0.000    0.000    0.039    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/nn_module.py:1018(var_getattr)
    1545/1353    0.001    0.000    0.039    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/base.py:184(__instancecheck__)
           75    0.000    0.000    0.038    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/base.py:446(build)
            1    0.000    0.000    0.038    0.038 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_functorch/partitioners.py:291(_extract_fwd_bwd_modules)
          370    0.004    0.000    0.038    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph.py:623(emit_node)
          192    0.001    0.000    0.038    0.000 /usr/lib/python3.12/ast.py:34(parse)
        35/19    0.003    0.000    0.038    0.002 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/user_defined.py:1039(var_getattr)
           20    0.000    0.000    0.037    0.002 /home/xadupre/github/onnxscript/onnxscript/ir/serde.py:503(deserialize_model)
           75    0.001    0.000    0.037    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/builder.py:372(__call__)
        16851    0.013    0.000    0.036    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/fx/registration.py:45(from_name_parts)
         3697    0.005    0.000    0.036    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/node.py:891(map_arg)
    2874/2655    0.003    0.000    0.036    0.000 /usr/lib/python3.12/contextlib.py:132(__enter__)
         12/9    0.000    0.000    0.036    0.004 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/functional.py:1693(relu)
           40    0.001    0.000    0.035    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/builder.py:517(_wrap)
            9    0.000    0.000    0.035    0.004 {built-in method torch.relu}
           20    0.001    0.000    0.034    0.002 /home/xadupre/github/onnxscript/onnxscript/ir/serde.py:593(_deserialize_graph)
           36    0.000    0.000    0.034    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/lazy.py:22(realize)
           12    0.000    0.000    0.032    0.003 /home/xadupre/github/onnxscript/onnxscript/rewriter/pattern.py:1608(apply_to_model)
           20    0.000    0.000    0.032    0.002 /home/xadupre/github/onnxscript/onnxscript/optimizer/_remove_unused_function.py:64(remove_unused_functions)
           31    0.000    0.000    0.032    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_subclasses/meta_utils.py:1789(__call__)
        70014    0.032    0.000    0.032    0.000 {method 'split' of 'str' objects}
         7798    0.008    0.000    0.031    0.000 /home/xadupre/github/onnxscript/onnxscript/type_annotation.py:123(_is_tensor_type)
           31    0.001    0.000    0.031    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_subclasses/meta_utils.py:831(meta_tensor)
           12    0.002    0.000    0.030    0.003 /home/xadupre/github/onnxscript/onnxscript/rewriter/pattern.py:1538(_apply_to_graph_or_function)
         12/9    0.001    0.000    0.030    0.003 {built-in method torch._C._nn.linear}
          836    0.004    0.000    0.029    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/node.py:571(__update_args_kwargs)
          614    0.004    0.000    0.029    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/node.py:375(prepend)
           18    0.000    0.000    0.029    0.002 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/utils.py:2505(wrap_fake_exception)
          112    0.001    0.000    0.029    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/proxy.py:211(create_proxy)
          566    0.005    0.000    0.028    0.000 /home/xadupre/github/onnxscript/onnxscript/_legacy_ir/visitor.py:557(process_node)
          632    0.002    0.000    0.028    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/utils/_pytree.py:875(tree_flatten)
          830    0.001    0.000    0.028    0.000 /home/xadupre/github/onnxscript/onnxscript/type_annotation.py:168(is_attr_type)
            9    0.000    0.000    0.027    0.003 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/builder.py:1574(wrap_tensor)
         2553    0.002    0.000    0.027    0.000 /home/xadupre/github/onnxscript/onnxscript/rewriter/pattern.py:1345(try_rewrite)
     1973/632    0.007    0.000    0.026    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/utils/_pytree.py:883(helper)
         1441    0.003    0.000    0.026    0.000 /home/xadupre/github/onnxscript/onnxscript/converter.py:451(_eval_constant_expr)
        27698    0.014    0.000    0.026    0.000 /usr/lib/python3.12/collections/__init__.py:447(_make)
           59    0.000    0.000    0.026    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py:98(dispatch)
            9    0.000    0.000    0.026    0.003 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/torch.py:942(call_function)
            2    0.000    0.000    0.025    0.013 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/passes/tools_common.py:247(legalize_graph)
            4    0.000    0.000    0.025    0.006 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/overrides.py:1670(handle_torch_function)
           31    0.001    0.000    0.025    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/autograd/grad_mode.py:273(__exit__)
           61    0.000    0.000    0.024    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py:592(track_tensor_tree)
        17361    0.020    0.000    0.024    0.000 /usr/lib/python3.12/dis.py:623(_unpack_opargs)
           24    0.000    0.000    0.024    0.001 /home/xadupre/github/onnxscript/onnxscript/optimizer/_legacy/_simple_function_folding.py:30(visit_model)
            4    0.000    0.000    0.023    0.006 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_functorch/aot_autograd.py:490(convert)
            3    0.000    0.000    0.023    0.008 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph_module.py:914(print_readable)
            3    0.000    0.000    0.023    0.008 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph_module.py:297(_print_readable)
           20    0.000    0.000    0.023    0.001 /home/xadupre/github/onnxscript/onnxscript/ir/serde.py:1029(serialize_model)
        76/61    0.000    0.000    0.023    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py:614(wrap_with_proxy)
          331    0.004    0.000    0.023    0.000 /home/xadupre/github/onnxscript/onnxscript/ir/serde.py:924(_deserialize_node)
           20    0.000    0.000    0.023    0.001 /home/xadupre/github/onnxscript/onnxscript/ir/serde.py:1033(serialize_model_into)
         3553    0.003    0.000    0.022    0.000 {built-in method builtins.repr}
           20    0.002    0.000    0.022    0.001 /home/xadupre/github/onnxscript/onnxscript/ir/serde.py:1194(serialize_graph_into)
            1    0.000    0.000    0.022    0.022 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_functorch/partitioners.py:1491(choose_saved_values_set)
            1    0.001    0.001    0.022    0.022 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_functorch/partitioners.py:816(solve_min_cut)
          261    0.006    0.000    0.022    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py:947(_flatten_into)
           99    0.001    0.000    0.022    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph.py:1170(erase_node)
         8301    0.007    0.000    0.021    0.000 /home/xadupre/github/onnxscript/onnxscript/type_annotation.py:70(_remove_annotation)
         2074    0.003    0.000    0.021    0.000 /home/xadupre/github/onnxscript/onnxscript/rewriter/pattern.py:1218(match)
    2874/2655    0.004    0.000    0.021    0.000 /usr/lib/python3.12/contextlib.py:141(__exit__)
          114    0.001    0.000    0.020    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/proxy.py:145(create_node)
          193    0.007    0.000    0.020    0.000 /usr/lib/python3.12/dis.py:647(findlabels)
            4    0.000    0.000    0.020    0.005 /home/xadupre/github/onnxscript/onnxscript/rewriter/onnxruntime/__init__.py:28(rewrite)
    117420/117307    0.020    0.000    0.020    0.000 {built-in method builtins.len}
         1949    0.001    0.000    0.020    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/node.py:600(__repr__)
          317    0.006    0.000    0.019    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py:670(__new__)
          448    0.001    0.000    0.019    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/utils/_pytree.py:1102(wrapped)
          261    0.005    0.000    0.019    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py:967(extract_tensor_metadata)
        216/2    0.005    0.000    0.019    0.009 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py:66(wrapper)
         1102    0.014    0.000    0.019    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph.py:1609(node_repr)
           16    0.000    0.000    0.018    0.001 /home/xadupre/github/onnxscript/onnxscript/optimizer/_legacy/_simple_function_folding.py:204(inline_simple_functions)
            7    0.001    0.000    0.018    0.003 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph.py:1804(eliminate_dead_code)
           18    0.000    0.000    0.018    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/builder.py:2190(wrap_fx_proxy)
            4    0.012    0.003    0.018    0.004 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/passes/utils/fuser_utils.py:213(insert_subgm)
           18    0.000    0.000    0.018    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/builder.py:2263(wrap_fx_proxy_cls)
            4    0.000    0.000    0.018    0.004 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/passes/utils/fuser_utils.py:243(erase_nodes)
          435    0.002    0.000    0.018    0.000 /home/xadupre/github/onnxscript/onnxscript/ir/serde.py:695(deserialize_value_info_proto)
            9    0.000    0.000    0.018    0.002 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/builder.py:2857(wrap_to_fake_tensor_and_record)
          167    0.010    0.000    0.018    0.000 /home/xadupre/github/onnx/onnx/shape_inference.py:99(infer_node_outputs)
          604    0.004    0.000    0.017    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/node.py:238(__init__)
           25    0.017    0.001    0.017    0.001 {built-in method torch._C._dispatch_get_registrations_for_dispatch_key}
           15    0.003    0.000    0.017    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/graph.py:1695(lint)
         2874    0.011    0.000    0.017    0.000 /usr/lib/python3.12/contextlib.py:299(helper)
            9    0.000    0.000    0.016    0.002 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_dynamo/variables/builder.py:2894(<lambda>)
           20    0.000    0.000    0.016    0.001 /home/xadupre/github/onnxscript/onnxscript/optimizer/_remove_unused.py:101(remove_unused_nodes)
            1    0.001    0.001    0.016    0.016 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_functorch/compile_utils.py:42(fx_graph_cse)
       120/13    0.001    0.000    0.016    0.001 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/interpreter.py:216(run_node)
        69/54    0.000    0.000    0.016    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py:2246(maybe_handle_decomp)
            1    0.000    0.000    0.016    0.016 <class 'networkx.utils.decorators.argmap'> compilation 4:1(argmap_minimum_cut_1)
          6/1    0.000    0.000    0.016    0.016 /home/xadupre/vv/this312/lib/python3.12/site-packages/networkx/utils/backends.py:959(__call__)
            1    0.000    0.000    0.016    0.016 /home/xadupre/vv/this312/lib/python3.12/site-packages/networkx/algorithms/flow/maxflow.py:307(minimum_cut)
            1    0.000    0.000    0.016    0.016 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_functorch/partitioners.py:547(reordering_to_mimic_autograd_engine)
      813/669    0.005    0.000    0.016    0.000 /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/fx/experimental/recording.py:238(wrapper)
    done.




.. GENERATED FROM PYTHON SOURCE LINES 520-522

Benchmark exported models with ORT
++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 522-618

.. code-block:: Python



    def benchmark(shape):
        data = []
        data_mem_first_run = []
        data_mem_run = []
        confs = list(
            itertools.product(
                export_functions,
                ["CPU", "CUDA"],
            )
        )
        loop = tqdm(confs)
        print(f"number of experiments: {len(loop)}")
        for export_fct, p in loop:
            name = export_fct.__name__.replace("get_torch_", "")
            obs = {}  # system_info()
            obs["name"] = name
            obs["compute"] = p
            obs["export"] = name

            model, input_tensors = create_model_and_input()
            if p == "CUDA":
                if not has_cuda:
                    continue
                model = model.cuda()
                input_tensors = [i.cuda() for i in input_tensors]
            try:
                exported_model = export_fct(model, *input_tensors)
            except Exception as e:
                obs["error"] = str(e)
                data.append(obs)
                continue

            def call_model(
                export_fct=export_fct,
                exported_model=exported_model,
                input_tensors=input_tensors,
            ):
                res = run(exported_model, *input_tensors)
                return res

            stat = start_spying_on(cuda=1 if has_cuda else 0)
            try:
                call_model()
            except Exception as e:
                loop.set_description(f"ERROR-run: {name} {e}")
                obs.update({"error": e, "step": "load"})
                data.append(obs)
                stat.stop()
                continue
            memobs = flatten(stat.stop())
            memobs.update(obs)
            data_mem_first_run.append(memobs)

            # memory consumption
            stat = start_spying_on(cuda=1 if has_cuda else 0)
            for _ in range(0, script_args.warmup):
                call_model()
            memobs = flatten(stat.stop())
            memobs.update(obs)
            data_mem_run.append(memobs)

            obs.update(
                measure_time(
                    call_model,
                    max_time=script_args.maxtime,
                    repeat=script_args.repeat,
                    number=1,
                )
            )

            profile_function(name, call_model, with_args=False, suffix=f"run_{p}")

            loop.set_description(f"{obs['average']} {name} {p}")
            data.append(obs)
            del model
            del exported_model
            gc.collect()
            time.sleep(1)

        df = pandas.DataFrame(data)
        df.to_csv("plot_torch_aot_ort_time.csv", index=False)
        df.to_excel("plot_torch_aot_ort_time.xlsx", index=False)
        dfmemr = pandas.DataFrame(data_mem_run)
        dfmemr.to_csv("plot_torch_aot_ort_run_mem.csv", index=False)
        dfmemr.to_excel("plot_torch_aot_ort_run_mem.xlsx", index=False)
        dfmemfr = pandas.DataFrame(data_mem_first_run)
        dfmemfr.to_csv("plot_torch_aot_ort_first_run_mem.csv", index=False)
        dfmemfr.to_excel("plot_torch_aot_ort_first_run_mem.xlsx", index=False)
        return df, dfmemfr, dfmemr


    df, dfmemfr, dfmemr = benchmark(list(input_tensors[0].shape))
    print(df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/6 [00:00<?, ?it/s]number of experiments: 6
    0.0036753388333181647 eager CPU:   0%|          | 0/6 [00:00<?, ?it/s]    0.0036753388333181647 eager CPU:  17%|█▋        | 1/6 [00:02<00:10,  2.20s/it]    0.004845859999997109 eager CUDA:  17%|█▋        | 1/6 [00:02<00:10,  2.20s/it]    0.004845859999997109 eager CUDA:  33%|███▎      | 2/6 [00:04<00:09,  2.31s/it]    0.003960953000008279 default CPU:  33%|███▎      | 2/6 [00:13<00:09,  2.31s/it]    0.003960953000008279 default CPU:  50%|█████     | 3/6 [00:14<00:17,  5.90s/it]    0.0016759574333339818 default CUDA:  50%|█████     | 3/6 [00:19<00:17,  5.90s/it]    0.0016759574333339818 default CUDA:  67%|██████▋   | 4/6 [00:21<00:12,  6.05s/it]/home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_functorch/_aot_autograd/utils.py:130: UserWarning: Your compiler for AOTAutograd is returning a function that doesn't take boxed arguments. Please wrap it with functorch.compile.make_boxed_func or handle the boxed arguments yourself. See https://github.com/pytorch/pytorch/pull/83137#issuecomment-1211320670 for rationale.
      warnings.warn(
    0.002440434190464744 dort CPU:  67%|██████▋   | 4/6 [00:23<00:12,  6.05s/it]         0.002440434190464744 dort CPU:  83%|████████▎ | 5/6 [00:24<00:05,  5.25s/it]/home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_functorch/_aot_autograd/utils.py:130: UserWarning: Your compiler for AOTAutograd is returning a function that doesn't take boxed arguments. Please wrap it with functorch.compile.make_boxed_func or handle the boxed arguments yourself. See https://github.com/pytorch/pytorch/pull/83137#issuecomment-1211320670 for rationale.
      warnings.warn(
    0.006315291823498496 dort CUDA:  83%|████████▎ | 5/6 [00:26<00:05,  5.25s/it]    0.006315291823498496 dort CUDA: 100%|██████████| 6/6 [00:28<00:00,  4.60s/it]    0.006315291823498496 dort CUDA: 100%|██████████| 6/6 [00:28<00:00,  4.70s/it]
          name compute   export   average  deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time
    0    eager     CPU    eager  0.003675   0.002427  0.002471  0.016167       1    30.0  0.110260            64     0.004743
    1    eager    CUDA    eager  0.004846   0.000462  0.004199  0.005229       1    21.0  0.101763            64     0.006391
    2  default     CPU  default  0.003961   0.000252  0.002999  0.004075       1    30.0  0.118829            64     0.004258
    3  default    CUDA  default  0.001676   0.000152  0.001459  0.001787       1    60.0  0.100557            64     0.002360
    4     dort     CPU     dort  0.002440   0.000289  0.002121  0.003319       1    63.0  0.153747            64     0.005593
    5     dort    CUDA     dort  0.006315   0.001396  0.005093  0.010795       1    17.0  0.107360            64     0.012040




.. GENERATED FROM PYTHON SOURCE LINES 619-620

Other view

.. GENERATED FROM PYTHON SOURCE LINES 620-656

.. code-block:: Python



    def view_time(df, title, suffix="time"):
        piv = pandas.pivot_table(df, index="export", columns=["compute"], values="average")
        print(piv)
        piv.to_csv(f"plot_torch_aot_{suffix}_compute.csv")
        piv.to_excel(f"plot_torch_aot_{suffix}_compute.xlsx")

        piv_cpu = pandas.pivot_table(
            df[df.compute == "CPU"],
            index="export",
            columns=["compute"],
            values="average",
        )

        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        fig.suptitle(title)
        piv_cpu.plot.barh(ax=ax[0], title="CPU", logx=True)

        if has_cuda:
            piv_gpu = pandas.pivot_table(
                df[df.compute == "CUDA"],
                index="export",
                columns=["compute"],
                values="average",
            )
            piv_gpu.plot.barh(ax=ax[1], title="CUDA", logx=True)

        fig.tight_layout()
        fig.savefig(f"plot_torch_aot_{suffix}.png")
        return ax


    view_time(df, "Compares processing time on backends")





.. image-sg:: /auto_examples/images/sphx_glr_plot_torch_aot_201_004.png
   :alt: Compares processing time on backends, CPU, CUDA
   :srcset: /auto_examples/images/sphx_glr_plot_torch_aot_201_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    compute       CPU      CUDA
    export                     
    default  0.003961  0.001676
    dort     0.002440  0.006315
    eager    0.003675  0.004846

    array([<Axes: title={'center': 'CPU'}, ylabel='export'>,
           <Axes: title={'center': 'CUDA'}, ylabel='export'>], dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 657-659

Memory First Running Time (ORT)
+++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 659-673

.. code-block:: Python


    for compute in ["CPU", "CUDA"]:
        if not has_cuda and compute == "CUDA":
            continue
        ax = memory_peak_plot(
            dfmemfr[dfmemfr.compute == compute],
            ("export",),
            suptitle=f"Memory Consumption of backend, first running time"
            f"\nrunning on {compute}",
            bars=[model_size * i / 2**20 for i in range(1, 3)],
            figsize=(18, 6),
        )
        get_figure(ax).savefig(f"plot_torch_aot_first_run_mem_{compute}.png")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_aot_201_005.png
         :alt: Memory Consumption of backend, first running time running on CPU, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_aot_201_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_aot_201_006.png
         :alt: Memory Consumption of backend, first running time running on CUDA, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_aot_201_006.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 674-676

Memory Running Time (ORT)
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 676-688

.. code-block:: Python


    for compute in ["CPU", "CUDA"]:
        if not has_cuda and compute == "CUDA":
            continue
        ax = memory_peak_plot(
            dfmemr[dfmemr.compute == compute],
            ("export",),
            suptitle=f"Memory Consumption of backens, running time\nrunning on {compute}",
            bars=[model_size * i / 2**20 for i in range(1, 3)],
            figsize=(18, 6),
        )
        get_figure(ax).savefig(f"plot_torch_aot_run_mem_{compute}.png")



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_aot_201_007.png
         :alt: Memory Consumption of backens, running time running on CPU, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_aot_201_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_aot_201_008.png
         :alt: Memory Consumption of backens, running time running on CUDA, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_aot_201_008.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 5.120 seconds)


.. _sphx_glr_download_auto_examples_plot_torch_aot_201.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_torch_aot_201.ipynb <plot_torch_aot_201.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_torch_aot_201.py <plot_torch_aot_201.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_torch_aot_201.zip <plot_torch_aot_201.zip>`


.. include:: plot_torch_aot_201.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
