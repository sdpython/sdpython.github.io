
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profile_existing_onnx_101.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profile_existing_onnx_101.py:


.. _l-plot-profile-existing-onnx-101:

101: Profile an existing model with onnxruntime
===============================================

Profiles any onnx model on CPU.

Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 12-44

.. code-block:: Python


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    from experimental_experiment.args import get_parsed_args

    try:
        from onnx_extended.tools.js_profile import (
            js_profile_to_dataframe,
            plot_ort_profile,
        )
    except ImportError:
        js_profile_to_dataframe = None

    try:
        filename = os.path.join(
            os.path.dirname(__file__ or ""), "data", "example_4700-CPUep-opt.onnx"
        )
    except NameError:
        filename = "data/example_4700-CPUep-opt.onnx"

    script_args = get_parsed_args(
        "plot_profile_existing_onnx",
        filename=(filename, "input file"),
        repeat=10,
        expose="",
    )


    for att in "filename,repeat".split(","):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    filename=data/example_4700-CPUep-opt.onnx
    repeat=10




.. GENERATED FROM PYTHON SOURCE LINES 45-46

Random inputs.

.. GENERATED FROM PYTHON SOURCE LINES 46-77

.. code-block:: Python



    def create_random_input(sess):
        feeds = {}
        for i in sess.get_inputs():
            shape = i.shape
            ot = i.type
            if ot == "tensor(float)":
                dtype = np.float32
            else:
                raise ValueError(f"Unsupposed onnx type {ot}.")
            t = np.random.rand(*shape).astype(dtype)
            feeds[i.name] = t
        return feeds


    def create_session(filename, profiling=False):
        from onnxruntime import InferenceSession, SessionOptions

        if not profiling:
            return InferenceSession(filename, providers=["CPUExecutionProvider"])
        opts = SessionOptions()
        opts.enable_profiling = True
        return InferenceSession(filename, opts, providers=["CPUExecutionProvider"])


    sess = create_session(script_args.filename)
    feeds = create_random_input(sess)
    sess.run(None, feeds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [array([[0.11319279, 0.68335676, 0.21105683, ..., 0.8685932 , 0.88824606,
            0.47574425],
           [0.54101527, 0.0940822 , 0.66236913, ..., 0.30187106, 0.57579494,
            0.63537574],
           [0.5229713 , 0.94259393, 0.77158815, ..., 0.09152122, 0.6289421 ,
            0.99306995],
           ...,
           [0.10604262, 0.8991225 , 0.86111075, ..., 0.07750253, 0.8869872 ,
            0.01314472],
           [0.87044114, 0.5558378 , 0.64133215, ..., 0.09501862, 0.6994279 ,
            0.42203188],
           [0.9526457 , 0.5633388 , 0.71612835, ..., 0.07597917, 0.40781894,
            0.665152  ]], dtype=float32), array([[0.2733237 , 0.41571558, 0.79912156, ..., 0.67289394, 0.6666508 ,
            0.3048525 ],
           [0.41286257, 0.7833231 , 0.47441065, ..., 0.8942447 , 0.92650795,
            0.46296933],
           [0.8965542 , 0.59432715, 0.3888438 , ..., 0.03188239, 0.8258632 ,
            0.00897334],
           ...,
           [0.60240847, 0.91166675, 0.70890415, ..., 0.48745915, 0.43019786,
            0.6006317 ],
           [0.6224113 , 0.32786775, 0.5413471 , ..., 0.10401944, 0.70896953,
            0.5590666 ],
           [0.8290642 , 0.84026897, 0.37073737, ..., 0.8263283 , 0.01567057,
            0.7516928 ]], dtype=float32), array([[0.3156196 , 0.5849496 , 0.52810264, ..., 0.55117685, 0.55696654,
            0.19907637],
           [0.3033405 , 0.6869446 , 0.9976821 , ..., 0.20838584, 0.77244365,
            0.83732516],
           [0.46860862, 0.16850603, 0.5725467 , ..., 0.5042055 , 0.39313063,
            0.40235505],
           ...,
           [0.18947738, 0.93005615, 0.44141558, ..., 0.49021342, 0.80161405,
            0.5838459 ],
           [0.76535136, 0.06059793, 0.27494618, ..., 0.22322552, 0.811308  ,
            0.82649004],
           [0.6486424 , 0.3787245 , 0.5721402 , ..., 0.02035953, 0.9210393 ,
            0.5894695 ]], dtype=float32), array([[[[6.46065  , 6.336914 , 5.7064123, ..., 5.6112475, 5.8404245,
              6.18739  ],
             [6.5897613, 6.284301 , 5.5934663, ..., 4.391206 , 5.0640945,
              5.4785023],
             [6.981908 , 6.763762 , 6.042109 , ..., 4.3271437, 5.686895 ,
              5.367544 ],
             ...,
             [6.507843 , 6.6314974, 6.6410756, ..., 6.592254 , 5.1612306,
              5.426179 ],
             [5.2866554, 7.500004 , 6.205372 , ..., 5.7224574, 5.3967195,
              5.1030884],
             [7.0590653, 6.3383813, 6.9029098, ..., 5.3324656, 6.148005 ,
              5.240273 ]],

            [[9.073667 , 7.0392084, 7.3980217, ..., 6.9580193, 6.660969 ,
              6.719867 ],
             [7.5756083, 7.259733 , 6.7166843, ..., 5.774834 , 6.5336676,
              7.696091 ],
             [8.757021 , 6.985354 , 7.342331 , ..., 5.8561687, 5.6876187,
              7.6194787],
             ...,
             [7.8208346, 8.888223 , 7.9302425, ..., 7.448678 , 5.8008075,
              6.171773 ],
             [6.9143085, 7.7550073, 8.517994 , ..., 7.0007634, 5.8692884,
              5.2738504],
             [8.450345 , 8.043333 , 7.6877646, ..., 6.2525663, 6.562695 ,
              6.866816 ]],

            [[8.78296  , 8.265082 , 7.8807173, ..., 6.396586 , 7.8655286,
              8.724867 ],
             [8.89612  , 7.4287887, 6.5289197, ..., 6.7704263, 6.7687   ,
              7.3419185],
             [8.948503 , 8.077456 , 8.173162 , ..., 5.499985 , 6.919741 ,
              7.403594 ],
             ...,
             [8.147243 , 9.210387 , 9.708644 , ..., 7.5785637, 7.2620215,
              7.3672786],
             [8.176427 , 8.733138 , 7.5962887, ..., 7.6978016, 7.0090857,
              6.7594256],
             [8.188792 , 8.813689 , 8.190962 , ..., 7.2325583, 7.815783 ,
              7.5552855]],

            ...,

            [[7.124998 , 5.963724 , 6.0386143, ..., 4.2921166, 5.6416636,
              5.784966 ],
             [6.59829  , 5.864132 , 5.9589853, ..., 4.075994 , 5.2567825,
              5.50851  ],
             [7.057482 , 5.82212  , 5.9236536, ..., 3.6563404, 5.135072 ,
              5.3232026],
             ...,
             [5.6504846, 6.979337 , 7.475339 , ..., 5.166504 , 5.5353417,
              5.8076897],
             [6.269509 , 6.225808 , 6.1380873, ..., 5.3180556, 5.2177424,
              5.519596 ],
             [5.6431136, 6.551488 , 6.3167224, ..., 5.741507 , 5.4921823,
              6.020059 ]],

            [[8.066872 , 7.3033695, 7.1879044, ..., 6.209903 , 6.507085 ,
              5.7089663],
             [7.337948 , 6.457797 , 6.7507324, ..., 4.872714 , 5.818467 ,
              6.6751394],
             [8.721714 , 5.843073 , 6.947279 , ..., 5.4041395, 5.339756 ,
              5.974798 ],
             ...,
             [7.165407 , 8.263715 , 7.882655 , ..., 7.025813 , 6.5436506,
              6.081666 ],
             [6.9730835, 6.9476223, 7.338705 , ..., 6.947279 , 5.772663 ,
              5.66234  ],
             [7.826688 , 7.4324007, 5.8000336, ..., 6.1142597, 6.188059 ,
              7.093321 ]],

            [[7.852962 , 7.5474057, 6.5392275, ..., 6.021555 , 6.4777727,
              6.2888384],
             [7.1843443, 7.759144 , 5.8811154, ..., 4.933114 , 5.986844 ,
              5.324533 ],
             [8.181089 , 7.0695887, 6.615181 , ..., 4.9888034, 5.3105907,
              5.2432003],
             ...,
             [6.110517 , 8.192393 , 8.14398  , ..., 6.962503 , 6.7349052,
              6.0679045],
             [6.8620477, 7.083581 , 7.607266 , ..., 6.930284 , 6.3133326,
              5.5458865],
             [6.9797807, 6.91492  , 6.799089 , ..., 6.9642158, 6.29009  ,
              6.5367613]]]], dtype=float32), array([[[[  248,   255,   382, ...,   114,   364,   123],
             [  869,   627,   878, ...,   857,   986,   865],
             [  992,   999,  1001, ...,  1106,  1110,  1486],
             ...,
             [14136, 14143, 14144, ..., 14127, 14007, 14259],
             [14509, 14391, 14392, ..., 14498, 14501, 14879],
             [15129, 15132, 15262, ..., 15366, 15368, 15125]],

            [[    0,   378,   133, ...,   114,   116,   247],
             [  623,   503,   505, ...,   732,   861,   865],
             [  992,   998,  1000, ...,  1231,  1109,  1486],
             ...,
             [14260, 14143, 14144, ..., 14127, 14004, 14008],
             [14633, 14391, 14392, ..., 14499, 14500, 14879],
             [15005, 15259, 15260, ..., 15364, 15247, 15125]],

            [[  248,   379,   381, ...,   238,   118,   123],
             [  869,   503,   753, ...,   983,   863,   989],
             [  992,   999,  1001, ...,  1107,  1109,  1486],
             ...,
             [14261, 14018, 14144, ..., 14127, 14378, 14008],
             [14509, 14391, 14392, ..., 14869, 14502, 14877],
             [15007, 15008, 15136, ..., 15366, 15368, 15372]],

            ...,

            [[    0,   255,   383, ...,   115,   240,   494],
             [  869,   503,   754, ...,   983,   987,   989],
             [ 1117,   999,  1002, ...,  1231,  1481,  1363],
             ...,
             [14261, 14019, 14145, ..., 14003, 14007, 14008],
             [14509, 14391, 14393, ..., 14499, 14502, 14876],
             [15006, 15009, 15137, ..., 15364, 15123, 15375]],

            [[  248,   379,   258, ...,   115,   118,   495],
             [  869,   503,   505, ...,   732,   987,   740],
             [  995,   999,  1001, ...,  1107,  1233,  1485],
             ...,
             [14139, 14141, 14145, ..., 14250, 14005, 14135],
             [14633, 14513, 14393, ..., 14622, 14502, 14879],
             [15005, 15135, 15261, ..., 15364, 15369, 15375]],

            [[  248,   378,   382, ...,   114,   119,   494],
             [  620,   503,   506, ...,   980,   986,   990],
             [  992,   998,  1001, ...,  1231,  1233,  1238],
             ...,
             [14137, 14018, 14145, ..., 14251, 14007, 14009],
             [14757, 14512, 14393, ..., 14869, 14501, 14504],
             [15007, 15135, 15263, ..., 15364, 15371, 15248]]]], dtype=int64), array([[6.981908 , 8.591792 , 7.8380103, ..., 8.990099 , 7.870448 ,
            7.615001 ]], dtype=float32), array([[120971.305, 121263.26 , 121344.69 , ..., 120399.   , 121109.64 ,
            120479.69 ]], dtype=float32), array([[63794352., 60935024., 62786936., 61947276., 63540384., 63715520.,
            60725656., 61270276., 61419648., 62583296., 60126616., 61494832.,
            61747888., 60310580., 63094504., 62881632., 60224084., 61765612.,
            62269472., 62375472., 63071400., 62090008., 61573760., 61496952.,
            64459768., 62570384., 59427444., 59459628., 61549188., 62646712.,
            62967620., 63067504., 61056316., 62585016., 62115508., 59962536.,
            61685968., 61441248., 61538320., 63391340., 63808108., 62675056.,
            60923040., 62007856., 61489048., 62934696., 62916256., 62718916.,
            62167312., 62009632., 61067960., 60739200., 61973636., 62003548.,
            61404740., 61893144., 61584088., 63082192., 64071312., 60760008.,
            62944688., 62745948., 60962016., 63475896., 60795736., 62601020.,
            60922528., 61457672., 62176588., 61611872., 62903124., 60631120.,
            60273356., 61773224., 63058052., 62616128., 61482172., 63111020.,
            62101660., 62406768., 61781424., 62009832., 60305820., 60215992.,
            62658768., 61729712., 63915152., 62539844., 61992048., 63989544.,
            63155688., 60871660., 61209008., 62457040., 61402784., 63949104.,
            61225176., 60769264., 61636636., 62596348., 60701840., 61502648.,
            62452360., 65191248., 62685472., 62088164., 63541540., 59870640.,
            61078972., 61256336., 63375048., 63219100., 62130444., 61121960.,
            62952308., 61811048., 63196896., 62138072., 59543928., 63245600.,
            61555616., 64457572., 61280632., 61300676., 64260892., 61352544.,
            62535672., 61650056.]], dtype=float32), array([[3.9323802e+09, 3.9547500e+09, 3.8675318e+09, 3.8722749e+09,
            3.9010012e+09, 3.7093192e+09, 4.1770516e+09, 4.2276411e+09,
            3.8695444e+09, 3.7889810e+09]], dtype=float32)]



.. GENERATED FROM PYTHON SOURCE LINES 78-80

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 80-99

.. code-block:: Python


    sess = create_session(script_args.filename, profiling=True)

    for _ in range(script_args.repeat):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    if js_profile_to_dataframe is not None:
        df = js_profile_to_dataframe(prof, first_it_out=True)
        print(df.columns)
        df.to_csv("plot_profile_existing_onnx.csv")
        df.to_excel("plot_profile_existing_onnx.xlsx")
        fig, ax = plt.subplots(1, 2, figsize=(10, 5))

        plot_ort_profile(df, ax[0], ax[1], "dort")
        fig.tight_layout()
        fig.savefig("plot_profile_existing_onnx.png")
    else:
        print("Install onnx-extended first.")



.. image-sg:: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :alt: dort, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['cat', 'pid', 'tid', 'dur', 'ts', 'ph', 'name',
           'args_thread_scheduling_stats', 'args_output_size',
           'args_parameter_size', 'args_activation_size', 'args_node_index',
           'args_provider', 'args_op_name', 'op_name', 'event_name', 'iteration',
           'it==0'],
          dtype='object')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.903 seconds)


.. _sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_existing_onnx_101.ipynb <plot_profile_existing_onnx_101.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_existing_onnx_101.py <plot_profile_existing_onnx_101.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_profile_existing_onnx_101.zip <plot_profile_existing_onnx_101.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
