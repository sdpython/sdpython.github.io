
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profile_existing_onnx_101.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profile_existing_onnx_101.py:


.. _l-plot-profile-existing-onnx-101:

101: Profile an existing model with onnxruntime
===============================================

Profiles any onnx model on CPU.

Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 12-44

.. code-block:: Python


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    from experimental_experiment.args import get_parsed_args

    try:
        from onnx_extended.tools.js_profile import (
            js_profile_to_dataframe,
            plot_ort_profile,
        )
    except ImportError:
        js_profile_to_dataframe = None

    try:
        filename = os.path.join(
            os.path.dirname(__file__ or ""), "data", "example_4700-CPUep-opt.onnx"
        )
    except NameError:
        filename = "data/example_4700-CPUep-opt.onnx"

    script_args = get_parsed_args(
        "plot_profile_existing_onnx",
        filename=(filename, "input file"),
        repeat=10,
        expose="",
    )


    for att in "filename,repeat".split(","):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    filename=data/example_4700-CPUep-opt.onnx
    repeat=10




.. GENERATED FROM PYTHON SOURCE LINES 45-46

Random inputs.

.. GENERATED FROM PYTHON SOURCE LINES 46-77

.. code-block:: Python



    def create_random_input(sess):
        feeds = {}
        for i in sess.get_inputs():
            shape = i.shape
            ot = i.type
            if ot == "tensor(float)":
                dtype = np.float32
            else:
                raise ValueError(f"Unsupposed onnx type {ot}.")
            t = np.random.rand(*shape).astype(dtype)
            feeds[i.name] = t
        return feeds


    def create_session(filename, profiling=False):
        from onnxruntime import InferenceSession, SessionOptions

        if not profiling:
            return InferenceSession(filename, providers=["CPUExecutionProvider"])
        opts = SessionOptions()
        opts.enable_profiling = True
        return InferenceSession(filename, opts, providers=["CPUExecutionProvider"])


    sess = create_session(script_args.filename)
    feeds = create_random_input(sess)
    sess.run(None, feeds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [array([[0.7421695 , 0.3828324 , 0.2872476 , ..., 0.46203107, 0.8380397 ,
            0.9939142 ],
           [0.23435849, 0.19617328, 0.24825597, ..., 0.8837868 , 0.19110043,
            0.9786408 ],
           [0.4728261 , 0.5156008 , 0.03793624, ..., 0.33942407, 0.7381765 ,
            0.3798763 ],
           ...,
           [0.7882608 , 0.0506255 , 0.95814776, ..., 0.46325448, 0.3202956 ,
            0.57053035],
           [0.52575576, 0.54539543, 0.9946438 , ..., 0.49261948, 0.32470426,
            0.57364154],
           [0.09990779, 0.81704557, 0.08631577, ..., 0.9183623 , 0.8223743 ,
            0.79093856]], dtype=float32), array([[0.40066323, 0.09934555, 0.40644035, ..., 0.5187988 , 0.50152045,
            0.59748864],
           [0.319173  , 0.9729018 , 0.7311064 , ..., 0.13991453, 0.52746725,
            0.49992707],
           [0.8245773 , 0.25372696, 0.42226467, ..., 0.18739909, 0.865047  ,
            0.37352732],
           ...,
           [0.55528075, 0.64484334, 0.28795144, ..., 0.26834553, 0.9532423 ,
            0.1781222 ],
           [0.9041657 , 0.35151896, 0.66810805, ..., 0.90862185, 0.759612  ,
            0.3266473 ],
           [0.43117562, 0.10801978, 0.83214957, ..., 0.88529754, 0.01666619,
            0.35048592]], dtype=float32), array([[0.8464648 , 0.29241517, 0.3727676 , ..., 0.24500823, 0.8945948 ,
            0.21690078],
           [0.29420078, 0.9441404 , 0.0762165 , ..., 0.38059115, 0.38159737,
            0.9802161 ],
           [0.26365572, 0.27335802, 0.41520435, ..., 0.93623114, 0.7494296 ,
            0.6183728 ],
           ...,
           [0.02743015, 0.4775269 , 0.7291304 , ..., 0.6252529 , 0.9218866 ,
            0.97014123],
           [0.17620827, 0.6618484 , 0.55983543, ..., 0.8371032 , 0.16623877,
            0.55736893],
           [0.405245  , 0.930165  , 0.8559824 , ..., 0.3510433 , 0.08250364,
            0.8247239 ]], dtype=float32), array([[[[ 5.1806164,  5.423831 ,  5.7642965, ...,  3.7821016,
               5.4865146,  4.479429 ],
             [ 4.376424 ,  5.837098 ,  4.3085093, ...,  5.089125 ,
               4.7746706,  5.1566777],
             [ 5.292386 ,  4.3228636,  4.1439905, ...,  5.011554 ,
               4.8086944,  5.357817 ],
             ...,
             [ 4.520058 ,  6.086614 ,  5.545968 , ...,  4.806839 ,
               4.2373004,  4.734275 ],
             [ 6.2493234,  5.0801   ,  7.1408267, ...,  4.9930625,
               4.875037 ,  4.464985 ],
             [ 5.6399083,  5.574897 ,  6.8200827, ...,  5.5750346,
               5.1931057,  5.24618  ]],

            [[ 6.543793 ,  7.4245076,  7.751514 , ...,  6.0722256,
               7.3224325,  7.187873 ],
             [ 7.6789436,  7.928944 ,  7.3211803, ...,  6.074123 ,
               7.543589 ,  8.182098 ],
             [ 6.2279167,  6.1245303,  4.7441254, ...,  7.9985213,
               8.130257 ,  7.9299893],
             ...,
             [ 7.179314 ,  8.191912 ,  9.048868 , ...,  7.103842 ,
               6.2604437,  6.825915 ],
             [ 8.540751 ,  9.512169 , 10.035427 , ...,  8.207014 ,
               6.7583194,  7.3068852],
             [ 8.744633 ,  8.432539 , 10.369062 , ...,  7.5225816,
               7.706136 ,  7.895413 ]],

            [[ 6.5722685,  7.397979 ,  7.1869116, ...,  6.1904426,
               5.3696623,  7.0164776],
             [ 6.743073 ,  6.8097167,  7.504285 , ...,  5.922622 ,
               6.9497776,  6.871275 ],
             [ 5.586807 ,  6.352332 ,  5.235925 , ...,  6.771227 ,
               6.4033923,  7.6323366],
             ...,
             [ 7.0879126,  6.53549  ,  8.266723 , ...,  6.2400823,
               6.111847 ,  5.5651083],
             [ 7.8329916,  9.372486 ,  8.9841795, ...,  6.9573693,
               6.265131 ,  6.2532268],
             [ 8.281215 ,  8.852676 ,  8.90299  , ...,  7.2528315,
               7.1426435,  7.8403177]],

            ...,

            [[ 5.383461 ,  5.9637394,  5.6050005, ...,  4.7503343,
               6.008257 ,  5.397313 ],
             [ 6.35683  ,  6.5538225,  6.1254773, ...,  5.5669947,
               5.6065626,  5.516885 ],
             [ 5.080706 ,  4.77028  ,  3.3352797, ...,  5.8901405,
               5.3614445,  6.2418804],
             ...,
             [ 5.516881 ,  5.657936 ,  7.071297 , ...,  5.4135375,
               5.565745 ,  5.9321856],
             [ 7.620788 ,  7.541308 ,  7.909398 , ...,  6.2511835,
               5.5519776,  5.44868  ],
             [ 6.4262795,  6.9508624,  7.9683313, ...,  5.913591 ,
               5.887374 ,  6.3492403]],

            [[ 6.805108 ,  7.007659 ,  7.541094 , ...,  5.825154 ,
               5.9529233,  6.8268366],
             [ 6.799193 ,  7.231835 ,  6.7354665, ...,  6.705784 ,
               6.395212 ,  7.50699  ],
             [ 5.9562244,  5.6498985,  5.4838095, ...,  6.6841106,
               7.373061 ,  6.486524 ],
             ...,
             [ 6.519339 ,  6.962456 ,  7.5815654, ...,  6.497205 ,
               6.0593686,  5.9786277],
             [ 8.008697 ,  7.8775015,  8.895694 , ...,  7.15833  ,
               6.6760507,  5.904995 ],
             [ 8.200085 ,  8.327163 ,  8.692419 , ...,  7.420971 ,
               7.206693 ,  7.268189 ]],

            [[ 6.4182014,  7.339572 ,  7.2344937, ...,  5.822993 ,
               6.47506  ,  7.236693 ],
             [ 6.305988 ,  6.528693 ,  6.390364 , ...,  5.952517 ,
               6.815026 ,  7.0846057],
             [ 6.0937333,  6.0102544,  5.3063183, ...,  6.886313 ,
               7.1060095,  6.849796 ],
             ...,
             [ 7.0559382,  7.7494993,  8.5839205, ...,  6.336173 ,
               5.402787 ,  5.6870227],
             [ 8.112932 ,  8.3012085,  9.217535 , ...,  6.9523063,
               6.532082 ,  6.7909203],
             [ 8.551176 ,  8.752381 ,  9.604499 , ...,  7.1563516,
               7.030255 ,  7.332317 ]]]], dtype=float32), array([[[[  125,     5,   256, ...,   236,   491,   495],
             [  620,   874,   755, ...,   608,   863,   865],
             [ 1243,  1370,  1372, ...,  1228,  1359,  1487],
             ...,
             [14261, 14016, 14271, ..., 14000, 14253, 14383],
             [14635, 14637, 14519, ..., 14871, 14502, 14507],
             [15130, 15132, 15139, ..., 15118, 14996, 15248]],

            [[  125,     7,     8, ...,   112,   365,   494],
             [  870,   874,   631, ...,   608,   987,   990],
             [  995,  1122,  1125, ...,  1104,  1480,  1239],
             ...,
             [14262, 14017, 14271, ..., 14000, 14131, 14256],
             [14635, 14637, 14767, ..., 14870, 14503, 14506],
             [15254, 14884, 15263, ..., 15366, 14997, 15248]],

            [[  126,     7,     8, ...,   236,   117,   495],
             [  870,   872,   631, ...,   732,   862,   990],
             [ 1119,  1123,  1126, ...,  1104,  1481,  1487],
             ...,
             [14261, 13892, 14023, ..., 14124, 14129, 14259],
             [14759, 14636, 14641, ..., 14869, 14500, 14507],
             [15129, 15132, 15263, ..., 15364, 15246, 15375]],

            ...,

            [[  125,     7,     8, ...,   236,   367,   495],
             [  870,   873,   631, ...,   732,   615,   617],
             [  995,  1122,  1250, ...,  1476,  1483,  1487],
             ...,
             [14261, 14264, 14270, ..., 14124, 14379, 14135],
             [14386, 14638, 14767, ..., 14871, 14872, 14507],
             [14883, 14884, 15263, ..., 15118, 14998, 15248]],

            [[    2,   131,     8, ...,   236,   116,   495],
             [  868,   874,   755, ...,   609,   615,   991],
             [ 1243,  1370,  1373, ...,  1476,  1483,  1238],
             ...,
             [13891, 14016, 13899, ..., 14000, 14253, 14135],
             [14635, 14638, 14765, ..., 14871, 14624, 14507],
             [14883, 15132, 15015, ..., 15364, 15246, 15248]],

            [[    3,     7,     8, ...,   236,   491,   495],
             [  871,   873,   631, ...,   608,   987,   991],
             [ 1119,  1122,  1248, ...,  1476,  1480,  1487],
             ...,
             [13891, 13892, 13899, ..., 14000, 14131, 14259],
             [14634, 14637, 14767, ..., 14870, 14500, 14506],
             [15254, 15008, 15015, ..., 14994, 15246, 15248]]]], dtype=int64), array([[5.837098 , 6.1032906, 6.1055837, ..., 7.345659 , 8.562398 ,
            7.7634306]], dtype=float32), array([[121055.195, 121152.45 , 120725.24 , ..., 120159.734, 119906.695,
            119351.36 ]], dtype=float32), array([[62107432., 61961816., 61472080., 62192320., 60946532., 61525496.,
            61669656., 63436496., 62812904., 60703876., 61802008., 60121788.,
            61327680., 63731616., 63967220., 62509320., 59852452., 62261040.,
            62339280., 62072344., 62438544., 61995576., 61201752., 62498888.,
            60437816., 62179752., 60359688., 60294768., 62264472., 60118976.,
            64241496., 59131084., 61149864., 62229256., 60322200., 61762224.,
            61351708., 61643360., 61494880., 61243064., 62673776., 60265592.,
            60671976., 61104456., 61307688., 60737392., 65534712., 61871920.,
            61269832., 60214804., 62386664., 61764036., 62317840., 64048440.,
            59794272., 61072280., 63189024., 61386556., 61315816., 61017008.,
            60557584., 62280424., 62409180., 60290172., 60453912., 61218748.,
            63207448., 61127888., 62613508., 61459144., 60206484., 60090248.,
            60450512., 61315556., 62291376., 61020016., 60961860., 62424856.,
            61599696., 61610968., 61903840., 60381856., 62964536., 61199104.,
            62788416., 59666536., 63244128., 61008468., 62690960., 61181208.,
            60989232., 60690984., 62794548., 62475664., 61249192., 62241024.,
            61114064., 62513484., 60250304., 61240092., 63672880., 60287604.,
            61924104., 62308800., 60682408., 63393204., 61785780., 62465008.,
            62080940., 61229836., 62176972., 60603968., 62506504., 60598280.,
            61131336., 62355504., 60222376., 60826528., 62763704., 62044048.,
            60397456., 58341292., 60909288., 62168488., 62388424., 62846464.,
            62193564., 63324248.]], dtype=float32), array([[3.7541350e+09, 3.9160151e+09, 4.4045824e+09, 3.7573036e+09,
            4.2631537e+09, 3.6598129e+09, 4.2514775e+09, 4.0599150e+09,
            4.0984653e+09, 4.1428521e+09]], dtype=float32)]



.. GENERATED FROM PYTHON SOURCE LINES 78-80

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 80-99

.. code-block:: Python


    sess = create_session(script_args.filename, profiling=True)

    for _ in range(script_args.repeat):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    if js_profile_to_dataframe is not None:
        df = js_profile_to_dataframe(prof, first_it_out=True)
        print(df.columns)
        df.to_csv("plot_profile_existing_onnx.csv")
        df.to_excel("plot_profile_existing_onnx.xlsx")
        fig, ax = plt.subplots(1, 2, figsize=(10, 5))

        plot_ort_profile(df, ax[0], ax[1], "dort")
        fig.tight_layout()
        fig.savefig("plot_profile_existing_onnx.png")
    else:
        print("Install onnx-extended first.")



.. image-sg:: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :alt: dort, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['cat', 'pid', 'tid', 'dur', 'ts', 'ph', 'name',
           'args_thread_scheduling_stats', 'args_output_size',
           'args_parameter_size', 'args_activation_size', 'args_node_index',
           'args_provider', 'args_op_name', 'op_name', 'event_name', 'iteration',
           'it==0'],
          dtype='object')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.643 seconds)


.. _sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_existing_onnx_101.ipynb <plot_profile_existing_onnx_101.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_existing_onnx_101.py <plot_profile_existing_onnx_101.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_profile_existing_onnx_101.zip <plot_profile_existing_onnx_101.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
