
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profile_existing_onnx_101.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profile_existing_onnx_101.py:


.. _l-plot-profile-existing-onnx-101:

101: Profile an existing model with onnxruntime
===============================================

Profiles any onnx model on CPU.

Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 12-44

.. code-block:: Python


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    from experimental_experiment.args import get_parsed_args

    try:
        from onnx_extended.tools.js_profile import (
            js_profile_to_dataframe,
            plot_ort_profile,
        )
    except ImportError:
        js_profile_to_dataframe = None

    try:
        filename = os.path.join(
            os.path.dirname(__file__ or ""), "data", "example_4700-CPUep-opt.onnx"
        )
    except NameError:
        filename = "data/example_4700-CPUep-opt.onnx"

    script_args = get_parsed_args(
        "plot_profile_existing_onnx",
        filename=(filename, "input file"),
        repeat=10,
        expose="",
    )


    for att in "filename,repeat".split(","):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    filename=data/example_4700-CPUep-opt.onnx
    repeat=10




.. GENERATED FROM PYTHON SOURCE LINES 45-46

Random inputs.

.. GENERATED FROM PYTHON SOURCE LINES 46-77

.. code-block:: Python



    def create_random_input(sess):
        feeds = {}
        for i in sess.get_inputs():
            shape = i.shape
            ot = i.type
            if ot == "tensor(float)":
                dtype = np.float32
            else:
                raise ValueError(f"Unsupposed onnx type {ot}.")
            t = np.random.rand(*shape).astype(dtype)
            feeds[i.name] = t
        return feeds


    def create_session(filename, profiling=False):
        from onnxruntime import InferenceSession, SessionOptions

        if not profiling:
            return InferenceSession(filename, providers=["CPUExecutionProvider"])
        opts = SessionOptions()
        opts.enable_profiling = True
        return InferenceSession(filename, opts, providers=["CPUExecutionProvider"])


    sess = create_session(script_args.filename)
    feeds = create_random_input(sess)
    sess.run(None, feeds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [array([[7.8192502e-01, 6.0261297e-01, 1.0945628e-01, ..., 8.2966320e-02,
            2.2211066e-01, 6.6035204e-02],
           [8.2313335e-01, 2.5088006e-01, 4.2280012e-01, ..., 4.4164665e-02,
            7.7372384e-01, 4.5732987e-01],
           [3.6075068e-01, 2.5986406e-01, 5.8019555e-01, ..., 5.0109112e-01,
            4.3818268e-01, 4.0877065e-01],
           ...,
           [2.4023336e-01, 7.9771921e-02, 8.9508170e-01, ..., 8.5402292e-01,
            1.5081269e-01, 7.2030354e-01],
           [3.6638435e-02, 3.2923037e-01, 2.8358361e-01, ..., 3.3975455e-01,
            9.9217510e-01, 5.5720317e-01],
           [8.6438686e-01, 1.4740482e-04, 2.6478416e-01, ..., 5.2498209e-01,
            3.9635631e-01, 8.7995207e-01]], shape=(128, 1024), dtype=float32), array([[0.07362819, 0.7437465 , 0.81912947, ..., 0.77776986, 0.5467629 ,
            0.67116237],
           [0.7727439 , 0.28386062, 0.10918609, ..., 0.5028414 , 0.256201  ,
            0.575773  ],
           [0.6192734 , 0.39576304, 0.5666987 , ..., 0.5579278 , 0.989675  ,
            0.80058014],
           ...,
           [0.38812163, 0.26240316, 0.23568983, ..., 0.952825  , 0.6267754 ,
            0.6142686 ],
           [0.750707  , 0.6746217 , 0.49819687, ..., 0.19212738, 0.45909515,
            0.313355  ],
           [0.9677436 , 0.87615174, 0.4542097 , ..., 0.53605974, 0.12674646,
            0.11990039]], shape=(1024, 30752), dtype=float32), array([[0.8246606 , 0.723381  , 0.8064455 , ..., 0.14838843, 0.33145967,
            0.99192846],
           [0.4462953 , 0.91371906, 0.30357   , ..., 0.10439498, 0.6752811 ,
            0.7147704 ],
           [0.36195225, 0.6094136 , 0.97388333, ..., 0.24677944, 0.94675577,
            0.3865987 ],
           ...,
           [0.38249758, 0.34594125, 0.32515395, ..., 0.72414964, 0.41354495,
            0.8350061 ],
           [0.77601975, 0.97614497, 0.12131409, ..., 0.16950147, 0.04472109,
            0.08990096],
           [0.73468256, 0.7815    , 0.9737469 , ..., 0.18916821, 0.5468294 ,
            0.8891125 ]], shape=(10, 128), dtype=float32), array([[[[5.928287 , 6.558386 , 6.428196 , ..., 4.969413 , 6.0021033,
              5.5752244],
             [7.0439787, 6.955658 , 6.6623597, ..., 5.70835  , 4.422899 ,
              3.8779843],
             [7.190451 , 6.747664 , 7.025963 , ..., 5.4045386, 4.1615167,
              4.534644 ],
             ...,
             [5.0307555, 5.9465256, 5.515392 , ..., 5.9847665, 6.0651264,
              6.2789516],
             [5.26413  , 6.3684454, 6.343183 , ..., 5.7951655, 4.537379 ,
              5.708399 ],
             [5.7882085, 7.4480863, 7.064464 , ..., 5.6694765, 6.8599677,
              5.784663 ]],

            [[6.2654624, 6.256755 , 6.4546804, ..., 5.7081304, 6.0473757,
              6.0677066],
             [7.279386 , 6.404105 , 6.535185 , ..., 6.122382 , 4.1181035,
              4.1366916],
             [6.897257 , 7.851838 , 7.509516 , ..., 5.6469626, 5.4456844,
              5.351292 ],
             ...,
             [6.1128225, 5.668681 , 5.719446 , ..., 6.693217 , 6.008305 ,
              6.16996  ],
             [5.8912077, 6.6400523, 6.354251 , ..., 5.012378 , 4.987295 ,
              5.6339893],
             [6.3805   , 6.577992 , 6.5539184, ..., 6.361403 , 6.2584467,
              6.488716 ]],

            [[7.4044538, 6.9819436, 7.058066 , ..., 7.042361 , 6.0716705,
              7.1724243],
             [6.8589735, 7.9102516, 7.792828 , ..., 6.9573874, 4.935561 ,
              4.4277806],
             [7.212479 , 7.542895 , 7.427128 , ..., 6.1765246, 5.5401087,
              5.8963246],
             ...,
             [6.917893 , 6.1525984, 6.428763 , ..., 5.902884 , 7.242594 ,
              5.6166015],
             [6.821025 , 6.8328924, 6.6611223, ..., 6.554729 , 5.3616924,
              6.5889077],
             [6.614267 , 7.7392526, 7.2033076, ..., 7.423011 , 6.87847  ,
              7.4874578]],

            ...,

            [[7.06847  , 6.2732487, 7.1112986, ..., 6.7647667, 5.533311 ,
              5.9557815],
             [8.419516 , 7.821211 , 7.2218084, ..., 6.8939543, 4.8109274,
              4.8763714],
             [7.4947796, 7.99147  , 8.228782 , ..., 6.210833 , 5.389371 ,
              4.8254895],
             ...,
             [6.654489 , 6.2399807, 7.346361 , ..., 6.3314223, 7.3566246,
              6.3216515],
             [6.101786 , 7.1057158, 7.232899 , ..., 5.503675 , 6.104759 ,
              6.11567  ],
             [6.6587114, 6.903481 , 7.438874 , ..., 6.4750776, 6.0406938,
              7.076016 ]],

            [[5.598392 , 5.064313 , 5.9034586, ..., 4.4770517, 4.972277 ,
              5.122977 ],
             [6.219752 , 6.1621375, 6.72947  , ..., 5.293138 , 4.406615 ,
              4.1944456],
             [6.5883446, 5.8464847, 6.425863 , ..., 5.127265 , 4.08891  ,
              4.638581 ],
             ...,
             [5.2380586, 5.582122 , 5.088869 , ..., 5.3930683, 4.880077 ,
              5.8795204],
             [5.541217 , 5.5371017, 5.9499454, ..., 4.8424234, 5.0536795,
              4.7597666],
             [5.562676 , 6.0087237, 6.084323 , ..., 5.7563715, 5.46961  ,
              5.6015425]],

            [[7.8308277, 7.8824863, 8.973839 , ..., 7.3622117, 7.0189934,
              7.3027205],
             [8.260634 , 8.865929 , 8.702334 , ..., 7.142058 , 5.5217547,
              5.163858 ],
             [8.775603 , 9.41305  , 8.696716 , ..., 7.306938 , 6.115263 ,
              6.7653584],
             ...,
             [8.142018 , 7.157655 , 7.4482493, ..., 7.50169  , 8.060934 ,
              7.5271935],
             [7.3397493, 7.7874804, 8.882899 , ..., 6.80147  , 6.800855 ,
              6.951196 ],
             [7.417782 , 8.778371 , 7.973038 , ..., 7.7617273, 7.426506 ,
              7.9552436]]]], shape=(1, 32, 124, 124), dtype=float32), array([[[[  127,   253,   132, ...,   239,   118,   492],
             [  623,   872,   504, ...,   857,   614,   991],
             [  995,  1121,  1001, ...,  1107,  1233,  1114],
             ...,
             [14136, 13892, 14145, ..., 14003, 14129, 14135],
             [14508, 14762, 14765, ..., 14869, 14501, 14879],
             [15255, 15011, 15014, ..., 14992, 14997, 15003]],

            [[  249,   253,   380, ...,   484,   117,   244],
             [  621,   872,   631, ...,   981,   984,   990],
             [  993,   997,  1127, ...,  1107,  1233,  1113],
             ...,
             [13890, 14019, 14146, ..., 14375, 14252, 14256],
             [14508, 14639, 14765, ..., 14746, 14501, 14877],
             [15255, 15256, 15014, ..., 15117, 14998, 15003]],

            [[  375,   130,   132, ...,   361,   117,   492],
             [  497,   749,   629, ...,   733,   984,   991],
             [  993,   997,  1003, ...,  1231,  1233,  1114],
             ...,
             [14013, 14018, 14268, ..., 14001, 14004, 14135],
             [14508, 14390, 14766, ..., 14868, 14501, 14505],
             [15255, 15256, 15263, ..., 15364, 15369, 15003]],

            ...,

            [[  375,   378,   256, ...,   484,   118,   492],
             [  744,   873,   879, ...,   733,   984,   991],
             [  995,   997,  1127, ...,  1107,  1235,  1114],
             ...,
             [14012, 13894, 14022, ..., 14375, 14128, 14259],
             [14384, 14638, 14766, ..., 14621, 14500, 14877],
             [15255, 15256, 14890, ..., 15117, 14999, 15003]],

            [[  126,   376,   135, ...,   485,   117,   244],
             [  498,   872,   504, ...,   857,   863,   616],
             [  994,  1121,  1127, ...,  1105,  1480,  1113],
             ...,
             [13888, 13895, 14146, ..., 14003, 14376, 14258],
             [14756, 14762, 14766, ..., 14745, 14874, 14504],
             [15255, 15256, 15014, ..., 15119, 15244, 15003]],

            [[  375,   377,   380, ...,   115,   117,   492],
             [  745,   872,   755, ...,   857,   863,   990],
             [  993,  1121,  1003, ...,  1231,  1233,  1112],
             ...,
             [14012, 14018, 14020, ..., 14127, 14252, 14259],
             [14756, 14514, 14766, ..., 14499, 14873, 14877],
             [15255, 15256, 14889, ..., 15116, 15368, 15003]]]],
          shape=(1, 32, 31, 31), dtype=int64), array([[7.9266896, 7.6109476, 7.2799697, ..., 9.56457  , 8.99411  ,
            9.712397 ]], shape=(1, 30752), dtype=float32), array([[124281.54 , 123146.67 , 123693.266, ..., 123855.39 , 124222.23 ,
            123800.62 ]], shape=(1, 1024), dtype=float32), array([[62826968., 66034056., 66627196., 63158792., 65210152., 65561992.,
            63980464., 63279616., 63628536., 64836768., 62597920., 66091776.,
            62263588., 62839580., 63119624., 63399056., 63304024., 63376472.,
            63070488., 62969008., 63343804., 63192680., 66451680., 61158592.,
            64343752., 65480248., 62722548., 62232092., 61520840., 64058748.,
            62510480., 64812472., 62653488., 61545112., 62335672., 61617980.,
            61729240., 64179276., 66444244., 64960004., 65206368., 63577068.,
            62772560., 63708608., 62455600., 61271640., 64008008., 65014688.,
            64760604., 63250360., 64169712., 63158344., 62231200., 61385116.,
            61831760., 64593340., 63272452., 63364552., 63114464., 61513944.,
            63306796., 63377912., 62737240., 60575224., 65962728., 64295048.,
            64145576., 61464596., 62834696., 62547032., 61979320., 63745400.,
            64709128., 61953160., 64798800., 63379392., 63521424., 64391892.,
            64354648., 65306844., 63713460., 62624992., 63363640., 62941600.,
            65049144., 61408444., 64602044., 63482540., 63526184., 64865280.,
            64366832., 64986904., 61860452., 61527868., 63160328., 62599636.,
            62918200., 65427588., 62947960., 62844920., 62621496., 61402600.,
            66117936., 66361240., 62471264., 62226448., 63279604., 61277952.,
            64406768., 62500340., 63051952., 61996808., 62578496., 62223072.,
            63887740., 63029976., 63773240., 63169840., 64363472., 62208492.,
            63366080., 64481152., 62843024., 61622392., 62638200., 63734440.,
            64947508., 62919320.]], dtype=float32), array([[3.9918730e+09, 3.8325315e+09, 4.1408397e+09, 3.8747080e+09,
            3.8633249e+09, 4.2941614e+09, 3.6642875e+09, 3.4180982e+09,
            4.0044966e+09, 4.6790728e+09]], dtype=float32)]



.. GENERATED FROM PYTHON SOURCE LINES 78-80

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 80-99

.. code-block:: Python


    sess = create_session(script_args.filename, profiling=True)

    for _ in range(script_args.repeat):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    if js_profile_to_dataframe is not None:
        df = js_profile_to_dataframe(prof, first_it_out=True)
        print(df.columns)
        df.to_csv("plot_profile_existing_onnx.csv")
        df.to_excel("plot_profile_existing_onnx.xlsx")
        fig, ax = plt.subplots(1, 2, figsize=(10, 5))

        plot_ort_profile(df, ax[0], ax[1], "dort")
        fig.tight_layout()
        fig.savefig("plot_profile_existing_onnx.png")
    else:
        print("Install onnx-extended first.")



.. image-sg:: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :alt: dort, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['cat', 'pid', 'tid', 'dur', 'ts', 'ph', 'name',
           'args_thread_scheduling_stats', 'args_output_size',
           'args_parameter_size', 'args_activation_size', 'args_node_index',
           'args_provider', 'args_op_name', 'op_name', 'event_name', 'iteration',
           'it==0'],
          dtype='object')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.240 seconds)


.. _sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_existing_onnx_101.ipynb <plot_profile_existing_onnx_101.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_existing_onnx_101.py <plot_profile_existing_onnx_101.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_profile_existing_onnx_101.zip <plot_profile_existing_onnx_101.zip>`


.. include:: plot_profile_existing_onnx_101.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
