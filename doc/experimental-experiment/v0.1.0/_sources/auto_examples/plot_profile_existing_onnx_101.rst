
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profile_existing_onnx_101.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profile_existing_onnx_101.py:


101: Profile an existing model with onnxruntime
===============================================

Profiles any onnx model on CPU.

Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 10-42

.. code-block:: Python


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    from experimental_experiment.args import get_parsed_args

    try:
        from onnx_extended.tools.js_profile import (
            js_profile_to_dataframe,
            plot_ort_profile,
        )
    except ImportError:
        js_profile_to_dataframe = None

    try:
        filename = os.path.join(
            os.path.dirname(__file__ or ""), "data", "example_4700-CPUep-opt.onnx"
        )
    except NameError:
        filename = "data/example_4700-CPUep-opt.onnx"

    script_args = get_parsed_args(
        "plot_profile_existing_onnx",
        filename=(filename, "input file"),
        repeat=10,
        expose="",
    )


    for att in "filename,repeat".split(","):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    filename=data/example_4700-CPUep-opt.onnx
    repeat=10




.. GENERATED FROM PYTHON SOURCE LINES 43-44

Random inputs.

.. GENERATED FROM PYTHON SOURCE LINES 44-75

.. code-block:: Python



    def create_random_input(sess):
        feeds = {}
        for i in sess.get_inputs():
            shape = i.shape
            ot = i.type
            if ot == "tensor(float)":
                dtype = np.float32
            else:
                raise ValueError(f"Unsupposed onnx type {ot}.")
            t = np.random.rand(*shape).astype(dtype)
            feeds[i.name] = t
        return feeds


    def create_session(filename, profiling=False):
        from onnxruntime import InferenceSession, SessionOptions

        if not profiling:
            return InferenceSession(filename, providers=["CPUExecutionProvider"])
        opts = SessionOptions()
        opts.enable_profiling = True
        return InferenceSession(filename, opts, providers=["CPUExecutionProvider"])


    sess = create_session(script_args.filename)
    feeds = create_random_input(sess)
    sess.run(None, feeds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [array([[0.01372804, 0.19204777, 0.42539278, ..., 0.9387149 , 0.3887043 ,
            0.38676596],
           [0.09249243, 0.98652345, 0.7029903 , ..., 0.10115251, 0.44525883,
            0.8625247 ],
           [0.8066044 , 0.45587045, 0.42281005, ..., 0.09031837, 0.50205296,
            0.03507315],
           ...,
           [0.9219015 , 0.6483621 , 0.5508968 , ..., 0.2218726 , 0.6954977 ,
            0.1345805 ],
           [0.9011409 , 0.28244066, 0.85555476, ..., 0.9760694 , 0.696695  ,
            0.2157429 ],
           [0.41641995, 0.9976225 , 0.00333585, ..., 0.59857774, 0.40828615,
            0.6950709 ]], dtype=float32), array([[0.11601873, 0.73649436, 0.31907067, ..., 0.33567792, 0.10469233,
            0.15523614],
           [0.737726  , 0.99400043, 0.8565713 , ..., 0.40317348, 0.7555738 ,
            0.7923569 ],
           [0.8607029 , 0.7368311 , 0.4132274 , ..., 0.4959343 , 0.6691124 ,
            0.0800477 ],
           ...,
           [0.34512424, 0.12002274, 0.11858915, ..., 0.4779105 , 0.0514322 ,
            0.91044515],
           [0.57218003, 0.25161108, 0.79610574, ..., 0.33161488, 0.03951714,
            0.24178933],
           [0.96695274, 0.9980131 , 0.30166972, ..., 0.41494364, 0.589073  ,
            0.5953226 ]], dtype=float32), array([[0.9864148 , 0.27392712, 0.22738223, ..., 0.45384783, 0.49749765,
            0.67512745],
           [0.41742095, 0.9525463 , 0.23327981, ..., 0.32532212, 0.19801567,
            0.6232833 ],
           [0.6944111 , 0.8153662 , 0.8784785 , ..., 0.9141526 , 0.70320755,
            0.30811298],
           ...,
           [0.47440866, 0.8776866 , 0.9217215 , ..., 0.19490448, 0.876297  ,
            0.35788348],
           [0.7170527 , 0.62331516, 0.8253239 , ..., 0.23103003, 0.89713883,
            0.49880055],
           [0.47848523, 0.17527123, 0.71261775, ..., 0.2312097 , 0.97343326,
            0.0577847 ]], dtype=float32), array([[[[5.86451  , 5.517415 , 5.7207375, ..., 6.7915215, 6.0706544,
              6.4207573],
             [5.1944075, 4.9530263, 4.945051 , ..., 5.491835 , 6.022678 ,
              5.2811017],
             [4.2078214, 4.6661763, 5.3195806, ..., 6.496422 , 5.495033 ,
              6.226192 ],
             ...,
             [5.156362 , 5.389891 , 4.7567344, ..., 6.864982 , 6.81636  ,
              5.8332195],
             [5.6822596, 5.8323135, 6.2777934, ..., 5.9397993, 5.635709 ,
              6.135378 ],
             [5.93469  , 6.2440915, 5.2715507, ..., 6.5409837, 5.0925794,
              5.4224977]],

            [[6.916129 , 7.0444946, 6.8029222, ..., 7.6816044, 6.7172766,
              6.9710083],
             [6.965274 , 5.854144 , 5.8997173, ..., 6.1655416, 7.1051617,
              7.2111073],
             [5.637144 , 5.8824825, 6.8204   , ..., 7.2308702, 7.8854647,
              7.084792 ],
             ...,
             [6.3636637, 5.9359875, 5.935171 , ..., 7.7974987, 7.8357763,
              6.579688 ],
             [6.734947 , 6.6597652, 7.312319 , ..., 7.2379065, 6.5510654,
              6.6877966],
             [6.838706 , 7.1391935, 7.2941494, ..., 7.5060177, 6.818694 ,
              7.738904 ]],

            [[6.9911475, 6.132315 , 6.6314707, ..., 7.5910263, 7.000129 ,
              6.776153 ],
             [6.198833 , 6.714665 , 5.1082735, ..., 6.7242966, 6.212692 ,
              6.706469 ],
             [5.1469393, 5.8532343, 5.7019525, ..., 6.5489197, 6.579866 ,
              7.6530867],
             ...,
             [6.013097 , 6.0854764, 5.217228 , ..., 7.745466 , 7.4059043,
              7.596361 ],
             [6.1588473, 6.836783 , 6.1890197, ..., 6.9598923, 6.8335495,
              6.125039 ],
             [6.439981 , 6.911032 , 6.602761 , ..., 6.514915 , 6.9144607,
              5.750494 ]],

            ...,

            [[5.819327 , 5.1412625, 5.8655457, ..., 6.076805 , 6.220102 ,
              5.427872 ],
             [4.7967544, 5.014023 , 4.757536 , ..., 5.402268 , 5.976448 ,
              5.9375324],
             [4.000016 , 4.530719 , 4.643493 , ..., 5.3087254, 5.2425942,
              6.4496565],
             ...,
             [4.7920437, 5.0585885, 5.1284847, ..., 5.9401836, 6.2493215,
              6.6267323],
             [5.707882 , 6.119658 , 5.576868 , ..., 6.280273 , 4.720414 ,
              5.5032854],
             [5.3771787, 6.724042 , 6.0067263, ..., 5.7217813, 5.715092 ,
              5.6232343]],

            [[5.5195255, 6.760451 , 6.61945  , ..., 7.1888533, 6.2486362,
              7.331521 ],
             [5.5709124, 5.7675095, 5.61093  , ..., 7.1816506, 5.937005 ,
              7.2496085],
             [5.7331014, 5.0544324, 5.932712 , ..., 6.5339103, 6.233074 ,
              7.1983576],
             ...,
             [5.4193015, 5.945362 , 6.059356 , ..., 6.801163 , 7.2804017,
              6.815986 ],
             [6.2022676, 6.8149443, 7.5469913, ..., 6.5635247, 6.6629305,
              6.2343144],
             [6.7050905, 6.3577976, 7.1640854, ..., 6.0534606, 6.9258695,
              6.7777724]],

            [[6.3145213, 5.02828  , 5.92228  , ..., 6.6211586, 6.3669515,
              5.8085427],
             [5.374866 , 5.302337 , 5.030056 , ..., 5.8313093, 5.6669626,
              5.696846 ],
             [4.8235755, 4.5042634, 5.8108454, ..., 5.989338 , 6.2706738,
              6.658816 ],
             ...,
             [5.7627916, 4.752303 , 4.9913335, ..., 6.3742404, 6.5042963,
              6.5986834],
             [6.0951223, 5.761485 , 6.115269 , ..., 6.40201  , 5.267212 ,
              5.093954 ],
             [5.897287 , 6.239813 , 6.285736 , ..., 6.5027833, 5.7967606,
              6.536734 ]]]], dtype=float32), array([[[[  375,   255,   132, ...,   239,   117,   121],
             [  499,   626,   504, ...,   732,   737,   619],
             [ 1119,  1245,  1251, ...,  1104,  1234,  1363],
             ...,
             [13889, 13895, 13896, ..., 14248, 14131, 14135],
             [14385, 14390, 14392, ..., 14620, 14749, 14879],
             [15255, 15256, 15263, ..., 14993, 15371, 15124]],

            [[  251,   253,   134, ...,   239,   241,   120],
             [  868,   626,   506, ...,   856,   737,   619],
             [ 1367,  1369,  1251, ...,  1476,  1234,  1239],
             ...,
             [14138, 13893, 13897, ..., 14373, 14376, 14135],
             [14385, 14389, 14642, ..., 14620, 14873, 14876],
             [15255, 15256, 15015, ..., 14995, 15371, 15124]],

            [[    0,   254,   380, ...,   363,   242,   371],
             [  747,   626,   504, ...,   611,   862,   619],
             [ 1366,  1368,  1251, ...,  1476,  1235,  1363],
             ...,
             [14263, 13893, 13896, ..., 14248, 14128, 14134],
             [14386, 14390, 14392, ..., 14621, 14874, 14504],
             [15255, 15256, 14888, ..., 14993, 15121, 15372]],

            ...,

            [[    3,   377,   380, ...,   239,   240,   371],
             [  868,   502,   504, ...,   732,   986,   867],
             [ 1367,  1368,  1251, ...,  1476,  1359,  1487],
             ...,
             [13890, 13893, 13896, ..., 14248, 14252, 14011],
             [14633, 14390, 14516, ..., 14496, 14872, 14628],
             [15253, 15256, 15263, ..., 15364, 15122, 15000]],

            [[    1,   378,   134, ...,   115,   242,   123],
             [  868,   503,   504, ...,   856,   736,   619],
             [ 1118,  1369,  1251, ...,  1476,  1234,  1238],
             ...,
             [13891, 13894, 13896, ..., 14125, 14252, 14256],
             [14385, 14389, 14764, ..., 14621, 14748, 14877],
             [15130, 15132, 15260, ..., 15117, 15246, 15124]],

            [[  251,   130,   132, ...,   486,   117,   371],
             [  870,   502,   628, ...,   980,   613,   743],
             [ 1367,  1368,  1125, ...,  1476,  1483,  1362],
             ...,
             [13890, 13893, 13896, ..., 14249, 14128, 14011],
             [14632, 14391, 14643, ..., 14496, 14500, 14876],
             [15255, 15256, 15015, ..., 15119, 15247, 15000]]]], dtype=int64), array([[6.401723 , 7.99276  , 7.3926764, ..., 6.072424 , 7.096947 ,
            7.282749 ]], dtype=float32), array([[122978.43 , 122937.086, 123828.   , ..., 123288.875, 123316.195,
            123730.45 ]], dtype=float32), array([[63416728., 60663204., 63687664., 64774088., 63961760., 65514220.,
            63304888., 65313364., 61328572., 63567772., 62940516., 61785716.,
            63795432., 61696408., 65208524., 63266648., 64948160., 62408324.,
            62815832., 62732528., 63642992., 63509372., 64306648., 64855736.,
            65044540., 61388068., 63810120., 63430768., 62517852., 60381560.,
            62310228., 63720624., 61148848., 63843220., 62324848., 64059400.,
            64671280., 63894200., 63616212., 64175832., 64574820., 61985712.,
            61276120., 63656172., 62578580., 63298924., 63657472., 63137752.,
            63921336., 64611912., 64823640., 64042920., 64179488., 64506124.,
            62347928., 64993344., 63088340., 62823144., 63820736., 62249212.,
            62989800., 64179928., 60364224., 62460840., 61723228., 62678912.,
            63560384., 64825696., 63433600., 63751160., 64522080., 62931368.,
            63198644., 62784024., 62418360., 64357440., 61223864., 62355356.,
            62365176., 63827796., 61765252., 62431656., 61734008., 62575036.,
            61768288., 64780936., 63544544., 65557120., 63399176., 63897280.,
            61951692., 64209336., 64510344., 62958536., 63528632., 64284488.,
            64441192., 63023712., 63188972., 66131480., 63205320., 63471348.,
            62771108., 64518508., 62790076., 61143496., 62495280., 63849584.,
            61136252., 62686040., 62804168., 64178176., 62931928., 63260660.,
            62978440., 61032712., 64834304., 59548072., 64208624., 62750936.,
            64162080., 62219272., 63191712., 64369208., 63317268., 61514620.,
            62804344., 63392336.]], dtype=float32), array([[3.7330071e+09, 4.1130220e+09, 4.2886477e+09, 4.3492403e+09,
            4.1005345e+09, 3.7181914e+09, 4.0603238e+09, 4.0146186e+09,
            4.2790641e+09, 4.0153805e+09]], dtype=float32)]



.. GENERATED FROM PYTHON SOURCE LINES 76-78

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 78-97

.. code-block:: Python


    sess = create_session(script_args.filename, profiling=True)

    for i in range(script_args.repeat):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    if js_profile_to_dataframe is not None:
        df = js_profile_to_dataframe(prof, first_it_out=True)
        print(df.columns)
        df.to_csv("plot_profile_existing_onnx.csv")
        df.to_excel("plot_profile_existing_onnx.xlsx")
        fig, ax = plt.subplots(1, 2, figsize=(10, 5))

        plot_ort_profile(df, ax[0], ax[1], "dort")
        fig.tight_layout()
        fig.savefig("plot_profile_existing_onnx.png")
    else:
        print("Install onnx-extended first.")



.. image-sg:: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :alt: dort, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['cat', 'pid', 'tid', 'dur', 'ts', 'ph', 'name', 'args_op_name',
           'op_name', 'args_thread_scheduling_stats', 'args_output_size',
           'args_parameter_size', 'args_activation_size', 'args_node_index',
           'args_provider', 'event_name', 'iteration', 'it==0'],
          dtype='object')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.124 seconds)


.. _sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_existing_onnx_101.ipynb <plot_profile_existing_onnx_101.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_existing_onnx_101.py <plot_profile_existing_onnx_101.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
