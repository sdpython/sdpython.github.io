
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profile_existing_onnx_101.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profile_existing_onnx_101.py:


.. _l-plot-profile-existing-onnx-101:

101: Profile an existing model with onnxruntime
===============================================

Profiles any onnx model on CPU.

Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 12-44

.. code-block:: Python


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    from experimental_experiment.args import get_parsed_args

    try:
        from onnx_extended.tools.js_profile import (
            js_profile_to_dataframe,
            plot_ort_profile,
        )
    except ImportError:
        js_profile_to_dataframe = None

    try:
        filename = os.path.join(
            os.path.dirname(__file__ or ""), "data", "example_4700-CPUep-opt.onnx"
        )
    except NameError:
        filename = "data/example_4700-CPUep-opt.onnx"

    script_args = get_parsed_args(
        "plot_profile_existing_onnx",
        filename=(filename, "input file"),
        repeat=10,
        expose="",
    )


    for att in "filename,repeat".split(","):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    filename=data/example_4700-CPUep-opt.onnx
    repeat=10




.. GENERATED FROM PYTHON SOURCE LINES 45-46

Random inputs.

.. GENERATED FROM PYTHON SOURCE LINES 46-77

.. code-block:: Python



    def create_random_input(sess):
        feeds = {}
        for i in sess.get_inputs():
            shape = i.shape
            ot = i.type
            if ot == "tensor(float)":
                dtype = np.float32
            else:
                raise ValueError(f"Unsupposed onnx type {ot}.")
            t = np.random.rand(*shape).astype(dtype)
            feeds[i.name] = t
        return feeds


    def create_session(filename, profiling=False):
        from onnxruntime import InferenceSession, SessionOptions

        if not profiling:
            return InferenceSession(filename, providers=["CPUExecutionProvider"])
        opts = SessionOptions()
        opts.enable_profiling = True
        return InferenceSession(filename, opts, providers=["CPUExecutionProvider"])


    sess = create_session(script_args.filename)
    feeds = create_random_input(sess)
    sess.run(None, feeds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [array([[0.12169539, 0.20494446, 0.9565853 , ..., 0.04059948, 0.25842503,
            0.88458014],
           [0.4237756 , 0.22333291, 0.39230597, ..., 0.9641917 , 0.7864268 ,
            0.82670724],
           [0.36956865, 0.3008457 , 0.7411789 , ..., 0.38287452, 0.61086774,
            0.78263515],
           ...,
           [0.18855745, 0.39707392, 0.6705647 , ..., 0.6939687 , 0.97211814,
            0.18720865],
           [0.35732618, 0.66877556, 0.2541621 , ..., 0.654287  , 0.7228365 ,
            0.0740522 ],
           [0.60907346, 0.9122851 , 0.44144377, ..., 0.16313909, 0.25543243,
            0.89204395]], dtype=float32), array([[0.52950984, 0.44401273, 0.8115524 , ..., 0.47053918, 0.80198383,
            0.78848726],
           [0.4459153 , 0.02511575, 0.47835982, ..., 0.56726146, 0.6619791 ,
            0.9381079 ],
           [0.6264281 , 0.06294081, 0.22139594, ..., 0.15648048, 0.6956789 ,
            0.8371761 ],
           ...,
           [0.15661642, 0.67513144, 0.95470595, ..., 0.6745513 , 0.02910437,
            0.57875466],
           [0.48341158, 0.7075832 , 0.49244332, ..., 0.45466602, 0.98395556,
            0.6652613 ],
           [0.5300847 , 0.12674297, 0.6820786 , ..., 0.4143886 , 0.8355789 ,
            0.21006685]], dtype=float32), array([[0.9422612 , 0.24930692, 0.2193227 , ..., 0.64443463, 0.9873386 ,
            0.9865462 ],
           [0.77697563, 0.84279495, 0.74912256, ..., 0.00826018, 0.9926741 ,
            0.33358824],
           [0.44333085, 0.28849304, 0.60627574, ..., 0.2813125 , 0.03829034,
            0.9568974 ],
           ...,
           [0.772392  , 0.42048734, 0.25391376, ..., 0.83129245, 0.74813217,
            0.35398558],
           [0.3676113 , 0.81198   , 0.06800989, ..., 0.54405206, 0.8118946 ,
            0.9372925 ],
           [0.6090493 , 0.44146228, 0.19144893, ..., 0.2945229 , 0.8343558 ,
            0.2833066 ]], dtype=float32), array([[[[5.156078 , 5.5271115, 3.9016857, ..., 5.7149286, 6.26307  ,
              5.4613647],
             [5.4386983, 5.274454 , 4.961226 , ..., 5.5190034, 6.0085497,
              5.017753 ],
             [4.6308613, 5.5006304, 4.2267346, ..., 4.3500395, 5.455844 ,
              4.7962847],
             ...,
             [4.974229 , 5.513679 , 5.5415673, ..., 4.1991878, 5.3221464,
              5.208695 ],
             [6.0280137, 5.4856887, 6.0789957, ..., 4.4540005, 5.208778 ,
              3.9936953],
             [4.946035 , 4.2506843, 6.3356066, ..., 4.479325 , 4.980817 ,
              5.3555694]],

            [[7.0949216, 6.96394  , 6.8124824, ..., 8.555288 , 8.373079 ,
              7.9557815],
             [7.9202466, 7.0791755, 6.8772187, ..., 7.260631 , 7.6455574,
              7.930416 ],
             [7.4747143, 6.311162 , 6.2677493, ..., 7.3702836, 7.6261325,
              6.253655 ],
             ...,
             [8.287424 , 7.414868 , 8.410792 , ..., 7.0186324, 6.3760448,
              7.2926707],
             [8.2123785, 8.325153 , 8.495633 , ..., 6.5283318, 6.699819 ,
              7.254114 ],
             [6.267849 , 8.231162 , 7.8128247, ..., 8.163739 , 7.329392 ,
              6.357855 ]],

            [[6.0977144, 6.3133497, 6.1637354, ..., 7.1951385, 7.572828 ,
              7.502492 ],
             [6.9281545, 6.8441114, 5.7680516, ..., 7.3213706, 7.4124703,
              6.419035 ],
             [6.455365 , 6.5999165, 5.8996468, ..., 5.7949734, 6.5708027,
              6.792839 ],
             ...,
             [7.3588676, 6.8098416, 8.292148 , ..., 5.7107954, 6.609195 ,
              5.7630553],
             [7.024554 , 7.0269976, 7.96541  , ..., 6.305813 , 6.1081886,
              6.387047 ],
             [6.5401692, 6.354172 , 7.290641 , ..., 6.2929587, 6.4388776,
              6.789603 ]],

            ...,

            [[7.8363256, 7.015704 , 6.685525 , ..., 8.006154 , 8.191892 ,
              8.367248 ],
             [7.767931 , 6.607295 , 6.900429 , ..., 7.6466293, 7.717353 ,
              6.671155 ],
             [7.7743855, 7.0521145, 6.0868654, ..., 6.95967  , 7.4710655,
              6.574404 ],
             ...,
             [7.5960007, 7.3400307, 8.822075 , ..., 6.936595 , 6.4544277,
              7.046427 ],
             [7.811201 , 8.639327 , 8.752701 , ..., 7.4818554, 6.4914675,
              6.7530165],
             [6.8029165, 7.624049 , 7.9995193, ..., 7.2444715, 7.398491 ,
              6.0393887]],

            [[8.11101  , 6.6881857, 6.753191 , ..., 8.6843815, 8.059784 ,
              7.7757998],
             [7.894158 , 7.452625 , 7.2224326, ..., 7.6255407, 7.719918 ,
              7.7607064],
             [8.086801 , 7.156481 , 6.5770583, ..., 7.409374 , 7.980105 ,
              6.9142437],
             ...,
             [8.166649 , 7.703517 , 9.190875 , ..., 6.9626904, 6.6767406,
              6.931226 ],
             [8.472142 , 9.094106 , 8.769155 , ..., 6.768585 , 7.3142667,
              7.2804785],
             [6.474668 , 8.771844 , 7.7966876, ..., 8.139958 , 7.583153 ,
              6.6012106]],

            [[7.335044 , 6.059734 , 5.404519 , ..., 7.674732 , 7.96929  ,
              6.557158 ],
             [7.492474 , 6.853912 , 6.243457 , ..., 6.518208 , 7.1244802,
              6.5167503],
             [7.642764 , 7.233636 , 5.100244 , ..., 6.786991 , 7.5275626,
              5.5119805],
             ...,
             [6.716339 , 7.4829483, 8.237718 , ..., 6.73769  , 6.5836864,
              5.698699 ],
             [7.9422917, 7.6686254, 7.21781  , ..., 5.624525 , 6.2967873,
              6.35085  ],
             [6.135308 , 6.758939 , 8.019823 , ..., 6.8084555, 8.246987 ,
              5.721883 ]]]], dtype=float32), array([[[[  373,   131,   134, ...,   360,   119,   122],
             [  496,   624,   753, ...,   733,   863,   743],
             [ 1242,  1245,  1248, ...,  1228,  1356,  1362],
             ...,
             [13889, 14266, 14269, ..., 14375, 14252, 14258],
             [14635, 14389, 14764, ..., 14746, 14748, 14755],
             [15254, 15132, 15012, ..., 15364, 14998, 15001]],

            [[  372,     6,    10, ...,   115,   116,   121],
             [  744,   624,   755, ...,   981,   860,   866],
             [  994,   996,  1249, ...,  1352,  1356,  1238],
             ...,
             [14136, 14266, 14268, ..., 14000, 14252, 14258],
             [14633, 14638, 14516, ..., 14498, 14500, 14631],
             [15131, 15009, 15260, ..., 14993, 15370, 15373]],

            [[  372,     7,   134, ...,   236,   119,   122],
             [  497,   872,   504, ...,   981,   984,   743],
             [ 1118,  1122,  1248, ...,  1476,  1111,  1486],
             ...,
             [13889, 14266, 14268, ..., 14375, 14252, 14259],
             [14633, 14637, 14640, ..., 14622, 14626, 14631],
             [15255, 14884, 15013, ..., 15364, 15369, 15001]],

            ...,

            [[  372,     7,     9, ...,   360,   118,   123],
             [  496,   624,   631, ...,   609,   738,   866],
             [  994,   998,  1001, ...,  1104,  1356,  1362],
             ...,
             [14137, 14267, 14145, ..., 14374, 14379, 14258],
             [14633, 14391, 14640, ..., 14498, 14624, 14507],
             [15007, 14885, 15261, ..., 15242, 15371, 15003]],

            [[  372,     7,   132, ...,   360,   117,   121],
             [  744,   873,   507, ...,   980,   984,   618],
             [  994,  1247,  1249, ...,  1104,  1356,  1485],
             ...,
             [14136, 14266, 14144, ..., 14375, 14254, 14259],
             [14633, 14390, 14516, ..., 14498, 14500, 14506],
             [15131, 14887, 15015, ..., 14993, 14999, 15373]],

            [[  373,     7,     8, ...,   237,   116,   122],
             [  496,   748,   753, ...,   982,   987,   618],
             [  994,  1247,  1250, ...,  1353,  1359,  1362],
             ...,
             [14013, 14143, 14144, ..., 14250, 14252, 14383],
             [14633, 14390, 14516, ..., 14499, 14624, 14504],
             [14883, 14885, 15013, ..., 15242, 15371, 15374]]]], dtype=int64), array([[5.810664 , 6.304636 , 6.7087674, ..., 7.7452097, 7.8445144,
            8.246987 ]], dtype=float32), array([[119981.43 , 119140.64 , 120032.55 , ..., 119471.8  , 119806.414,
            119041.21 ]], dtype=float32), array([[61321928., 61813196., 62859840., 63653532., 61297780., 59087404.,
            61673792., 61060936., 62640184., 62385296., 61253156., 62208624.,
            60441576., 61899120., 62203680., 61092608., 60018396., 62142800.,
            62076048., 61779220., 61828400., 62483544., 61715456., 60214544.,
            61189880., 60051920., 62657192., 59489496., 61217168., 61198784.,
            60704592., 60767392., 62071348., 62351744., 61215708., 58558088.,
            60862216., 60645452., 60036808., 60181564., 63036872., 61190384.,
            62413192., 60014080., 61280056., 60374708., 59677752., 62070160.,
            62442416., 63325336., 60695576., 61915680., 60088244., 62341728.,
            62920368., 63673616., 61934892., 61123792., 61421608., 62238984.,
            61724588., 59144352., 60115752., 63407480., 60310552., 62937200.,
            60773248., 60356488., 61613632., 63352520., 63382864., 61275620.,
            62148176., 61041064., 61483056., 61813616., 61455604., 60647696.,
            62102268., 61957020., 60667216., 60355820., 61519888., 63318028.,
            62190692., 59690904., 59013660., 62122696., 61047168., 61655976.,
            60909840., 61876296., 61754880., 59599248., 59830752., 62227560.,
            61334432., 59614536., 60870612., 63139560., 60050392., 62129744.,
            62388336., 59885344., 59627056., 59867868., 61267944., 61172960.,
            61993952., 63366172., 61160752., 61917624., 62049168., 60140464.,
            61284924., 61569104., 61636360., 62161440., 62575484., 61855312.,
            60155496., 60765472., 60280532., 62221844., 59879208., 59757276.,
            61429364., 60640328.]], dtype=float32), array([[4.0818483e+09, 3.9986317e+09, 3.6469391e+09, 3.8989609e+09,
            3.8189051e+09, 3.7704724e+09, 3.9830479e+09, 4.0554665e+09,
            3.9602719e+09, 3.7903585e+09]], dtype=float32)]



.. GENERATED FROM PYTHON SOURCE LINES 78-80

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 80-99

.. code-block:: Python


    sess = create_session(script_args.filename, profiling=True)

    for _ in range(script_args.repeat):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    if js_profile_to_dataframe is not None:
        df = js_profile_to_dataframe(prof, first_it_out=True)
        print(df.columns)
        df.to_csv("plot_profile_existing_onnx.csv")
        df.to_excel("plot_profile_existing_onnx.xlsx")
        fig, ax = plt.subplots(1, 2, figsize=(10, 5))

        plot_ort_profile(df, ax[0], ax[1], "dort")
        fig.tight_layout()
        fig.savefig("plot_profile_existing_onnx.png")
    else:
        print("Install onnx-extended first.")



.. image-sg:: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :alt: dort, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['cat', 'pid', 'tid', 'dur', 'ts', 'ph', 'name', 'args_op_name',
           'op_name', 'args_thread_scheduling_stats', 'args_output_size',
           'args_parameter_size', 'args_activation_size', 'args_node_index',
           'args_provider', 'event_name', 'iteration', 'it==0'],
          dtype='object')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.812 seconds)


.. _sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_existing_onnx_101.ipynb <plot_profile_existing_onnx_101.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_existing_onnx_101.py <plot_profile_existing_onnx_101.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_profile_existing_onnx_101.zip <plot_profile_existing_onnx_101.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
