
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profile_existing_onnx_101.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profile_existing_onnx_101.py:


101: Profile an existing model with onnxruntime
===============================================

Profiles any onnx model on CPU.

Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 10-42

.. code-block:: Python


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    from experimental_experiment.args import get_parsed_args

    try:
        from onnx_extended.tools.js_profile import (
            js_profile_to_dataframe,
            plot_ort_profile,
        )
    except ImportError:
        js_profile_to_dataframe = None

    try:
        filename = os.path.join(
            os.path.dirname(__file__ or ""), "data", "example_4700-CPUep-opt.onnx"
        )
    except NameError:
        filename = "data/example_4700-CPUep-opt.onnx"

    script_args = get_parsed_args(
        "plot_profile_existing_onnx",
        filename=(filename, "input file"),
        repeat=10,
        expose="",
    )


    for att in "filename,repeat".split(","):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    filename=data/example_4700-CPUep-opt.onnx
    repeat=10




.. GENERATED FROM PYTHON SOURCE LINES 43-44

Random inputs.

.. GENERATED FROM PYTHON SOURCE LINES 44-75

.. code-block:: Python



    def create_random_input(sess):
        feeds = {}
        for i in sess.get_inputs():
            shape = i.shape
            ot = i.type
            if ot == "tensor(float)":
                dtype = np.float32
            else:
                raise ValueError(f"Unsupposed onnx type {ot}.")
            t = np.random.rand(*shape).astype(dtype)
            feeds[i.name] = t
        return feeds


    def create_session(filename, profiling=False):
        from onnxruntime import InferenceSession, SessionOptions

        if not profiling:
            return InferenceSession(filename, providers=["CPUExecutionProvider"])
        opts = SessionOptions()
        opts.enable_profiling = True
        return InferenceSession(filename, opts, providers=["CPUExecutionProvider"])


    sess = create_session(script_args.filename)
    feeds = create_random_input(sess)
    sess.run(None, feeds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [array([[0.17082602, 0.6544652 , 0.5252413 , ..., 0.8277914 , 0.6034155 ,
            0.87003237],
           [0.82025   , 0.3218155 , 0.48356763, ..., 0.96430284, 0.2459397 ,
            0.6193089 ],
           [0.16593911, 0.3755422 , 0.6530296 , ..., 0.56222224, 0.11104574,
            0.11361875],
           ...,
           [0.0778115 , 0.10624511, 0.21992609, ..., 0.24422039, 0.7409708 ,
            0.87865746],
           [0.1819142 , 0.5138292 , 0.96316683, ..., 0.72586477, 0.43916592,
            0.4533273 ],
           [0.24183282, 0.8309936 , 0.5147711 , ..., 0.03533963, 0.96086514,
            0.83203703]], dtype=float32), array([[0.04806166, 0.4844646 , 0.4579532 , ..., 0.44425976, 0.6686958 ,
            0.2612575 ],
           [0.11626533, 0.3721707 , 0.01119785, ..., 0.83921   , 0.2046087 ,
            0.955555  ],
           [0.6987543 , 0.29988033, 0.5937448 , ..., 0.9265805 , 0.48918974,
            0.5820604 ],
           ...,
           [0.798237  , 0.96512765, 0.9612563 , ..., 0.33594236, 0.8676646 ,
            0.9993732 ],
           [0.63784057, 0.2535837 , 0.5906329 , ..., 0.26347014, 0.8446927 ,
            0.13755798],
           [0.79137063, 0.24605334, 0.9861786 , ..., 0.8350806 , 0.08883446,
            0.71900195]], dtype=float32), array([[0.86326826, 0.31654692, 0.45818177, ..., 0.2389633 , 0.81655914,
            0.49743658],
           [0.0469593 , 0.39286715, 0.57653207, ..., 0.3715657 , 0.15726972,
            0.58775866],
           [0.06240853, 0.07341611, 0.48120478, ..., 0.5733358 , 0.19875564,
            0.998069  ],
           ...,
           [0.14518876, 0.8371284 , 0.9636587 , ..., 0.6708242 , 0.41371557,
            0.2565491 ],
           [0.06452893, 0.5264137 , 0.7339212 , ..., 0.9375861 , 0.19329895,
            0.35386246],
           [0.47452807, 0.51360077, 0.06259098, ..., 0.6092349 , 0.71205324,
            0.8293164 ]], dtype=float32), array([[[[6.3874044, 5.6617613, 6.030347 , ..., 6.792384 , 6.3590937,
              6.983223 ],
             [6.7716637, 6.831706 , 5.96338  , ..., 7.436721 , 7.25476  ,
              7.622798 ],
             [6.6454906, 6.600299 , 6.4648314, ..., 7.3430605, 7.974457 ,
              6.633568 ],
             ...,
             [6.6994724, 6.249977 , 6.459511 , ..., 6.720112 , 6.5357313,
              7.468837 ],
             [6.390374 , 7.3545685, 6.2282295, ..., 6.4523554, 5.5816956,
              7.297122 ],
             [6.9014425, 7.900461 , 6.582735 , ..., 5.3475723, 5.776622 ,
              5.950695 ]],

            [[6.3082194, 5.5546517, 5.4401965, ..., 5.7333636, 6.641771 ,
              7.138652 ],
             [6.101142 , 6.122289 , 5.9159646, ..., 7.0885134, 7.212216 ,
              6.882798 ],
             [6.420396 , 6.262525 , 6.4108486, ..., 7.23797  , 6.5734205,
              6.74897  ],
             ...,
             [6.391729 , 6.8433604, 5.856257 , ..., 6.3764014, 6.052132 ,
              7.1787286],
             [5.870995 , 6.8890805, 5.6961546, ..., 5.384432 , 6.5880084,
              6.1128006],
             [5.7834744, 7.3491063, 6.1730695, ..., 5.031336 , 5.620728 ,
              5.6843967]],

            [[7.1208606, 6.6428747, 6.8258476, ..., 7.099901 , 7.470994 ,
              6.972857 ],
             [6.7649517, 5.6027803, 5.7436996, ..., 7.884597 , 7.283676 ,
              7.97558  ],
             [7.03423  , 7.9421625, 7.083135 , ..., 7.660348 , 7.9217124,
              7.9719334],
             ...,
             [7.859993 , 7.7039704, 7.163461 , ..., 5.821365 , 5.8725057,
              7.024916 ],
             [6.6380143, 7.1829195, 6.12691  , ..., 6.734126 , 6.3871765,
              8.33302  ],
             [7.275306 , 9.133617 , 7.205456 , ..., 6.358913 , 5.5811415,
              6.9221783]],

            ...,

            [[6.5316014, 5.5256395, 5.901132 , ..., 6.711454 , 6.316434 ,
              6.326588 ],
             [6.7431626, 6.640866 , 5.829555 , ..., 7.1573405, 7.220418 ,
              7.870568 ],
             [5.6847486, 7.140032 , 6.8390517, ..., 6.826332 , 7.8769307,
              6.4284925],
             ...,
             [7.1305184, 7.3559217, 6.4237638, ..., 6.0841374, 6.4966035,
              5.9854636],
             [5.994366 , 6.8873067, 5.3287325, ..., 5.986458 , 5.847586 ,
              7.3314376],
             [7.011361 , 7.8273025, 6.734327 , ..., 5.716857 , 5.1614194,
              6.3814826]],

            [[5.6272264, 4.9164715, 4.8191423, ..., 6.0829186, 5.312252 ,
              5.7444897],
             [5.171138 , 4.752738 , 4.6791153, ..., 5.792548 , 6.3171043,
              6.024025 ],
             [6.0675755, 5.9142365, 5.9179363, ..., 6.9455566, 5.481869 ,
              6.291609 ],
             ...,
             [6.3191786, 6.534781 , 6.241108 , ..., 4.933024 , 4.738438 ,
              5.978479 ],
             [4.785002 , 5.130413 , 5.3638954, ..., 5.1884403, 5.678799 ,
              5.4127   ],
             [6.0496483, 6.6537037, 6.162078 , ..., 5.02798  , 4.806433 ,
              5.5085816]],

            [[7.127727 , 6.844805 , 6.5266733, ..., 7.6308417, 7.295861 ,
              7.3859634],
             [7.0476317, 6.722775 , 6.365675 , ..., 7.8174176, 7.822226 ,
              7.965703 ],
             [7.0378413, 6.998683 , 6.5696673, ..., 7.8448734, 6.9198647,
              7.739557 ],
             ...,
             [8.210802 , 7.2894783, 7.656599 , ..., 5.79573  , 7.7490616,
              6.4664793],
             [6.848516 , 6.001287 , 6.925356 , ..., 5.7770324, 7.0526752,
              7.037483 ],
             [7.486984 , 7.3931313, 7.446753 , ..., 6.732337 , 5.808856 ,
              7.61154  ]]]], dtype=float32), array([[[[  127,   378,   383, ...,   487,   119,   370],
             [  871,   748,   506, ...,   735,   614,   991],
             [  995,  1123,  1375, ...,  1476,  1482,  1362],
             ...,
             [14262, 14142, 14144, ..., 14372, 14379, 14258],
             [14633, 14513, 14519, ..., 14871, 14873, 14507],
             [15253, 14885, 14888, ..., 15367, 15247, 15127]],

            [[    3,   377,   381, ...,   486,   490,   369],
             [  870,   872,   506, ...,   611,   614,   743],
             [ 1117,  1247,  1374, ...,  1478,  1482,  1363],
             ...,
             [14262, 14141, 14144, ..., 14375, 14377, 14258],
             [14633, 14636, 14519, ..., 14621, 14749, 14630],
             [15007, 15009, 14891, ..., 15119, 15120, 15003]],

            [[  251,   130,   256, ...,   363,   366,   247],
             [  746,   625,   507, ...,   859,   736,   743],
             [  995,  1247,  1248, ...,  1476,  1483,  1239],
             ...,
             [14138, 14266, 14144, ..., 14249, 14379, 14259],
             [14509, 14514, 14519, ..., 14871, 14873, 14754],
             [15253, 15009, 15260, ..., 15367, 14997, 15251]],

            ...,

            [[  249,   253,   132, ...,   487,   366,   370],
             [  746,   750,   505, ...,   980,   736,   990],
             [  993,   997,  1375, ...,  1476,  1482,  1239],
             ...,
             [14137, 14142, 14144, ..., 14372, 14255, 14259],
             [14385, 14762, 14519, ..., 14871, 14873, 14505],
             [15253, 15257, 14888, ..., 15367, 15247, 15251]],

            [[  251,   131,    11, ...,   361,   366,   369],
             [  871,   502,   507, ...,   858,   860,   741],
             [ 1117,  1245,  1249, ...,  1477,  1359,  1238],
             ...,
             [14136, 14142, 14147, ..., 14248, 14379, 14134],
             [14509, 14636, 14519, ..., 14747, 14873, 14755],
             [14880, 15259, 14891, ..., 14995, 15244, 15127]],

            [[  375,   254,   256, ...,   362,   366,   368],
             [  746,   626,   507, ...,   735,   614,   867],
             [  993,  1123,  1250, ...,  1477,  1483,  1113],
             ...,
             [14137, 14142, 14268, ..., 14124, 14253, 14134],
             [14510, 14761, 14395, ..., 14747, 14503, 14504],
             [15004, 15009, 14891, ..., 15118, 15245, 15126]]]], dtype=int64), array([[7.3860455, 8.712489 , 8.393526 , ..., 9.338256 , 8.747925 ,
            7.7490616]], dtype=float32), array([[124040.38 , 125202.69 , 124951.95 , ..., 124368.53 , 124945.26 ,
            124621.125]], dtype=float32), array([[64880336., 65028560., 64567428., 62348224., 64342500., 64214172.,
            65596276., 63030956., 63893920., 65004724., 61997000., 62720328.,
            62541840., 63766504., 63610944., 62270816., 64211172., 63316496.,
            65715616., 65179648., 62360260., 62842440., 63588956., 64468256.,
            64131696., 64887384., 64042280., 62725664., 66829612., 65030128.,
            63124488., 63477016., 61229544., 64209884., 64711980., 61253092.,
            64260336., 64184080., 64210068., 62931792., 63179544., 64604668.,
            64416552., 64014904., 62919552., 63491648., 63356908., 64308624.,
            64399336., 64820320., 62939436., 65133000., 65418836., 64316984.,
            63507720., 65124584., 64337888., 65007136., 65077880., 62299600.,
            63414860., 62846856., 63575144., 63680016., 64552888., 62937992.,
            63843432., 64575816., 64733632., 64390612., 61931320., 60682432.,
            62064688., 66689940., 63496340., 62701020., 64801072., 63669028.,
            63525552., 65765644., 63184792., 63546244., 62118728., 65335632.,
            64789976., 64106124., 64851720., 65535792., 64127920., 62957160.,
            63511760., 63344152., 65083856., 64254632., 64486672., 64216212.,
            64935124., 63139832., 64715492., 63814888., 64994396., 62885040.,
            66236912., 62744160., 61872392., 63730740., 64020640., 66488516.,
            62477936., 63098868., 63918048., 62915920., 63656348., 63751152.,
            62838084., 64553012., 61603376., 65316864., 62209808., 64396180.,
            65163632., 61984172., 63913008., 65686104., 63920128., 61638312.,
            64719744., 63300956.]], dtype=float32), array([[3.7584620e+09, 4.2803628e+09, 3.9739968e+09, 4.1288773e+09,
            4.0404900e+09, 4.3911470e+09, 3.9157591e+09, 4.1088788e+09,
            4.1268544e+09, 3.6179771e+09]], dtype=float32)]



.. GENERATED FROM PYTHON SOURCE LINES 76-78

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 78-97

.. code-block:: Python


    sess = create_session(script_args.filename, profiling=True)

    for _ in range(script_args.repeat):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    if js_profile_to_dataframe is not None:
        df = js_profile_to_dataframe(prof, first_it_out=True)
        print(df.columns)
        df.to_csv("plot_profile_existing_onnx.csv")
        df.to_excel("plot_profile_existing_onnx.xlsx")
        fig, ax = plt.subplots(1, 2, figsize=(10, 5))

        plot_ort_profile(df, ax[0], ax[1], "dort")
        fig.tight_layout()
        fig.savefig("plot_profile_existing_onnx.png")
    else:
        print("Install onnx-extended first.")



.. image-sg:: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :alt: dort, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['cat', 'pid', 'tid', 'dur', 'ts', 'ph', 'name', 'args_op_name',
           'op_name', 'args_thread_scheduling_stats', 'args_output_size',
           'args_parameter_size', 'args_activation_size', 'args_node_index',
           'args_provider', 'event_name', 'iteration', 'it==0'],
          dtype='object')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.674 seconds)


.. _sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_existing_onnx_101.ipynb <plot_profile_existing_onnx_101.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_existing_onnx_101.py <plot_profile_existing_onnx_101.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_profile_existing_onnx_101.zip <plot_profile_existing_onnx_101.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
