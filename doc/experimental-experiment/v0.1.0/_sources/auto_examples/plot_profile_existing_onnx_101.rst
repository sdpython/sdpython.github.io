
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profile_existing_onnx_101.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profile_existing_onnx_101.py:


.. _l-plot-profile-existing-onnx-101:

101: Profile an existing model with onnxruntime
===============================================

Profiles any onnx model on CPU.

Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 12-44

.. code-block:: Python


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    from experimental_experiment.args import get_parsed_args

    try:
        from onnx_extended.tools.js_profile import (
            js_profile_to_dataframe,
            plot_ort_profile,
        )
    except ImportError:
        js_profile_to_dataframe = None

    try:
        filename = os.path.join(
            os.path.dirname(__file__ or ""), "data", "example_4700-CPUep-opt.onnx"
        )
    except NameError:
        filename = "data/example_4700-CPUep-opt.onnx"

    script_args = get_parsed_args(
        "plot_profile_existing_onnx",
        filename=(filename, "input file"),
        repeat=10,
        expose="",
    )


    for att in "filename,repeat".split(","):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    filename=data/example_4700-CPUep-opt.onnx
    repeat=10




.. GENERATED FROM PYTHON SOURCE LINES 45-46

Random inputs.

.. GENERATED FROM PYTHON SOURCE LINES 46-77

.. code-block:: Python



    def create_random_input(sess):
        feeds = {}
        for i in sess.get_inputs():
            shape = i.shape
            ot = i.type
            if ot == "tensor(float)":
                dtype = np.float32
            else:
                raise ValueError(f"Unsupposed onnx type {ot}.")
            t = np.random.rand(*shape).astype(dtype)
            feeds[i.name] = t
        return feeds


    def create_session(filename, profiling=False):
        from onnxruntime import InferenceSession, SessionOptions

        if not profiling:
            return InferenceSession(filename, providers=["CPUExecutionProvider"])
        opts = SessionOptions()
        opts.enable_profiling = True
        return InferenceSession(filename, opts, providers=["CPUExecutionProvider"])


    sess = create_session(script_args.filename)
    feeds = create_random_input(sess)
    sess.run(None, feeds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [array([[0.6081272 , 0.08754983, 0.7618034 , ..., 0.4413768 , 0.03048587,
            0.5445972 ],
           [0.12242565, 0.34521762, 0.71770495, ..., 0.6216597 , 0.04637191,
            0.67349774],
           [0.5448759 , 0.4686611 , 0.34338003, ..., 0.3685259 , 0.39682683,
            0.8458638 ],
           ...,
           [0.75881416, 0.76124954, 0.45653832, ..., 0.3094098 , 0.80175805,
            0.6131373 ],
           [0.19105929, 0.3924565 , 0.8942705 , ..., 0.4883363 , 0.13275385,
            0.68582314],
           [0.49744642, 0.5082631 , 0.0699909 , ..., 0.35105562, 0.71206087,
            0.8425864 ]], shape=(128, 1024), dtype=float32), array([[0.77683985, 0.56801933, 0.80955416, ..., 0.6024895 , 0.38781846,
            0.24601041],
           [0.43018326, 0.7380961 , 0.9286677 , ..., 0.48841777, 0.07881589,
            0.14428727],
           [0.93965095, 0.5207358 , 0.19976677, ..., 0.9025123 , 0.07071102,
            0.5914698 ],
           ...,
           [0.30774304, 0.6948969 , 0.5871512 , ..., 0.06326038, 0.99251866,
            0.43227565],
           [0.02677837, 0.34080485, 0.43424472, ..., 0.00247719, 0.6429447 ,
            0.42366126],
           [0.8242461 , 0.30724117, 0.31563535, ..., 0.971129  , 0.8415738 ,
            0.6512566 ]], shape=(1024, 30752), dtype=float32), array([[0.675103  , 0.3451708 , 0.76785004, ..., 0.2579067 , 0.8639445 ,
            0.2155123 ],
           [0.90229577, 0.561696  , 0.7263974 , ..., 0.35595697, 0.08976997,
            0.9679715 ],
           [0.11489007, 0.74765617, 0.6512884 , ..., 0.37245855, 0.64740986,
            0.498772  ],
           ...,
           [0.46839878, 0.64465034, 0.7683494 , ..., 0.34533748, 0.5923243 ,
            0.30745682],
           [0.7062976 , 0.04786127, 0.1995681 , ..., 0.5881951 , 0.42665625,
            0.4760434 ],
           [0.6964266 , 0.76390207, 0.31958053, ..., 0.5452505 , 0.90921754,
            0.25363976]], shape=(10, 128), dtype=float32), array([[[[5.880856 , 6.5808144, 6.339082 , ..., 5.120481 , 5.8217497,
              4.8644547],
             [6.2743335, 6.2915206, 6.6478934, ..., 5.0098605, 5.3116035,
              6.007346 ],
             [6.5906363, 6.0966253, 5.709048 , ..., 4.907146 , 5.0411544,
              5.531983 ],
             ...,
             [5.6197977, 5.140984 , 6.736707 , ..., 5.417052 , 5.62453  ,
              5.826563 ],
             [5.2650747, 5.8352556, 6.0429907, ..., 4.893454 , 4.448897 ,
              4.8191285],
             [6.1263137, 5.370641 , 5.772966 , ..., 4.6130815, 4.4974246,
              4.881321 ]],

            [[8.202737 , 8.33304  , 7.5763736, ..., 7.154644 , 8.02935  ,
              5.8063955],
             [7.4537883, 8.240712 , 8.578116 , ..., 6.521772 , 7.0693135,
              6.199446 ],
             [7.628517 , 7.1611977, 7.714712 , ..., 5.731591 , 6.025697 ,
              6.681887 ],
             ...,
             [7.456163 , 7.1877427, 8.476637 , ..., 7.1007447, 7.1973157,
              6.466    ],
             [5.6463094, 7.2974763, 7.011524 , ..., 6.558886 , 6.2259393,
              6.044668 ],
             [6.7315845, 5.91999  , 7.2689314, ..., 6.690207 , 5.699365 ,
              6.154155 ]],

            [[9.531435 , 8.899031 , 8.266045 , ..., 7.994363 , 7.0887218,
              6.636865 ],
             [7.7237844, 8.966909 , 9.677335 , ..., 7.248223 , 7.325321 ,
              7.2867537],
             [7.780747 , 7.7859483, 8.093038 , ..., 5.838749 , 6.9782434,
              6.6125875],
             ...,
             [7.401725 , 8.364063 , 8.929359 , ..., 7.6550527, 7.039374 ,
              7.2671065],
             [7.1262894, 7.7561364, 7.7425237, ..., 6.653093 , 6.5982738,
              6.752394 ],
             [6.587343 , 6.565485 , 7.513492 , ..., 6.809073 , 6.5094304,
              6.261499 ]],

            ...,

            [[8.522767 , 8.71834  , 8.031247 , ..., 7.208363 , 7.6560764,
              6.8220105],
             [8.476115 , 7.981187 , 8.1801405, ..., 6.8581204, 7.156217 ,
              6.7832165],
             [7.323962 , 7.8084617, 7.9606705, ..., 6.3687677, 6.3155637,
              6.3513417],
             ...,
             [7.229931 , 7.924447 , 8.134349 , ..., 6.971257 , 6.7122636,
              6.5488877],
             [7.173193 , 7.007743 , 7.6322885, ..., 6.528549 , 5.9862437,
              6.685692 ],
             [6.307736 , 6.7778897, 7.694128 , ..., 6.0446663, 6.2811246,
              6.397328 ]],

            [[7.309082 , 7.583525 , 6.438034 , ..., 5.5777397, 7.217033 ,
              5.384175 ],
             [6.731872 , 7.157468 , 7.9320483, ..., 5.613805 , 5.346828 ,
              6.291454 ],
             [7.2293167, 6.134546 , 7.104151 , ..., 5.1236863, 5.072382 ,
              6.4963584],
             ...,
             [6.245771 , 6.1798763, 7.524152 , ..., 6.4304852, 5.857333 ,
              6.0479803],
             [5.618598 , 5.8391566, 6.978305 , ..., 6.032942 , 5.447264 ,
              5.699334 ],
             [6.1755347, 5.3275266, 7.262515 , ..., 5.530749 , 4.8505177,
              4.9417133]],

            [[6.792594 , 8.188676 , 7.94493  , ..., 6.664923 , 7.1078415,
              5.1217337],
             [7.4980125, 7.874947 , 7.7337346, ..., 6.3558774, 6.8345695,
              6.644884 ],
             [6.224816 , 7.7945013, 7.222908 , ..., 5.025057 , 7.019038 ,
              5.812497 ],
             ...,
             [5.911128 , 7.2361426, 7.773911 , ..., 6.306079 , 7.227046 ,
              6.27203  ],
             [5.310443 , 6.79059  , 7.4620914, ..., 6.459319 , 5.030471 ,
              5.0640154],
             [5.6956296, 6.595496 , 6.141481 , ..., 5.8193855, 5.5383835,
              6.424295 ]]]], shape=(1, 32, 124, 124), dtype=float32), array([[[[  127,   379,   132, ...,   115,   116,   247],
             [  870,   750,   629, ...,   611,   985,   988],
             [ 1365,  1370,  1002, ...,  1107,  1111,  1237],
             ...,
             [14136, 14019, 13898, ..., 14372, 14378, 14257],
             [14634, 14389, 14392, ..., 14871, 14750, 14753],
             [14882, 15259, 15263, ..., 14994, 14996, 15001]],

            [[  126,   376,     9, ...,   485,   118,   122],
             [  868,   627,   752, ...,   611,   984,   988],
             [ 1242,  1245,  1374, ...,  1479,  1359,  1238],
             ...,
             [14260, 14266, 14268, ..., 14372, 14379, 14009],
             [14386, 14513, 14392, ..., 14871, 14626, 14753],
             [14882, 15135, 15138, ..., 15118, 14998, 15003]],

            [[  126,   376,   132, ...,   485,   488,   121],
             [  869,   874,   504, ...,   611,   862,   988],
             [  992,  1371,  1373, ...,  1355,  1235,  1113],
             ...,
             [14260, 14016, 14021, ..., 14372, 14379, 14011],
             [14385, 14761, 14392, ..., 14870, 14749, 14752],
             [15006, 15134, 15137, ..., 14995, 14997, 15003]],

            ...,

            [[    1,   253,     8, ...,   487,   119,   122],
             [  868,   875,   505, ...,   609,   861,   988],
             [ 1365,  1371,  1373, ...,  1107,  1235,  1236],
             ...,
             [14260, 13895, 14023, ..., 14372, 14254, 14135],
             [14508, 14760, 14393, ..., 14870, 14750, 14878],
             [14882, 15259, 15139, ..., 14994, 15244, 15001]],

            [[  126,   129,   132, ...,   485,   116,   122],
             [  744,   875,   507, ...,   609,   736,   988],
             [ 1116,  1371,  1374, ...,  1353,  1235,  1112],
             ...,
             [14136, 14266, 14145, ..., 14372, 14378, 14383],
             [14385, 14389, 14392, ..., 14623, 14749, 14878],
             [15006, 15132, 15138, ..., 15118, 14996, 15002]],

            [[    1,   378,     9, ...,   115,   116,   122],
             [  869,   503,   630, ...,   611,   612,   989],
             [  993,  1369,  1372, ...,  1479,  1232,  1237],
             ...,
             [14260, 14264, 13898, ..., 14372, 14379, 14135],
             [14384, 14389, 14640, ..., 14871, 14750, 14753],
             [15007, 15135, 15139, ..., 14994, 14997, 15001]]]],
          shape=(1, 32, 31, 31), dtype=int64), array([[6.6684446, 6.641479 , 7.25924  , ..., 8.73623  , 8.240873 ,
            8.091528 ]], shape=(1, 30752), dtype=float32), array([[122313.4  , 122249.03 , 123177.07 , ..., 122329.375, 121897.41 ,
            123219.49 ]], shape=(1, 1024), dtype=float32), array([[61786308., 62145440., 61771520., 64542832., 63656160., 62387480.,
            61440672., 64611752., 63891216., 63869196., 62525700., 61320560.,
            62985180., 63113424., 62317048., 63363936., 61033248., 63051512.,
            63861448., 62527448., 63438672., 63574332., 63887124., 61215616.,
            61824368., 63400880., 62764888., 65857644., 62821596., 63670384.,
            62505984., 62457128., 62087184., 62588088., 60592792., 63978856.,
            62149724., 61763368., 62884064., 62418320., 62522152., 64665784.,
            63483592., 63039908., 63407632., 61698824., 62037696., 62557280.,
            62392940., 62675328., 62185772., 64000040., 63998128., 62759584.,
            62622888., 62491840., 61375000., 62552232., 59860168., 62680224.,
            64024840., 64160648., 62490252., 63181512., 63308872., 62426936.,
            62853944., 64146356., 63239632., 62903704., 64343508., 66136248.,
            63994052., 62478912., 62619076., 62486164., 63604008., 63095980.,
            64015164., 63158400., 64251120., 62883920., 62190452., 62313224.,
            62880148., 62616388., 64871048., 60778416., 62531500., 64146016.,
            63294968., 63133648., 63000192., 62537648., 63455620., 62989928.,
            63662192., 65035896., 60705940., 62894468., 62240112., 62261564.,
            61701448., 62954608., 62791576., 63628212., 61204624., 60314824.,
            61841376., 62435960., 63821352., 62771628., 64947864., 62429888.,
            62988772., 62641400., 62467496., 62139296., 60633224., 60682416.,
            62558240., 63411380., 59437408., 64002560., 65159708., 63750124.,
            62567972., 61624632.]], dtype=float32), array([[4.1617229e+09, 4.4957455e+09, 3.4160632e+09, 3.9008681e+09,
            3.8803901e+09, 4.0895744e+09, 4.1010435e+09, 4.0295882e+09,
            4.0744407e+09, 4.0734648e+09]], dtype=float32)]



.. GENERATED FROM PYTHON SOURCE LINES 78-80

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 80-99

.. code-block:: Python


    sess = create_session(script_args.filename, profiling=True)

    for _ in range(script_args.repeat):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    if js_profile_to_dataframe is not None:
        df = js_profile_to_dataframe(prof, first_it_out=True)
        print(df.columns)
        df.to_csv("plot_profile_existing_onnx.csv")
        df.to_excel("plot_profile_existing_onnx.xlsx")
        fig, ax = plt.subplots(1, 2, figsize=(10, 5))

        plot_ort_profile(df, ax[0], ax[1], "dort")
        fig.tight_layout()
        fig.savefig("plot_profile_existing_onnx.png")
    else:
        print("Install onnx-extended first.")



.. image-sg:: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :alt: dort, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['cat', 'pid', 'tid', 'dur', 'ts', 'ph', 'name',
           'args_thread_scheduling_stats', 'args_output_size',
           'args_parameter_size', 'args_activation_size', 'args_node_index',
           'args_provider', 'args_op_name', 'op_name', 'event_name', 'iteration',
           'it==0'],
          dtype='object')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.878 seconds)


.. _sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_existing_onnx_101.ipynb <plot_profile_existing_onnx_101.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_existing_onnx_101.py <plot_profile_existing_onnx_101.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_profile_existing_onnx_101.zip <plot_profile_existing_onnx_101.zip>`


.. include:: plot_profile_existing_onnx_101.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
