
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_torch_dort.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_torch_dort.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_torch_dort.py:


Evaluate DORT
=============

It compares DORT to eager mode and the default backend.

To run the script:

::

    python _doc/examples/plot_torch_dort --help

Some helpers
++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 16-87

.. code-block:: Python


    import warnings

    try:
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            import onnxruntime

            has_cuda = "CUDAExecutionProvider" in onnxruntime.get_available_providers()
    except ImportError:
        print("onnxruntime not available.")
        import sys

        sys.exit(0)

    import torch._dynamo
    import contextlib
    import itertools
    import os
    import gc
    import platform

    # import pickle
    import pprint
    import multiprocessing
    import time
    import cProfile
    import pstats
    import io
    import logging
    from pstats import SortKey

    import numpy as np
    import matplotlib.pyplot as plt
    import pandas
    import onnx
    from onnx_array_api.profiling import profile2graph
    import torch
    from torch import nn
    import torch.nn.functional as F
    import experimental_experiment
    from experimental_experiment.plotting.memory import memory_peak_plot
    from experimental_experiment.ext_test_case import (
        get_parsed_args,
        measure_time,
        get_figure,
    )
    from experimental_experiment.memory_peak import start_spying_on
    from tqdm import tqdm

    has_cuda = has_cuda and torch.cuda.is_available()
    logging.disable(logging.ERROR)


    def system_info():
        obs = {}
        obs["processor"] = platform.processor()
        obs["cores"] = multiprocessing.cpu_count()
        try:
            obs["cuda"] = 1 if torch.cuda.is_available() else 0
            obs["cuda_count"] = torch.cuda.device_count()
            obs["cuda_name"] = torch.cuda.get_device_name()
            obs["cuda_capa"] = torch.cuda.get_device_capability()
        except (RuntimeError, AssertionError):
            # no cuda
            pass
        return obs


    pprint.pprint(system_info())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'cores': 8,
     'cuda': 1,
     'cuda_capa': (6, 1),
     'cuda_count': 1,
     'cuda_name': 'NVIDIA GeForce GTX 1060',
     'processor': 'x86_64'}




.. GENERATED FROM PYTHON SOURCE LINES 88-89

Scripts arguments

.. GENERATED FROM PYTHON SOURCE LINES 89-118

.. code-block:: Python



    script_args = get_parsed_args(
        "plot_torch_dort",
        description=__doc__,
        scenarios={
            "small": "small model to test",
            "middle": "55Mb model",
            "large": "1Gb model",
        },
        warmup=5,
        repeat=5,
        repeat1=(1, "repeat for the first iteration"),
        maxtime=(
            2,
            "maximum time to run a model to measure the computation time, "
            "it is 0.1 when scenario is small",
        ),
        expose="scenarios,repeat,repeat1,warmup",
    )

    if script_args.scenario in (None, "small"):
        script_args.maxtime = 0.1
    print(f"scenario={script_args.scenario or 'small'}")
    print(f"warmup={script_args.warmup}")
    print(f"repeat={script_args.repeat}")
    print(f"repeat1={script_args.repeat1}")
    print(f"maxtime={script_args.maxtime}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    scenario=small
    warmup=5
    repeat=5
    repeat1=1
    maxtime=0.1




.. GENERATED FROM PYTHON SOURCE LINES 119-123

The model
+++++++++

A simple model to convert.

.. GENERATED FROM PYTHON SOURCE LINES 123-214

.. code-block:: Python



    class MyModelClass(nn.Module):
        def __init__(self, scenario=script_args.scenario):
            super(MyModelClass, self).__init__()
            if scenario == "middle":
                self.large = False
                self.conv1 = nn.Conv2d(1, 32, 5)
                # self.conv2 = nn.Conv2d(128, 16, 5)
                self.fc1 = nn.Linear(30752, 1024)
                self.fcs = []
                self.fc2 = nn.Linear(1024, 128)
                self.fc3 = nn.Linear(128, 10)
            elif scenario in (None, "small"):
                self.large = False
                self.conv1 = nn.Conv2d(1, 16, 5)
                # self.conv2 = nn.Conv2d(16, 16, 5)
                self.fc1 = nn.Linear(144, 512)
                self.fcs = []
                self.fc2 = nn.Linear(512, 128)
                self.fc3 = nn.Linear(128, 10)
            elif scenario in (None, "large"):
                self.large = True
                self.conv1 = nn.Conv2d(1, 32, 5)
                # self.conv2 = nn.Conv2d(128, 16, 5)
                self.fc1 = nn.Linear(30752, 4096)
                # torch script does not support loops.
                self.fca = nn.Linear(4096, 4096)
                self.fcb = nn.Linear(4096, 4096)
                self.fcc = nn.Linear(4096, 4096)
                self.fcd = nn.Linear(4096, 4096)
                self.fce = nn.Linear(4096, 4096)
                self.fcf = nn.Linear(4096, 4096)
                self.fcg = nn.Linear(4096, 4096)
                self.fch = nn.Linear(4096, 4096)
                self.fci = nn.Linear(4096, 4096)
                # end of the unfolded loop.
                self.fc2 = nn.Linear(4096, 128)
                self.fc3 = nn.Linear(128, 10)
            else:
                raise ValueError(f"Unsupported scenario={scenario!r}.")

        def forward(self, x):
            x = F.max_pool2d(F.relu(self.conv1(x)), (4, 4))
            # x = F.max_pool2d(F.relu(self.conv2(x)), 2)
            x = torch.flatten(x, 1)
            x = F.relu(self.fc1(x))
            if self.large:
                # loop
                x = F.relu(self.fca(x))
                x = F.relu(self.fcb(x))
                x = F.relu(self.fcc(x))
                x = F.relu(self.fcd(x))
                x = F.relu(self.fce(x))
                x = F.relu(self.fcf(x))
                x = F.relu(self.fcg(x))
                x = F.relu(self.fch(x))
                x = F.relu(self.fci(x))
                # end of the loop
            x = F.relu(self.fc2(x))
            y = self.fc3(x)
            return y


    def create_model_and_input(scenario=script_args.scenario):
        if scenario == "middle":
            shape = [1, 1, 128, 128]
        elif scenario in (None, "small"):
            shape = [1, 1, 16, 16]
        elif scenario == "large":
            shape = [1, 1, 128, 128]
        else:
            raise ValueError(f"Unsupported scenario={scenario!r}.")
        input_tensor = torch.rand(*shape).to(torch.float32)
        model = MyModelClass(scenario=scenario)
        assert model(input_tensor) is not None
        return model, input_tensor


    def torch_model_size(model):
        size_model = 0
        for param in model.parameters():
            size = param.numel() * torch.finfo(param.data.dtype).bits / 8
            size_model += size
        return size_model


    model, input_tensor = create_model_and_input()
    model_size = torch_model_size(model)
    print(f"model size={model_size / 2 ** 20} Mb")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    model size=0.5401992797851562 Mb




.. GENERATED FROM PYTHON SOURCE LINES 215-217

Backends
++++++++

.. GENERATED FROM PYTHON SOURCE LINES 217-260

.. code-block:: Python



    def get_torch_eager(model, *args):
        def my_compiler(gm, example_inputs):
            return gm.forward

        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, fullgraph=True, backend=my_compiler)
                optimized_mod(*args)
                return optimized_mod


    def get_torch_default(model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, fullgraph=True, mode="reduce-overhead")
                optimized_mod(*args)
                return optimized_mod


    def get_torch_dort(model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, backend="onnxrt", fullgraph=True)
                optimized_mod(*args)
                return optimized_mod


    def get_torch_opti(model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            os.environ["ONNX_OPTIMIZER"] = "1"
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, backend="onnxrt", fullgraph=True)
                optimized_mod(*args)
                os.environ["ONNX_OPTIMIZER"] = "0"
                return optimized_mod









.. GENERATED FROM PYTHON SOURCE LINES 261-262

Let's check they are working.

.. GENERATED FROM PYTHON SOURCE LINES 262-289

.. code-block:: Python


    export_functions = [
        get_torch_eager,
        get_torch_default,
        get_torch_dort,
        # get_torch_opti,
    ]

    exporters = {f.__name__.replace("get_", ""): f for f in export_functions}

    supported_exporters = {}
    for k, v in exporters.items():
        print(f"run function {k}")
        filename = f"plot_torch_dort_{k}.onnx"
        torch._dynamo.reset()
        model, input_tensor = create_model_and_input()
        try:
            v(model, input_tensor)
        except Exception as e:
            print(f"skipped due to {str(e)[:1000]}")
            continue
        supported_exporters[k] = v
        del model
        gc.collect()
        time.sleep(1)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run function torch_eager
    run function torch_default
    run function torch_dort




.. GENERATED FROM PYTHON SOURCE LINES 290-292

Compile and Memory
++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 292-344

.. code-block:: Python



    def flatten(ps):
        obs = ps["cpu"].to_dict(unit=2**20)
        if "gpus" in ps:
            for i, g in enumerate(ps["gpus"]):
                for k, v in g.to_dict(unit=2**20).items():
                    obs[f"gpu{i}_{k}"] = v
        return obs


    data = []

    for k, v in supported_exporters.items():
        print(f"run compile for memory {k} on cpu")
        filename = f"plot_torch_dort_{k}.onnx"
        if has_cuda:
            torch.cuda.set_device(0)
        torch._dynamo.reset()
        # CPU
        model, input_tensor = create_model_and_input()
        stat = start_spying_on(cuda=1 if has_cuda else 0)
        v(model, input_tensor)
        obs = flatten(stat.stop())
        print("done.")
        obs.update(dict(export=k, p="cpu"))
        data.append(obs)
        del model
        gc.collect()
        time.sleep(1)

        if not has_cuda:
            continue
        if k in {"torch_default"}:
            print(f"skip compile for memory {k} on cuda")
            continue
        torch._dynamo.reset()
        # CUDA
        model, input_tensor = create_model_and_input()
        model = model.cuda()
        input_tensor = input_tensor.cuda()
        print(f"run compile for memory {k} on cuda")
        stat = start_spying_on(cuda=1 if has_cuda else 0)
        v(model, input_tensor)
        obs = flatten(stat.stop())
        print("done.")
        obs.update(dict(export=k, p="cuda"))
        data.append(obs)
        del model
        gc.collect()
        time.sleep(1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run compile for memory torch_eager on cpu
    done.
    run compile for memory torch_eager on cuda
    done.
    run compile for memory torch_default on cpu
    done.
    skip compile for memory torch_default on cuda
    run compile for memory torch_dort on cpu
    done.
    run compile for memory torch_dort on cuda
    done.




.. GENERATED FROM PYTHON SOURCE LINES 345-346

The result.

.. GENERATED FROM PYTHON SOURCE LINES 346-363

.. code-block:: Python

    df1 = pandas.DataFrame(data)
    df1.to_csv("plot_torch_dort_1_memory.csv", index=False)
    df1.to_excel("plot_torch_dort_1_memory.xlsx", index=False)
    print(df1)

    for p in ["cpu", "cuda"]:
        if not has_cuda and p == "cuda":
            continue
        ax = memory_peak_plot(
            df1[df1["p"] == p],
            key=("export",),
            bars=[model_size * i / 2**20 for i in range(1, 5)],
            suptitle=f"Memory Consumption of the Compilation on {p}\n"
            f"model size={model_size / 2**20:1.0f} Mb",
        )
        get_figure(ax).savefig(f"plot_torch_dort_1_memory_{p}.png")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_001.png
         :alt: Memory Consumption of the Compilation on cpu model size=1 Mb, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_002.png
         :alt: Memory Consumption of the Compilation on cuda model size=1 Mb, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              peak         mean         n        begin          end   gpu0_peak   gpu0_mean    gpu0_n  gpu0_begin    gpu0_end         export     p
    0  3041.660156  3041.656738  0.000008  3041.656250  3041.660156  668.269531  668.269531  0.000008  668.269531  668.269531    torch_eager   cpu
    1  3532.410156  3269.065543  0.000091  3041.660156  3532.410156  840.269531  730.164268  0.000091  668.269531  840.269531    torch_eager  cuda
    2  3534.156250  3533.640179  0.000175  3532.968750  3534.156250  840.269531  840.269531  0.000175  840.269531  840.269531  torch_default   cpu
    3  3535.066406  3534.200994  0.000031  3534.160156  3535.066406  840.269531  840.269531  0.000031  840.269531  840.269531     torch_dort   cpu
    4  3537.398438  3535.464367  0.000039  3535.355469  3537.398438  856.269531  841.440263  0.000039  840.269531  856.269531     torch_dort  cuda




.. GENERATED FROM PYTHON SOURCE LINES 364-366

dort first iteration speed
++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 366-439

.. code-block:: Python


    data = []

    for k, v in supported_exporters.items():
        print(f"run dort cpu {k}: {script_args.repeat1}")
        times = []
        for i in range(int(script_args.repeat1)):
            model, input_tensor = create_model_and_input()
            torch._dynamo.reset()
            if k == "opti":
                os.environ["ONNX_OPTIMIZER"] = "1"
            begin = time.perf_counter()
            v(model, input_tensor)
            duration = time.perf_counter() - begin
            if k == "opti":
                os.environ["ONNX_OPTIMIZER"] = "0"
            times.append(duration)
            del model
            gc.collect()
            time.sleep(1)

        print(f"done: {times[-1]}")
        data.append(
            dict(
                export=k,
                time=np.mean(times),
                min=min(times),
                max=max(times),
                first=times[0],
                last=times[-1],
                std=np.std(times),
                p="cpu",
            )
        )

        if not has_cuda:
            continue
        if k in {"torch_dort", "torch_default"}:
            print(f"skip dort cuda {k}: {script_args.repeat1}")
            continue
        print(f"run dort cuda {k}: {script_args.repeat1}")
        times = []
        for i in range(int(script_args.repeat1)):
            model, input_tensor = create_model_and_input()
            model = model.cuda()
            input_tensor = input_tensor.cuda()
            torch._dynamo.reset()
            if k == "opti":
                os.environ["ONNX_OPTIMIZER"] = "1"
            begin = time.perf_counter()
            v(model, input_tensor)
            duration = time.perf_counter() - begin
            if k == "opti":
                os.environ["ONNX_OPTIMIZER"] = "0"
            times.append(duration)
            del model
            gc.collect()
            time.sleep(1)

        print(f"done: {times[-1]}")
        data.append(
            dict(
                export=k,
                time=np.mean(times),
                min=min(times),
                max=max(times),
                first=times[0],
                last=times[-1],
                std=np.std(times),
                p="cuda",
            )
        )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run dort cpu torch_eager: 1
    done: 0.03181750000021566
    run dort cuda torch_eager: 1
    done: 0.04995300000064162
    run dort cpu torch_default: 1
    done: 1.828602900000078
    skip dort cuda torch_default: 1
    run dort cpu torch_dort: 1
    done: 0.238282899999831
    skip dort cuda torch_dort: 1




.. GENERATED FROM PYTHON SOURCE LINES 440-441

The result.

.. GENERATED FROM PYTHON SOURCE LINES 441-452

.. code-block:: Python

    df1 = pandas.DataFrame(data)
    df1.to_csv("plot_torch_dort_1_time.csv", index=False)
    df1.to_excel("plot_torch_dort_1_time.xlsx", index=False)
    print(df1)

    fig, ax = plt.subplots(1, 1)
    dfi = df1[["export", "p", "time", "std"]].set_index(["export", "p"])
    dfi["time"].plot.bar(ax=ax, title="Compilation time", yerr=dfi["std"], rot=30)
    fig.tight_layout()
    fig.savefig("plot_torch_dort_1_time.png")




.. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_003.png
   :alt: Compilation time
   :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              export      time       min       max     first      last  std     p
    0    torch_eager  0.031818  0.031818  0.031818  0.031818  0.031818  0.0   cpu
    1    torch_eager  0.049953  0.049953  0.049953  0.049953  0.049953  0.0  cuda
    2  torch_default  1.828603  1.828603  1.828603  1.828603  1.828603  0.0   cpu
    3     torch_dort  0.238283  0.238283  0.238283  0.238283  0.238283  0.0   cpu




.. GENERATED FROM PYTHON SOURCE LINES 453-455

Compilation Profiling
+++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 455-527

.. code-block:: Python



    def clean_text(text):
        pathes = [
            os.path.abspath(
                os.path.normpath(os.path.join(os.path.dirname(torch.__file__), ".."))
            ),
            os.path.abspath(
                os.path.normpath(os.path.join(os.path.dirname(onnx.__file__), ".."))
            ),
            os.path.abspath(
                os.path.normpath(
                    os.path.join(os.path.dirname(experimental_experiment.__file__), "..")
                )
            ),
        ]
        for p in pathes:
            text = text.replace(p, "")
        text = text.replace("experimental_experiment", "experimental_experiment".upper())
        return text


    def profile_function(
        name, export_function, with_args=True, verbose=False, suffix="export"
    ):
        if verbose:
            print(f"profile {name}: {export_function}")
        if with_args:
            model, input_tensor = create_model_and_input()
            pr = cProfile.Profile()
            pr.enable()
            for i in range(int(script_args.repeat1)):
                export_function(model, input_tensor)
            pr.disable()
        else:
            pr = cProfile.Profile()
            pr.enable()
            for i in range(int(script_args.repeat1)):
                export_function()
            pr.disable()
        s = io.StringIO()
        sortby = SortKey.CUMULATIVE
        ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
        ps.print_stats()
        # with open(f"plot_torch_dort_profile_{name}_{suffix}.pickle", "wb") as f:
        #     pickle.dump(ps, f)

        raw = s.getvalue()
        text = "\n".join(raw.split("\n")[:200])
        if verbose:
            print(text)
        with open(f"plot_torch_dort_profile_{name}_{suffix}.txt", "w") as f:
            f.write(raw)

        root, nodes = profile2graph(ps, clean_text=clean_text)
        text = root.to_text()
        with open(f"plot_torch_dort_profile_{name}_{suffix}_h.txt", "w") as f:
            f.write(text)
        if verbose:
            print("done.")


    model, input_tensor = create_model_and_input()


    def function_to_profile(model=model, input_tensor=input_tensor):
        return get_torch_dort(model, input_tensor)


    profile_function("dort", function_to_profile, verbose=True, suffix="1")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    profile dort: <function function_to_profile at 0x7ff215360280>
             400453 function calls (381149 primitive calls) in 0.699 seconds

       Ordered by: cumulative time

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000    0.717    0.717 /home/xadupre/github/experimental-experiment/_doc/examples/plot_torch_dort.py:520(function_to_profile)
            1    0.000    0.000    0.717    0.717 /home/xadupre/github/experimental-experiment/_doc/examples/plot_torch_dort.py:240(get_torch_dort)
         16/1    0.000    0.000    0.716    0.716 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/module.py:1507(_wrapped_call_impl)
         16/1    0.000    0.000    0.716    0.716 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/module.py:1513(_call_impl)
          4/1    0.000    0.000    0.716    0.716 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py:430(_fn)
            1    0.000    0.000    0.621    0.621 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py:566(catch_errors)
            1    0.000    0.000    0.621    0.621 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:278(_convert_frame_assert)
          2/1    0.000    0.000    0.621    0.621 /usr/lib/python3.10/contextlib.py:76(inner)
            1    0.000    0.000    0.621    0.621 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:439(_compile)
          3/1    0.000    0.000    0.620    0.620 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:241(time_wrapper)
            1    0.000    0.000    0.620    0.620 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:520(compile_inner)
            1    0.000    0.000    0.608    0.608 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/bytecode_transformation.py:1025(transform_code_object)
            1    0.000    0.000    0.605    0.605 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:140(_fn)
            1    0.000    0.000    0.604    0.604 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:473(transform)
            1    0.000    0.000    0.601    0.601 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:2124(run)
            1    0.000    0.000    0.601    0.601 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:780(run)
           44    0.001    0.000    0.600    0.014 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:678(step)
            1    0.000    0.000    0.535    0.535 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:2230(RETURN_VALUE)
            1    0.000    0.000    0.535    0.535 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/output_graph.py:808(compile_subgraph)
            1    0.000    0.000    0.534    0.534 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/output_graph.py:1032(compile_and_call_fx_graph)
            1    0.000    0.000    0.531    0.531 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/output_graph.py:1114(call_user_compiler)
          2/1    0.000    0.000    0.530    0.530 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/repro/after_dynamo.py:59(debug_wrapper)
            1    0.000    0.000    0.530    0.530 /home/xadupre/.local/lib/python3.10/site-packages/torch/__init__.py:1753(__call__)
            1    0.000    0.000    0.530    0.530 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:1181(torch_compile_backend)
            1    0.000    0.000    0.530    0.530 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:1079(__call__)
            1    0.000    0.000    0.530    0.530 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/backends/common.py:18(compiler_fn)
            1    0.000    0.000    0.530    0.530 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/aot_autograd.py:792(aot_module_simplified)
            1    0.000    0.000    0.529    0.529 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/aot_autograd.py:387(create_aot_dispatcher_function)
            1    0.000    0.000    0.454    0.454 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/runtime_wrappers.py:401(aot_wrapper_dedupe)
            1    0.000    0.000    0.454    0.454 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/runtime_wrappers.py:620(aot_wrapper_synthetic_base)
            1    0.000    0.000    0.454    0.454 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/jit_compile_runtime_wrappers.py:144(aot_dispatch_autograd)
          3/2    0.000    0.000    0.364    0.182 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/external_utils.py:23(inner)
          282    0.013    0.000    0.293    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/functional_tensor.py:247(__torch_dispatch__)
            1    0.000    0.000    0.277    0.277 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/dispatch_and_compile_graph.py:126(aot_dispatch_autograd_graph)
            1    0.000    0.000    0.271    0.271 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/dispatch_and_compile_graph.py:34(_create_graph)
            1    0.000    0.000    0.271    0.271 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:1084(wrapped)
            1    0.000    0.000    0.270    0.270 /home/xadupre/.local/lib/python3.10/site-packages/torch/_compile.py:20(inner)
            1    0.000    0.000    0.269    0.269 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:629(dispatch_trace)
            1    0.000    0.000    0.269    0.269 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:663(trace)
            1    0.000    0.000    0.263    0.263 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:650(flatten_fn)
            1    0.000    0.000    0.263    0.263 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:652(wrapped)
            1    0.000    0.000    0.244    0.244 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:465(joint_helper)
            1    0.000    0.000    0.244    0.244 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:347(_functionalized_f_helper)
      966/577    0.003    0.000    0.226    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_stats.py:15(wrapper)
            1    0.000    0.000    0.225    0.225 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:248(inner_fn_with_anomaly)
            1    0.000    0.000    0.225    0.225 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:183(inner_fn)
      263/242    0.002    0.000    0.156    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:741(__torch_dispatch__)
            4    0.001    0.000    0.154    0.039 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:106(run)
            1    0.001    0.001    0.148    0.148 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:621(min_cut_rematerialization_partition)
      263/242    0.001    0.000    0.148    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:772(inner_torch_dispatch)
            1    0.000    0.000    0.141    0.141 /home/xadupre/.local/lib/python3.10/site-packages/torch/autograd/__init__.py:278(grad)
            1    0.000    0.000    0.140    0.140 /home/xadupre/.local/lib/python3.10/site-packages/torch/autograd/graph.py:739(_engine_run_backward)
        69/54    0.003    0.000    0.140    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:406(proxy_call)
            1    0.003    0.003    0.140    0.140 {method 'run_backward' of 'torch._C._EngineBase' objects}
           76    0.001    0.000    0.131    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:184(run_node)
      775/597    0.004    0.000    0.123    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:857(tree_map)
            2    0.000    0.000    0.119    0.060 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:608(functional_call)
           22    0.000    0.000    0.116    0.005 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:590(run_node)
          755    0.003    0.000    0.113    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:1032(tree_map_only)
      679/675    0.002    0.000    0.108    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:864(__torch_dispatch__)
      679/675    0.005    0.000    0.105    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1185(dispatch)
            1    0.000    0.000    0.095    0.095 /home/xadupre/github/experimental-experiment/_doc/examples/plot_torch_dort.py:165(forward)
            1    0.000    0.000    0.094    0.094 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/aot_autograd.py:901(forward)
          3/1    0.000    0.000    0.094    0.094 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/utils.py:78(g)
            1    0.000    0.000    0.094    0.094 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/runtime_wrappers.py:75(runtime_wrapper)
          2/1    0.000    0.000    0.094    0.094 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/utils.py:95(call_func_at_runtime_with_args)
            1    0.000    0.000    0.094    0.094 /home/xadupre/.local/lib/python3.10/site-packages/torch/autograd/function.py:556(apply)
            1    0.000    0.000    0.094    0.094 {built-in method apply}
            1    0.000    0.000    0.094    0.094 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/jit_compile_runtime_wrappers.py:392(forward)
            1    0.000    0.000    0.094    0.094 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_lazy_graph_module.py:112(_lazy_forward)
          359    0.003    0.000    0.094    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:918(_cached_dispatch_impl)
    10125/4791    0.037    0.000    0.093    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:706(map_aggregate)
          2/1    0.000    0.000    0.091    0.091 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph_module.py:736(call_wrapped)
            1    0.000    0.000    0.091    0.091 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph_module.py:299(__call__)
            1    0.000    0.000    0.091    0.091 <eval_with_key>.32:4(forward)
            1    0.000    0.000    0.091    0.091 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:834(_ort_acclerated_call)
            5    0.002    0.000    0.088    0.018 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:57(_extract_graph_with_inputs_outputs)
    4791/4755    0.009    0.000    0.088    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:698(map_arg)
            1    0.000    0.000    0.082    0.082 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:99(inner_fn)
            1    0.000    0.000    0.076    0.076 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:135(_extract_fwd_bwd_modules)
     3131/618    0.016    0.000    0.073    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:732(unflatten)
          464    0.003    0.000    0.070    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:876(create_node)
           44    0.000    0.000    0.068    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:256(call_function)
          964    0.002    0.000    0.066    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:797(tree_flatten)
     3536/964    0.013    0.000    0.065    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:776(_tree_flatten_helper)
      131/123    0.003    0.000    0.061    0.000 {method 'detach' of 'torch._C.TensorBase' objects}
          303    0.002    0.000    0.060    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1216(node_copy)
      700/592    0.001    0.000    0.059    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_ops.py:568(__call__)
            1    0.000    0.000    0.057    0.057 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/collect_metadata_analysis.py:92(inner)
            8    0.000    0.000    0.056    0.007 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:298(call_module)
    6175/6024    0.006    0.000    0.052    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:712(<genexpr>)
          112    0.000    0.000    0.052    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:207(snapshot_fake)
          474    0.006    0.000    0.050    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:165(__init__)
            9    0.000    0.000    0.048    0.005 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:459(wrapper)
            9    0.000    0.000    0.048    0.005 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:1192(CALL_FUNCTION)
            9    0.000    0.000    0.048    0.005 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:631(call_function)
            9    0.000    0.000    0.047    0.005 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/linear.py:115(forward)
            9    0.002    0.000    0.047    0.005 {built-in method torch._C._nn.linear}
           61    0.000    0.000    0.046    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:305(track_tensor_tree)
        76/61    0.000    0.000    0.046    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:306(wrap_with_proxy)
    70565/69608    0.037    0.000    0.045    0.000 {built-in method builtins.isinstance}
     1905/760    0.004    0.000    0.042    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:790(<listcomp>)
          359    0.008    0.000    0.041    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:953(_cache_key)
           10    0.000    0.000    0.040    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/builder.py:1278(wrap_fx_proxy)
           10    0.000    0.000    0.040    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/builder.py:1338(wrap_fx_proxy_cls)
           74    0.001    0.000    0.039    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:241(set_meta)
            4    0.000    0.000    0.037    0.009 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:761(module_call_wrapper)
            4    0.000    0.000    0.037    0.009 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:587(call_module)
            4    0.000    0.000    0.037    0.009 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:763(forward)
        79/74    0.000    0.000    0.037    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:210(extract_val)
         87/3    0.002    0.000    0.036    0.012 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py:71(wrapper)
            4    0.000    0.000    0.035    0.009 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/nn_module.py:242(call_function)
            9    0.000    0.000    0.035    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/functional.py:1489(relu)
            9    0.001    0.000    0.035    0.004 {built-in method torch.relu}
           94    0.001    0.000    0.034    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/proxy.py:173(create_proxy)
            9    0.000    0.000    0.033    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1553(get_fake_value)
           19    0.000    0.000    0.033    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/functional_utils.py:23(to_fun)
           19    0.000    0.000    0.033    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/functional_tensor.py:172(to_functional)
           14    0.000    0.000    0.031    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1138(wrap_fake_exception)
            7    0.001    0.000    0.030    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1454(eliminate_dead_code)
          334    0.004    0.000    0.030    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1114(_output_from_cache_entry)
           13    0.003    0.000    0.029    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1383(lint)
          635    0.004    0.000    0.028    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:435(__update_args_kwargs)
            1    0.000    0.000    0.027    0.027 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/fake_tensor_prop.py:64(propagate)
            1    0.000    0.000    0.027    0.027 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:1025(compile)
         6276    0.008    0.000    0.027    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:606(_is_leaf)
         9120    0.010    0.000    0.027    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:599(_get_node_type)
            1    0.000    0.000    0.027    0.027 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/infra/partitioner.py:326(partition_and_fuse)
            1    0.000    0.000    0.025    0.025 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/infra/partitioner.py:265(fuse_partitions)
            1    0.000    0.000    0.025    0.025 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/utils/fuser_utils.py:218(fuse_by_partitions)
    2740/1210    0.008    0.000    0.024    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:821(_tree_leaves_helper)
            1    0.000    0.000    0.024    0.024 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/fake_tensor_prop.py:71(propagate_dont_convert_inputs)
       129/69    0.001    0.000    0.023    0.000 /usr/lib/python3.10/copy.py:259(_reconstruct)
           27    0.000    0.000    0.023    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/fake_tensor_prop.py:32(run_node)
         1905    0.003    0.000    0.023    0.000 <string>:2(__init__)
           39    0.000    0.000    0.023    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:318(__call__)
            4    0.000    0.000    0.023    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1149(deepcopy_to_fake_tensor)
           39    0.000    0.000    0.023    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:240(from_real_tensor)
            4    0.000    0.000    0.023    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1151(<lambda>)
        216/4    0.001    0.000    0.023    0.006 /usr/lib/python3.10/copy.py:128(deepcopy)
            4    0.000    0.000    0.022    0.006 /usr/lib/python3.10/copy.py:227(_deepcopy_dict)
            1    0.000    0.000    0.022    0.022 /home/xadupre/.local/lib/python3.10/site-packages/networkx/algorithms/flow/maxflow.py:304(minimum_cut)
           39    0.001    0.000    0.022    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/meta_utils.py:627(__call__)
            1    0.001    0.001    0.022    0.022 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/compile_utils.py:25(fx_graph_cse)
            1    0.000    0.000    0.021    0.021 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py:495(run)
        69/54    0.000    0.000    0.021    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:1222(maybe_handle_decomp)
           96    0.001    0.000    0.021    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/proxy.py:117(create_node)
      406/358    0.004    0.000    0.021    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1010(_prep_args_for_hash)
            5    0.000    0.000    0.021    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/_prims_common/wrappers.py:242(_fn)
            3    0.000    0.000    0.021    0.007 /home/xadupre/.local/lib/python3.10/site-packages/torch/_decomp/__init__.py:115(_fn)
            3    0.000    0.000    0.021    0.007 /home/xadupre/.local/lib/python3.10/site-packages/torch/_decomp/decompositions.py:209(threshold_backward)
           39    0.002    0.000    0.021    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/meta_utils.py:186(meta_tensor)
         1905    0.006    0.000    0.020    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:627(__post_init__)
    3729/3479    0.005    0.000    0.020    0.000 {built-in method builtins.next}
            8    0.000    0.000    0.020    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/parameter.py:55(__deepcopy__)
            1    0.000    0.000    0.019    0.019 /home/xadupre/.local/lib/python3.10/site-packages/networkx/algorithms/flow/preflowpush.py:291(preflow_push)
            1    0.001    0.001    0.019    0.019 /home/xadupre/.local/lib/python3.10/site-packages/networkx/algorithms/flow/preflowpush.py:22(preflow_push_impl)
           40    0.000    0.000    0.019    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1726(__torch_function__)
          540    0.001    0.000    0.019    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:839(tree_leaves)
           27    0.000    0.000    0.019    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py:413(run_node)
            1    0.000    0.000    0.017    0.017 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:676(classify_nodes)
    11445/11001    0.009    0.000    0.017    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:688(__setattr__)
           25    0.001    0.000    0.017    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1211(_dispatch_impl)
         9120    0.012    0.000    0.017    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:588(_is_namedtuple_instance)
           27    0.000    0.000    0.017    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1607(from_tensor)
           17    0.000    0.000    0.016    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py:647(call_function)
            3    0.001    0.000    0.016    0.005 {built-in method torch.flatten}
      149/140    0.001    0.000    0.016    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_ops.py:594(decompose)
            9    0.000    0.000    0.016    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/collect_metadata_analysis.py:82(_to_fun)
           36    0.000    0.000    0.016    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/fake_tensor_prop.py:45(extract_val)
            3    0.000    0.000    0.015    0.005 {built-in method torch.where}
            1    0.000    0.000    0.015    0.015 /home/xadupre/github/onnxruntime/build/linux_cuda/Release/onnxruntime/capi/onnxruntime_inference_collection.py:358(__init__)
            1    0.015    0.015    0.015    0.015 /home/xadupre/github/onnxruntime/build/linux_cuda/Release/onnxruntime/capi/onnxruntime_inference_collection.py:436(_create_inference_session)
          393    0.007    0.000    0.015    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:673(extract_tensor_metadata)
         1254    0.002    0.000    0.014    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:992(wrapped)
         4682    0.006    0.000    0.014    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:704(<lambda>)
            2    0.000    0.000    0.014    0.007 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/_pass.py:240(run)
           85    0.002    0.000    0.014    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/functional_tensor.py:78(__new__)
            1    0.000    0.000    0.013    0.013 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py:1717(_run)
         3818    0.008    0.000    0.013    0.000 {built-in method builtins.sum}
           19    0.000    0.000    0.013    0.001 {built-in method torch._to_functional_tensor}
    1518/1404    0.002    0.000    0.012    0.000 /usr/lib/python3.10/contextlib.py:130(__enter__)
          755    0.002    0.000    0.012    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:970(map_only)
            1    0.000    0.000    0.012    0.012 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/guards.py:947(__init__)
            5    0.000    0.000    0.012    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/torch.py:255(call_function)
            1    0.000    0.000    0.012    0.012 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/utils/fuser_utils.py:91(fuse_as_graphmodule)
           38    0.001    0.000    0.012    0.000 {built-in method torch._mirror_autograd_meta_to}
           10    0.000    0.000    0.012    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:1286(LOAD_ATTR)
           63    0.001    0.000    0.011    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_python_dispatch.py:355(return_and_correct_aliasing)
           74    0.001    0.000    0.011    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:935(erase_node)
      347/151    0.001    0.000    0.011    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:596(create_arg)
            3    0.000    0.000    0.011    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/conv.py:459(forward)
            2    0.000    0.000    0.011    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/_decomp/decompositions_for_rng.py:129(reset)
         1974    0.002    0.000    0.011    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:716(<genexpr>)
            3    0.000    0.000    0.011    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/conv.py:451(_conv_forward)
    done.




.. GENERATED FROM PYTHON SOURCE LINES 528-530

Benchmark exported models with ORT
++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 530-631

.. code-block:: Python



    def benchmark(shape):
        data = []
        data_mem_first_run = []
        data_mem_run = []
        confs = list(
            itertools.product(
                export_functions,
                ["CPU", "CUDA"],
            )
        )
        loop = tqdm(confs)
        print(f"number of experiments: {len(loop)}")
        for export_fct, p in loop:
            name = export_fct.__name__.replace("get_torch_", "")
            obs = {}  # system_info()
            obs["name"] = name
            obs["compute"] = p
            obs["export"] = name

            model, input_tensor = create_model_and_input()
            if p == "CUDA":
                if not has_cuda:
                    continue
                model = model.cuda()
                input_tensor = input_tensor.cuda()
            try:
                exported_model = export_fct(model, input_tensor)
            except torch._dynamo.exc.BackendCompilerFailed as e:
                # Triton only supports devices of CUDA Capability >= 7.0, but your device is of CUDA capability 6.1
                obs["error"] = str(e)
                data.append(obs)
                continue

            def call_model(
                export_fct=export_fct,
                exported_model=exported_model,
                input_tensor=input_tensor,
            ):
                if "opti" in export_fct.__name__:
                    os.environ["ONNX_OPTIMIZER"] = "1"
                res = exported_model(input_tensor).sum()
                if "opti" in export_fct.__name__:
                    os.environ["ONNX_OPTIMIZER"] = "0"
                return res

            stat = start_spying_on(cuda=1 if has_cuda else 0)
            try:
                call_model()
            except Exception as e:
                loop.set_description(f"ERROR-run: {name} {e}")
                obs.update({"error": e, "step": "load"})
                data.append(obs)
                stat.stop()
                continue
            memobs = flatten(stat.stop())
            memobs.update(obs)
            data_mem_first_run.append(memobs)

            # memory consumption
            stat = start_spying_on(cuda=1 if has_cuda else 0)
            for i in range(0, script_args.warmup):
                call_model()
            memobs = flatten(stat.stop())
            memobs.update(obs)
            data_mem_run.append(memobs)

            obs.update(
                measure_time(
                    call_model,
                    max_time=script_args.maxtime,
                    repeat=script_args.repeat,
                    number=1,
                )
            )

            profile_function(name, call_model, with_args=False, suffix=f"run_{p}")

            loop.set_description(f"{obs['average']} {name} {p}")
            data.append(obs)
            del model
            del exported_model
            gc.collect()
            time.sleep(1)

        df = pandas.DataFrame(data)
        df.to_csv("plot_torch_dort_ort_time.csv", index=False)
        df.to_excel("plot_torch_dort_ort_time.xlsx", index=False)
        dfmemr = pandas.DataFrame(data_mem_run)
        dfmemr.to_csv("plot_torch_dort_ort_run_mem.csv", index=False)
        dfmemr.to_excel("plot_torch_dort_ort_run_mem.xlsx", index=False)
        dfmemfr = pandas.DataFrame(data_mem_first_run)
        dfmemfr.to_csv("plot_torch_dort_ort_first_run_mem.csv", index=False)
        dfmemfr.to_excel("plot_torch_dort_ort_first_run_mem.xlsx", index=False)
        return df, dfmemfr, dfmemr


    df, dfmemfr, dfmemr = benchmark(list(input_tensor.shape))
    print(df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/6 [00:00<?, ?it/s]number of experiments: 6
    0.0003706112781987131 eager CPU:   0%|          | 0/6 [00:00<?, ?it/s]    0.0003706112781987131 eager CPU:  17%|█▋        | 1/6 [00:01<00:09,  1.89s/it]    0.0005701854271370649 eager CUDA:  17%|█▋        | 1/6 [00:02<00:09,  1.89s/it]    0.0005701854271370649 eager CUDA:  33%|███▎      | 2/6 [00:03<00:07,  1.81s/it]    0.00040437854785171896 default CPU:  33%|███▎      | 2/6 [00:05<00:07,  1.81s/it]    0.00040437854785171896 default CPU:  50%|█████     | 3/6 [00:07<00:07,  2.60s/it]    0.00040437854785171896 default CPU:  67%|██████▋   | 4/6 [00:07<00:03,  1.72s/it]    0.00048618658008635346 dort CPU:  67%|██████▋   | 4/6 [00:08<00:03,  1.72s/it]       0.00048618658008635346 dort CPU:  83%|████████▎ | 5/6 [00:09<00:01,  1.83s/it]    0.0007700093333308663 dort CUDA:  83%|████████▎ | 5/6 [00:10<00:01,  1.83s/it]    0.0007700093333308663 dort CUDA: 100%|██████████| 6/6 [00:11<00:00,  1.91s/it]    0.0007700093333308663 dort CUDA: 100%|██████████| 6/6 [00:11<00:00,  1.94s/it]
          name compute   export   average  deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time                                              error
    0    eager     CPU    eager  0.000371   0.000031  0.000346  0.000514     1.0   399.0  0.147874          64.0     0.001025                                                NaN
    1    eager    CUDA    eager  0.000570   0.000052  0.000519  0.000703     1.0   199.0  0.113467          64.0     0.001137                                                NaN
    2  default     CPU  default  0.000404   0.000013  0.000392  0.000460     1.0   303.0  0.122527          64.0     0.001026                                                NaN
    3  default    CUDA  default       NaN        NaN       NaN       NaN     NaN     NaN       NaN           NaN          NaN  backend='inductor' raised:\nRuntimeError: Foun...
    4     dort     CPU     dort  0.000486   0.000125  0.000414  0.000919     1.0   231.0  0.112309          64.0     0.001694                                                NaN
    5     dort    CUDA     dort  0.000770   0.000243  0.000652  0.002719     1.0   150.0  0.115501          64.0     0.003234                                                NaN




.. GENERATED FROM PYTHON SOURCE LINES 632-633

Other view

.. GENERATED FROM PYTHON SOURCE LINES 633-669

.. code-block:: Python



    def view_time(df, title, suffix="time"):
        piv = pandas.pivot_table(df, index="export", columns=["compute"], values="average")
        print(piv)
        piv.to_csv(f"plot_torch_dort_{suffix}_compute.csv")
        piv.to_excel(f"plot_torch_dort_{suffix}_compute.xlsx")

        piv_cpu = pandas.pivot_table(
            df[df.compute == "CPU"],
            index="export",
            columns=["compute"],
            values="average",
        )

        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        fig.suptitle(title)
        piv_cpu.plot.barh(ax=ax[0], title="CPU", logx=True)

        if has_cuda:
            piv_gpu = pandas.pivot_table(
                df[df.compute == "CUDA"],
                index="export",
                columns=["compute"],
                values="average",
            )
            piv_gpu.plot.barh(ax=ax[1], title="CUDA", logx=True)

        fig.tight_layout()
        fig.savefig(f"plot_torch_dort_{suffix}.png")
        return ax


    view_time(df, "Compares processing time on backends")





.. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_004.png
   :alt: Compares processing time on backends, CPU, CUDA
   :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    compute       CPU     CUDA
    export                    
    default  0.000404      NaN
    dort     0.000486  0.00077
    eager    0.000371  0.00057

    array([<Axes: title={'center': 'CPU'}, ylabel='export'>,
           <Axes: title={'center': 'CUDA'}, ylabel='export'>], dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 670-672

Memory First Running Time (ORT)
+++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 672-686

.. code-block:: Python


    for compute in ["CPU", "CUDA"]:
        if not has_cuda and compute == "CUDA":
            continue
        ax = memory_peak_plot(
            dfmemfr[dfmemfr.compute == compute],
            ("export",),
            suptitle=f"Memory Consumption of backend, first running time"
            f"\nrunning on {compute}",
            bars=[model_size * i / 2**20 for i in range(1, 3)],
            figsize=(18, 6),
        )
        get_figure(ax).savefig(f"plot_torch_dort_first_run_mem_{compute}.png")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_005.png
         :alt: Memory Consumption of backend, first running time running on CPU, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_006.png
         :alt: Memory Consumption of backend, first running time running on CUDA, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_006.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 687-689

Memory Running Time (ORT)
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 689-702

.. code-block:: Python


    for compute in ["CPU", "CUDA"]:
        if not has_cuda and compute == "CUDA":
            continue
        ax = memory_peak_plot(
            dfmemr[dfmemr.compute == compute],
            ("export",),
            suptitle=f"Memory Consumption of backens, running time"
            f"\nrunning on {compute}",
            bars=[model_size * i / 2**20 for i in range(1, 3)],
            figsize=(18, 6),
        )
        get_figure(ax).savefig(f"plot_torch_dort_run_mem_{compute}.png")



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_007.png
         :alt: Memory Consumption of backens, running time running on CPU, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_008.png
         :alt: Memory Consumption of backens, running time running on CUDA, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_008.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 53.305 seconds)


.. _sphx_glr_download_auto_examples_plot_torch_dort.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_torch_dort.ipynb <plot_torch_dort.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_torch_dort.py <plot_torch_dort.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
