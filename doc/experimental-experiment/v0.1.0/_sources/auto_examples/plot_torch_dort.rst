
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_torch_dort.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_torch_dort.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_torch_dort.py:


Evaluate DORT
=============

It compares DORT to eager mode and :epkg:`onnxrt backend`.

To run the script:

::

    python _doc/examples/plot_torch_dort --help

Some helpers
++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 16-84

.. code-block:: Python


    import warnings

    try:
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            import onnxruntime

            has_cuda = "CUDAExecutionProvider" in onnxruntime.get_available_providers()
    except ImportError:
        print("onnxruntime not available.")
        import sys

        sys.exit(0)

    import torch._dynamo
    import contextlib
    import itertools
    import os
    import gc
    import platform

    # import pickle
    import pprint
    import multiprocessing
    import time
    import cProfile
    import pstats
    import io
    import logging
    from pstats import SortKey

    import numpy as np
    import matplotlib.pyplot as plt
    import pandas
    import onnx
    from onnx_array_api.profiling import profile2graph
    import torch
    from torch import nn
    import torch.nn.functional as F
    import experimental_experiment
    from experimental_experiment.plotting.memory import memory_peak_plot
    from experimental_experiment.ext_test_case import measure_time, get_figure
    from experimental_experiment.args import get_parsed_args
    from experimental_experiment.memory_peak import start_spying_on
    from tqdm import tqdm

    has_cuda = has_cuda and torch.cuda.is_available()
    logging.disable(logging.ERROR)


    def system_info():
        obs = {}
        obs["processor"] = platform.processor()
        obs["cores"] = multiprocessing.cpu_count()
        try:
            obs["cuda"] = 1 if torch.cuda.is_available() else 0
            obs["cuda_count"] = torch.cuda.device_count()
            obs["cuda_name"] = torch.cuda.get_device_name()
            obs["cuda_capa"] = torch.cuda.get_device_capability()
        except (RuntimeError, AssertionError):
            # no cuda
            pass
        return obs


    pprint.pprint(system_info())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'cores': 8,
     'cuda': 1,
     'cuda_capa': (6, 1),
     'cuda_count': 1,
     'cuda_name': 'NVIDIA GeForce GTX 1060',
     'processor': 'x86_64'}




.. GENERATED FROM PYTHON SOURCE LINES 85-86

Scripts arguments

.. GENERATED FROM PYTHON SOURCE LINES 86-115

.. code-block:: Python



    script_args = get_parsed_args(
        "plot_torch_dort",
        description=__doc__,
        scenarios={
            "small": "small model to test",
            "middle": "55Mb model",
            "large": "1Gb model",
        },
        warmup=5,
        repeat=5,
        repeat1=(1, "repeat for the first iteration"),
        maxtime=(
            2,
            "maximum time to run a model to measure the computation time, "
            "it is 0.1 when scenario is small",
        ),
        expose="scenarios,repeat,repeat1,warmup",
    )

    if script_args.scenario in (None, "small"):
        script_args.maxtime = 0.1
    print(f"scenario={script_args.scenario or 'small'}")
    print(f"warmup={script_args.warmup}")
    print(f"repeat={script_args.repeat}")
    print(f"repeat1={script_args.repeat1}")
    print(f"maxtime={script_args.maxtime}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    scenario=small
    warmup=5
    repeat=5
    repeat1=1
    maxtime=0.1




.. GENERATED FROM PYTHON SOURCE LINES 116-120

The model
+++++++++

A simple model to convert.

.. GENERATED FROM PYTHON SOURCE LINES 120-211

.. code-block:: Python



    class MyModelClass(nn.Module):
        def __init__(self, scenario=script_args.scenario):
            super(MyModelClass, self).__init__()
            if scenario == "middle":
                self.large = False
                self.conv1 = nn.Conv2d(1, 32, 5)
                # self.conv2 = nn.Conv2d(128, 16, 5)
                self.fc1 = nn.Linear(30752, 1024)
                self.fcs = []
                self.fc2 = nn.Linear(1024, 128)
                self.fc3 = nn.Linear(128, 10)
            elif scenario in (None, "small"):
                self.large = False
                self.conv1 = nn.Conv2d(1, 16, 5)
                # self.conv2 = nn.Conv2d(16, 16, 5)
                self.fc1 = nn.Linear(144, 512)
                self.fcs = []
                self.fc2 = nn.Linear(512, 128)
                self.fc3 = nn.Linear(128, 10)
            elif scenario in (None, "large"):
                self.large = True
                self.conv1 = nn.Conv2d(1, 32, 5)
                # self.conv2 = nn.Conv2d(128, 16, 5)
                self.fc1 = nn.Linear(30752, 4096)
                # torch script does not support loops.
                self.fca = nn.Linear(4096, 4096)
                self.fcb = nn.Linear(4096, 4096)
                self.fcc = nn.Linear(4096, 4096)
                self.fcd = nn.Linear(4096, 4096)
                self.fce = nn.Linear(4096, 4096)
                self.fcf = nn.Linear(4096, 4096)
                self.fcg = nn.Linear(4096, 4096)
                self.fch = nn.Linear(4096, 4096)
                self.fci = nn.Linear(4096, 4096)
                # end of the unfolded loop.
                self.fc2 = nn.Linear(4096, 128)
                self.fc3 = nn.Linear(128, 10)
            else:
                raise ValueError(f"Unsupported scenario={scenario!r}.")

        def forward(self, x):
            x = F.max_pool2d(F.relu(self.conv1(x)), (4, 4))
            # x = F.max_pool2d(F.relu(self.conv2(x)), 2)
            x = torch.flatten(x, 1)
            x = F.relu(self.fc1(x))
            if self.large:
                # loop
                x = F.relu(self.fca(x))
                x = F.relu(self.fcb(x))
                x = F.relu(self.fcc(x))
                x = F.relu(self.fcd(x))
                x = F.relu(self.fce(x))
                x = F.relu(self.fcf(x))
                x = F.relu(self.fcg(x))
                x = F.relu(self.fch(x))
                x = F.relu(self.fci(x))
                # end of the loop
            x = F.relu(self.fc2(x))
            y = self.fc3(x)
            return y


    def create_model_and_input(scenario=script_args.scenario):
        if scenario == "middle":
            shape = [1, 1, 128, 128]
        elif scenario in (None, "small"):
            shape = [1, 1, 16, 16]
        elif scenario == "large":
            shape = [1, 1, 128, 128]
        else:
            raise ValueError(f"Unsupported scenario={scenario!r}.")
        input_tensor = torch.rand(*shape).to(torch.float32)
        model = MyModelClass(scenario=scenario)
        assert model(input_tensor) is not None
        return model, input_tensor


    def torch_model_size(model):
        size_model = 0
        for param in model.parameters():
            size = param.numel() * torch.finfo(param.data.dtype).bits / 8
            size_model += size
        return size_model


    model, input_tensor = create_model_and_input()
    model_size = torch_model_size(model)
    print(f"model size={model_size / 2 ** 20} Mb")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    model size=0.5401992797851562 Mb




.. GENERATED FROM PYTHON SOURCE LINES 212-214

Backends
++++++++

.. GENERATED FROM PYTHON SOURCE LINES 214-257

.. code-block:: Python



    def get_torch_eager(model, *args):
        def my_compiler(gm, example_inputs):
            return gm.forward

        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, fullgraph=True, backend=my_compiler)
                optimized_mod(*args)
                return optimized_mod


    def get_torch_default(model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, fullgraph=True, mode="reduce-overhead")
                optimized_mod(*args)
                return optimized_mod


    def get_torch_dort(model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, backend="onnxrt", fullgraph=True)
                optimized_mod(*args)
                return optimized_mod


    def get_torch_opti(model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            os.environ["ONNX_OPTIMIZER"] = "1"
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, backend="onnxrt", fullgraph=True)
                optimized_mod(*args)
                os.environ["ONNX_OPTIMIZER"] = "0"
                return optimized_mod









.. GENERATED FROM PYTHON SOURCE LINES 258-259

Let's check they are working.

.. GENERATED FROM PYTHON SOURCE LINES 259-286

.. code-block:: Python


    export_functions = [
        get_torch_eager,
        get_torch_default,
        get_torch_dort,
        # get_torch_opti,
    ]

    exporters = {f.__name__.replace("get_", ""): f for f in export_functions}

    supported_exporters = {}
    for k, v in exporters.items():
        print(f"run function {k}")
        filename = f"plot_torch_dort_{k}.onnx"
        torch._dynamo.reset()
        model, input_tensor = create_model_and_input()
        try:
            v(model, input_tensor)
        except Exception as e:
            print(f"skipped due to {str(e)[:1000]}")
            continue
        supported_exporters[k] = v
        del model
        gc.collect()
        time.sleep(1)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run function torch_eager
    run function torch_default
    run function torch_dort




.. GENERATED FROM PYTHON SOURCE LINES 287-289

Compile and Memory
++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 289-341

.. code-block:: Python



    def flatten(ps):
        obs = ps["cpu"].to_dict(unit=2**20)
        if "gpus" in ps:
            for i, g in enumerate(ps["gpus"]):
                for k, v in g.to_dict(unit=2**20).items():
                    obs[f"gpu{i}_{k}"] = v
        return obs


    data = []

    for k, v in supported_exporters.items():
        print(f"run compile for memory {k} on cpu")
        filename = f"plot_torch_dort_{k}.onnx"
        if has_cuda:
            torch.cuda.set_device(0)
        torch._dynamo.reset()
        # CPU
        model, input_tensor = create_model_and_input()
        stat = start_spying_on(cuda=1 if has_cuda else 0)
        v(model, input_tensor)
        obs = flatten(stat.stop())
        print("done.")
        obs.update(dict(export=k, p="cpu"))
        data.append(obs)
        del model
        gc.collect()
        time.sleep(1)

        if not has_cuda:
            continue
        if k in {"torch_default"}:
            print(f"skip compile for memory {k} on cuda")
            continue
        torch._dynamo.reset()
        # CUDA
        model, input_tensor = create_model_and_input()
        model = model.cuda()
        input_tensor = input_tensor.cuda()
        print(f"run compile for memory {k} on cuda")
        stat = start_spying_on(cuda=1 if has_cuda else 0)
        v(model, input_tensor)
        obs = flatten(stat.stop())
        print("done.")
        obs.update(dict(export=k, p="cuda"))
        data.append(obs)
        del model
        gc.collect()
        time.sleep(1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run compile for memory torch_eager on cpu
    done.
    run compile for memory torch_eager on cuda
    done.
    run compile for memory torch_default on cpu
    done.
    skip compile for memory torch_default on cuda
    run compile for memory torch_dort on cpu
    done.
    run compile for memory torch_dort on cuda
    done.




.. GENERATED FROM PYTHON SOURCE LINES 342-343

The result.

.. GENERATED FROM PYTHON SOURCE LINES 343-360

.. code-block:: Python

    df1 = pandas.DataFrame(data)
    df1.to_csv("plot_torch_dort_1_memory.csv", index=False)
    df1.to_excel("plot_torch_dort_1_memory.xlsx", index=False)
    print(df1)

    for p in ["cpu", "cuda"]:
        if not has_cuda and p == "cuda":
            continue
        ax = memory_peak_plot(
            df1[df1["p"] == p],
            key=("export",),
            bars=[model_size * i / 2**20 for i in range(1, 5)],
            suptitle=f"Memory Consumption of the Compilation on {p}\n"
            f"model size={model_size / 2**20:1.0f} Mb",
        )
        get_figure(ax).savefig(f"plot_torch_dort_1_memory_{p}.png")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_001.png
         :alt: Memory Consumption of the Compilation on cpu model size=1 Mb, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_002.png
         :alt: Memory Consumption of the Compilation on cuda model size=1 Mb, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              peak         mean         n        begin  ...  gpu0_begin    gpu0_end         export     p
    0  4287.691406  4287.691406  0.000008  4287.691406  ...  670.269531  670.269531    torch_eager   cpu
    1  4741.046875  4515.823778  0.000321  4287.691406  ...  670.269531  840.269531    torch_eager  cuda
    2  4742.500000  4741.936704  0.000206  4741.898438  ...  840.269531  840.269531  torch_default   cpu
    3  4742.519531  4742.506836  0.000034  4742.503906  ...  840.269531  840.269531     torch_dort   cpu
    4  4744.464844  4742.583223  0.000056  4742.519531  ...  840.269531  856.269531     torch_dort  cuda

    [5 rows x 12 columns]




.. GENERATED FROM PYTHON SOURCE LINES 361-363

dort first iteration speed
++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 363-436

.. code-block:: Python


    data = []

    for k, v in supported_exporters.items():
        print(f"run dort cpu {k}: {script_args.repeat1}")
        times = []
        for i in range(int(script_args.repeat1)):
            model, input_tensor = create_model_and_input()
            torch._dynamo.reset()
            if k == "opti":
                os.environ["ONNX_OPTIMIZER"] = "1"
            begin = time.perf_counter()
            v(model, input_tensor)
            duration = time.perf_counter() - begin
            if k == "opti":
                os.environ["ONNX_OPTIMIZER"] = "0"
            times.append(duration)
            del model
            gc.collect()
            time.sleep(1)

        print(f"done: {times[-1]}")
        data.append(
            dict(
                export=k,
                time=np.mean(times),
                min=min(times),
                max=max(times),
                first=times[0],
                last=times[-1],
                std=np.std(times),
                p="cpu",
            )
        )

        if not has_cuda:
            continue
        if k in {"torch_dort", "torch_default"}:
            print(f"skip dort cuda {k}: {script_args.repeat1}")
            continue
        print(f"run dort cuda {k}: {script_args.repeat1}")
        times = []
        for i in range(int(script_args.repeat1)):
            model, input_tensor = create_model_and_input()
            model = model.cuda()
            input_tensor = input_tensor.cuda()
            torch._dynamo.reset()
            if k == "opti":
                os.environ["ONNX_OPTIMIZER"] = "1"
            begin = time.perf_counter()
            v(model, input_tensor)
            duration = time.perf_counter() - begin
            if k == "opti":
                os.environ["ONNX_OPTIMIZER"] = "0"
            times.append(duration)
            del model
            gc.collect()
            time.sleep(1)

        print(f"done: {times[-1]}")
        data.append(
            dict(
                export=k,
                time=np.mean(times),
                min=min(times),
                max=max(times),
                first=times[0],
                last=times[-1],
                std=np.std(times),
                p="cuda",
            )
        )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run dort cpu torch_eager: 1
    done: 0.03627039999992121
    run dort cuda torch_eager: 1
    done: 0.045731700000033015
    run dort cpu torch_default: 1
    done: 2.3490639999999985
    skip dort cuda torch_default: 1
    run dort cpu torch_dort: 1
    done: 0.3005425000001196
    skip dort cuda torch_dort: 1




.. GENERATED FROM PYTHON SOURCE LINES 437-438

The result.

.. GENERATED FROM PYTHON SOURCE LINES 438-449

.. code-block:: Python

    df1 = pandas.DataFrame(data)
    df1.to_csv("plot_torch_dort_1_time.csv", index=False)
    df1.to_excel("plot_torch_dort_1_time.xlsx", index=False)
    print(df1)

    fig, ax = plt.subplots(1, 1)
    dfi = df1[["export", "p", "time", "std"]].set_index(["export", "p"])
    dfi["time"].plot.bar(ax=ax, title="Compilation time", yerr=dfi["std"], rot=30)
    fig.tight_layout()
    fig.savefig("plot_torch_dort_1_time.png")




.. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_003.png
   :alt: Compilation time
   :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              export      time       min       max     first      last  std     p
    0    torch_eager  0.036270  0.036270  0.036270  0.036270  0.036270  0.0   cpu
    1    torch_eager  0.045732  0.045732  0.045732  0.045732  0.045732  0.0  cuda
    2  torch_default  2.349064  2.349064  2.349064  2.349064  2.349064  0.0   cpu
    3     torch_dort  0.300543  0.300543  0.300543  0.300543  0.300543  0.0   cpu




.. GENERATED FROM PYTHON SOURCE LINES 450-452

Compilation Profiling
+++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 452-524

.. code-block:: Python



    def clean_text(text):
        pathes = [
            os.path.abspath(
                os.path.normpath(os.path.join(os.path.dirname(torch.__file__), ".."))
            ),
            os.path.abspath(
                os.path.normpath(os.path.join(os.path.dirname(onnx.__file__), ".."))
            ),
            os.path.abspath(
                os.path.normpath(
                    os.path.join(os.path.dirname(experimental_experiment.__file__), "..")
                )
            ),
        ]
        for p in pathes:
            text = text.replace(p, "")
        text = text.replace("experimental_experiment", "experimental_experiment".upper())
        return text


    def profile_function(
        name, export_function, with_args=True, verbose=False, suffix="export"
    ):
        if verbose:
            print(f"profile {name}: {export_function}")
        if with_args:
            model, input_tensor = create_model_and_input()
            pr = cProfile.Profile()
            pr.enable()
            for i in range(int(script_args.repeat1)):
                export_function(model, input_tensor)
            pr.disable()
        else:
            pr = cProfile.Profile()
            pr.enable()
            for i in range(int(script_args.repeat1)):
                export_function()
            pr.disable()
        s = io.StringIO()
        sortby = SortKey.CUMULATIVE
        ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
        ps.print_stats()
        # with open(f"plot_torch_dort_profile_{name}_{suffix}.pickle", "wb") as f:
        #     pickle.dump(ps, f)

        raw = s.getvalue()
        text = "\n".join(raw.split("\n")[:200])
        if verbose:
            print(text)
        with open(f"plot_torch_dort_profile_{name}_{suffix}.txt", "w") as f:
            f.write(raw)

        root, nodes = profile2graph(ps, clean_text=clean_text)
        text = root.to_text()
        with open(f"plot_torch_dort_profile_{name}_{suffix}_h.txt", "w") as f:
            f.write(text)
        if verbose:
            print("done.")


    model, input_tensor = create_model_and_input()


    def function_to_profile(model=model, input_tensor=input_tensor):
        return get_torch_dort(model, input_tensor)


    profile_function("dort", function_to_profile, verbose=True, suffix="1")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    profile dort: <function function_to_profile at 0x7f3ec8623400>
             405573 function calls (386193 primitive calls) in 0.951 seconds

       Ordered by: cumulative time

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000    0.978    0.978 /home/xadupre/github/experimental-experiment/_doc/examples/plot_torch_dort.py:517(function_to_profile)
            1    0.000    0.000    0.978    0.978 /home/xadupre/github/experimental-experiment/_doc/examples/plot_torch_dort.py:237(get_torch_dort)
         16/1    0.000    0.000    0.977    0.977 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/module.py:1525(_wrapped_call_impl)
         16/1    0.000    0.000    0.977    0.977 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/module.py:1531(_call_impl)
          4/1    0.000    0.000    0.977    0.977 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py:432(_fn)
            1    0.000    0.000    0.849    0.849 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:865(catch_errors)
            1    0.000    0.000    0.849    0.849 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:287(_convert_frame_assert)
          2/1    0.000    0.000    0.849    0.849 /usr/lib/python3.10/contextlib.py:76(inner)
            1    0.000    0.000    0.848    0.848 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:449(_compile)
          3/1    0.000    0.000    0.847    0.847 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:249(time_wrapper)
            1    0.000    0.000    0.847    0.847 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:532(compile_inner)
            1    0.000    0.000    0.832    0.832 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/bytecode_transformation.py:1025(transform_code_object)
            1    0.000    0.000    0.829    0.829 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:149(_fn)
            1    0.000    0.000    0.828    0.828 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:485(transform)
            1    0.000    0.000    0.822    0.822 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:2127(run)
            1    0.000    0.000    0.822    0.822 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:784(run)
           44    0.001    0.000    0.822    0.019 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:682(step)
            1    0.000    0.000    0.712    0.712 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:2233(RETURN_VALUE)
            1    0.000    0.000    0.712    0.712 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/output_graph.py:821(compile_subgraph)
            1    0.000    0.000    0.710    0.710 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/output_graph.py:1045(compile_and_call_fx_graph)
            1    0.000    0.000    0.704    0.704 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/output_graph.py:1127(call_user_compiler)
          2/1    0.000    0.000    0.703    0.703 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/repro/after_dynamo.py:59(debug_wrapper)
            1    0.000    0.000    0.703    0.703 /home/xadupre/.local/lib/python3.10/site-packages/torch/__init__.py:1767(__call__)
            1    0.000    0.000    0.703    0.703 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:1185(torch_compile_backend)
            1    0.000    0.000    0.703    0.703 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:1082(__call__)
            1    0.000    0.000    0.703    0.703 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/backends/common.py:18(compiler_fn)
            1    0.000    0.000    0.703    0.703 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/aot_autograd.py:779(aot_module_simplified)
            1    0.000    0.000    0.702    0.702 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/aot_autograd.py:386(create_aot_dispatcher_function)
            1    0.000    0.000    0.575    0.575 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/runtime_wrappers.py:401(aot_wrapper_dedupe)
            1    0.000    0.000    0.575    0.575 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/runtime_wrappers.py:620(aot_wrapper_synthetic_base)
            1    0.000    0.000    0.575    0.575 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/jit_compile_runtime_wrappers.py:148(aot_dispatch_autograd)
          3/2    0.000    0.000    0.503    0.252 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/external_utils.py:23(inner)
          285    0.021    0.000    0.420    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/functional_tensor.py:247(__torch_dispatch__)
            1    0.000    0.000    0.386    0.386 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/dispatch_and_compile_graph.py:126(aot_dispatch_autograd_graph)
            1    0.000    0.000    0.379    0.379 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/dispatch_and_compile_graph.py:34(_create_graph)
            1    0.000    0.000    0.379    0.379 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:996(wrapped)
            1    0.000    0.000    0.377    0.377 /home/xadupre/.local/lib/python3.10/site-packages/torch/_compile.py:20(inner)
            1    0.000    0.000    0.376    0.376 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:544(dispatch_trace)
            1    0.000    0.000    0.375    0.375 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:663(trace)
            1    0.000    0.000    0.366    0.366 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:650(flatten_fn)
            1    0.000    0.000    0.365    0.365 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:569(wrapped)
            1    0.000    0.000    0.330    0.330 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:465(joint_helper)
            1    0.000    0.000    0.330    0.330 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:347(_functionalized_f_helper)
      966/577    0.004    0.000    0.309    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_stats.py:15(wrapper)
            1    0.000    0.000    0.295    0.295 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:248(inner_fn_with_anomaly)
            1    0.000    0.000    0.295    0.295 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:183(inner_fn)
            4    0.001    0.000    0.222    0.055 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:106(run)
      263/242    0.003    0.000    0.207    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:653(__torch_dispatch__)
           76    0.001    0.000    0.197    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:184(run_node)
      263/242    0.001    0.000    0.196    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:684(inner_torch_dispatch)
            2    0.000    0.000    0.186    0.093 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:607(functional_call)
        69/54    0.005    0.000    0.186    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:303(proxy_call)
           22    0.000    0.000    0.182    0.008 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:589(run_node)
      781/603    0.005    0.000    0.181    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:857(tree_map)
            1    0.000    0.000    0.173    0.173 /home/xadupre/.local/lib/python3.10/site-packages/torch/autograd/__init__.py:278(grad)
            1    0.000    0.000    0.172    0.172 /home/xadupre/.local/lib/python3.10/site-packages/torch/autograd/graph.py:739(_engine_run_backward)
            1    0.004    0.004    0.172    0.172 {method 'run_backward' of 'torch._C._EngineBase' objects}
          761    0.005    0.000    0.158    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:1057(tree_map_only)
            1    0.001    0.001    0.154    0.154 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:621(min_cut_rematerialization_partition)
      679/675    0.004    0.000    0.153    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:873(__torch_dispatch__)
      679/675    0.007    0.000    0.148    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1197(dispatch)
          359    0.004    0.000    0.133    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:927(_cached_dispatch_impl)
            1    0.000    0.000    0.128    0.128 /home/xadupre/github/experimental-experiment/_doc/examples/plot_torch_dort.py:162(forward)
            1    0.000    0.000    0.128    0.128 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/aot_autograd.py:888(forward)
          3/1    0.000    0.000    0.128    0.128 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/utils.py:78(g)
            1    0.000    0.000    0.128    0.128 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/runtime_wrappers.py:75(runtime_wrapper)
          2/1    0.000    0.000    0.128    0.128 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/utils.py:95(call_func_at_runtime_with_args)
            1    0.000    0.000    0.128    0.128 /home/xadupre/.local/lib/python3.10/site-packages/torch/autograd/function.py:556(apply)
            1    0.000    0.000    0.127    0.127 {built-in method apply}
            1    0.000    0.000    0.127    0.127 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/jit_compile_runtime_wrappers.py:422(forward)
            1    0.000    0.000    0.127    0.127 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_lazy_graph_module.py:112(_lazy_forward)
          2/1    0.000    0.000    0.124    0.124 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph_module.py:736(call_wrapped)
            1    0.000    0.000    0.124    0.124 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph_module.py:299(__call__)
            1    0.000    0.000    0.124    0.124 <eval_with_key>.37:4(forward)
            1    0.000    0.000    0.124    0.124 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:834(_ort_acclerated_call)
            1    0.000    0.000    0.120    0.120 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:99(inner_fn)
     3140/624    0.022    0.000    0.114    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:732(unflatten)
           44    0.000    0.000    0.100    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:256(call_function)
            1    0.001    0.001    0.100    0.100 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/collect_metadata_analysis.py:90(inner)
    10125/4791    0.040    0.000    0.099    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:707(map_aggregate)
    4791/4755    0.010    0.000    0.095    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:699(map_arg)
            5    0.002    0.000    0.092    0.018 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:57(_extract_graph_with_inputs_outputs)
            8    0.000    0.000    0.089    0.011 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:298(call_module)
          970    0.002    0.000    0.089    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:797(tree_flatten)
      131/123    0.005    0.000    0.088    0.001 {method 'detach' of 'torch._C.TensorBase' objects}
     3545/970    0.018    0.000    0.087    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:776(_tree_flatten_helper)
      736/628    0.002    0.000    0.082    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_ops.py:568(__call__)
            9    0.000    0.000    0.081    0.009 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:460(wrapper)
            9    0.000    0.000    0.080    0.009 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:1196(CALL_FUNCTION)
            9    0.000    0.000    0.080    0.009 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:635(call_function)
          464    0.004    0.000    0.080    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:878(create_node)
            1    0.000    0.000    0.079    0.079 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:135(_extract_fwd_bwd_modules)
            9    0.000    0.000    0.075    0.008 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/linear.py:115(forward)
            9    0.004    0.000    0.075    0.008 {built-in method torch._C._nn.linear}
          112    0.000    0.000    0.073    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:132(snapshot_fake)
           61    0.000    0.000    0.071    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:202(track_tensor_tree)
        76/61    0.001    0.000    0.071    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:203(wrap_with_proxy)
           10    0.000    0.000    0.066    0.007 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/builder.py:1264(wrap_fx_proxy)
           10    0.001    0.000    0.066    0.007 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/builder.py:1324(wrap_fx_proxy_cls)
          303    0.002    0.000    0.063    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1218(node_copy)
           74    0.001    0.000    0.062    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:166(set_meta)
        79/74    0.000    0.000    0.059    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:135(extract_val)
            9    0.000    0.000    0.058    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/functional.py:1489(relu)
            9    0.002    0.000    0.058    0.006 {built-in method torch.relu}
    6175/6024    0.006    0.000    0.058    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:713(<genexpr>)
          359    0.012    0.000    0.058    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:962(_cache_key)
            4    0.000    0.000    0.057    0.014 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/nn_module.py:244(call_function)
     1911/760    0.005    0.000    0.057    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:790(<listcomp>)
           19    0.000    0.000    0.056    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/functional_utils.py:21(to_fun)
           19    0.001    0.000    0.056    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/functional_tensor.py:172(to_functional)
          474    0.006    0.000    0.056    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:166(__init__)
    71046/70089    0.045    0.000    0.055    0.000 {built-in method builtins.isinstance}
            4    0.000    0.000    0.054    0.013 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:761(module_call_wrapper)
            4    0.000    0.000    0.054    0.013 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:502(call_module)
            4    0.000    0.000    0.054    0.013 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:763(forward)
            9    0.001    0.000    0.052    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1585(get_fake_value)
           14    0.000    0.000    0.049    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1167(wrap_fake_exception)
           94    0.001    0.000    0.047    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/proxy.py:173(create_proxy)
          334    0.006    0.000    0.043    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1126(_output_from_cache_entry)
         87/3    0.003    0.000    0.042    0.014 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py:71(wrapper)
            1    0.000    0.000    0.039    0.039 /home/xadupre/github/onnxruntime/build/linux_cuda/Release/onnxruntime/capi/onnxruntime_inference_collection.py:358(__init__)
            1    0.039    0.039    0.039    0.039 /home/xadupre/github/onnxruntime/build/linux_cuda/Release/onnxruntime/capi/onnxruntime_inference_collection.py:436(_create_inference_session)
         6282    0.010    0.000    0.035    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:606(_is_leaf)
         9129    0.013    0.000    0.035    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:599(_get_node_type)
       129/69    0.001    0.000    0.033    0.000 /usr/lib/python3.10/copy.py:259(_reconstruct)
            1    0.000    0.000    0.032    0.032 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:1028(compile)
            4    0.000    0.000    0.032    0.008 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1178(deepcopy_to_fake_tensor)
           39    0.000    0.000    0.032    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:327(__call__)
            4    0.000    0.000    0.032    0.008 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1180(<lambda>)
           39    0.000    0.000    0.032    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:249(from_real_tensor)
        216/4    0.002    0.000    0.032    0.008 /usr/lib/python3.10/copy.py:128(deepcopy)
          635    0.005    0.000    0.032    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:436(__update_args_kwargs)
            1    0.000    0.000    0.032    0.032 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/infra/partitioner.py:326(partition_and_fuse)
            4    0.000    0.000    0.031    0.008 /usr/lib/python3.10/copy.py:227(_deepcopy_dict)
           13    0.004    0.000    0.031    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1385(lint)
            7    0.001    0.000    0.031    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1456(eliminate_dead_code)
           39    0.001    0.000    0.030    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/meta_utils.py:627(__call__)
    2737/1213    0.010    0.000    0.030    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:821(_tree_leaves_helper)
         1911    0.004    0.000    0.030    0.000 <string>:2(__init__)
           96    0.002    0.000    0.029    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/proxy.py:117(create_node)
           39    0.004    0.000    0.029    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/meta_utils.py:186(meta_tensor)
            1    0.000    0.000    0.029    0.029 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/infra/partitioner.py:265(fuse_partitions)
            1    0.000    0.000    0.029    0.029 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/utils/fuser_utils.py:218(fuse_by_partitions)
      406/358    0.005    0.000    0.028    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1022(_prep_args_for_hash)
            1    0.000    0.000    0.028    0.028 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/fake_tensor_prop.py:64(propagate)
        69/54    0.000    0.000    0.028    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:1134(maybe_handle_decomp)
            8    0.001    0.000    0.027    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/parameter.py:55(__deepcopy__)
            5    0.000    0.000    0.027    0.005 /home/xadupre/.local/lib/python3.10/site-packages/torch/_prims_common/wrappers.py:242(_fn)
            3    0.000    0.000    0.027    0.009 /home/xadupre/.local/lib/python3.10/site-packages/torch/_decomp/__init__.py:115(_fn)
            3    0.000    0.000    0.027    0.009 /home/xadupre/.local/lib/python3.10/site-packages/torch/_decomp/decompositions.py:209(threshold_backward)
    3749/3499    0.006    0.000    0.027    0.000 {built-in method builtins.next}
           40    0.000    0.000    0.026    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1738(__torch_function__)
            1    0.000    0.000    0.026    0.026 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py:495(run)
         1911    0.008    0.000    0.025    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:627(__post_init__)
           25    0.001    0.000    0.024    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1223(_dispatch_impl)
            9    0.000    0.000    0.024    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/collect_metadata_analysis.py:80(_to_fun)
          543    0.001    0.000    0.024    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:839(tree_leaves)
           19    0.001    0.000    0.023    0.001 {built-in method torch._to_functional_tensor}
            1    0.000    0.000    0.023    0.023 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/fake_tensor_prop.py:71(propagate_dont_convert_inputs)
            1    0.000    0.000    0.023    0.023 /home/xadupre/.local/lib/python3.10/site-packages/networkx/algorithms/flow/maxflow.py:304(minimum_cut)
           27    0.000    0.000    0.023    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1619(from_tensor)
           27    0.000    0.000    0.023    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/fake_tensor_prop.py:32(run_node)
            1    0.001    0.001    0.023    0.023 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/compile_utils.py:25(fx_graph_cse)
           27    0.000    0.000    0.023    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py:413(run_node)
      149/140    0.001    0.000    0.022    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_ops.py:594(decompose)
         9129    0.015    0.000    0.021    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:588(_is_namedtuple_instance)
            5    0.001    0.000    0.021    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/torch.py:260(call_function)
         1257    0.003    0.000    0.021    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:1007(wrapped)
          393    0.009    0.000    0.021    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:682(extract_tensor_metadata)
          761    0.002    0.000    0.020    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:975(map_only)
           17    0.000    0.000    0.020    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py:647(call_function)
            3    0.000    0.000    0.020    0.007 {built-in method torch.where}
           17    0.000    0.000    0.020    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/builder.py:239(__call__)
            1    0.000    0.000    0.020    0.020 /home/xadupre/.local/lib/python3.10/site-packages/networkx/algorithms/flow/preflowpush.py:291(preflow_push)
            1    0.001    0.001    0.020    0.020 /home/xadupre/.local/lib/python3.10/site-packages/networkx/algorithms/flow/preflowpush.py:22(preflow_push_impl)
            3    0.000    0.000    0.020    0.007 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/conv.py:459(forward)
            3    0.000    0.000    0.020    0.007 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/conv.py:451(_conv_forward)
            3    0.001    0.000    0.020    0.007 {built-in method torch.conv2d}
           17    0.002    0.000    0.020    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/builder.py:361(_wrap)
           85    0.003    0.000    0.020    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/functional_tensor.py:78(__new__)
           38    0.001    0.000    0.019    0.001 {built-in method torch._mirror_autograd_meta_to}
            3    0.001    0.000    0.019    0.006 {built-in method torch.flatten}
           10    0.000    0.000    0.019    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:1290(LOAD_ATTR)
            3    0.000    0.000    0.018    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/_jit_internal.py:487(fn)
            3    0.000    0.000    0.018    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/functional.py:774(_max_pool2d)
    11445/11001    0.010    0.000    0.018    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:689(__setattr__)
            3    0.001    0.000    0.018    0.006 {built-in method torch.max_pool2d}
    1525/1411    0.003    0.000    0.018    0.000 /usr/lib/python3.10/contextlib.py:130(__enter__)
            1    0.000    0.000    0.017    0.017 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:676(classify_nodes)
           63    0.001    0.000    0.017    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_python_dispatch.py:356(return_and_correct_aliasing)
           10    0.001    0.000    0.017    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/builtin.py:527(call_function)
          761    0.003    0.000    0.017    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:1004(_map_only)
           24    0.001    0.000    0.017    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:516(__torch_dispatch__)
         3830    0.010    0.000    0.017    0.000 {built-in method builtins.sum}
            2    0.000    0.000    0.016    0.008 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/_pass.py:240(run)
    done.




.. GENERATED FROM PYTHON SOURCE LINES 525-527

Benchmark exported models with ORT
++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 527-628

.. code-block:: Python



    def benchmark(shape):
        data = []
        data_mem_first_run = []
        data_mem_run = []
        confs = list(
            itertools.product(
                export_functions,
                ["CPU", "CUDA"],
            )
        )
        loop = tqdm(confs)
        print(f"number of experiments: {len(loop)}")
        for export_fct, p in loop:
            name = export_fct.__name__.replace("get_torch_", "")
            obs = {}  # system_info()
            obs["name"] = name
            obs["compute"] = p
            obs["export"] = name

            model, input_tensor = create_model_and_input()
            if p == "CUDA":
                if not has_cuda:
                    continue
                model = model.cuda()
                input_tensor = input_tensor.cuda()
            try:
                exported_model = export_fct(model, input_tensor)
            except torch._dynamo.exc.BackendCompilerFailed as e:
                # Triton only supports devices of CUDA Capability >= 7.0, but your device is of CUDA capability 6.1
                obs["error"] = str(e)
                data.append(obs)
                continue

            def call_model(
                export_fct=export_fct,
                exported_model=exported_model,
                input_tensor=input_tensor,
            ):
                if "opti" in export_fct.__name__:
                    os.environ["ONNX_OPTIMIZER"] = "1"
                res = exported_model(input_tensor).sum()
                if "opti" in export_fct.__name__:
                    os.environ["ONNX_OPTIMIZER"] = "0"
                return res

            stat = start_spying_on(cuda=1 if has_cuda else 0)
            try:
                call_model()
            except Exception as e:
                loop.set_description(f"ERROR-run: {name} {e}")
                obs.update({"error": e, "step": "load"})
                data.append(obs)
                stat.stop()
                continue
            memobs = flatten(stat.stop())
            memobs.update(obs)
            data_mem_first_run.append(memobs)

            # memory consumption
            stat = start_spying_on(cuda=1 if has_cuda else 0)
            for i in range(0, script_args.warmup):
                call_model()
            memobs = flatten(stat.stop())
            memobs.update(obs)
            data_mem_run.append(memobs)

            obs.update(
                measure_time(
                    call_model,
                    max_time=script_args.maxtime,
                    repeat=script_args.repeat,
                    number=1,
                )
            )

            profile_function(name, call_model, with_args=False, suffix=f"run_{p}")

            loop.set_description(f"{obs['average']} {name} {p}")
            data.append(obs)
            del model
            del exported_model
            gc.collect()
            time.sleep(1)

        df = pandas.DataFrame(data)
        df.to_csv("plot_torch_dort_ort_time.csv", index=False)
        df.to_excel("plot_torch_dort_ort_time.xlsx", index=False)
        dfmemr = pandas.DataFrame(data_mem_run)
        dfmemr.to_csv("plot_torch_dort_ort_run_mem.csv", index=False)
        dfmemr.to_excel("plot_torch_dort_ort_run_mem.xlsx", index=False)
        dfmemfr = pandas.DataFrame(data_mem_first_run)
        dfmemfr.to_csv("plot_torch_dort_ort_first_run_mem.csv", index=False)
        dfmemfr.to_excel("plot_torch_dort_ort_first_run_mem.xlsx", index=False)
        return df, dfmemfr, dfmemr


    df, dfmemfr, dfmemr = benchmark(list(input_tensor.shape))
    print(df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/6 [00:00<?, ?it/s]number of experiments: 6
    0.0004266247058801716 eager CPU:   0%|          | 0/6 [00:00<?, ?it/s]    0.0004266247058801716 eager CPU:  17%|█▋        | 1/6 [00:01<00:09,  1.90s/it]    0.0007193222222215739 eager CUDA:  17%|█▋        | 1/6 [00:02<00:09,  1.90s/it]    0.0007193222222215739 eager CUDA:  33%|███▎      | 2/6 [00:04<00:08,  2.17s/it]    0.0006393766666709173 default CPU:  33%|███▎      | 2/6 [00:07<00:08,  2.17s/it]    0.0006393766666709173 default CPU:  50%|█████     | 3/6 [00:08<00:09,  3.19s/it]    0.0006393766666709173 default CPU:  67%|██████▋   | 4/6 [00:09<00:04,  2.12s/it]    0.0010878963964002265 dort CPU:  67%|██████▋   | 4/6 [00:09<00:04,  2.12s/it]       0.0010878963964002265 dort CPU:  83%|████████▎ | 5/6 [00:11<00:02,  2.14s/it]    0.002174018749978283 dort CUDA:  83%|████████▎ | 5/6 [00:12<00:02,  2.14s/it]    0.002174018749978283 dort CUDA: 100%|██████████| 6/6 [00:13<00:00,  2.29s/it]    0.002174018749978283 dort CUDA: 100%|██████████| 6/6 [00:13<00:00,  2.32s/it]
          name compute  ... warmup_time                                              error
    0    eager     CPU  ...    0.001009                                                NaN
    1    eager    CUDA  ...    0.005276                                                NaN
    2  default     CPU  ...    0.001266                                                NaN
    3  default    CUDA  ...         NaN  backend='inductor' raised:\nRuntimeError: Foun...
    4     dort     CPU  ...    0.001416                                                NaN
    5     dort    CUDA  ...    0.010221                                                NaN

    [6 rows x 13 columns]




.. GENERATED FROM PYTHON SOURCE LINES 629-630

Other view

.. GENERATED FROM PYTHON SOURCE LINES 630-666

.. code-block:: Python



    def view_time(df, title, suffix="time"):
        piv = pandas.pivot_table(df, index="export", columns=["compute"], values="average")
        print(piv)
        piv.to_csv(f"plot_torch_dort_{suffix}_compute.csv")
        piv.to_excel(f"plot_torch_dort_{suffix}_compute.xlsx")

        piv_cpu = pandas.pivot_table(
            df[df.compute == "CPU"],
            index="export",
            columns=["compute"],
            values="average",
        )

        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        fig.suptitle(title)
        piv_cpu.plot.barh(ax=ax[0], title="CPU", logx=True)

        if has_cuda:
            piv_gpu = pandas.pivot_table(
                df[df.compute == "CUDA"],
                index="export",
                columns=["compute"],
                values="average",
            )
            piv_gpu.plot.barh(ax=ax[1], title="CUDA", logx=True)

        fig.tight_layout()
        fig.savefig(f"plot_torch_dort_{suffix}.png")
        return ax


    view_time(df, "Compares processing time on backends")





.. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_004.png
   :alt: Compares processing time on backends, CPU, CUDA
   :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    compute       CPU      CUDA
    export                     
    default  0.000639       NaN
    dort     0.001088  0.002174
    eager    0.000427  0.000719

    array([<Axes: title={'center': 'CPU'}, ylabel='export'>,
           <Axes: title={'center': 'CUDA'}, ylabel='export'>], dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 667-669

Memory First Running Time (ORT)
+++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 669-683

.. code-block:: Python


    for compute in ["CPU", "CUDA"]:
        if not has_cuda and compute == "CUDA":
            continue
        ax = memory_peak_plot(
            dfmemfr[dfmemfr.compute == compute],
            ("export",),
            suptitle=f"Memory Consumption of backend, first running time"
            f"\nrunning on {compute}",
            bars=[model_size * i / 2**20 for i in range(1, 3)],
            figsize=(18, 6),
        )
        get_figure(ax).savefig(f"plot_torch_dort_first_run_mem_{compute}.png")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_005.png
         :alt: Memory Consumption of backend, first running time running on CPU, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_006.png
         :alt: Memory Consumption of backend, first running time running on CUDA, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_006.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 684-686

Memory Running Time (ORT)
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 686-699

.. code-block:: Python


    for compute in ["CPU", "CUDA"]:
        if not has_cuda and compute == "CUDA":
            continue
        ax = memory_peak_plot(
            dfmemr[dfmemr.compute == compute],
            ("export",),
            suptitle=f"Memory Consumption of backens, running time"
            f"\nrunning on {compute}",
            bars=[model_size * i / 2**20 for i in range(1, 3)],
            figsize=(18, 6),
        )
        get_figure(ax).savefig(f"plot_torch_dort_run_mem_{compute}.png")



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_007.png
         :alt: Memory Consumption of backens, running time running on CPU, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_008.png
         :alt: Memory Consumption of backens, running time running on CUDA, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_008.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 59.764 seconds)


.. _sphx_glr_download_auto_examples_plot_torch_dort.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_torch_dort.ipynb <plot_torch_dort.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_torch_dort.py <plot_torch_dort.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
