
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_recipes/plot_exporter_exporter_dynamic_shapes.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_recipes_plot_exporter_exporter_dynamic_shapes.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_recipes_plot_exporter_exporter_dynamic_shapes.py:


.. _l-plot-exporter-dynamic_shapes:

A few tricks about dynamic shapes
=================================

Settings the dynamic shapes is not always easy.
Here are a few tricks to make it work.

dx + dy not allowed?
++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 13-31

.. code-block:: Python


    import torch


    class Model(torch.nn.Module):
        def forward(self, x, y, z):
            return torch.cat((x, y), axis=1) + z


    model = Model()
    x = torch.randn(2, 3)
    y = torch.randn(2, 4)
    z = torch.randn(2, 7)
    model(x, y, z)


    print(torch.export.export(model, (x, y, z)).graph)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    graph():
        %x : [num_users=1] = placeholder[target=x]
        %y : [num_users=1] = placeholder[target=y]
        %z : [num_users=1] = placeholder[target=z]
        %cat : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%x, %y], 1), kwargs = {})
        %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%cat, %z), kwargs = {})
        return (add,)




.. GENERATED FROM PYTHON SOURCE LINES 32-34

Everything is fine so far. With dynamic shapes now.
dx + dy is not allowed...

.. GENERATED FROM PYTHON SOURCE LINES 34-44

.. code-block:: Python


    batch = torch.export.Dim("batch")
    dx = torch.export.Dim("dz")
    dy = torch.export.Dim("dy")

    try:
        dz = dx + dy
    except Exception as e:
        print(f"unable to add dimension because {e}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    unable to add dimension because Attempted to add <class '__main__.dy'> to dz, where an integer was expected. (Only increasing linear operations with integer coefficients are supported.)




.. GENERATED FROM PYTHON SOURCE LINES 45-46

Then we could make it a different one.

.. GENERATED FROM PYTHON SOURCE LINES 46-61

.. code-block:: Python


    dz = torch.export.Dim("dz")
    try:
        torch.export.export(
            model,
            (x, y, z),
            dynamic_shapes={
                "x": {0: batch, 1: dx},
                "y": {0: batch, 1: dy},
                "z": {0: batch, 1: dz},
            },
        )
    except Exception as e:
        print(e)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ******************************************** s2 s0 <class 'sympy.core.symbol.Symbol'> solve VR[2, int_oo]
    ******************************************** s5 s1 + s3 <class 'sympy.core.add.Add'> solve VR[4, int_oo]
    ******************************************** s4 s0 <class 'sympy.core.symbol.Symbol'> solve VR[2, int_oo]
    L['z'].size()[1] = 7 is not equal to L['x'].size()[1] = 3





.. GENERATED FROM PYTHON SOURCE LINES 62-63

Still no luck but with ``torch.export.Dim.DYNAMIC``.

.. GENERATED FROM PYTHON SOURCE LINES 63-76

.. code-block:: Python


    ep = torch.export.export(
        model,
        (x, y, z),
        dynamic_shapes={
            "x": {0: batch, 1: dx},
            "y": {0: batch, 1: dy},
            "z": {0: batch, 1: torch.export.Dim.DYNAMIC},
        },
    )

    print(ep)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ******************************************** s2 s0 <class 'sympy.core.symbol.Symbol'> solve VR[2, int_oo]
    ******************************************** s5 s1 + s3 <class 'sympy.core.add.Add'> solve VR[4, int_oo]
    ******************************************** s4 s0 <class 'sympy.core.symbol.Symbol'> solve VR[2, int_oo]
    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[s0, s1]", y: "f32[s0, s3]", z: "f32[s0, s1 + s3]"):
                 # File: /home/xadupre/github/experimental-experiment/_doc/recipes/plot_exporter_exporter_dynamic_shapes.py:19 in forward, code: return torch.cat((x, y), axis=1) + z
                cat: "f32[s0, s1 + s3]" = torch.ops.aten.cat.default([x, y], 1);  x = y = None
                add: "f32[s0, s1 + s3]" = torch.ops.aten.add.Tensor(cat, z);  cat = z = None
                return (add,)
            
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='x'), target=None, persistent=None), InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='y'), target=None, persistent=None), InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='z'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='add'), target=None)])
    Range constraints: {s0: VR[0, int_oo], s1: VR[0, int_oo], s3: VR[0, int_oo], s1 + s3: VR[4, int_oo]}





.. GENERATED FROM PYTHON SOURCE LINES 77-78

Still no luck but with ``torch.export.Dim.AUTO``.

.. GENERATED FROM PYTHON SOURCE LINES 78-90

.. code-block:: Python


    print(
        torch.export.export(
            model,
            (x, y, z),
            dynamic_shapes=(
                {0: batch, 1: torch.export.Dim.STATIC},
                {0: batch, 1: torch.export.Dim.AUTO},
                {0: batch, 1: torch.export.Dim.AUTO},
            ),
        )
    )




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ******************************************** s1 s0 <class 'sympy.core.symbol.Symbol'> solve VR[2, int_oo]
    ******************************************** s4 s2 + 3 <class 'sympy.core.add.Add'> solve VR[5, int_oo]
    ******************************************** s3 s0 <class 'sympy.core.symbol.Symbol'> solve VR[2, int_oo]
    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[s0, 3]", y: "f32[s0, s2]", z: "f32[s0, s2 + 3]"):
                 # File: /home/xadupre/github/experimental-experiment/_doc/recipes/plot_exporter_exporter_dynamic_shapes.py:19 in forward, code: return torch.cat((x, y), axis=1) + z
                cat: "f32[s0, s2 + 3]" = torch.ops.aten.cat.default([x, y], 1);  x = y = None
                add: "f32[s0, s2 + 3]" = torch.ops.aten.add.Tensor(cat, z);  cat = z = None
                return (add,)
            
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='x'), target=None, persistent=None), InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='y'), target=None, persistent=None), InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='z'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='add'), target=None)])
    Range constraints: {s0: VR[0, int_oo], s2: VR[2, int_oo], s2 + 3: VR[5, int_oo]}






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.095 seconds)


.. _sphx_glr_download_auto_recipes_plot_exporter_exporter_dynamic_shapes.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_exporter_exporter_dynamic_shapes.ipynb <plot_exporter_exporter_dynamic_shapes.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_exporter_exporter_dynamic_shapes.py <plot_exporter_exporter_dynamic_shapes.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_exporter_exporter_dynamic_shapes.zip <plot_exporter_exporter_dynamic_shapes.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
