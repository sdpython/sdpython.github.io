
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_recipes/plot_exporter_recipes_c_cond.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_recipes_plot_exporter_recipes_c_cond.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_recipes_plot_exporter_recipes_c_cond.py:


.. _l-plot-exporter-recipes-custom-cond:

to_onnx and a model with a test
===============================

Control flow cannot be exported with a change.
The code of the model can be changed or patched
to introduce function :func:`torch.cond`.

A model with a test
+++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 14-21

.. code-block:: Python


    import torch
    from onnx_array_api.plotting.graphviz_helper import plot_dot
    from experimental_experiment.helpers import pretty_onnx
    from experimental_experiment.torch_interpreter import to_onnx









.. GENERATED FROM PYTHON SOURCE LINES 22-23

We define a model with a control flow (-> graph break)

.. GENERATED FROM PYTHON SOURCE LINES 23-48

.. code-block:: Python



    class ForwardWithControlFlowTest(torch.nn.Module):
        def forward(self, x):
            if x.sum():
                return x * 2
            return -x


    class ModelWithControlFlow(torch.nn.Module):
        def __init__(self):
            super().__init__()
            self.mlp = torch.nn.Sequential(
                torch.nn.Linear(3, 2),
                torch.nn.Linear(2, 1),
                ForwardWithControlFlowTest(),
            )

        def forward(self, x):
            out = self.mlp(x)
            return out


    model = ModelWithControlFlow()








.. GENERATED FROM PYTHON SOURCE LINES 49-50

Let's check it runs.

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: Python

    x = torch.randn(1, 3)
    model(x)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    tensor([[-0.0371]], grad_fn=<MulBackward0>)



.. GENERATED FROM PYTHON SOURCE LINES 54-55

As expected, it does not export.

.. GENERATED FROM PYTHON SOURCE LINES 55-61

.. code-block:: Python

    try:
        torch.export.export(model, (x,))
        raise AssertionError("This export should failed unless pytorch now supports this model.")
    except Exception as e:
        print(e)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Dynamic control flow is not supported at the moment. Please use functorch.experimental.control_flow.cond to explicitly capture the control flow. For more information about this error, see: https://pytorch.org/docs/main/generated/exportdb/index.html#cond-operands

    from user code:
       File "/home/xadupre/github/experimental-experiment/_doc/recipes/plot_exporter_recipes_c_cond.py", line 42, in forward
        out = self.mlp(x)
      File "/home/xadupre/vv/this/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
        return forward_call(*args, **kwargs)
      File "/home/xadupre/github/experimental-experiment/_doc/recipes/plot_exporter_recipes_c_cond.py", line 27, in forward
        if x.sum():

    Set TORCH_LOGS="+dynamo" and TORCHDYNAMO_VERBOSE=1 for more information





.. GENERATED FROM PYTHON SOURCE LINES 62-63

The exporter fails with the same eror as it expects torch.export.export to work.

.. GENERATED FROM PYTHON SOURCE LINES 63-70

.. code-block:: Python


    try:
        to_onnx(model, (x,))
    except Exception as e:
        print(e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Dynamic control flow is not supported at the moment. Please use functorch.experimental.control_flow.cond to explicitly capture the control flow. For more information about this error, see: https://pytorch.org/docs/main/generated/exportdb/index.html#cond-operands

    from user code:
       File "/home/xadupre/github/experimental-experiment/_doc/recipes/plot_exporter_recipes_c_cond.py", line 42, in forward
        out = self.mlp(x)
      File "/home/xadupre/vv/this/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
        return forward_call(*args, **kwargs)
      File "/home/xadupre/github/experimental-experiment/_doc/recipes/plot_exporter_recipes_c_cond.py", line 27, in forward
        if x.sum():

    Set TORCH_LOGS="+dynamo" and TORCHDYNAMO_VERBOSE=1 for more information





.. GENERATED FROM PYTHON SOURCE LINES 71-75

Suggested Patch
+++++++++++++++

Let's avoid the graph break by replacing the forward.

.. GENERATED FROM PYTHON SOURCE LINES 75-93

.. code-block:: Python



    def new_forward(x):
        def identity2(x):
            return x * 2

        def neg(x):
            return -x

        return torch.cond(x.sum() > 0, identity2, neg, (x,))


    print("the list of submodules")
    for name, mod in model.named_modules():
        print(name, type(mod))
        if isinstance(mod, ForwardWithControlFlowTest):
            mod.forward = new_forward





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    the list of submodules
     <class '__main__.ModelWithControlFlow'>
    mlp <class 'torch.nn.modules.container.Sequential'>
    mlp.0 <class 'torch.nn.modules.linear.Linear'>
    mlp.1 <class 'torch.nn.modules.linear.Linear'>
    mlp.2 <class '__main__.ForwardWithControlFlowTest'>




.. GENERATED FROM PYTHON SOURCE LINES 94-95

Let's see what the fx graph looks like.

.. GENERATED FROM PYTHON SOURCE LINES 95-98

.. code-block:: Python


    print(torch.export.export(model, (x,)).graph)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    graph():
        %p_mlp_0_weight : [num_users=1] = placeholder[target=p_mlp_0_weight]
        %p_mlp_0_bias : [num_users=1] = placeholder[target=p_mlp_0_bias]
        %p_mlp_1_weight : [num_users=1] = placeholder[target=p_mlp_1_weight]
        %p_mlp_1_bias : [num_users=1] = placeholder[target=p_mlp_1_bias]
        %x : [num_users=1] = placeholder[target=x]
        %linear : [num_users=1] = call_function[target=torch.ops.aten.linear.default](args = (%x, %p_mlp_0_weight, %p_mlp_0_bias), kwargs = {})
        %linear_1 : [num_users=2] = call_function[target=torch.ops.aten.linear.default](args = (%linear, %p_mlp_1_weight, %p_mlp_1_bias), kwargs = {})
        %sum_1 : [num_users=1] = call_function[target=torch.ops.aten.sum.default](args = (%linear_1,), kwargs = {})
        %gt : [num_users=1] = call_function[target=torch.ops.aten.gt.Scalar](args = (%sum_1, 0), kwargs = {})
        %true_graph_0 : [num_users=1] = get_attr[target=true_graph_0]
        %false_graph_0 : [num_users=1] = get_attr[target=false_graph_0]
        %cond : [num_users=1] = call_function[target=torch.ops.higher_order.cond](args = (%gt, %true_graph_0, %false_graph_0, [%linear_1]), kwargs = {})
        %getitem : [num_users=1] = call_function[target=operator.getitem](args = (%cond, 0), kwargs = {})
        return (getitem,)




.. GENERATED FROM PYTHON SOURCE LINES 99-100

Let's export again.

.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: Python


    onx = to_onnx(model, (x,))
    print(pretty_onnx(onx))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    opset: domain='' version=18
    opset: domain='local_functions' version=1
    doc_string: large_model=False, inline=False, external_threshold=102...
    input: name='x' type=dtype('float32') shape=[1, 3]
    init: name='init1_s_' type=float32 shape=() -- array([0.], dtype=float32)-- shape_type_compute._cast_inputs.1(gt_Scalar)
    init: name='mlp.0.weight' type=float32 shape=(2, 3)                   -- DynamoInterpret.placeholder.1/P(mlp.0.weight)
    init: name='mlp.0.bias' type=float32 shape=(2,) -- array([-0.00840394, -0.11727551], dtype=float32)-- DynamoInterpret.placeholder.1/P(mlp.0.bias)
    init: name='mlp.1.weight' type=float32 shape=(1, 2) -- array([ 0.59868324, -0.28809536], dtype=float32)-- DynamoInterpret.placeholder.1/P(mlp.1.weight)
    init: name='mlp.1.bias' type=float32 shape=(1,) -- array([0.4004984], dtype=float32)-- DynamoInterpret.placeholder.1/P(mlp.1.bias)
    Gemm(x, mlp.0.weight, mlp.0.bias, transB=1) -> linear
      Gemm(linear, mlp.1.weight, mlp.1.bias, transB=1) -> linear_1
        ReduceSum(linear_1, keepdims=0) -> sum_1
          Greater(sum_1, init1_s_) -> gt
            If(gt, else_branch=G1, then_branch=G2) -> output_0
    output: name='output_0' type=dtype('float32') shape=[1, 1]
    ----- subgraph ---- If - aten_cond - att.else_branch=G1 -- level=1 --  -> cond#0
    false_graph_0[local_functions](linear_1) -> cond#0
    output: name='cond#0' type='NOTENSOR' shape=None
    ----- subgraph ---- If - aten_cond - att.then_branch=G2 -- level=1 --  -> cond#0
    true_graph_0[local_functions](linear_1) -> cond#0
    output: name='cond#0' type='NOTENSOR' shape=None
    ----- function name=true_graph_0 domain=local_functions
    ----- doc_string: function_options=FunctionOptions(export_as_function=Tru...
    opset: domain='' version=18
    input: 'linear_1'
    Constant(value=2.0) -> init1_s_
    Constant(value=[1]) -> init7_s1_1
      Reshape(init1_s_, init7_s1_1) -> _onx_reshape0
        Mul(linear_1, _onx_reshape0) -> output_0
    output: name='output_0' type=? shape=?
    ----- function name=false_graph_0 domain=local_functions
    ----- doc_string: function_options=FunctionOptions(export_as_function=Tru...
    opset: domain='' version=18
    opset: domain='local_functions' version=1
    input: 'linear_1'
    Neg(linear_1) -> output_0
    output: name='output_0' type=? shape=?




.. GENERATED FROM PYTHON SOURCE LINES 105-106

We can also inline the local function.

.. GENERATED FROM PYTHON SOURCE LINES 106-111

.. code-block:: Python


    onx = to_onnx(model, (x,), inline=True)
    print(pretty_onnx(onx))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    opset: domain='' version=18
    opset: domain='local_functions' version=1
    doc_string: large_model=False, inline=True, external_threshold=1024...
    input: name='x' type=dtype('float32') shape=[1, 3]
    init: name='init1_s_' type=float32 shape=() -- array([0.], dtype=float32)-- shape_type_compute._cast_inputs.1(gt_Scalar)
    init: name='mlp.0.weight' type=float32 shape=(2, 3)                   -- DynamoInterpret.placeholder.1/P(mlp.0.weight)
    init: name='mlp.0.bias' type=float32 shape=(2,) -- array([-0.00840394, -0.11727551], dtype=float32)-- DynamoInterpret.placeholder.1/P(mlp.0.bias)
    init: name='mlp.1.weight' type=float32 shape=(1, 2) -- array([ 0.59868324, -0.28809536], dtype=float32)-- DynamoInterpret.placeholder.1/P(mlp.1.weight)
    init: name='mlp.1.bias' type=float32 shape=(1,) -- array([0.4004984], dtype=float32)-- DynamoInterpret.placeholder.1/P(mlp.1.bias)
    Gemm(x, mlp.0.weight, mlp.0.bias, transB=1) -> linear
      Gemm(linear, mlp.1.weight, mlp.1.bias, transB=1) -> linear_1
        ReduceSum(linear_1, keepdims=0) -> sum_1
          Greater(sum_1, init1_s_) -> gt
            If(gt, else_branch=G1, then_branch=G2) -> output_0
    output: name='output_0' type=dtype('float32') shape=[1, 1]
    ----- subgraph ---- If - aten_cond - att.else_branch=G1 -- level=1 --  -> cond#0
    Neg(linear_1) -> cond#0
    output: name='cond#0' type='NOTENSOR' shape=None
    ----- subgraph ---- If - aten_cond - att.then_branch=G2 -- level=1 --  -> cond#0
    Constant(value=[1]) -> init7_s1_122
    Constant(value=2.0) -> init1_s_22
      Reshape(init1_s_22, init7_s1_122) -> _onx_reshape032
    Mul(linear_1, _onx_reshape032) -> cond#0
    output: name='cond#0' type='NOTENSOR' shape=None




.. GENERATED FROM PYTHON SOURCE LINES 112-113

And visually.

.. GENERATED FROM PYTHON SOURCE LINES 113-115

.. code-block:: Python


    plot_dot(onx)



.. image-sg:: /auto_recipes/images/sphx_glr_plot_exporter_recipes_c_cond_001.png
   :alt: plot exporter recipes c cond
   :srcset: /auto_recipes/images/sphx_glr_plot_exporter_recipes_c_cond_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: >




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.701 seconds)


.. _sphx_glr_download_auto_recipes_plot_exporter_recipes_c_cond.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_exporter_recipes_c_cond.ipynb <plot_exporter_recipes_c_cond.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_exporter_recipes_c_cond.py <plot_exporter_recipes_c_cond.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_exporter_recipes_c_cond.zip <plot_exporter_recipes_c_cond.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
