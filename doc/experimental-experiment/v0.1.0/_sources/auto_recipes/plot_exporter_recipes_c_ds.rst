
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_recipes/plot_exporter_recipes_c_ds.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_recipes_plot_exporter_recipes_c_ds.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_recipes_plot_exporter_recipes_c_ds.py:


.. _l-plot-exporter-recipes-custom-ds:

to_onnx and infer dynamic shapes
================================

We try to make it easier to export with dynamic shapes.
To do that, we run the model at least twice with a different
set of inputs and we try to guess the dynamic shapes found
along the way.


Infer dynamic shapes
++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 16-56

.. code-block:: Python


    import onnx
    from onnx_array_api.plotting.graphviz_helper import plot_dot
    import torch
    from experimental_experiment.torch_interpreter import to_onnx
    from experimental_experiment.torch_interpreter.piece_by_piece import (
        trace_execution_piece_by_piece,
    )


    class MA(torch.nn.Module):
        def forward(self, x, y):
            return x + y


    class MM(torch.nn.Module):
        def forward(self, x, y):
            return x * y


    class MASMM(torch.nn.Module):
        def __init__(self):
            super().__init__()
            self.ma = MA()
            self.mm = MM()

        def forward(self, x, y, z):
            return self.ma(x, y) - self.mm(y, z)


    class Model(torch.nn.Module):
        def __init__(self):
            super().__init__()
            self.ma = MA()
            self.masmm = MASMM()

        def forward(self, x):
            return self.ma(x, self.masmm(x, x, x))









.. GENERATED FROM PYTHON SOURCE LINES 57-58

The model.

.. GENERATED FROM PYTHON SOURCE LINES 58-60

.. code-block:: Python

    model = Model()








.. GENERATED FROM PYTHON SOURCE LINES 61-62

Two sets of inputs.

.. GENERATED FROM PYTHON SOURCE LINES 62-67

.. code-block:: Python

    inputs = [
        ((torch.randn((5, 6)),), {}),
        ((torch.randn((6, 6)),), {}),
    ]








.. GENERATED FROM PYTHON SOURCE LINES 68-70

Then we run the model, stores intermediates inputs and outputs,
to finally guess the dynamic shapes.

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: Python

    diag = trace_execution_piece_by_piece(model, inputs, verbose=0)
    pretty = diag.pretty_text(with_dynamic_shape=True)
    print(pretty)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    >>> __main__: Model
      DS=(({0: <_DimHint.DYNAMIC: 3>},), {})
      > ((CT1s5x6[-2.874161720275879,2.0613927841186523:A0.02526924287279447],),{})
      > ((CT1s6x6[-3.102940559387207,1.933530330657959:A0.05846682405616674],),{})
        >>> ma: MA
          DS=(({0: <_DimHint.DYNAMIC: 3>}, {0: <_DimHint.DYNAMIC: 3>}), {})
          > ((CT1s5x6[-2.874161720275879,2.0613927841186523:A0.02526924287279447],CT1s5x6[-14.00912857055664,0.9951249361038208:A-1.2295843745271364]),{})
          > ((CT1s6x6[-3.102940559387207,1.933530330657959:A0.05846682405616674],CT1s6x6[-15.834121704101562,0.9997711181640625:A-1.0218034098959632]),{})
          < (CT1s5x6[-16.883289337158203,2.212246894836426:A-1.2043150981267294],)
          < (CT1s6x6[-18.937061309814453,2.247560977935791:A-0.9633365460774965],)
        <<<
        >>> masmm: MASMM
          DS=(({0: <_DimHint.DYNAMIC: 3>}, {0: <_DimHint.DYNAMIC: 3>}, {0: <_DimHint.DYNAMIC: 3>}), {})
          > ((CT1s5x6[-2.874161720275879,2.0613927841186523:A0.02526924287279447],CT1s5x6[-2.874161720275879,2.0613927841186523:A0.02526924287279447],CT1s5x6[-2.874161720275879,2.0613927841186523:A0.02526924287279447]),{})
          > ((CT1s6x6[-3.102940559387207,1.933530330657959:A0.05846682405616674],CT1s6x6[-3.102940559387207,1.933530330657959:A0.05846682405616674],CT1s6x6[-3.102940559387207,1.933530330657959:A0.05846682405616674]),{})
            >>> ma: MA
              DS=(({0: <_DimHint.DYNAMIC: 3>}, {0: <_DimHint.DYNAMIC: 3>}), {})
              > ((CT1s5x6[-2.874161720275879,2.0613927841186523:A0.02526924287279447],CT1s5x6[-2.874161720275879,2.0613927841186523:A0.02526924287279447]),{})
              > ((CT1s6x6[-3.102940559387207,1.933530330657959:A0.05846682405616674],CT1s6x6[-3.102940559387207,1.933530330657959:A0.05846682405616674]),{})
              < (CT1s5x6[-5.748323440551758,4.122785568237305:A0.05053848574558894],)
              < (CT1s6x6[-6.205881118774414,3.867060661315918:A0.11693364811233348],)
            <<<
            >>> mm: MM
              DS=(({0: <_DimHint.DYNAMIC: 3>}, {0: <_DimHint.DYNAMIC: 3>}), {})
              > ((CT1s5x6[-2.874161720275879,2.0613927841186523:A0.02526924287279447],CT1s5x6[-2.874161720275879,2.0613927841186523:A0.02526924287279447]),{})
              > ((CT1s6x6[-3.102940559387207,1.933530330657959:A0.05846682405616674],CT1s6x6[-3.102940559387207,1.933530330657959:A0.05846682405616674]),{})
              < (CT1s5x6[0.004518688190728426,8.260805130004883:A1.280122860815997],)
              < (CT1s6x6[0.00015887459449004382,9.628240585327148:A1.13873706725806],)
            <<<
          < (CT1s5x6[-14.00912857055664,0.9951249361038208:A-1.2295843745271364],)
          < (CT1s6x6[-15.834121704101562,0.9997711181640625:A-1.0218034098959632],)
        <<<
      < (CT1s5x6[-16.883289337158203,2.212246894836426:A-1.2043150981267294],)
      < (CT1s6x6[-18.937061309814453,2.247560977935791:A-0.9633365460774965],)
    <<<




.. GENERATED FROM PYTHON SOURCE LINES 75-76

The dynamic shapes are obtained with:

.. GENERATED FROM PYTHON SOURCE LINES 76-80

.. code-block:: Python

    ds = diag.guess_dynamic_shapes()
    print(ds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (({0: <_DimHint.DYNAMIC: 3>},), {})




.. GENERATED FROM PYTHON SOURCE LINES 81-85

Export
++++++

We use these dynamic shapes to export.

.. GENERATED FROM PYTHON SOURCE LINES 85-93

.. code-block:: Python


    onx, builder = to_onnx(
        model, inputs[0][0], kwargs=inputs[0][1], dynamic_shapes=ds[0], return_builder=True
    )
    onnx.save(onx, "plot_exporter_recipes_c_ds.onnx")
    print(builder.pretty_text())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


     __call__ (
        x                             |'<_ParameterKind.POSITIONAL_OR_KEYWORD: 1>'
    )
    dyn---: DYN0 -> WrapSym(DYN0)
    dyn---: s0 -> WrapSym(s0)
    dynrev: DYN0 -> [('DYN0', SymInt(DYN0))]
    dynsrc: DYN0 -> [{DYN0:('input_name', 'x'), DYN0:('axis', 0)}]
    dynals: s0 -> 'DYN0'
    t-dynshp: 0 -> {0:(0, _Dim(DYN0))}
    opset: : 18
    input:: x                                                                       |T1: DYN0 x 6
    Add: x, x -> add                                                                |T1: DYN0 x 6                 - add_Tensor
    Mul: x, x -> mul                                                                |T1: DYN0 x 6                 - mul_Tensor
    Sub: add, mul -> sub                                                            |T1: DYN0 x 6                 - sub_Tensor
    Add: x, sub -> output_0                                                         |T1: DYN0 x 6                 - add_Tensor2
    output:: output_0                                                               |T1: DYN0 x 6




.. GENERATED FROM PYTHON SOURCE LINES 94-95

And visually.

.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: Python


    plot_dot(onx)



.. image-sg:: /auto_recipes/images/sphx_glr_plot_exporter_recipes_c_ds_001.png
   :alt: plot exporter recipes c ds
   :srcset: /auto_recipes/images/sphx_glr_plot_exporter_recipes_c_ds_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.250 seconds)


.. _sphx_glr_download_auto_recipes_plot_exporter_recipes_c_ds.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_exporter_recipes_c_ds.ipynb <plot_exporter_recipes_c_ds.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_exporter_recipes_c_ds.py <plot_exporter_recipes_c_ds.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_exporter_recipes_c_ds.zip <plot_exporter_recipes_c_ds.zip>`


.. include:: plot_exporter_recipes_c_ds.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
