
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profile_existing_onnx_101.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profile_existing_onnx_101.py:


101: Profile an existing model with onnxruntime
===============================================

Profiles any onnx model on CPU.

Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 10-42

.. code-block:: Python


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    from experimental_experiment.args import get_parsed_args

    try:
        from onnx_extended.tools.js_profile import (
            js_profile_to_dataframe,
            plot_ort_profile,
        )
    except ImportError:
        js_profile_to_dataframe = None

    try:
        filename = os.path.join(
            os.path.dirname(__file__ or ""), "data", "example_4700-CPUep-opt.onnx"
        )
    except NameError:
        filename = "data/example_4700-CPUep-opt.onnx"

    script_args = get_parsed_args(
        "plot_profile_existing_onnx",
        filename=(filename, "input file"),
        repeat=10,
        expose="",
    )


    for att in "filename,repeat".split(","):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    filename=data/example_4700-CPUep-opt.onnx
    repeat=10




.. GENERATED FROM PYTHON SOURCE LINES 43-44

Random inputs.

.. GENERATED FROM PYTHON SOURCE LINES 44-75

.. code-block:: Python



    def create_random_input(sess):
        feeds = {}
        for i in sess.get_inputs():
            shape = i.shape
            ot = i.type
            if ot == "tensor(float)":
                dtype = np.float32
            else:
                raise ValueError(f"Unsupposed onnx type {ot}.")
            t = np.random.rand(*shape).astype(dtype)
            feeds[i.name] = t
        return feeds


    def create_session(filename, profiling=False):
        from onnxruntime import InferenceSession, SessionOptions

        if not profiling:
            return InferenceSession(filename, providers=["CPUExecutionProvider"])
        opts = SessionOptions()
        opts.enable_profiling = True
        return InferenceSession(filename, opts, providers=["CPUExecutionProvider"])


    sess = create_session(script_args.filename)
    feeds = create_random_input(sess)
    sess.run(None, feeds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [array([[0.20028885, 0.500212  , 0.18812974, ..., 0.49626508, 0.3320878 ,
            0.5924071 ],
           [0.83673996, 0.17836714, 0.59018314, ..., 0.5989737 , 0.7440194 ,
            0.32909924],
           [0.6985308 , 0.7610961 , 0.9506244 , ..., 0.55627835, 0.5357821 ,
            0.8362733 ],
           ...,
           [0.67620796, 0.94659865, 0.98915833, ..., 0.95729184, 0.3126834 ,
            0.5505408 ],
           [0.5749798 , 0.3194846 , 0.6074111 , ..., 0.80361074, 0.9479811 ,
            0.02442558],
           [0.67679036, 0.73154503, 0.8259765 , ..., 0.7255918 , 0.776746  ,
            0.8050713 ]], dtype=float32), array([[0.15970413, 0.8694909 , 0.18328859, ..., 0.8503617 , 0.03503302,
            0.7955725 ],
           [0.48677418, 0.01244887, 0.69472194, ..., 0.91377187, 0.36967164,
            0.72379535],
           [0.28556922, 0.3707365 , 0.17063592, ..., 0.7791243 , 0.85813904,
            0.6978626 ],
           ...,
           [0.20588359, 0.66942143, 0.760063  , ..., 0.20567068, 0.59294355,
            0.34247693],
           [0.94674796, 0.92949975, 0.32853094, ..., 0.14451048, 0.33521515,
            0.16561657],
           [0.14066985, 0.29018253, 0.42652312, ..., 0.4268416 , 0.7080436 ,
            0.62930536]], dtype=float32), array([[0.7086965 , 0.34131464, 0.4739351 , ..., 0.14143492, 0.7702755 ,
            0.42123088],
           [0.9872407 , 0.03255733, 0.11477125, ..., 0.20654917, 0.889528  ,
            0.57085603],
           [0.8564523 , 0.4454892 , 0.17477879, ..., 0.5171252 , 0.3903735 ,
            0.263061  ],
           ...,
           [0.9333207 , 0.79405284, 0.34489825, ..., 0.76823306, 0.60597265,
            0.6076341 ],
           [0.5125514 , 0.63861924, 0.5272166 , ..., 0.6344767 , 0.9106323 ,
            0.29840037],
           [0.544926  , 0.8231943 , 0.7359293 , ..., 0.59517324, 0.1347724 ,
            0.15038596]], dtype=float32), array([[[[4.992836 , 5.3255363, 4.827223 , ..., 5.825984 , 6.4446106,
              6.082188 ],
             [5.276627 , 5.348945 , 5.2204623, ..., 5.5931177, 5.944277 ,
              5.9632783],
             [5.8123827, 5.925158 , 5.9578958, ..., 4.9857388, 4.7567506,
              5.048644 ],
             ...,
             [6.328079 , 6.0790796, 6.608115 , ..., 6.441473 , 6.648039 ,
              6.094625 ],
             [5.8215313, 6.0558915, 6.1288967, ..., 6.021027 , 6.035628 ,
              5.9916973],
             [6.0224605, 5.1167135, 5.3078923, ..., 5.4186773, 6.289215 ,
              6.4715185]],

            [[4.751849 , 4.7650375, 6.1122093, ..., 5.4404078, 6.183878 ,
              5.6405296],
             [4.4942694, 5.3285227, 5.0659456, ..., 5.4665375, 5.3208427,
              4.948141 ],
             [5.0715275, 5.644289 , 6.45257  , ..., 5.377266 , 5.5539417,
              4.8752556],
             ...,
             [6.9857264, 6.214286 , 5.775386 , ..., 6.28193  , 6.555192 ,
              6.1433334],
             [5.622572 , 5.6860332, 5.6585293, ..., 5.36098  , 6.0219946,
              6.203888 ],
             [5.2772284, 5.492839 , 5.2002716, ..., 6.3872414, 5.456848 ,
              5.759081 ]],

            [[5.395791 , 6.495424 , 6.0342574, ..., 6.8714776, 6.9089327,
              5.800607 ],
             [5.7122183, 6.059716 , 6.0676584, ..., 5.9900723, 6.0671787,
              5.6424246],
             [6.0893574, 6.8727717, 6.8639226, ..., 6.181236 , 5.951156 ,
              5.9737253],
             ...,
             [7.9071007, 7.4426537, 7.0640078, ..., 6.9215755, 7.90155  ,
              7.309578 ],
             [7.1567326, 6.679321 , 6.8775244, ..., 7.018499 , 6.7970853,
              6.135409 ],
             [6.3651752, 6.0718184, 6.3520103, ..., 6.74461  , 7.111502 ,
              7.020111 ]],

            ...,

            [[6.484593 , 6.0447464, 6.534297 , ..., 6.2530355, 6.4625697,
              6.5183907],
             [6.0305924, 5.764914 , 6.3388653, ..., 5.4354844, 5.9826746,
              6.2223134],
             [6.640838 , 6.5704284, 6.417898 , ..., 5.768028 , 5.6643915,
              5.0767827],
             ...,
             [6.795415 , 6.8925943, 7.2520647, ..., 7.1537313, 7.692841 ,
              7.017382 ],
             [6.8751235, 6.99786  , 6.7901416, ..., 7.1239996, 6.4809594,
              6.26935  ],
             [6.1384845, 5.994799 , 6.3385367, ..., 6.580943 , 6.776892 ,
              6.8105288]],

            [[5.2591085, 5.980821 , 5.732525 , ..., 5.905715 , 6.3878303,
              6.389808 ],
             [4.7700973, 5.6910667, 5.639732 , ..., 5.9946012, 5.6227274,
              4.7452984],
             [5.3615017, 6.19451  , 6.049894 , ..., 5.346482 , 5.5048275,
              4.350601 ],
             ...,
             [7.122487 , 6.1663437, 6.442721 , ..., 6.8297305, 6.7030616,
              7.021811 ],
             [6.7310266, 6.372877 , 6.2888823, ..., 6.557871 , 6.124433 ,
              5.5795875],
             [5.673983 , 5.477694 , 4.771839 , ..., 6.20749  , 5.9496374,
              6.650883 ]],

            [[5.8190703, 5.096781 , 6.400702 , ..., 5.6982026, 6.5094385,
              5.7149243],
             [5.883692 , 4.4602895, 6.3532434, ..., 4.635139 , 6.443207 ,
              5.6330256],
             [5.69414  , 6.196536 , 6.518698 , ..., 5.9449835, 5.8658085,
              5.4983177],
             ...,
             [7.070885 , 6.9008822, 6.3263965, ..., 6.5166063, 6.9999847,
              6.7162666],
             [6.32168  , 6.3937106, 5.5770454, ..., 6.0169888, 6.237508 ,
              5.8024473],
             [6.134572 , 5.955942 , 5.3227262, ..., 6.1129937, 6.4486094,
              7.1483026]]]], dtype=float32), array([[[[  375,   376,   258, ...,   361,   116,   244],
             [  622,   872,   879, ...,   732,   861,   991],
             [ 1116,   998,  1003, ...,  1476,  1357,  1362],
             ...,
             [14138, 14018, 14144, ..., 14001, 14007, 14009],
             [14508, 14513, 14764, ..., 14745, 14875, 14879],
             [14882, 15135, 15136, ..., 15116, 14998, 15372]],

            [[  250,     6,    11, ...,   485,   116,   122],
             [  869,   500,   755, ...,   608,   613,   988],
             [ 1119,  1245,  1127, ...,  1477,  1358,  1487],
             ...,
             [14263, 13892, 14147, ..., 14001, 14131, 14132],
             [14633, 14512, 14765, ..., 14868, 14503, 14876],
             [15004, 15135, 15136, ..., 15116, 15122, 15003]],

            [[  375,     7,   258, ...,   485,   366,   244],
             [  870,   501,   753, ...,   608,   614,   991],
             [  995,   996,  1002, ...,  1477,  1358,  1362],
             ...,
             [14261, 13892, 13897, ..., 14001, 14131, 14011],
             [14633, 14636, 14764, ..., 14744, 14751, 14505],
             [15004, 15135, 15136, ..., 15116, 15123, 15126]],

            ...,

            [[  374,     6,    11, ...,   113,   489,   492],
             [  499,   750,   631, ...,   609,   613,   991],
             [  995,  1244,  1127, ...,  1476,  1359,  1486],
             ...,
             [14015, 13892, 14271, ..., 14001, 14007, 14011],
             [14385, 14760, 14766, ..., 14868, 14875, 14877],
             [14881, 15135, 15261, ..., 15116, 15123, 15003]],

            [[  374,   254,   258, ...,   114,   488,   120],
             [  622,   500,   506, ...,   608,   860,   867],
             [ 1243,   998,  1373, ...,  1477,  1357,  1487],
             ...,
             [14263, 13892, 13899, ..., 14125, 14007, 14009],
             [14385, 14760, 14765, ..., 14868, 14875, 14504],
             [14881, 15135, 15136, ..., 15116, 15123, 15002]],

            [[  374,     5,    11, ...,   485,   365,   122],
             [  869,   874,   754, ...,   609,   613,   991],
             [  993,   998,  1125, ...,  1355,  1483,  1363],
             ...,
             [14138, 14141, 14271, ..., 14126, 14130, 14133],
             [14633, 14636, 14766, ..., 14868, 14626, 14504],
             [14881, 15259, 15136, ..., 15116, 14999, 15003]]]], dtype=int64), array([[6.0413136, 6.257844 , 7.304192 , ..., 7.966965 , 7.3008776,
            7.809346 ]], dtype=float32), array([[116689.055, 116583.11 , 117326.586, ..., 116910.484, 116464.63 ,
            116662.97 ]], dtype=float32), array([[59951800., 60792592., 58846240., 59147248., 58450960., 58312816.,
            61128780., 59177976., 58676992., 59408900., 61875352., 59005400.,
            59139912., 59715120., 58929220., 59831232., 59928228., 60457944.,
            57853264., 59420780., 59265656., 59396296., 58765728., 58885464.,
            59824040., 59739560., 59229032., 58855424., 60667444., 58705848.,
            58246552., 61080952., 59572328., 60958656., 60901160., 61213192.,
            61455028., 59446964., 60433404., 60938968., 58719152., 59467000.,
            59862072., 60030152., 61280376., 60782072., 61689732., 60524200.,
            58317056., 58138292., 57870612., 58270392., 58767848., 60148672.,
            59276156., 63207544., 61183320., 59308480., 59952592., 60710720.,
            59029800., 60761004., 58898888., 60754308., 59318568., 60357352.,
            60260896., 58569096., 58662668., 59384176., 59242924., 61030964.,
            58150040., 60817296., 60214024., 59631192., 58611240., 59699384.,
            58258744., 59965864., 60232068., 58060488., 59774896., 61973296.,
            60554288., 60936780., 58694212., 60828848., 60251652., 60929400.,
            60014048., 60006108., 59245960., 60297344., 60091216., 60107992.,
            58686716., 58165264., 59828048., 58881688., 58970792., 58881552.,
            58580368., 60066504., 58005672., 62224072., 59141948., 59358008.,
            58304248., 60236224., 57621756., 60286720., 59979336., 58813208.,
            59559552., 58706120., 58650864., 60916284., 60527184., 58932036.,
            59158424., 59453768., 60122936., 60713288., 58566696., 60149536.,
            60906684., 58620840.]], dtype=float32), array([[3.8224655e+09, 3.4812265e+09, 4.0653450e+09, 3.9623462e+09,
            3.7181489e+09, 3.8680228e+09, 3.8962115e+09, 3.7737882e+09,
            3.8124861e+09, 3.8631542e+09]], dtype=float32)]



.. GENERATED FROM PYTHON SOURCE LINES 76-78

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 78-97

.. code-block:: Python


    sess = create_session(script_args.filename, profiling=True)

    for _ in range(script_args.repeat):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    if js_profile_to_dataframe is not None:
        df = js_profile_to_dataframe(prof, first_it_out=True)
        print(df.columns)
        df.to_csv("plot_profile_existing_onnx.csv")
        df.to_excel("plot_profile_existing_onnx.xlsx")
        fig, ax = plt.subplots(1, 2, figsize=(10, 5))

        plot_ort_profile(df, ax[0], ax[1], "dort")
        fig.tight_layout()
        fig.savefig("plot_profile_existing_onnx.png")
    else:
        print("Install onnx-extended first.")



.. image-sg:: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :alt: dort, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['cat', 'pid', 'tid', 'dur', 'ts', 'ph', 'name', 'args_op_name',
           'op_name', 'args_thread_scheduling_stats', 'args_output_size',
           'args_parameter_size', 'args_activation_size', 'args_node_index',
           'args_provider', 'event_name', 'iteration', 'it==0'],
          dtype='object')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.082 seconds)


.. _sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_existing_onnx_101.ipynb <plot_profile_existing_onnx_101.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_existing_onnx_101.py <plot_profile_existing_onnx_101.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_profile_existing_onnx_101.zip <plot_profile_existing_onnx_101.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
