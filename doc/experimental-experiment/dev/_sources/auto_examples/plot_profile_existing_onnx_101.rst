
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profile_existing_onnx_101.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profile_existing_onnx_101.py:


.. _l-plot-profile-existing-onnx-101:

101: Profile an existing model with onnxruntime
===============================================

Profiles any onnx model on CPU.

Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 12-44

.. code-block:: Python


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    from experimental_experiment.args import get_parsed_args

    try:
        from onnx_extended.tools.js_profile import (
            js_profile_to_dataframe,
            plot_ort_profile,
        )
    except ImportError:
        js_profile_to_dataframe = None

    try:
        filename = os.path.join(
            os.path.dirname(__file__ or ""), "data", "example_4700-CPUep-opt.onnx"
        )
    except NameError:
        filename = "data/example_4700-CPUep-opt.onnx"

    script_args = get_parsed_args(
        "plot_profile_existing_onnx",
        filename=(filename, "input file"),
        repeat=10,
        expose="",
    )


    for att in ("filename", "repeat"):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    filename=data/example_4700-CPUep-opt.onnx
    repeat=10




.. GENERATED FROM PYTHON SOURCE LINES 45-46

Random inputs.

.. GENERATED FROM PYTHON SOURCE LINES 46-77

.. code-block:: Python



    def create_random_input(sess):
        feeds = {}
        for i in sess.get_inputs():
            shape = i.shape
            ot = i.type
            if ot == "tensor(float)":
                dtype = np.float32
            else:
                raise ValueError(f"Unsupposed onnx type {ot}.")
            t = np.random.rand(*shape).astype(dtype)
            feeds[i.name] = t
        return feeds


    def create_session(filename, profiling=False):
        from onnxruntime import InferenceSession, SessionOptions

        if not profiling:
            return InferenceSession(filename, providers=["CPUExecutionProvider"])
        opts = SessionOptions()
        opts.enable_profiling = True
        return InferenceSession(filename, opts, providers=["CPUExecutionProvider"])


    sess = create_session(script_args.filename)
    feeds = create_random_input(sess)
    sess.run(None, feeds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [array([[6.2496448e-01, 4.9184007e-04, 5.9981090e-01, ..., 3.4720525e-01,
            2.9170713e-01, 1.9553566e-01],
           [6.9717936e-02, 9.8278248e-01, 3.4276786e-01, ..., 7.9340309e-01,
            3.0967820e-01, 9.6524018e-01],
           [2.1151678e-01, 5.0150418e-01, 2.1112655e-01, ..., 2.2920255e-01,
            4.8823184e-01, 1.1760828e-01],
           ...,
           [3.9968979e-01, 7.4109352e-01, 3.7671286e-01, ..., 1.2248074e-01,
            8.4395182e-01, 2.1800913e-01],
           [9.0182018e-01, 6.1200202e-01, 2.3663145e-01, ..., 1.9844973e-01,
            7.6063478e-01, 7.3041761e-01],
           [7.3652917e-01, 1.3624515e-01, 4.7878700e-01, ..., 7.3143101e-01,
            1.7847103e-01, 9.8003316e-01]], dtype=float32), array([[0.1080118 , 0.25920483, 0.5102275 , ..., 0.4872655 , 0.1918055 ,
            0.69658196],
           [0.05689857, 0.03230627, 0.7440866 , ..., 0.28798005, 0.31146926,
            0.9539143 ],
           [0.74147856, 0.20698632, 0.06879039, ..., 0.14054076, 0.46813202,
            0.08450719],
           ...,
           [0.660212  , 0.2863811 , 0.8409827 , ..., 0.26928735, 0.83801997,
            0.07628813],
           [0.901364  , 0.05633454, 0.02070919, ..., 0.4453837 , 0.53939325,
            0.09518323],
           [0.5605067 , 0.29931262, 0.7097375 , ..., 0.57665837, 0.13105102,
            0.80849487]], dtype=float32), array([[0.5826957 , 0.29406008, 0.7919984 , ..., 0.17062418, 0.54226   ,
            0.02891758],
           [0.92046726, 0.3376205 , 0.43821797, ..., 0.9829995 , 0.06195042,
            0.7512698 ],
           [0.2057158 , 0.23215352, 0.8830225 , ..., 0.60991913, 0.68891436,
            0.16375576],
           ...,
           [0.00888547, 0.0360228 , 0.25771222, ..., 0.2521462 , 0.77387816,
            0.7666011 ],
           [0.60769933, 0.6845353 , 0.2749004 , ..., 0.6670897 , 0.6673445 ,
            0.3708276 ],
           [0.9232766 , 0.34683603, 0.12715249, ..., 0.42798498, 0.33790934,
            0.08026459]], dtype=float32), array([[[[5.854027 , 6.3432093, 6.254632 , ..., 4.783154 , 4.3963437,
              4.2317495],
             [6.0665736, 5.4368334, 4.959028 , ..., 4.1546693, 4.3987136,
              4.878414 ],
             [6.2665825, 4.913817 , 4.788086 , ..., 4.639842 , 5.200488 ,
              4.4422045],
             ...,
             [5.3427734, 4.835501 , 4.0776057, ..., 5.81778  , 6.566311 ,
              5.592585 ],
             [5.7317643, 4.939709 , 4.7503843, ..., 5.411049 , 4.892062 ,
              5.627305 ],
             [5.222113 , 5.688472 , 5.798792 , ..., 6.092569 , 5.8588367,
              5.556347 ]],

            [[7.40067  , 7.8960443, 7.3116593, ..., 5.0619984, 6.7165565,
              6.565956 ],
             [7.3176165, 6.961976 , 7.0218883, ..., 4.99952  , 5.223126 ,
              5.5057683],
             [7.3226366, 7.7465196, 7.116142 , ..., 6.681151 , 6.1224613,
              6.7176895],
             ...,
             [6.0431695, 5.88439  , 5.062304 , ..., 6.8481283, 7.848287 ,
              7.15061  ],
             [6.748671 , 7.218963 , 5.8394203, ..., 6.623684 , 7.253621 ,
              5.885793 ],
             [6.503842 , 6.87923  , 7.4827356, ..., 7.358799 , 7.7026   ,
              7.1417933]],

            [[7.457608 , 7.0028667, 6.84527  , ..., 5.8070726, 5.1135554,
              5.4606733],
             [6.970798 , 6.6759105, 7.219999 , ..., 5.8276014, 5.570516 ,
              6.295874 ],
             [7.1424217, 7.015924 , 6.8825865, ..., 6.2514586, 5.8870697,
              5.7258625],
             ...,
             [6.8860073, 6.195597 , 5.457931 , ..., 7.102712 , 7.8709736,
              7.1010685],
             [6.7342973, 5.9106164, 5.892106 , ..., 6.930656 , 6.6592865,
              6.5520654],
             [6.175534 , 6.970258 , 7.163116 , ..., 7.694531 , 7.4002523,
              6.448123 ]],

            ...,

            [[6.005378 , 6.984129 , 7.357287 , ..., 4.9660425, 4.5026274,
              5.4148355],
             [7.1964245, 7.4541774, 6.849385 , ..., 5.544586 , 6.0121264,
              5.731779 ],
             [6.6325006, 6.3798566, 7.3749833, ..., 5.900295 , 5.96853  ,
              5.6448054],
             ...,
             [5.3794823, 5.178356 , 4.6661754, ..., 6.70029  , 6.987255 ,
              7.085185 ],
             [6.4013276, 6.454791 , 6.660875 , ..., 6.5781546, 6.813973 ,
              6.719515 ],
             [5.100186 , 6.326728 , 6.4119015, ..., 6.373387 , 6.861455 ,
              7.116063 ]],

            [[8.786185 , 8.481625 , 8.706559 , ..., 6.2570252, 6.1274924,
              6.9898987],
             [8.7671175, 8.818106 , 8.258584 , ..., 6.962055 , 7.483316 ,
              7.2867603],
             [8.9212055, 8.1239805, 8.71949  , ..., 7.2175417, 7.586698 ,
              7.3551955],
             ...,
             [8.023417 , 6.9907784, 6.2240305, ..., 8.381885 , 9.18202  ,
              9.0001135],
             [7.909795 , 7.7234993, 7.137554 , ..., 8.334844 , 8.734331 ,
              7.787987 ],
             [7.479255 , 7.9945054, 8.179701 , ..., 8.322754 , 8.513426 ,
              8.0969305]],

            [[8.303678 , 9.574897 , 7.4910913, ..., 5.928437 , 6.3825903,
              7.118988 ],
             [8.8098   , 8.402793 , 8.180828 , ..., 6.307488 , 7.0101933,
              6.388877 ],
             [8.006792 , 8.016599 , 8.478259 , ..., 6.9681025, 6.671666 ,
              6.8905396],
             ...,
             [7.675941 , 7.5207253, 5.5066924, ..., 8.127913 , 9.1179695,
              7.690411 ],
             [7.4144454, 8.106082 , 7.535704 , ..., 6.93182  , 9.295955 ,
              7.9263697],
             [7.472112 , 7.783435 , 7.9761324, ..., 8.529289 , 8.45942  ,
              8.102575 ]]]], dtype=float32), array([[[[    1,     4,    11, ...,   112,   366,   493],
             [  497,   875,   878, ...,   981,   738,   990],
             [ 1241,  1121,  1249, ...,  1479,  1356,  1112],
             ...,
             [14013, 14018, 14145, ..., 14001, 14128, 14258],
             [14386, 14390, 14764, ..., 14499, 14500, 14631],
             [15254, 15011, 15015, ..., 14994, 15371, 15126]],

            [[    3,   128,    11, ...,   115,   365,   371],
             [  744,   875,   878, ...,   856,   615,   988],
             [ 1117,   996,  1375, ...,  1479,  1356,  1113],
             ...,
             [14015, 14018, 14269, ..., 14001, 14379, 14382],
             [14387, 14390, 14764, ..., 14747, 14624, 14629],
             [15254, 15011, 15263, ..., 14995, 15247, 15126]],

            [[    3,   128,    11, ...,   112,   366,   492],
             [  869,   875,   877, ...,   983,   739,   990],
             [ 1117,  1121,  1002, ...,  1479,  1358,  1112],
             ...,
             [14012, 14018, 14145, ..., 14000, 14379, 14382],
             [14757, 14763, 14516, ..., 14747, 14748, 14755],
             [14880, 15256, 15139, ..., 14994, 14996, 15126]],

            ...,

            [[    3,   253,    11, ...,   112,   365,   492],
             [  868,   751,   754, ...,   856,   863,   989],
             [ 1241,   997,  1375, ...,  1353,  1480,  1114],
             ...,
             [14015, 14016, 14021, ..., 14125, 14377, 14383],
             [14387, 14388, 14516, ..., 14871, 14748, 14629],
             [15130, 14887, 15015, ..., 14992, 15371, 15375]],

            [[    3,   252,    11, ...,   112,   490,   492],
             [  868,   875,   878, ...,   856,   863,   988],
             [  993,   997,  1001, ...,  1479,  1480,  1114],
             ...,
             [14015, 14016, 14144, ..., 14125, 14004, 14383],
             [14387, 14513, 14764, ..., 14870, 14748, 14877],
             [14880, 14884, 15139, ..., 15118, 15371, 15126]],

            [[    1,     4,    11, ...,   112,   365,   492],
             [  868,   751,   878, ...,   980,   739,   864],
             [ 1240,   996,  1002, ...,  1354,  1357,  1112],
             ...,
             [13891, 14018, 14021, ..., 14000, 14379, 14383],
             [14756, 14514, 14764, ..., 14871, 14624, 14879],
             [15129, 14887, 15014, ..., 15119, 15371, 15250]]]], dtype=int64), array([[6.3432093, 6.177928 , 6.4668   , ..., 8.099357 , 8.578971 ,
            9.295955 ]], dtype=float32), array([[116986.945, 116847.62 , 116358.18 , ..., 116494.625, 115939.75 ,
            116721.305]], dtype=float32), array([[57775024., 59671496., 60923192., 58849912., 59155724., 58430512.,
            60764388., 58487604., 60622600., 60414272., 59686008., 58295100.,
            58932292., 59112104., 59125880., 58267788., 60798176., 59559836.,
            57848400., 59386384., 61621752., 61557056., 59790848., 58714204.,
            59873768., 58297016., 58886232., 60329320., 59868784., 59326152.,
            59798064., 59313752., 58561984., 61789956., 59300800., 58732052.,
            57430608., 58667888., 58724540., 59380904., 59805416., 61224000.,
            59278536., 60136524., 59037436., 60030336., 58187756., 62020304.,
            60106936., 58524960., 61785336., 58974408., 60553552., 58087104.,
            60032256., 59616816., 60631240., 59617996., 61443624., 58606232.,
            61685592., 58850212., 59451292., 59175680., 58765728., 59333232.,
            59042960., 60654264., 58771936., 59280984., 60126072., 60681224.,
            60291384., 58922936., 58759048., 59294464., 58491632., 59361832.,
            57702576., 61196968., 58982124., 61485060., 59435784., 59467800.,
            61036088., 59447848., 57807208., 59028736., 59946384., 59090440.,
            58443104., 59842440., 61043904., 59666368., 59439584., 58524824.,
            58669576., 59554736., 59761404., 60292704., 58196712., 58463380.,
            58548460., 60287976., 59638200., 59118812., 59688984., 61805996.,
            61249528., 56315736., 58652136., 59406256., 59181680., 59684200.,
            60621056., 59048800., 58081288., 60176448., 60658096., 59559780.,
            61082828., 60872304., 58317848., 58706920., 59984880., 58325600.,
            59411964., 59213972.]], dtype=float32), array([[4.0594982e+09, 3.8568745e+09, 3.8166605e+09, 4.0003057e+09,
            3.7596938e+09, 3.9377677e+09, 3.9455954e+09, 3.6130276e+09,
            3.4762296e+09, 3.5386406e+09]], dtype=float32)]



.. GENERATED FROM PYTHON SOURCE LINES 78-80

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 80-99

.. code-block:: Python


    sess = create_session(script_args.filename, profiling=True)

    for _ in range(script_args.repeat):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    if js_profile_to_dataframe is not None:
        df = js_profile_to_dataframe(prof, first_it_out=True)
        print(df.columns)
        df.to_csv("plot_profile_existing_onnx.csv")
        df.to_excel("plot_profile_existing_onnx.xlsx")
        fig, ax = plt.subplots(1, 2, figsize=(10, 5))

        plot_ort_profile(df, ax[0], ax[1], "dort")
        fig.tight_layout()
        fig.savefig("plot_profile_existing_onnx.png")
    else:
        print("Install onnx-extended first.")



.. image-sg:: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :alt: dort, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['cat', 'pid', 'tid', 'dur', 'ts', 'ph', 'name',
           'args_thread_scheduling_stats', 'args_output_size',
           'args_parameter_size', 'args_activation_size', 'args_node_index',
           'args_provider', 'args_op_name', 'op_name', 'event_name', 'iteration',
           'it==0'],
          dtype='object')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.228 seconds)


.. _sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_existing_onnx_101.ipynb <plot_profile_existing_onnx_101.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_existing_onnx_101.py <plot_profile_existing_onnx_101.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_profile_existing_onnx_101.zip <plot_profile_existing_onnx_101.zip>`


.. include:: plot_profile_existing_onnx_101.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
