
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profile_existing_onnx_101.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profile_existing_onnx_101.py:


101: Profile an existing model with onnxruntime
===============================================

Profiles any onnx model on CPU.

Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 10-42

.. code-block:: Python


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    from experimental_experiment.args import get_parsed_args

    try:
        from onnx_extended.tools.js_profile import (
            js_profile_to_dataframe,
            plot_ort_profile,
        )
    except ImportError:
        js_profile_to_dataframe = None

    try:
        filename = os.path.join(
            os.path.dirname(__file__ or ""), "data", "example_4700-CPUep-opt.onnx"
        )
    except NameError:
        filename = "data/example_4700-CPUep-opt.onnx"

    script_args = get_parsed_args(
        "plot_profile_existing_onnx",
        filename=(filename, "input file"),
        repeat=10,
        expose="",
    )


    for att in "filename,repeat".split(","):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    filename=data/example_4700-CPUep-opt.onnx
    repeat=10




.. GENERATED FROM PYTHON SOURCE LINES 43-44

Random inputs.

.. GENERATED FROM PYTHON SOURCE LINES 44-75

.. code-block:: Python



    def create_random_input(sess):
        feeds = {}
        for i in sess.get_inputs():
            shape = i.shape
            ot = i.type
            if ot == "tensor(float)":
                dtype = np.float32
            else:
                raise ValueError(f"Unsupposed onnx type {ot}.")
            t = np.random.rand(*shape).astype(dtype)
            feeds[i.name] = t
        return feeds


    def create_session(filename, profiling=False):
        from onnxruntime import InferenceSession, SessionOptions

        if not profiling:
            return InferenceSession(filename, providers=["CPUExecutionProvider"])
        opts = SessionOptions()
        opts.enable_profiling = True
        return InferenceSession(filename, opts, providers=["CPUExecutionProvider"])


    sess = create_session(script_args.filename)
    feeds = create_random_input(sess)
    sess.run(None, feeds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [array([[0.39063478, 0.9689968 , 0.6241704 , ..., 0.07536762, 0.09663316,
            0.10253945],
           [0.7773705 , 0.49851915, 0.49549687, ..., 0.571471  , 0.09375739,
            0.8110842 ],
           [0.25204146, 0.6920936 , 0.61295795, ..., 0.5548841 , 0.6177724 ,
            0.8926419 ],
           ...,
           [0.7748291 , 0.28385258, 0.676985  , ..., 0.4984896 , 0.64086634,
            0.7077784 ],
           [0.56444865, 0.72921365, 0.40627232, ..., 0.9711078 , 0.67757976,
            0.10032912],
           [0.57552934, 0.69420874, 0.2836038 , ..., 0.8290663 , 0.68088377,
            0.50696   ]], dtype=float32), array([[0.92984366, 0.5234185 , 0.04080081, ..., 0.7493545 , 0.19017726,
            0.67261374],
           [0.3251814 , 0.09946243, 0.11921281, ..., 0.76252586, 0.06760669,
            0.9898191 ],
           [0.7234933 , 0.25855342, 0.58914065, ..., 0.9549161 , 0.75499713,
            0.7317937 ],
           ...,
           [0.44442606, 0.08974706, 0.5380997 , ..., 0.1899527 , 0.62343866,
            0.5417515 ],
           [0.59617877, 0.5867812 , 0.88065   , ..., 0.016847  , 0.5312172 ,
            0.52639437],
           [0.4332887 , 0.3076783 , 0.6915274 , ..., 0.95999193, 0.5136664 ,
            0.8598584 ]], dtype=float32), array([[0.11828106, 0.7764834 , 0.28483462, ..., 0.38356444, 0.85157526,
            0.7924321 ],
           [0.9571048 , 0.34596702, 0.15396401, ..., 0.69879866, 0.16112763,
            0.45812312],
           [0.03468446, 0.9867795 , 0.75605804, ..., 0.8308975 , 0.4970596 ,
            0.25588015],
           ...,
           [0.24893752, 0.4866909 , 0.92223203, ..., 0.84146535, 0.25981078,
            0.00871418],
           [0.38432   , 0.8318515 , 0.01094265, ..., 0.47038272, 0.6424657 ,
            0.04019171],
           [0.19769634, 0.8382633 , 0.8418843 , ..., 0.65539455, 0.14526053,
            0.04072677]], dtype=float32), array([[[[ 9.616887 ,  8.77707  ,  9.710041 , ...,  9.1924515,
               8.555261 ,  8.539637 ],
             [ 9.189902 ,  8.310377 ,  8.949025 , ...,  9.4474325,
               9.42006  ,  8.730871 ],
             [ 9.23877  ,  8.822333 ,  8.34113  , ...,  9.317689 ,
               9.682183 ,  9.167072 ],
             ...,
             [ 8.810836 ,  8.891698 ,  7.2234807, ...,  9.7850485,
               9.662487 ,  9.532099 ],
             [ 8.895371 ,  8.381308 ,  7.8289456, ...,  8.776632 ,
              10.380599 ,  9.400197 ],
             [ 7.780453 ,  8.075125 ,  8.139791 , ...,  8.627182 ,
               8.769898 ,  7.5978413]],

            [[ 6.796945 ,  7.2417173,  7.6230845, ...,  7.081871 ,
               7.258346 ,  6.1597643],
             [ 7.1367974,  7.104326 ,  6.275062 , ...,  7.543057 ,
               7.494576 ,  6.3601065],
             [ 7.0289607,  6.227367 ,  7.094668 , ...,  7.332803 ,
               7.505678 ,  7.5208344],
             ...,
             [ 5.942116 ,  6.1387067,  6.7587037, ...,  6.7298775,
               7.7562575,  6.5604424],
             [ 6.109456 ,  7.0896645,  6.3860292, ...,  7.100384 ,
               8.543078 ,  6.3975267],
             [ 6.228591 ,  6.2394404,  5.948519 , ...,  6.855753 ,
               6.817364 ,  6.036415 ]],

            [[ 6.1392345,  6.435578 ,  6.52473  , ...,  6.702871 ,
               6.2010756,  5.3943734],
             [ 6.4850063,  6.1422844,  6.0307083, ...,  5.443497 ,
               6.559309 ,  6.3287015],
             [ 5.767386 ,  5.319772 ,  6.1225863, ...,  6.87022  ,
               7.3253546,  6.03502  ],
             ...,
             [ 4.8965206,  6.150385 ,  5.660641 , ...,  6.9205403,
               7.1512938,  6.1537976],
             [ 5.0307565,  5.583424 ,  5.6650352, ...,  6.510657 ,
               7.332272 ,  6.538896 ],
             [ 5.6454844,  5.172902 ,  5.4359255, ...,  5.468619 ,
               6.9914303,  5.325967 ]],

            ...,

            [[ 7.077877 ,  6.953399 ,  7.021918 , ...,  7.7181196,
               7.0930896,  6.2383227],
             [ 6.6003366,  6.483187 ,  5.7294245, ...,  6.7747817,
               7.1468525,  5.8284326],
             [ 5.848718 ,  5.6742134,  5.8617234, ...,  5.814429 ,
               7.5239396,  6.4750032],
             ...,
             [ 5.873089 ,  5.855756 ,  5.608017 , ...,  7.196236 ,
               7.3883386,  6.365545 ],
             [ 5.70144  ,  5.5497518,  5.4202514, ...,  6.7163305,
               7.9906197,  6.2907963],
             [ 5.638957 ,  5.1082187,  5.0554876, ...,  6.860166 ,
               7.342758 ,  5.9383197]],

            [[ 8.684964 ,  7.809716 ,  8.275869 , ...,  8.705307 ,
               8.370752 ,  7.032293 ],
             [ 8.864928 ,  7.6714845,  7.657741 , ...,  8.822717 ,
               9.159581 ,  8.144685 ],
             [ 8.240783 ,  8.117167 ,  7.4109993, ...,  8.8259735,
               8.729353 ,  7.8553762],
             ...,
             [ 7.96294  ,  7.704602 ,  6.920908 , ...,  8.019862 ,
               9.555555 ,  8.242549 ],
             [ 7.7786736,  7.154189 ,  6.79361  , ...,  7.8132873,
               9.195292 ,  8.071982 ],
             [ 7.2207007,  6.922954 ,  6.4542527, ...,  8.416901 ,
               7.965135 ,  7.008199 ]],

            [[ 7.713892 ,  6.3265285,  7.365135 , ...,  6.5352116,
               7.2029066,  6.07218  ],
             [ 5.781354 ,  6.592638 ,  6.984132 , ...,  7.404583 ,
               7.6592693,  6.5868006],
             [ 7.437271 ,  6.578149 ,  6.6716948, ...,  7.7501802,
               7.152829 ,  7.805953 ],
             ...,
             [ 6.9134874,  6.11526  ,  5.171508 , ...,  7.1813173,
               8.514203 ,  7.605509 ],
             [ 6.442836 ,  5.7040052,  6.101922 , ...,  6.595887 ,
               8.319162 ,  7.1283226],
             [ 6.0900173,  6.3323298,  6.411544 , ...,  6.147434 ,
               6.8970795,  5.7404127]]]], dtype=float32), array([[[[    3,     6,    10, ...,   239,   242,   494],
             [  869,   501,   755, ...,   611,   614,   990],
             [ 1117,  1369,  1002, ...,  1104,  1110,  1112],
             ...,
             [13889, 13892, 14271, ..., 14001, 14129, 14132],
             [14756, 14639, 14640, ..., 14871, 14872, 14879],
             [15128, 14887, 15139, ..., 15240, 14996, 15003]],

            [[    2,     7,   256, ...,   239,   241,   493],
             [  868,   503,   628, ...,   858,   613,   616],
             [  993,  1368,  1001, ...,  1104,  1359,  1238],
             ...,
             [13889, 13894, 14271, ..., 14000, 14007, 14008],
             [14756, 14639, 14764, ..., 14871, 14872, 14879],
             [15129, 14887, 15012, ..., 15241, 14996, 15250]],

            [[    3,     4,     8, ...,   363,   118,   370],
             [  868,   627,   504, ...,   982,   615,   743],
             [ 1241,  1246,  1001, ...,  1104,  1108,  1238],
             ...,
             [14013, 14016, 14270, ..., 14002, 14130, 14008],
             [14756, 14639, 14643, ..., 14871, 14873, 14878],
             [14881, 15009, 15139, ..., 14993, 14999, 15250]],

            ...,

            [[    3,   379,   256, ...,   239,   241,   121],
             [  868,   501,   876, ...,   610,   612,   619],
             [ 1240,  1370,  1001, ...,  1104,  1110,  1114],
             ...,
             [13888, 13892, 14270, ..., 14001, 14005, 14134],
             [14756, 14762, 14640, ..., 14871, 14751, 14878],
             [14880, 14884, 15015, ..., 14995, 14996, 15250]],

            [[    3,     4,   133, ...,   115,   243,   246],
             [  869,   501,   877, ...,   734,   614,   619],
             [  993,  1369,  1002, ...,  1107,  1359,  1238],
             ...,
             [13890, 13894, 14271, ..., 14248, 14129, 14135],
             [14757, 14515, 14640, ..., 14745, 14872, 14879],
             [15004, 14886, 15260, ..., 14994, 15371, 15126]],

            [[    3,     7,    10, ...,   239,   366,   371],
             [  746,   503,   752, ...,   859,   613,   616],
             [ 1117,  1368,  1001, ...,  1105,  1359,  1114],
             ...,
             [13888, 13893, 14146, ..., 14002, 14255, 14009],
             [14757, 14639, 14640, ..., 14871, 14872, 14879],
             [15004, 14887, 15015, ..., 14995, 14998, 15126]]]], dtype=int64), array([[10.056577 ,  9.701876 ,  9.461108 , ...,  6.6175385,  7.3250017,
             8.514203 ]], dtype=float32), array([[123913.75, 123232.63, 122991.65, ..., 123177.13, 123187.49,
            123766.61]], dtype=float32), array([[63198344., 64138088., 63170600., 63049848., 64285240., 62887856.,
            61758128., 61427712., 60675008., 62133288., 61633344., 62410568.,
            64586996., 64354576., 62456552., 62692112., 65002688., 63200328.,
            61318632., 63990720., 62629136., 63815716., 61744208., 63433936.,
            61799280., 65080176., 62183704., 63920000., 64612200., 61449672.,
            62755660., 61735620., 60231840., 63519040., 63136352., 63659168.,
            63385064., 62861692., 62002216., 64869344., 63344872., 62986536.,
            62804264., 63164504., 62904328., 62289960., 64543316., 61778716.,
            61829060., 61589728., 63787040., 62859520., 64251372., 64116360.,
            65316984., 63390080., 64434352., 63522328., 61621804., 62894760.,
            59945620., 64630132., 63856144., 61906032., 62755104., 63667888.,
            63261388., 63371096., 62605184., 62153100., 63335272., 63759720.,
            62939752., 62749872., 63742924., 65060816., 62896836., 62994328.,
            65886168., 62790956., 62782856., 64365136., 62437608., 61985536.,
            64604876., 63572516., 60989416., 62705616., 64390884., 62500480.,
            64082048., 63483040., 64204008., 63963504., 62543508., 63009040.,
            63262728., 65165824., 65015696., 63173008., 62953272., 61729768.,
            63043672., 63099216., 63867780., 63042088., 62989224., 65194144.,
            62532596., 63297280., 61977656., 62237140., 61187304., 63566428.,
            63901320., 63367308., 64517112., 62953696., 62644888., 63434684.,
            63385856., 62893664., 61913684., 63926672., 64342072., 64158664.,
            62986112., 63279608.]], dtype=float32), array([[4.0976671e+09, 4.2791209e+09, 4.4860032e+09, 3.9471780e+09,
            4.3548032e+09, 4.1911270e+09, 3.6407916e+09, 3.9544005e+09,
            3.8898714e+09, 3.9104727e+09]], dtype=float32)]



.. GENERATED FROM PYTHON SOURCE LINES 76-78

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 78-97

.. code-block:: Python


    sess = create_session(script_args.filename, profiling=True)

    for _ in range(script_args.repeat):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    if js_profile_to_dataframe is not None:
        df = js_profile_to_dataframe(prof, first_it_out=True)
        print(df.columns)
        df.to_csv("plot_profile_existing_onnx.csv")
        df.to_excel("plot_profile_existing_onnx.xlsx")
        fig, ax = plt.subplots(1, 2, figsize=(10, 5))

        plot_ort_profile(df, ax[0], ax[1], "dort")
        fig.tight_layout()
        fig.savefig("plot_profile_existing_onnx.png")
    else:
        print("Install onnx-extended first.")



.. image-sg:: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :alt: dort, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['cat', 'pid', 'tid', 'dur', 'ts', 'ph', 'name', 'args_op_name',
           'op_name', 'args_thread_scheduling_stats', 'args_output_size',
           'args_parameter_size', 'args_activation_size', 'args_node_index',
           'args_provider', 'event_name', 'iteration', 'it==0'],
          dtype='object')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.616 seconds)


.. _sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_existing_onnx_101.ipynb <plot_profile_existing_onnx_101.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_existing_onnx_101.py <plot_profile_existing_onnx_101.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_profile_existing_onnx_101.zip <plot_profile_existing_onnx_101.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
