
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profile_existing_onnx_101.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profile_existing_onnx_101.py:


101: Profile an existing model with onnxruntime
===============================================

Profiles any onnx model on CPU.

Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 10-42

.. code-block:: Python


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    from experimental_experiment.args import get_parsed_args

    try:
        from onnx_extended.tools.js_profile import (
            js_profile_to_dataframe,
            plot_ort_profile,
        )
    except ImportError:
        js_profile_to_dataframe = None

    try:
        filename = os.path.join(
            os.path.dirname(__file__ or ""), "data", "example_4700-CPUep-opt.onnx"
        )
    except NameError:
        filename = "data/example_4700-CPUep-opt.onnx"

    script_args = get_parsed_args(
        "plot_profile_existing_onnx",
        filename=(filename, "input file"),
        repeat=10,
        expose="",
    )


    for att in "filename,repeat".split(","):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    filename=data/example_4700-CPUep-opt.onnx
    repeat=10




.. GENERATED FROM PYTHON SOURCE LINES 43-44

Random inputs.

.. GENERATED FROM PYTHON SOURCE LINES 44-75

.. code-block:: Python



    def create_random_input(sess):
        feeds = {}
        for i in sess.get_inputs():
            shape = i.shape
            ot = i.type
            if ot == "tensor(float)":
                dtype = np.float32
            else:
                raise ValueError(f"Unsupposed onnx type {ot}.")
            t = np.random.rand(*shape).astype(dtype)
            feeds[i.name] = t
        return feeds


    def create_session(filename, profiling=False):
        from onnxruntime import InferenceSession, SessionOptions

        if not profiling:
            return InferenceSession(filename, providers=["CPUExecutionProvider"])
        opts = SessionOptions()
        opts.enable_profiling = True
        return InferenceSession(filename, opts, providers=["CPUExecutionProvider"])


    sess = create_session(script_args.filename)
    feeds = create_random_input(sess)
    sess.run(None, feeds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [array([[0.17941934, 0.58423746, 0.9684669 , ..., 0.26645088, 0.3594053 ,
            0.06060913],
           [0.02414158, 0.7199389 , 0.7637111 , ..., 0.807055  , 0.08170549,
            0.70959574],
           [0.70735466, 0.22848178, 0.06038982, ..., 0.00927741, 0.64439297,
            0.56834084],
           ...,
           [0.13349287, 0.00605646, 0.74318933, ..., 0.7913498 , 0.03297814,
            0.3570097 ],
           [0.63795596, 0.7086203 , 0.00574563, ..., 0.18575275, 0.5732937 ,
            0.02239586],
           [0.5118097 , 0.91168505, 0.21044217, ..., 0.15010859, 0.1982363 ,
            0.41354376]], dtype=float32), array([[0.39096105, 0.15058059, 0.9336235 , ..., 0.71558475, 0.09193175,
            0.47122976],
           [0.81525415, 0.20814438, 0.45353088, ..., 0.39550757, 0.10144959,
            0.5926132 ],
           [0.16991182, 0.23635596, 0.84896433, ..., 0.4915527 , 0.20256186,
            0.65354574],
           ...,
           [0.745976  , 0.15624249, 0.20387043, ..., 0.1676855 , 0.5493695 ,
            0.66530496],
           [0.37092015, 0.71862054, 0.85757864, ..., 0.27967474, 0.29991752,
            0.10933784],
           [0.15677722, 0.63569707, 0.63368744, ..., 0.22413671, 0.65825903,
            0.78271025]], dtype=float32), array([[0.06943461, 0.23722823, 0.01658306, ..., 0.29018664, 0.04859344,
            0.4506191 ],
           [0.15482917, 0.35008428, 0.18315595, ..., 0.805919  , 0.75286835,
            0.2434745 ],
           [0.7074043 , 0.8392447 , 0.3395206 , ..., 0.122213  , 0.15224458,
            0.34642106],
           ...,
           [0.58297825, 0.03204551, 0.54677355, ..., 0.2712899 , 0.11607264,
            0.02731874],
           [0.39250907, 0.26260677, 0.63150716, ..., 0.49784127, 0.18708824,
            0.94954294],
           [0.43426603, 0.19433138, 0.36597046, ..., 0.5881714 , 0.7123913 ,
            0.88135105]], dtype=float32), array([[[[6.913034 , 7.627439 , 7.1577673, ..., 6.448167 , 6.32725  ,
              6.947029 ],
             [6.8126097, 6.465428 , 6.607421 , ..., 7.316976 , 6.9604545,
              7.2446632],
             [7.4379153, 7.840347 , 7.6108475, ..., 6.651315 , 6.345866 ,
              5.9103594],
             ...,
             [5.2517757, 6.1189547, 5.8020897, ..., 6.640719 , 7.664767 ,
              6.1874304],
             [6.1968455, 5.1932163, 6.1423326, ..., 7.2839084, 7.1575212,
              7.3212295],
             [6.293101 , 5.949526 , 6.930832 , ..., 7.503963 , 6.626497 ,
              6.868553 ]],

            [[8.018354 , 6.977619 , 6.737436 , ..., 6.937288 , 6.695413 ,
              6.9194355],
             [7.0245013, 6.805128 , 6.635628 , ..., 7.2728076, 6.5203657,
              7.1132393],
             [6.869961 , 6.57384  , 6.681792 , ..., 7.2817297, 6.1086235,
              6.8421216],
             ...,
             [5.8282366, 4.950675 , 6.3092546, ..., 6.659675 , 6.242525 ,
              6.4811463],
             [6.2574105, 5.8598213, 6.100187 , ..., 7.2911615, 7.4072204,
              7.036535 ],
             [5.8667884, 6.3999853, 6.1582084, ..., 6.707766 , 7.875745 ,
              8.0378065]],

            [[7.4850016, 7.443721 , 7.392293 , ..., 7.515023 , 6.1629667,
              6.7826076],
             [5.5322056, 7.5272317, 6.4480276, ..., 6.9267964, 7.454609 ,
              5.845664 ],
             [7.3864756, 6.8953786, 7.1873827, ..., 7.278972 , 6.8842034,
              6.3269944],
             ...,
             [6.572537 , 5.062208 , 5.0629745, ..., 7.0827446, 6.294973 ,
              6.5169835],
             [6.12274  , 5.324853 , 6.3002167, ..., 7.2280006, 7.851905 ,
              6.4545236],
             [6.327434 , 6.4180355, 6.5080814, ..., 6.4318237, 7.2734237,
              7.031698 ]],

            ...,

            [[8.170887 , 7.8867726, 7.1503277, ..., 6.6231337, 7.0438123,
              6.858321 ],
             [7.310727 , 6.957301 , 6.9041696, ..., 7.745513 , 6.9908557,
              6.543031 ],
             [7.501943 , 7.5816994, 7.8745675, ..., 7.525765 , 7.002867 ,
              6.0303245],
             ...,
             [5.224099 , 6.170009 , 6.646031 , ..., 6.3070364, 7.637196 ,
              6.9826   ],
             [6.200954 , 5.697075 , 6.7760735, ..., 6.8991323, 7.756779 ,
              7.053116 ],
             [7.3011665, 5.7205167, 6.810979 , ..., 7.281095 , 7.5518007,
              6.729165 ]],

            [[6.3375525, 5.832569 , 5.7236195, ..., 5.8541636, 4.4841805,
              5.5088716],
             [5.2807713, 5.328113 , 4.7039847, ..., 5.806849 , 5.891303 ,
              5.1546874],
             [6.3585935, 6.263441 , 5.5422797, ..., 5.37864  , 5.234054 ,
              4.676743 ],
             ...,
             [4.854669 , 4.4390893, 4.3426547, ..., 6.14759  , 4.778657 ,
              5.8509426],
             [4.1214056, 4.9278765, 5.192247 , ..., 5.429103 , 6.089204 ,
              6.516312 ],
             [4.887899 , 4.83667  , 5.2757173, ..., 4.7873516, 5.6609063,
              5.7959595]],

            [[7.0627193, 6.6299634, 6.56494  , ..., 6.4657707, 5.8695173,
              5.9044504],
             [6.4571857, 5.6474414, 5.55863  , ..., 6.5343356, 6.326534 ,
              6.4981728],
             [6.1754313, 6.095109 , 6.644445 , ..., 6.6706266, 5.937945 ,
              5.993662 ],
             ...,
             [5.093571 , 5.1381087, 5.279818 , ..., 5.439849 , 5.8122478,
              6.4429836],
             [5.0801764, 5.3014555, 5.1973996, ..., 5.9131494, 6.6934705,
              6.4826784],
             [5.492219 , 5.2740307, 6.2762012, ..., 5.774991 , 6.703846 ,
              6.646743 ]]]], dtype=float32), array([[[[  249,   254,   134, ...,   362,   242,   368],
             [  623,   624,   878, ...,   610,   612,   619],
             [ 1118,  1371,  1372, ...,  1104,  1483,  1239],
             ...,
             [14261, 14267, 13898, ..., 14248, 14379, 14257],
             [14758, 14390, 14765, ..., 14747, 14873, 14504],
             [15131, 15134, 14889, ..., 15119, 15120, 15126]],

            [[    0,   253,     9, ...,   237,   365,   244],
             [  747,   748,   630, ...,   980,   987,   619],
             [ 1365,  1370,  1373, ...,  1228,  1481,  1487],
             ...,
             [14260, 14266, 13898, ..., 14000, 14379, 14380],
             [14384, 14637, 14764, ..., 14623, 14624, 14504],
             [15255, 15135, 14888, ..., 15119, 15120, 15375]],

            [[  125,   378,    10, ...,   362,   119,   244],
             [  623,   748,   504, ...,   611,   984,   619],
             [ 1365,  1370,  1127, ...,  1353,  1481,  1363],
             ...,
             [14261, 14266, 14270, ..., 14248, 14379, 14382],
             [14758, 14763, 14765, ..., 14623, 14624, 14504],
             [15007, 15134, 14889, ..., 15119, 15121, 15250]],

            ...,

            [[    0,   254,     8, ...,   239,   489,   368],
             [  744,   624,   755, ...,   609,   613,   619],
             [ 1366,   996,  1372, ...,  1229,  1483,  1239],
             ...,
             [14260, 14264, 13899, ..., 14000, 14378, 14381],
             [14384, 14639, 14764, ..., 14623, 14624, 14504],
             [15131, 15134, 15013, ..., 15117, 15121, 15250]],

            [[  248,   253,   257, ...,   237,   119,   368],
             [  744,   748,   507, ...,   980,   737,   619],
             [ 1366,  1370,  1373, ...,  1228,  1483,  1363],
             ...,
             [14263, 13894, 13899, ..., 14249, 14379, 14257],
             [14758, 14638, 14392, ..., 14747, 14503, 14878],
             [15255, 15133, 14888, ..., 15118, 15120, 15251]],

            [[    0,   377,     9, ...,   237,   240,   244],
             [  869,   503,   507, ...,   732,   987,   743],
             [ 1366,  1369,  1373, ...,  1104,  1483,  1484],
             ...,
             [14261, 13892, 13899, ..., 14125, 14255, 14258],
             [14384, 14761, 14764, ..., 14871, 14503, 14504],
             [15254, 15135, 15014, ..., 15118, 15120, 15374]]]], dtype=int64), array([[7.840347 , 8.202351 , 8.016446 , ..., 7.5161533, 7.4379396,
            6.703846 ]], dtype=float32), array([[119276.74, 118883.24, 118666.18, ..., 118926.13, 119107.63,
            120173.89]], dtype=float32), array([[61880328., 59686904., 59332812., 60929256., 61651744., 62588944.,
            62143288., 62456296., 61420348., 63593560., 60992408., 61934828.,
            61360032., 61239292., 61835488., 60903136., 62037204., 59301080.,
            62347256., 63083584., 60854828., 61898848., 61592616., 62565512.,
            61418548., 61740224., 61152720., 60583960., 60500672., 60946944.,
            59636248., 62394100., 60698824., 59720696., 60266600., 61619448.,
            60671960., 60128560., 59888256., 60904312., 60326688., 61901688.,
            62965560., 62009216., 60979208., 61594304., 59152384., 62910332.,
            59301864., 61490192., 61184728., 62397064., 58185164., 61140112.,
            61048000., 61401844., 61324640., 61319960., 60785816., 60849252.,
            60169760., 58993836., 59024400., 60359192., 61506692., 61082516.,
            60804224., 61407408., 60243320., 60339776., 61554172., 60376040.,
            61567960., 61313232., 60147624., 60341508., 59490968., 61162156.,
            60609792., 60975824., 59596208., 58843848., 63388664., 64010056.,
            60129744., 60413040., 62380952., 60298528., 59371552., 60453296.,
            62025580., 58589704., 61064312., 60811376., 60464008., 62746604.,
            61610408., 59902332., 62302332., 60974184., 62731160., 59725984.,
            60077368., 61348064., 62315028., 61652660., 62052668., 61159976.,
            61820052., 62393176., 60257328., 60374008., 60390656., 60830540.,
            61924860., 61745416., 59598568., 61450376., 61799448., 62112360.,
            61037616., 61921152., 62586456., 62533788., 63333604., 61615680.,
            60751848., 59977952.]], dtype=float32), array([[3.8297016e+09, 4.2909855e+09, 3.5820959e+09, 3.7485007e+09,
            3.1843794e+09, 4.0040924e+09, 4.4376909e+09, 3.7276616e+09,
            4.0180736e+09, 3.9357304e+09]], dtype=float32)]



.. GENERATED FROM PYTHON SOURCE LINES 76-78

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 78-97

.. code-block:: Python


    sess = create_session(script_args.filename, profiling=True)

    for i in range(script_args.repeat):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    if js_profile_to_dataframe is not None:
        df = js_profile_to_dataframe(prof, first_it_out=True)
        print(df.columns)
        df.to_csv("plot_profile_existing_onnx.csv")
        df.to_excel("plot_profile_existing_onnx.xlsx")
        fig, ax = plt.subplots(1, 2, figsize=(10, 5))

        plot_ort_profile(df, ax[0], ax[1], "dort")
        fig.tight_layout()
        fig.savefig("plot_profile_existing_onnx.png")
    else:
        print("Install onnx-extended first.")



.. image-sg:: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :alt: dort, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_101_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['cat', 'pid', 'tid', 'dur', 'ts', 'ph', 'name', 'args_op_name',
           'op_name', 'args_thread_scheduling_stats', 'args_output_size',
           'args_parameter_size', 'args_activation_size', 'args_node_index',
           'args_provider', 'event_name', 'iteration', 'it==0'],
          dtype='object')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.167 seconds)


.. _sphx_glr_download_auto_examples_plot_profile_existing_onnx_101.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_existing_onnx_101.ipynb <plot_profile_existing_onnx_101.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_existing_onnx_101.py <plot_profile_existing_onnx_101.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
