
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_profile_existing_onnx.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_profile_existing_onnx.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_profile_existing_onnx.py:


Profile an existing model
=========================

Profiles any onnx model on CPU.

Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 10-42

.. code-block:: Python


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    from experimental_experiment.args import get_parsed_args

    try:
        from onnx_extended.tools.js_profile import (
            js_profile_to_dataframe,
            plot_ort_profile,
        )
    except ImportError:
        js_profile_to_dataframe = None

    try:
        filename = os.path.join(
            os.path.dirname(__file__ or ""), "data", "example_4700-CPUep-opt.onnx"
        )
    except NameError:
        filename = "data/example_4700-CPUep-opt.onnx"

    script_args = get_parsed_args(
        "plot_profile_existing_onnx",
        filename=(filename, "input file"),
        repeat=10,
        expose="",
    )


    for att in "filename,repeat".split(","):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    filename=data/example_4700-CPUep-opt.onnx
    repeat=10




.. GENERATED FROM PYTHON SOURCE LINES 43-44

Random inputs.

.. GENERATED FROM PYTHON SOURCE LINES 44-75

.. code-block:: Python



    def create_random_input(sess):
        feeds = {}
        for i in sess.get_inputs():
            shape = i.shape
            ot = i.type
            if ot == "tensor(float)":
                dtype = np.float32
            else:
                raise ValueError(f"Unsupposed onnx type {ot}.")
            t = np.random.rand(*shape).astype(dtype)
            feeds[i.name] = t
        return feeds


    def create_session(filename, profiling=False):
        from onnxruntime import InferenceSession, SessionOptions

        if not profiling:
            return InferenceSession(filename, providers=["CPUExecutionProvider"])
        opts = SessionOptions()
        opts.enable_profiling = True
        return InferenceSession(filename, opts, providers=["CPUExecutionProvider"])


    sess = create_session(script_args.filename)
    feeds = create_random_input(sess)
    sess.run(None, feeds)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [array([[0.2876195 , 0.5117501 , 0.5808538 , ..., 0.1444196 , 0.56635034,
            0.2122225 ],
           [0.99835056, 0.25958943, 0.56490546, ..., 0.6698666 , 0.5851074 ,
            0.5103866 ],
           [0.56445265, 0.9916739 , 0.21463436, ..., 0.52340025, 0.08450214,
            0.8234746 ],
           ...,
           [0.14812194, 0.50253326, 0.43443578, ..., 0.4086174 , 0.6966787 ,
            0.42965114],
           [0.03591241, 0.20481965, 0.2321806 , ..., 0.3256641 , 0.4245941 ,
            0.42964455],
           [0.4323998 , 0.78594446, 0.9971084 , ..., 0.93515295, 0.31700474,
            0.9902859 ]], dtype=float32), array([[0.5691713 , 0.70741266, 0.77981204, ..., 0.8283299 , 0.6694671 ,
            0.764162  ],
           [0.0179204 , 0.36627162, 0.4233793 , ..., 0.7645771 , 0.6984718 ,
            0.43186122],
           [0.8223825 , 0.45931533, 0.3134253 , ..., 0.9082416 , 0.71765   ,
            0.8254232 ],
           ...,
           [0.6895251 , 0.4472346 , 0.20438279, ..., 0.644505  , 0.671722  ,
            0.98787606],
           [0.35419458, 0.8755268 , 0.7690707 , ..., 0.07503936, 0.11422893,
            0.5025516 ],
           [0.24902508, 0.15185626, 0.9755437 , ..., 0.07168645, 0.21048105,
            0.2907118 ]], dtype=float32), array([[0.11874787, 0.14513518, 0.7710519 , ..., 0.09440693, 0.7684218 ,
            0.56851745],
           [0.2867651 , 0.5745776 , 0.2098678 , ..., 0.01421903, 0.27903977,
            0.63845086],
           [0.5093601 , 0.56659496, 0.25292808, ..., 0.20563196, 0.78882056,
            0.90239924],
           ...,
           [0.83604807, 0.60735476, 0.42201418, ..., 0.7659215 , 0.8409808 ,
            0.57881266],
           [0.7611512 , 0.5810545 , 0.44881788, ..., 0.6827203 , 0.9043809 ,
            0.6448885 ],
           [0.7308071 , 0.27793026, 0.7728836 , ..., 0.8124605 , 0.6235438 ,
            0.35099927]], dtype=float32), array([[[[8.162036 , 7.833201 , 9.086611 , ..., 8.532031 , 9.624469 ,
              8.771687 ],
             [7.7418365, 6.864408 , 7.386648 , ..., 9.65583  , 9.202703 ,
              8.169796 ],
             [6.300659 , 6.428025 , 6.7360234, ..., 9.164555 , 8.769712 ,
              8.333861 ],
             ...,
             [7.1707034, 6.8488965, 6.930076 , ..., 7.1334934, 6.7822437,
              6.1923933],
             [6.917442 , 7.3156943, 6.8298545, ..., 6.8045187, 7.1309357,
              6.2299414],
             [7.587194 , 7.834857 , 6.6771665, ..., 6.2968335, 7.8749437,
              6.7653546]],

            [[8.671592 , 7.1797786, 8.405208 , ..., 9.945991 , 8.552855 ,
              7.578799 ],
             [7.054124 , 6.3580384, 7.6009445, ..., 8.765266 , 8.685154 ,
              8.408999 ],
             [6.0216484, 6.436605 , 7.591616 , ..., 8.312238 , 8.1008005,
              7.8471546],
             ...,
             [6.6842413, 7.1806183, 6.716018 , ..., 7.2211676, 6.386374 ,
              5.841573 ],
             [7.541129 , 6.825078 , 6.0218883, ..., 6.0617013, 7.8224735,
              5.111702 ],
             [7.0433693, 8.1989   , 6.526661 , ..., 6.538168 , 7.5191555,
              6.431716 ]],

            [[6.7420373, 5.279814 , 7.275345 , ..., 7.568554 , 7.147992 ,
              6.899546 ],
             [5.9175158, 4.8466516, 6.78073  , ..., 7.175529 , 7.5190606,
              6.349278 ],
             [6.033977 , 4.951977 , 5.927906 , ..., 7.278926 , 7.13614  ,
              6.832379 ],
             ...,
             [5.9042263, 5.283274 , 5.2899523, ..., 5.061372 , 6.0520644,
              4.6687737],
             [6.101915 , 5.6617355, 4.767281 , ..., 5.6628084, 5.951068 ,
              5.4981494],
             [6.3249   , 6.4121957, 5.8040385, ..., 5.130267 , 5.634894 ,
              5.459363 ]],

            ...,

            [[7.980233 , 8.0885725, 8.960002 , ..., 8.353904 , 9.192875 ,
              8.392377 ],
             [7.3083396, 7.0497165, 7.326481 , ..., 8.602455 , 9.567448 ,
              8.46218  ],
             [6.195168 , 6.980537 , 6.0513244, ..., 8.24608  , 8.924954 ,
              8.614551 ],
             ...,
             [7.5765967, 6.8857126, 6.933799 , ..., 6.1475043, 6.688593 ,
              6.6325045],
             [6.538036 , 7.6856594, 6.6975675, ..., 6.29707  , 6.1151676,
              6.584181 ],
             [7.2074056, 7.805776 , 6.9075265, ..., 6.9406767, 7.8174467,
              7.3419976]],

            [[7.4830527, 7.0091524, 7.386139 , ..., 8.880746 , 7.93859  ,
              7.4498973],
             [6.7243304, 5.7233915, 6.7963214, ..., 7.9925094, 8.451145 ,
              8.292507 ],
             [6.226204 , 6.146023 , 7.027174 , ..., 7.1245203, 8.633364 ,
              7.6505265],
             ...,
             [6.4050555, 6.333716 , 6.682142 , ..., 5.103699 , 5.7443924,
              5.6825404],
             [6.6103177, 6.1101723, 5.6713586, ..., 5.493293 , 6.9923697,
              6.563698 ],
             [6.556048 , 6.7829504, 7.092544 , ..., 5.844845 , 6.5009556,
              6.5500703]],

            [[6.6341386, 6.2455273, 7.228097 , ..., 7.431932 , 8.259226 ,
              7.6404023],
             [6.607283 , 6.3089185, 6.7301507, ..., 7.4966717, 7.959837 ,
              7.42487  ],
             [6.2900805, 6.210145 , 5.9718976, ..., 6.5745063, 8.425179 ,
              7.1123285],
             ...,
             [6.5814714, 5.31872  , 5.4532747, ..., 4.6710997, 6.0941043,
              5.572054 ],
             [5.8176374, 6.8027425, 5.7372656, ..., 5.4095173, 5.6056085,
              6.979456 ],
             [6.6777315, 6.254417 , 6.6716757, ..., 5.8224206, 6.0780997,
              6.1267886]]]], dtype=float32), array([[[[    2,     4,   381, ...,   486,   488,   245],
             [  868,   875,   506, ...,   734,   613,   742],
             [  993,  1370,  1000, ...,  1477,  1482,  1363],
             ...,
             [13890, 14019, 13897, ..., 14126, 14006, 14382],
             [14384, 14637, 14641, ..., 14496, 14875, 14507],
             [15255, 15011, 14890, ..., 15243, 15122, 15002]],

            [[    0,   254,   135, ...,   362,   367,   121],
             [  868,   503,   504, ...,   610,   736,   991],
             [ 1366,  1370,  1248, ...,  1479,  1482,  1363],
             ...,
             [13890, 14019, 13897, ..., 14000, 14006, 14382],
             [14508, 14389, 14766, ..., 14496, 14875, 14507],
             [15131, 15134, 15013, ..., 15367, 15247, 15002]],

            [[    2,     6,   258, ...,   486,   488,   121],
             [  868,   503,   752, ...,   610,   612,   991],
             [ 1366,  1247,  1124, ...,  1479,  1481,  1363],
             ...,
             [14262, 14265, 14269, ..., 14003, 14004, 14382],
             [14384, 14638, 14765, ..., 14496, 14627, 14507],
             [15007, 15010, 14890, ..., 15243, 15247, 15002]],

            ...,

            [[    2,   129,   383, ...,   486,   242,   246],
             [  497,   502,   504, ...,   610,   737,   991],
             [ 1367,   999,  1124, ...,  1479,  1235,  1363],
             ...,
             [14262, 14265, 13897, ..., 14000, 14128, 14383],
             [14387, 14514, 14640, ..., 14620, 14873, 14507],
             [15253, 15132, 14888, ..., 15365, 14999, 15003]],

            [[    3,     6,   381, ...,   486,   116,   121],
             [  868,   875,   752, ...,   611,   738,   991],
             [  992,  1246,  1248, ...,  1479,  1359,  1487],
             ...,
             [14262, 14265, 13896, ..., 14003, 14005, 14383],
             [14385, 14636, 14641, ..., 14496, 14875, 14507],
             [15254, 15011, 15138, ..., 15241, 15121, 15000]],

            [[    2,   253,   381, ...,   486,   490,   370],
             [  746,   627,   876, ...,   734,   612,   991],
             [ 1367,  1369,  1124, ...,  1479,  1359,  1487],
             ...,
             [14261, 14265, 14021, ..., 14124, 14006, 14259],
             [14384, 14514, 14764, ..., 14620, 14875, 14507],
             [15007, 15011, 14890, ..., 15365, 14996, 15251]]]], dtype=int64), array([[9.086611 , 8.145453 , 9.081896 , ..., 7.2495503, 7.391125 ,
            6.979456 ]], dtype=float32), array([[124608.28 , 124693.016, 124310.11 , ..., 124402.4  , 123941.68 ,
            124711.97 ]], dtype=float32), array([[62395696., 64087776., 63276664., 64629808., 64069260., 62861888.,
            64757416., 62804360., 63868576., 63199488., 63514320., 64438008.,
            60880736., 63046136., 62949344., 64800680., 62211920., 63438480.,
            62808020., 63806104., 65403616., 63847396., 63862068., 65015376.,
            60669168., 64458248., 63354984., 64482680., 63511892., 63156532.,
            62395752., 62472552., 63366752., 62308032., 62842144., 64842024.,
            63744632., 63185928., 65260096., 63927808., 64942852., 64514648.,
            64390264., 64871144., 62446716., 63163528., 63282104., 63950616.,
            64749360., 61363128., 63569676., 66337500., 65498460., 64209332.,
            63737744., 65678076., 62477592., 62520808., 63190720., 64100216.,
            62450216., 64199356., 64748552., 65093848., 62835948., 62939160.,
            62133736., 63056384., 62091784., 63241252., 64631224., 63376168.,
            67029928., 63982284., 63298240., 63561764., 63605748., 64159080.,
            63777304., 62927440., 64108992., 62833624., 65886792., 62599116.,
            65962304., 63822464., 64586432., 64938612., 63948504., 64903156.,
            64387656., 64196572., 63674968., 66378536., 62489840., 64790236.,
            65322664., 63959492., 61170960., 64124540., 64000320., 62887376.,
            64492128., 63824684., 64531232., 64614188., 62512376., 65090336.,
            63668952., 63488032., 63915064., 63649764., 63384728., 60940200.,
            63729200., 61770088., 63679380., 63493780., 62718784., 64744032.,
            64110504., 64060048., 62778232., 62720712., 63098304., 63081432.,
            64910900., 64862836.]], dtype=float32), array([[3.8852695e+09, 4.1123016e+09, 3.8014925e+09, 3.8471398e+09,
            3.8217843e+09, 4.2982246e+09, 3.7063199e+09, 4.2137126e+09,
            4.1078049e+09, 4.3222856e+09]], dtype=float32)]



.. GENERATED FROM PYTHON SOURCE LINES 76-78

Profiling
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 78-97

.. code-block:: Python


    sess = create_session(script_args.filename, profiling=True)

    for i in range(script_args.repeat):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    if js_profile_to_dataframe is not None:
        df = js_profile_to_dataframe(prof, first_it_out=True)
        print(df.columns)
        df.to_csv("plot_profile_existing_onnx.csv")
        df.to_excel("plot_profile_existing_onnx.xlsx")
        fig, ax = plt.subplots(1, 2, figsize=(10, 5))

        plot_ort_profile(df, ax[0], ax[1], "dort")
        fig.tight_layout()
        fig.savefig("plot_profile_existing_onnx.png")
    else:
        print("Install onnx-extended first.")



.. image-sg:: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_001.png
   :alt: dort, n occurences
   :srcset: /auto_examples/images/sphx_glr_plot_profile_existing_onnx_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['cat', 'pid', 'tid', 'dur', 'ts', 'ph', 'name', 'args_op_name',
           'op_name', 'args_thread_scheduling_stats', 'args_output_size',
           'args_parameter_size', 'args_activation_size', 'args_node_index',
           'args_provider', 'event_name', 'iteration', 'it==0'],
          dtype='object')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.358 seconds)


.. _sphx_glr_download_auto_examples_plot_profile_existing_onnx.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_existing_onnx.ipynb <plot_profile_existing_onnx.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_existing_onnx.py <plot_profile_existing_onnx.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
