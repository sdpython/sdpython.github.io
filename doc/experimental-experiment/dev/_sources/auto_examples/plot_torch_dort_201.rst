
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_torch_dort_201.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_torch_dort_201.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_torch_dort_201.py:


201: Evaluate DORT
==================

It compares DORT to eager mode and :epkg:`onnxrt backend`.

To run the script:

::

    python _doc/examples/plot_torch_dort --help

Some helpers
++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 16-85

.. code-block:: Python


    import warnings

    try:
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            import onnxruntime

            has_cuda = "CUDAExecutionProvider" in onnxruntime.get_available_providers()
    except ImportError:
        print("onnxruntime not available.")
        import sys

        sys.exit(0)

    import torch._dynamo
    import contextlib
    import itertools
    import os
    import gc
    import platform

    # import pickle
    import pprint
    import multiprocessing
    import time
    import cProfile
    import pstats
    import io
    import logging
    from pstats import SortKey

    import numpy as np
    import matplotlib.pyplot as plt
    import pandas
    import onnx
    from onnx_array_api.profiling import profile2graph
    import torch
    from torch import nn
    import torch.nn.functional as F
    import experimental_experiment
    from experimental_experiment.plotting.memory import memory_peak_plot
    from experimental_experiment.ext_test_case import measure_time, get_figure
    from experimental_experiment.args import get_parsed_args
    from experimental_experiment.memory_peak import start_spying_on
    from experimental_experiment.torch_helper.training_helper import make_aot_ort
    from tqdm import tqdm

    has_cuda = has_cuda and torch.cuda.is_available()
    logging.disable(logging.ERROR)


    def system_info():
        obs = {}
        obs["processor"] = platform.processor()
        obs["cores"] = multiprocessing.cpu_count()
        try:
            obs["cuda"] = 1 if torch.cuda.is_available() else 0
            obs["cuda_count"] = torch.cuda.device_count()
            obs["cuda_name"] = torch.cuda.get_device_name()
            obs["cuda_capa"] = torch.cuda.get_device_capability()
        except (RuntimeError, AssertionError):
            # no cuda
            pass
        return obs


    pprint.pprint(system_info())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'cores': 8,
     'cuda': 1,
     'cuda_capa': (6, 1),
     'cuda_count': 1,
     'cuda_name': 'NVIDIA GeForce GTX 1060',
     'processor': 'x86_64'}




.. GENERATED FROM PYTHON SOURCE LINES 86-87

Scripts arguments

.. GENERATED FROM PYTHON SOURCE LINES 87-116

.. code-block:: Python



    script_args = get_parsed_args(
        "plot_torch_dort",
        description=__doc__,
        scenarios={
            "small": "small model to test",
            "middle": "55Mb model",
            "large": "1Gb model",
        },
        warmup=5,
        repeat=5,
        repeat1=(1, "repeat for the first iteration"),
        maxtime=(
            2,
            "maximum time to run a model to measure the computation time, "
            "it is 0.1 when scenario is small",
        ),
        expose="scenarios,repeat,repeat1,warmup",
    )

    if script_args.scenario in (None, "small"):
        script_args.maxtime = 0.1
    print(f"scenario={script_args.scenario or 'small'}")
    print(f"warmup={script_args.warmup}")
    print(f"repeat={script_args.repeat}")
    print(f"repeat1={script_args.repeat1}")
    print(f"maxtime={script_args.maxtime}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    scenario=small
    warmup=5
    repeat=5
    repeat1=1
    maxtime=0.1




.. GENERATED FROM PYTHON SOURCE LINES 117-121

The model
+++++++++

A simple model to convert.

.. GENERATED FROM PYTHON SOURCE LINES 121-212

.. code-block:: Python



    class MyModelClass(nn.Module):
        def __init__(self, scenario=script_args.scenario):
            super(MyModelClass, self).__init__()
            if scenario == "middle":
                self.large = False
                self.conv1 = nn.Conv2d(1, 32, 5)
                # self.conv2 = nn.Conv2d(128, 16, 5)
                self.fc1 = nn.Linear(30752, 1024)
                self.fcs = []
                self.fc2 = nn.Linear(1024, 128)
                self.fc3 = nn.Linear(128, 10)
            elif scenario in (None, "small"):
                self.large = False
                self.conv1 = nn.Conv2d(1, 16, 5)
                # self.conv2 = nn.Conv2d(16, 16, 5)
                self.fc1 = nn.Linear(144, 512)
                self.fcs = []
                self.fc2 = nn.Linear(512, 128)
                self.fc3 = nn.Linear(128, 10)
            elif scenario in (None, "large"):
                self.large = True
                self.conv1 = nn.Conv2d(1, 32, 5)
                # self.conv2 = nn.Conv2d(128, 16, 5)
                self.fc1 = nn.Linear(30752, 4096)
                # torch script does not support loops.
                self.fca = nn.Linear(4096, 4096)
                self.fcb = nn.Linear(4096, 4096)
                self.fcc = nn.Linear(4096, 4096)
                self.fcd = nn.Linear(4096, 4096)
                self.fce = nn.Linear(4096, 4096)
                self.fcf = nn.Linear(4096, 4096)
                self.fcg = nn.Linear(4096, 4096)
                self.fch = nn.Linear(4096, 4096)
                self.fci = nn.Linear(4096, 4096)
                # end of the unfolded loop.
                self.fc2 = nn.Linear(4096, 128)
                self.fc3 = nn.Linear(128, 10)
            else:
                raise ValueError(f"Unsupported scenario={scenario!r}.")

        def forward(self, x):
            x = F.max_pool2d(F.relu(self.conv1(x)), (4, 4))
            # x = F.max_pool2d(F.relu(self.conv2(x)), 2)
            x = torch.flatten(x, 1)
            x = F.relu(self.fc1(x))
            if self.large:
                # loop
                x = F.relu(self.fca(x))
                x = F.relu(self.fcb(x))
                x = F.relu(self.fcc(x))
                x = F.relu(self.fcd(x))
                x = F.relu(self.fce(x))
                x = F.relu(self.fcf(x))
                x = F.relu(self.fcg(x))
                x = F.relu(self.fch(x))
                x = F.relu(self.fci(x))
                # end of the loop
            x = F.relu(self.fc2(x))
            y = self.fc3(x)
            return y


    def create_model_and_input(scenario=script_args.scenario):
        if scenario == "middle":
            shape = [1, 1, 128, 128]
        elif scenario in (None, "small"):
            shape = [1, 1, 16, 16]
        elif scenario == "large":
            shape = [1, 1, 128, 128]
        else:
            raise ValueError(f"Unsupported scenario={scenario!r}.")
        input_tensor = torch.rand(*shape).to(torch.float32)
        model = MyModelClass(scenario=scenario)
        assert model(input_tensor) is not None
        return model, input_tensor


    def torch_model_size(model):
        size_model = 0
        for param in model.parameters():
            size = param.numel() * torch.finfo(param.data.dtype).bits / 8
            size_model += size
        return size_model


    model, input_tensor = create_model_and_input()
    model_size = torch_model_size(model)
    print(f"model size={model_size / 2 ** 20} Mb")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    model size=0.5401992797851562 Mb




.. GENERATED FROM PYTHON SOURCE LINES 213-215

Backends
++++++++

.. GENERATED FROM PYTHON SOURCE LINES 215-258

.. code-block:: Python



    def get_torch_eager(model, *args):
        def my_compiler(gm, example_inputs):
            return gm.forward

        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, fullgraph=True, backend=my_compiler)
                optimized_mod(*args)
                return optimized_mod


    def get_torch_default(model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, fullgraph=True, mode="reduce-overhead")
                optimized_mod(*args)
                return optimized_mod


    def get_torch_dort(model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                local_aot_ort, _ = make_aot_ort(dynamic=True, rewrite=False)
                optimized_mod = torch.compile(model, backend=local_aot_ort, fullgraph=True)
                optimized_mod(*args)
                return optimized_mod


    def get_torch_opti(model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                local_aot_ort, _ = make_aot_ort(dynamic=True, rewrite=True)
                optimized_mod = torch.compile(model, backend=local_aot_ort, fullgraph=True)
                optimized_mod(*args)
                return optimized_mod









.. GENERATED FROM PYTHON SOURCE LINES 259-260

Let's check they are working.

.. GENERATED FROM PYTHON SOURCE LINES 260-287

.. code-block:: Python


    export_functions = [
        get_torch_eager,
        get_torch_default,
        get_torch_dort,
        # get_torch_opti,
    ]

    exporters = {f.__name__.replace("get_", ""): f for f in export_functions}

    supported_exporters = {}
    for k, v in exporters.items():
        print(f"run function {k}")
        filename = f"plot_torch_dort_{k}.onnx"
        torch._dynamo.reset()
        model, input_tensor = create_model_and_input()
        try:
            v(model, input_tensor)
        except Exception as e:
            print(f"skipped due to {str(e)[:1000]}")
            continue
        supported_exporters[k] = v
        del model
        gc.collect()
        time.sleep(1)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run function torch_eager
    run function torch_default
    run function torch_dort




.. GENERATED FROM PYTHON SOURCE LINES 288-290

Compile and Memory
++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 290-342

.. code-block:: Python



    def flatten(ps):
        obs = ps["cpu"].to_dict(unit=2**20)
        if "gpus" in ps:
            for i, g in enumerate(ps["gpus"]):
                for k, v in g.to_dict(unit=2**20).items():
                    obs[f"gpu{i}_{k}"] = v
        return obs


    data = []

    for k, v in supported_exporters.items():
        print(f"run compile for memory {k} on cpu")
        filename = f"plot_torch_dort_{k}.onnx"
        if has_cuda:
            torch.cuda.set_device(0)
        torch._dynamo.reset()
        # CPU
        model, input_tensor = create_model_and_input()
        stat = start_spying_on(cuda=1 if has_cuda else 0)
        v(model, input_tensor)
        obs = flatten(stat.stop())
        print("done.")
        obs.update(dict(export=k, p="cpu"))
        data.append(obs)
        del model
        gc.collect()
        time.sleep(1)

        if not has_cuda:
            continue
        if k in {"torch_default"}:
            print(f"skip compile for memory {k} on cuda")
            continue
        torch._dynamo.reset()
        # CUDA
        model, input_tensor = create_model_and_input()
        model = model.cuda()
        input_tensor = input_tensor.cuda()
        print(f"run compile for memory {k} on cuda")
        stat = start_spying_on(cuda=1 if has_cuda else 0)
        v(model, input_tensor)
        obs = flatten(stat.stop())
        print("done.")
        obs.update(dict(export=k, p="cuda"))
        data.append(obs)
        del model
        gc.collect()
        time.sleep(1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run compile for memory torch_eager on cpu
    done.
    run compile for memory torch_eager on cuda
    done.
    run compile for memory torch_default on cpu
    done.
    skip compile for memory torch_default on cuda
    run compile for memory torch_dort on cpu
    done.
    run compile for memory torch_dort on cuda
    done.




.. GENERATED FROM PYTHON SOURCE LINES 343-344

The result.

.. GENERATED FROM PYTHON SOURCE LINES 344-361

.. code-block:: Python

    df1 = pandas.DataFrame(data)
    df1.to_csv("plot_torch_dort_1_memory.csv", index=False)
    df1.to_excel("plot_torch_dort_1_memory.xlsx", index=False)
    print(df1)

    for p in ["cpu", "cuda"]:
        if not has_cuda and p == "cuda":
            continue
        ax = memory_peak_plot(
            df1[df1["p"] == p],
            key=("export",),
            bars=[model_size * i / 2**20 for i in range(1, 5)],
            suptitle=f"Memory Consumption of the Compilation on {p}\n"
            f"model size={model_size / 2**20:1.0f} Mb",
        )
        get_figure(ax).savefig(f"plot_torch_dort_1_memory_{p}.png")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_201_001.png
         :alt: Memory Consumption of the Compilation on cpu model size=1 Mb, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_201_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_201_002.png
         :alt: Memory Consumption of the Compilation on cuda model size=1 Mb, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_201_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              peak         mean         n        begin          end   gpu0_peak   gpu0_mean    gpu0_n  gpu0_begin    gpu0_end         export     p
    0  4476.082031  4476.082031  0.000076  4476.082031  4476.082031  878.269531  878.269531  0.000076  878.269531  878.269531    torch_eager   cpu
    1  4476.058594  4476.058594  0.000017  4476.058594  4476.058594  878.269531  878.269531  0.000017  878.269531  878.269531    torch_eager  cuda
    2  4476.058594  4476.058594  0.000319  4476.058594  4476.058594  878.269531  878.269531  0.000319  878.269531  878.269531  torch_default   cpu
    3  4476.058594  4476.058594  0.000058  4476.058594  4476.058594  878.269531  878.269531  0.000058  878.269531  878.269531     torch_dort   cpu
    4  4476.093750  4476.059659  0.000052  4476.058594  4476.093750  896.269531  878.742259  0.000052  878.269531  896.269531     torch_dort  cuda




.. GENERATED FROM PYTHON SOURCE LINES 362-364

dort first iteration speed
++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 364-429

.. code-block:: Python


    data = []

    for k, v in supported_exporters.items():
        print(f"run dort cpu {k}: {script_args.repeat1}")
        times = []
        for i in range(int(script_args.repeat1)):
            model, input_tensor = create_model_and_input()
            torch._dynamo.reset()
            begin = time.perf_counter()
            v(model, input_tensor)
            duration = time.perf_counter() - begin
            times.append(duration)
            del model
            gc.collect()
            time.sleep(1)

        print(f"done: {times[-1]}")
        data.append(
            dict(
                export=k,
                time=np.mean(times),
                min=min(times),
                max=max(times),
                first=times[0],
                last=times[-1],
                std=np.std(times),
                p="cpu",
            )
        )

        if not has_cuda:
            continue
        if k in {"torch_dort", "torch_default"}:
            print(f"skip dort cuda {k}: {script_args.repeat1}")
            continue
        print(f"run dort cuda {k}: {script_args.repeat1}")
        times = []
        for i in range(int(script_args.repeat1)):
            model, input_tensor = create_model_and_input()
            model = model.cuda()
            input_tensor = input_tensor.cuda()
            torch._dynamo.reset()
            begin = time.perf_counter()
            v(model, input_tensor)
            duration = time.perf_counter() - begin
            times.append(duration)
            del model
            gc.collect()
            time.sleep(1)

        print(f"done: {times[-1]}")
        data.append(
            dict(
                export=k,
                time=np.mean(times),
                min=min(times),
                max=max(times),
                first=times[0],
                last=times[-1],
                std=np.std(times),
                p="cuda",
            )
        )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run dort cpu torch_eager: 1
    done: 0.041933100001187995
    run dort cuda torch_eager: 1
    done: 0.09965010000087204
    run dort cpu torch_default: 1
    done: 2.686642999997275
    skip dort cuda torch_default: 1
    run dort cpu torch_dort: 1
    done: 0.5880039000003308
    skip dort cuda torch_dort: 1




.. GENERATED FROM PYTHON SOURCE LINES 430-431

The result.

.. GENERATED FROM PYTHON SOURCE LINES 431-442

.. code-block:: Python

    df1 = pandas.DataFrame(data)
    df1.to_csv("plot_torch_dort_1_time.csv", index=False)
    df1.to_excel("plot_torch_dort_1_time.xlsx", index=False)
    print(df1)

    fig, ax = plt.subplots(1, 1)
    dfi = df1[["export", "p", "time", "std"]].set_index(["export", "p"])
    dfi["time"].plot.bar(ax=ax, title="Compilation time", yerr=dfi["std"], rot=30)
    fig.tight_layout()
    fig.savefig("plot_torch_dort_1_time.png")




.. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_201_003.png
   :alt: Compilation time
   :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_201_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              export      time       min       max     first      last  std     p
    0    torch_eager  0.041933  0.041933  0.041933  0.041933  0.041933  0.0   cpu
    1    torch_eager  0.099650  0.099650  0.099650  0.099650  0.099650  0.0  cuda
    2  torch_default  2.686643  2.686643  2.686643  2.686643  2.686643  0.0   cpu
    3     torch_dort  0.588004  0.588004  0.588004  0.588004  0.588004  0.0   cpu




.. GENERATED FROM PYTHON SOURCE LINES 443-445

Compilation Profiling
+++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 445-517

.. code-block:: Python



    def clean_text(text):
        pathes = [
            os.path.abspath(
                os.path.normpath(os.path.join(os.path.dirname(torch.__file__), ".."))
            ),
            os.path.abspath(
                os.path.normpath(os.path.join(os.path.dirname(onnx.__file__), ".."))
            ),
            os.path.abspath(
                os.path.normpath(
                    os.path.join(os.path.dirname(experimental_experiment.__file__), "..")
                )
            ),
        ]
        for p in pathes:
            text = text.replace(p, "")
        text = text.replace("experimental_experiment", "experimental_experiment".upper())
        return text


    def profile_function(
        name, export_function, with_args=True, verbose=False, suffix="export"
    ):
        if verbose:
            print(f"profile {name}: {export_function}")
        if with_args:
            model, input_tensor = create_model_and_input()
            pr = cProfile.Profile()
            pr.enable()
            for i in range(int(script_args.repeat1)):
                export_function(model, input_tensor)
            pr.disable()
        else:
            pr = cProfile.Profile()
            pr.enable()
            for i in range(int(script_args.repeat1)):
                export_function()
            pr.disable()
        s = io.StringIO()
        sortby = SortKey.CUMULATIVE
        ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
        ps.print_stats()
        # with open(f"plot_torch_dort_profile_{name}_{suffix}.pickle", "wb") as f:
        #     pickle.dump(ps, f)

        raw = s.getvalue()
        text = "\n".join(raw.split("\n")[:200])
        if verbose:
            print(text)
        with open(f"plot_torch_dort_profile_{name}_{suffix}.txt", "w") as f:
            f.write(raw)

        root, nodes = profile2graph(ps, clean_text=clean_text)
        text = root.to_text()
        with open(f"plot_torch_dort_profile_{name}_{suffix}_h.txt", "w") as f:
            f.write(text)
        if verbose:
            print("done.")


    model, input_tensor = create_model_and_input()


    def function_to_profile(model=model, input_tensor=input_tensor):
        return get_torch_dort(model, input_tensor)


    profile_function("dort", function_to_profile, verbose=True, suffix="1")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    profile dort: <function function_to_profile at 0x7f1ff224eb00>
             555824 function calls (537168 primitive calls) in 1.540 seconds

       Ordered by: cumulative time

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000    1.660    1.660 /home/xadupre/github/experimental-experiment/_doc/examples/plot_torch_dort_201.py:510(function_to_profile)
            1    0.000    0.000    1.660    1.660 /home/xadupre/github/experimental-experiment/_doc/examples/plot_torch_dort_201.py:238(get_torch_dort)
         16/1    0.000    0.000    1.142    1.142 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/module.py:1523(_wrapped_call_impl)
         16/1    0.000    0.000    1.142    1.142 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/module.py:1529(_call_impl)
          4/1    0.000    0.000    1.142    1.142 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py:414(_fn)
            1    0.000    0.000    1.053    1.053 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:871(catch_errors)
            1    0.000    0.000    1.053    1.053 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:288(_convert_frame_assert)
          2/1    0.000    0.000    1.053    1.053 /usr/lib/python3.10/contextlib.py:76(inner)
            1    0.000    0.000    1.053    1.053 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:444(_compile)
          3/1    0.000    0.000    1.049    1.049 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:255(time_wrapper)
            1    0.000    0.000    1.049    1.049 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:524(compile_inner)
            1    0.000    0.000    1.030    1.030 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/bytecode_transformation.py:1025(transform_code_object)
            1    0.000    0.000    1.025    1.025 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:150(_fn)
            1    0.000    0.000    1.025    1.025 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:477(transform)
            1    0.000    0.000    1.020    1.020 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:2194(run)
            1    0.000    0.000    1.020    1.020 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:843(run)
           44    0.001    0.000    1.020    0.023 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:741(step)
            1    0.000    0.000    0.924    0.924 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:2300(RETURN_VALUE)
            1    0.000    0.000    0.923    0.923 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/output_graph.py:852(compile_subgraph)
            1    0.000    0.000    0.922    0.922 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/output_graph.py:1101(compile_and_call_fx_graph)
            1    0.000    0.000    0.912    0.912 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/output_graph.py:1186(call_user_compiler)
          2/1    0.000    0.000    0.912    0.912 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/repro/after_dynamo.py:59(debug_wrapper)
            1    0.000    0.000    0.912    0.912 /home/xadupre/.local/lib/python3.10/site-packages/torch/__init__.py:1767(__call__)
            1    0.000    0.000    0.912    0.912 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:1093(__call__)
            1    0.000    0.000    0.912    0.912 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/backends/common.py:18(compiler_fn)
            1    0.000    0.000    0.911    0.911 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/aot_autograd.py:779(aot_module_simplified)
            1    0.000    0.000    0.910    0.910 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/aot_autograd.py:386(create_aot_dispatcher_function)
            1    0.000    0.000    0.793    0.793 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/runtime_wrappers.py:401(aot_wrapper_dedupe)
            1    0.000    0.000    0.793    0.793 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/runtime_wrappers.py:620(aot_wrapper_synthetic_base)
            1    0.000    0.000    0.792    0.792 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/jit_compile_runtime_wrappers.py:178(aot_dispatch_autograd)
          3/2    0.000    0.000    0.566    0.283 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/external_utils.py:34(inner)
            1    0.000    0.000    0.516    0.516 /home/xadupre/github/experimental-experiment/experimental_experiment/torch_helper/training_helper.py:4(make_aot_ort)
          285    0.021    0.000    0.516    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/functional_tensor.py:256(__torch_dispatch__)
            1    0.000    0.000    0.516    0.516 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:726(__init__)
            2    0.087    0.044    0.491    0.246 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/decomposition_table.py:18(_create_onnx_supports_op_overload_table)
            1    0.000    0.000    0.489    0.489 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/dispatch_and_compile_graph.py:130(aot_dispatch_autograd_graph)
            1    0.000    0.000    0.479    0.479 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/dispatch_and_compile_graph.py:34(_create_graph)
            1    0.000    0.000    0.479    0.479 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:1004(wrapped)
            1    0.000    0.000    0.478    0.478 /home/xadupre/.local/lib/python3.10/site-packages/torch/_compile.py:20(inner)
            1    0.000    0.000    0.477    0.477 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:552(dispatch_trace)
            1    0.000    0.000    0.476    0.476 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:663(trace)
            1    0.000    0.000    0.468    0.468 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:650(flatten_fn)
            1    0.000    0.000    0.467    0.467 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:577(wrapped)
            1    0.000    0.000    0.440    0.440 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:465(joint_helper)
            1    0.000    0.000    0.439    0.439 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:347(_functionalized_f_helper)
            1    0.000    0.000    0.411    0.411 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:248(inner_fn_with_anomaly)
            1    0.000    0.000    0.411    0.411 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:183(inner_fn)
      870/481    0.005    0.000    0.363    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_stats.py:15(wrapper)
      263/242    0.004    0.000    0.287    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:661(__torch_dispatch__)
            1    0.000    0.000    0.280    0.280 /home/xadupre/.local/lib/python3.10/site-packages/torch/autograd/__init__.py:278(grad)
            1    0.000    0.000    0.278    0.278 /home/xadupre/.local/lib/python3.10/site-packages/torch/autograd/graph.py:739(_engine_run_backward)
            1    0.005    0.005    0.278    0.278 {method 'run_backward' of 'torch._C._EngineBase' objects}
            1    0.000    0.000    0.273    0.273 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/exporter.py:356(__init__)
      263/242    0.002    0.000    0.272    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:692(inner_torch_dispatch)
        69/54    0.006    0.000    0.258    0.005 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:311(proxy_call)
            1    0.001    0.001    0.251    0.251 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/decomposition_table.py:78(create_onnx_friendly_decomposition_table)
        14976    0.036    0.000    0.242    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/exporter.py:250(is_registered_op)
            1    0.002    0.002    0.213    0.213 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:637(min_cut_rematerialization_partition)
      780/602    0.006    0.000    0.211    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:859(tree_map)
        14991    0.052    0.000    0.207    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/exporter.py:227(get_op_functions)
          761    0.005    0.000    0.199    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:1066(tree_map_only)
            3    0.001    0.000    0.199    0.066 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:106(run)
           49    0.001    0.000    0.189    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:184(run_node)
            2    0.000    0.000    0.182    0.091 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:607(functional_call)
           22    0.000    0.000    0.178    0.008 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:589(run_node)
      583/579    0.004    0.000    0.149    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:890(__torch_dispatch__)
      583/579    0.007    0.000    0.144    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1214(dispatch)
    4513/4477    0.013    0.000    0.134    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:699(map_arg)
          270    0.004    0.000    0.128    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:944(_cached_dispatch_impl)
            1    0.000    0.000    0.127    0.127 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:99(inner_fn)
     3138/622    0.028    0.000    0.123    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:734(unflatten)
    9626/4486    0.055    0.000    0.117    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:707(map_aggregate)
            4    0.003    0.001    0.116    0.029 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:59(_extract_graph_with_inputs_outputs)
          968    0.003    0.000    0.113    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:799(tree_flatten)
     3543/968    0.022    0.000    0.110    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:778(_tree_flatten_helper)
          421    0.005    0.000    0.104    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:878(create_node)
        20243    0.045    0.000    0.104    0.000 {method 'get' of 'dict' objects}
           27    0.000    0.000    0.092    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:256(call_function)
      720/613    0.002    0.000    0.092    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_ops.py:591(__call__)
            1    0.000    0.000    0.091    0.091 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:157(_extract_fwd_bwd_modules)
            8    0.000    0.000    0.090    0.011 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:298(call_module)
            1    0.000    0.000    0.090    0.090 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/collect_metadata_analysis.py:90(inner)
            1    0.000    0.000    0.089    0.089 /home/xadupre/github/experimental-experiment/_doc/examples/plot_torch_dort_201.py:163(forward)
            1    0.000    0.000    0.089    0.089 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/aot_autograd.py:888(forward)
          3/1    0.000    0.000    0.089    0.089 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/utils.py:88(g)
            1    0.000    0.000    0.089    0.089 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/runtime_wrappers.py:75(runtime_wrapper)
          2/1    0.000    0.000    0.089    0.089 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/utils.py:105(call_func_at_runtime_with_args)
            1    0.000    0.000    0.089    0.089 /home/xadupre/.local/lib/python3.10/site-packages/torch/autograd/function.py:557(apply)
            1    0.000    0.000    0.089    0.089 {built-in method apply}
            1    0.000    0.000    0.089    0.089 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/jit_compile_runtime_wrappers.py:476(forward)
            1    0.000    0.000    0.088    0.088 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_lazy_graph_module.py:112(_lazy_forward)
          270    0.003    0.000    0.085    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1218(node_copy)
          2/1    0.000    0.000    0.084    0.084 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph_module.py:736(call_wrapped)
            1    0.000    0.000    0.084    0.084 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph_module.py:299(__call__)
            1    0.000    0.000    0.084    0.084 <eval_with_key>.45:4(forward)
            1    0.000    0.000    0.084    0.084 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:841(_ort_acclerated_call)
         8788    0.046    0.000    0.083    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/registration.py:55(from_qualified_name)
            9    0.000    0.000    0.079    0.009 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/linear.py:115(forward)
            9    0.003    0.000    0.079    0.009 {built-in method torch._C._nn.linear}
           61    0.000    0.000    0.076    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:207(track_tensor_tree)
        76/61    0.001    0.000    0.076    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:208(wrap_with_proxy)
    73037/72080    0.064    0.000    0.076    0.000 {built-in method builtins.isinstance}
    5870/5734    0.009    0.000    0.075    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:713(<genexpr>)
          430    0.008    0.000    0.074    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:166(__init__)
        94/86    0.004    0.000    0.074    0.001 {method 'detach' of 'torch._C.TensorBase' objects}
     1906/758    0.006    0.000    0.072    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:792(<listcomp>)
            9    0.000    0.000    0.071    0.008 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:479(wrapper)
            9    0.000    0.000    0.070    0.008 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:1260(CALL_FUNCTION)
            9    0.000    0.000    0.070    0.008 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:694(call_function)
           74    0.001    0.000    0.066    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:171(set_meta)
        79/74    0.000    0.000    0.062    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:138(extract_val)
            4    0.000    0.000    0.062    0.015 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:761(module_call_wrapper)
            4    0.000    0.000    0.062    0.015 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:510(call_module)
            4    0.000    0.000    0.062    0.015 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:763(forward)
           76    0.000    0.000    0.062    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:135(snapshot_fake)
            6    0.000    0.000    0.060    0.010 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1281(python_code)
        14991    0.034    0.000    0.060    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/registration.py:44(from_name_parts)
           94    0.001    0.000    0.059    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/proxy.py:173(create_proxy)
           10    0.000    0.000    0.058    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/builder.py:1310(wrap_fx_proxy)
           10    0.001    0.000    0.058    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/builder.py:1370(wrap_fx_proxy_cls)
            9    0.000    0.000    0.058    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/functional.py:1489(relu)
            9    0.001    0.000    0.058    0.006 {built-in method torch.relu}
          270    0.010    0.000    0.057    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:979(_cache_key)
            6    0.000    0.000    0.057    0.010 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1343(_python_code)
            6    0.005    0.001    0.057    0.010 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:372(_gen_python_code)
            6    0.000    0.000    0.055    0.009 /home/xadupre/.local/lib/python3.10/site-packages/torch/_logging/_internal.py:1033(trace_structured)
           19    0.000    0.000    0.053    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/functional_utils.py:21(to_fun)
           19    0.000    0.000    0.052    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/functional_tensor.py:180(to_functional)
         87/3    0.003    0.000    0.051    0.017 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py:71(wrapper)
            4    0.000    0.000    0.051    0.013 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph_module.py:820(print_readable)
            4    0.000    0.000    0.049    0.012 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/nn_module.py:244(call_function)
            9    0.001    0.000    0.047    0.005 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1606(get_fake_value)
         8922    0.018    0.000    0.046    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:601(_get_node_type)
         6104    0.013    0.000    0.045    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:608(_is_leaf)
           14    0.000    0.000    0.044    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1188(wrap_fake_exception)
        69/54    0.000    0.000    0.043    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:1155(maybe_handle_decomp)
            5    0.000    0.000    0.043    0.009 /home/xadupre/.local/lib/python3.10/site-packages/torch/_prims_common/wrappers.py:242(_fn)
            3    0.000    0.000    0.043    0.014 /home/xadupre/.local/lib/python3.10/site-packages/torch/_decomp/__init__.py:115(_fn)
            3    0.000    0.000    0.042    0.014 /home/xadupre/.local/lib/python3.10/site-packages/torch/_decomp/decompositions.py:209(threshold_backward)
          559    0.007    0.000    0.042    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:436(__update_args_kwargs)
           11    0.005    0.000    0.042    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1385(lint)
            6    0.001    0.000    0.041    0.007 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1456(eliminate_dead_code)
            1    0.000    0.000    0.041    0.041 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:1039(compile)
    2561/1086    0.013    0.000    0.041    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:823(_tree_leaves_helper)
            1    0.000    0.000    0.041    0.041 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/infra/partitioner.py:326(partition_and_fuse)
          246    0.005    0.000    0.038    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1143(_output_from_cache_entry)
            1    0.000    0.000    0.038    0.038 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/infra/partitioner.py:265(fuse_partitions)
            1    0.000    0.000    0.038    0.038 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/utils/fuser_utils.py:218(fuse_by_partitions)
            1    0.000    0.000    0.037    0.037 /home/xadupre/.local/lib/python3.10/site-packages/networkx/algorithms/flow/maxflow.py:304(minimum_cut)
           96    0.002    0.000    0.037    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/proxy.py:117(create_node)
            1    0.002    0.002    0.036    0.036 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/compile_utils.py:25(fx_graph_cse)
          543    0.002    0.000    0.034    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:841(tree_leaves)
         1906    0.010    0.000    0.034    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:629(__post_init__)
            1    0.000    0.000    0.034    0.034 /home/xadupre/.local/lib/python3.10/site-packages/networkx/algorithms/flow/preflowpush.py:291(preflow_push)
            1    0.002    0.002    0.034    0.034 /home/xadupre/.local/lib/python3.10/site-packages/networkx/algorithms/flow/preflowpush.py:22(preflow_push_impl)
    3455/3259    0.007    0.000    0.032    0.000 {built-in method builtins.next}
      149/140    0.001    0.000    0.032    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_ops.py:617(decompose)
    25619/24750    0.029    0.000    0.032    0.000 {built-in method builtins.hash}
      311/269    0.005    0.000    0.031    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1039(_prep_args_for_hash)
            1    0.000    0.000    0.031    0.031 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py:495(run)
       129/69    0.001    0.000    0.030    0.000 /usr/lib/python3.10/copy.py:259(_reconstruct)
         8327    0.014    0.000    0.030    0.000 {method 'add' of 'set' objects}
            3    0.000    0.000    0.030    0.010 {built-in method torch.where}
            1    0.000    0.000    0.030    0.030 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:692(classify_nodes)
            4    0.000    0.000    0.029    0.007 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1199(deepcopy_to_fake_tensor)
            4    0.000    0.000    0.029    0.007 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1201(<lambda>)
        216/4    0.002    0.000    0.029    0.007 /usr/lib/python3.10/copy.py:128(deepcopy)
            4    0.000    0.000    0.029    0.007 /usr/lib/python3.10/copy.py:227(_deepcopy_dict)
         8922    0.020    0.000    0.028    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:590(_is_namedtuple_instance)
         1257    0.004    0.000    0.028    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:1016(wrapped)
            9    0.000    0.000    0.027    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/collect_metadata_analysis.py:80(_to_fun)
           27    0.000    0.000    0.027    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py:413(run_node)
           30    0.000    0.000    0.026    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:337(__call__)
           30    0.000    0.000    0.026    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:259(from_real_tensor)
          217    0.005    0.000    0.026    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:528(emit_node)
    10649/10301    0.014    0.000    0.025    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:689(__setattr__)
         8094    0.016    0.000    0.025    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_ops.py:596(__hash__)
            8    0.000    0.000    0.025    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/parameter.py:55(__deepcopy__)
        20865    0.024    0.000    0.025    0.000 {built-in method builtins.getattr}
           30    0.001    0.000    0.025    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/meta_utils.py:667(__call__)
           24    0.001    0.000    0.024    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1240(_dispatch_impl)
           40    0.000    0.000    0.024    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1755(__torch_function__)
           17    0.000    0.000    0.023    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py:647(call_function)
          296    0.008    0.000    0.023    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:699(extract_tensor_metadata)
            1    0.000    0.000    0.023    0.023 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/jit_compile_runtime_wrappers.py:199(<lambda>)
        19897    0.023    0.000    0.023    0.000 {method 'split' of 'str' objects}
           30    0.003    0.000    0.023    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/meta_utils.py:205(meta_tensor)
          761    0.005    0.000    0.023    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:980(map_only)
         4496    0.010    0.000    0.023    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:705(<lambda>)
         3820    0.013    0.000    0.023    0.000 {built-in method builtins.sum}
           85    0.003    0.000    0.023    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/functional_tensor.py:79(__new__)
           63    0.001    0.000    0.022    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_python_dispatch.py:379(return_and_correct_aliasing)
            1    0.000    0.000    0.022    0.022 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/exporter.py:119(__init__)
            1    0.005    0.005    0.022    0.022 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/exporter.py:152(_initiate_registry_from_torchlib)
           19    0.001    0.000    0.021    0.001 {built-in method torch._to_functional_tensor}
    done.




.. GENERATED FROM PYTHON SOURCE LINES 518-520

Benchmark exported models with ORT
++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 520-617

.. code-block:: Python



    def benchmark(shape):
        data = []
        data_mem_first_run = []
        data_mem_run = []
        confs = list(
            itertools.product(
                export_functions,
                ["CPU", "CUDA"],
            )
        )
        loop = tqdm(confs)
        print(f"number of experiments: {len(loop)}")
        for export_fct, p in loop:
            name = export_fct.__name__.replace("get_torch_", "")
            obs = {}  # system_info()
            obs["name"] = name
            obs["compute"] = p
            obs["export"] = name

            model, input_tensor = create_model_and_input()
            if p == "CUDA":
                if not has_cuda:
                    continue
                model = model.cuda()
                input_tensor = input_tensor.cuda()
            try:
                exported_model = export_fct(model, input_tensor)
            except torch._dynamo.exc.BackendCompilerFailed as e:
                # Triton only supports devices of CUDA Capability >= 7.0, but your device is of CUDA capability 6.1
                obs["error"] = str(e)
                data.append(obs)
                continue

            def call_model(
                export_fct=export_fct,
                exported_model=exported_model,
                input_tensor=input_tensor,
            ):
                res = exported_model(input_tensor).sum()
                return res

            stat = start_spying_on(cuda=1 if has_cuda else 0)
            try:
                call_model()
            except Exception as e:
                loop.set_description(f"ERROR-run: {name} {e}")
                obs.update({"error": e, "step": "load"})
                data.append(obs)
                stat.stop()
                continue
            memobs = flatten(stat.stop())
            memobs.update(obs)
            data_mem_first_run.append(memobs)

            # memory consumption
            stat = start_spying_on(cuda=1 if has_cuda else 0)
            for i in range(0, script_args.warmup):
                call_model()
            memobs = flatten(stat.stop())
            memobs.update(obs)
            data_mem_run.append(memobs)

            obs.update(
                measure_time(
                    call_model,
                    max_time=script_args.maxtime,
                    repeat=script_args.repeat,
                    number=1,
                )
            )

            profile_function(name, call_model, with_args=False, suffix=f"run_{p}")

            loop.set_description(f"{obs['average']} {name} {p}")
            data.append(obs)
            del model
            del exported_model
            gc.collect()
            time.sleep(1)

        df = pandas.DataFrame(data)
        df.to_csv("plot_torch_dort_ort_time.csv", index=False)
        df.to_excel("plot_torch_dort_ort_time.xlsx", index=False)
        dfmemr = pandas.DataFrame(data_mem_run)
        dfmemr.to_csv("plot_torch_dort_ort_run_mem.csv", index=False)
        dfmemr.to_excel("plot_torch_dort_ort_run_mem.xlsx", index=False)
        dfmemfr = pandas.DataFrame(data_mem_first_run)
        dfmemfr.to_csv("plot_torch_dort_ort_first_run_mem.csv", index=False)
        dfmemfr.to_excel("plot_torch_dort_ort_first_run_mem.xlsx", index=False)
        return df, dfmemfr, dfmemr


    df, dfmemfr, dfmemr = benchmark(list(input_tensor.shape))
    print(df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/6 [00:00<?, ?it/s]number of experiments: 6
    0.000662724550897611 eager CPU:   0%|          | 0/6 [00:00<?, ?it/s]    0.000662724550897611 eager CPU:  17%|█▋        | 1/6 [00:02<00:11,  2.27s/it]    0.0021796133332827594 eager CUDA:  17%|█▋        | 1/6 [00:03<00:11,  2.27s/it]    0.0021796133332827594 eager CUDA:  33%|███▎      | 2/6 [00:04<00:09,  2.30s/it]    0.0008197863309446508 default CPU:  33%|███▎      | 2/6 [00:08<00:09,  2.30s/it]    0.0008197863309446508 default CPU:  50%|█████     | 3/6 [00:09<00:10,  3.44s/it]    0.0008197863309446508 default CPU:  67%|██████▋   | 4/6 [00:10<00:04,  2.33s/it]    0.0014993753622706129 dort CPU:  67%|██████▋   | 4/6 [00:11<00:04,  2.33s/it]       0.0014993753622706129 dort CPU:  83%|████████▎ | 5/6 [00:12<00:02,  2.40s/it]    0.001417619540215933 dort CUDA:  83%|████████▎ | 5/6 [00:13<00:02,  2.40s/it]    0.001417619540215933 dort CUDA: 100%|██████████| 6/6 [00:15<00:00,  2.54s/it]    0.001417619540215933 dort CUDA: 100%|██████████| 6/6 [00:15<00:00,  2.56s/it]
          name compute   export   average  deviation  ...  number     ttime  context_size  warmup_time                                              error
    0    eager     CPU    eager  0.000663   0.000069  ...   167.0  0.110675          64.0     0.001507                                                NaN
    1    eager    CUDA    eager  0.002180   0.000190  ...    75.0  0.163471          64.0     0.001898                                                NaN
    2  default     CPU  default  0.000820   0.000132  ...   139.0  0.113950          64.0     0.001742                                                NaN
    3  default    CUDA  default       NaN        NaN  ...     NaN       NaN           NaN          NaN  backend='inductor' raised:\nRuntimeError: Foun...
    4     dort     CPU     dort  0.001499   0.000554  ...    69.0  0.103457          64.0     0.003070                                                NaN
    5     dort    CUDA     dort  0.001418   0.000479  ...    87.0  0.123333          64.0     0.003024                                                NaN

    [6 rows x 13 columns]




.. GENERATED FROM PYTHON SOURCE LINES 618-619

Other view

.. GENERATED FROM PYTHON SOURCE LINES 619-655

.. code-block:: Python



    def view_time(df, title, suffix="time"):
        piv = pandas.pivot_table(df, index="export", columns=["compute"], values="average")
        print(piv)
        piv.to_csv(f"plot_torch_dort_{suffix}_compute.csv")
        piv.to_excel(f"plot_torch_dort_{suffix}_compute.xlsx")

        piv_cpu = pandas.pivot_table(
            df[df.compute == "CPU"],
            index="export",
            columns=["compute"],
            values="average",
        )

        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        fig.suptitle(title)
        piv_cpu.plot.barh(ax=ax[0], title="CPU", logx=True)

        if has_cuda:
            piv_gpu = pandas.pivot_table(
                df[df.compute == "CUDA"],
                index="export",
                columns=["compute"],
                values="average",
            )
            piv_gpu.plot.barh(ax=ax[1], title="CUDA", logx=True)

        fig.tight_layout()
        fig.savefig(f"plot_torch_dort_{suffix}.png")
        return ax


    view_time(df, "Compares processing time on backends")





.. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_201_004.png
   :alt: Compares processing time on backends, CPU, CUDA
   :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_201_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    compute       CPU      CUDA
    export                     
    default  0.000820       NaN
    dort     0.001499  0.001418
    eager    0.000663  0.002180

    array([<Axes: title={'center': 'CPU'}, ylabel='export'>,
           <Axes: title={'center': 'CUDA'}, ylabel='export'>], dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 656-658

Memory First Running Time (ORT)
+++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 658-672

.. code-block:: Python


    for compute in ["CPU", "CUDA"]:
        if not has_cuda and compute == "CUDA":
            continue
        ax = memory_peak_plot(
            dfmemfr[dfmemfr.compute == compute],
            ("export",),
            suptitle=f"Memory Consumption of backend, first running time"
            f"\nrunning on {compute}",
            bars=[model_size * i / 2**20 for i in range(1, 3)],
            figsize=(18, 6),
        )
        get_figure(ax).savefig(f"plot_torch_dort_first_run_mem_{compute}.png")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_201_005.png
         :alt: Memory Consumption of backend, first running time running on CPU, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_201_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_201_006.png
         :alt: Memory Consumption of backend, first running time running on CUDA, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_201_006.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 673-675

Memory Running Time (ORT)
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 675-688

.. code-block:: Python


    for compute in ["CPU", "CUDA"]:
        if not has_cuda and compute == "CUDA":
            continue
        ax = memory_peak_plot(
            dfmemr[dfmemr.compute == compute],
            ("export",),
            suptitle=f"Memory Consumption of backens, running time"
            f"\nrunning on {compute}",
            bars=[model_size * i / 2**20 for i in range(1, 3)],
            figsize=(18, 6),
        )
        get_figure(ax).savefig(f"plot_torch_dort_run_mem_{compute}.png")



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_201_007.png
         :alt: Memory Consumption of backens, running time running on CPU, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_201_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_201_008.png
         :alt: Memory Consumption of backens, running time running on CUDA, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_201_008.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 57.998 seconds)


.. _sphx_glr_download_auto_examples_plot_torch_dort_201.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_torch_dort_201.ipynb <plot_torch_dort_201.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_torch_dort_201.py <plot_torch_dort_201.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
