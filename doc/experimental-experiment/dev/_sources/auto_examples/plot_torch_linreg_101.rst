
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_torch_linreg_101.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_torch_linreg_101.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_torch_linreg_101.py:


=========================================
101: Linear Regression and export to ONNX
=========================================

:epkg:`scikit-learn` and :epkg:`torch` to train a linear regression.

data
====

.. GENERATED FROM PYTHON SOURCE LINES 11-29

.. code-block:: Python


    import numpy as np
    from sklearn.datasets import make_regression
    from sklearn.linear_model import LinearRegression, SGDRegressor
    from sklearn.metrics import mean_squared_error, r2_score
    from sklearn.model_selection import train_test_split
    import torch
    from onnxruntime import InferenceSession
    from onnx_array_api.plotting.text_plot import onnx_simple_text_plot
    from onnx_array_api.plotting.graphviz_helper import plot_dot
    from experimental_experiment.torch_interpreter import to_onnx


    X, y = make_regression(1000, n_features=5, noise=10.0, n_informative=2)
    print(X.shape, y.shape)

    X_train, X_test, y_train, y_test = train_test_split(X, y)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (1000, 5) (1000,)




.. GENERATED FROM PYTHON SOURCE LINES 30-36

scikit-learn: the simple regression
===================================

.. math::

      A^* = (X'X)^{-1}X'Y

.. GENERATED FROM PYTHON SOURCE LINES 36-43

.. code-block:: Python



    clr = LinearRegression()
    clr.fit(X_train, y_train)

    print(f"coefficients: {clr.coef_}, {clr.intercept_}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    coefficients: [ 8.77645073e-01  7.23508174e+01 -5.21526059e-02  9.31183877e+01
      5.58228290e-01], 0.26571651725229817




.. GENERATED FROM PYTHON SOURCE LINES 44-46

Evaluation
==========

.. GENERATED FROM PYTHON SOURCE LINES 46-52

.. code-block:: Python


    y_pred = clr.predict(X_test)
    l2 = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print(f"LinearRegression: l2={l2}, r2={r2}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LinearRegression: l2=99.37158225696727, r2=0.9921955426688784




.. GENERATED FROM PYTHON SOURCE LINES 53-57

scikit-learn: SGD algorithm
===================================

SGD = Stochastic Gradient Descent

.. GENERATED FROM PYTHON SOURCE LINES 57-63

.. code-block:: Python


    clr = SGDRegressor(max_iter=5, verbose=1)
    clr.fit(X_train, y_train)

    print(f"coefficients: {clr.coef_}, {clr.intercept_}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    -- Epoch 1
    Norm: 99.54, NNZs: 5, Bias: -1.083300, T: 750, Avg. loss: 1453.695892
    Total training time: 0.00 seconds.
    -- Epoch 2
    Norm: 112.76, NNZs: 5, Bias: -0.399563, T: 1500, Avg. loss: 105.002287
    Total training time: 0.00 seconds.
    -- Epoch 3
    Norm: 116.17, NNZs: 5, Bias: -0.083427, T: 2250, Avg. loss: 51.117831
    Total training time: 0.00 seconds.
    -- Epoch 4
    Norm: 117.33, NNZs: 5, Bias: 0.205811, T: 3000, Avg. loss: 46.281330
    Total training time: 0.00 seconds.
    -- Epoch 5
    Norm: 117.71, NNZs: 5, Bias: 0.129218, T: 3750, Avg. loss: 45.656226
    Total training time: 0.00 seconds.
    /home/xadupre/install/scikit-learn/sklearn/linear_model/_stochastic_gradient.py:1575: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
      warnings.warn(
    coefficients: [ 0.8506411  72.25623951 -0.17585021 92.92246497  0.5644385 ], [0.12921801]




.. GENERATED FROM PYTHON SOURCE LINES 64-65

Evaluation

.. GENERATED FROM PYTHON SOURCE LINES 65-72

.. code-block:: Python


    y_pred = clr.predict(X_test)
    sl2 = mean_squared_error(y_test, y_pred)
    sr2 = r2_score(y_test, y_pred)
    print(f"SGDRegressor: sl2={sl2}, sr2={sr2}")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    SGDRegressor: sl2=99.41981237130881, sr2=0.9921917547663321




.. GENERATED FROM PYTHON SOURCE LINES 73-75

torch
=====

.. GENERATED FROM PYTHON SOURCE LINES 75-124

.. code-block:: Python



    class TorchLinearRegression(torch.nn.Module):
        def __init__(self, n_dims: int, n_targets: int):
            super(TorchLinearRegression, self).__init__()
            self.linear = torch.nn.Linear(n_dims, n_targets)

        def forward(self, x):
            return self.linear(x)


    def train_loop(dataloader, model, loss_fn, optimizer):
        total_loss = 0.0

        # Set the model to training mode - important for batch normalization and dropout layers
        # Unnecessary in this situation but added for best practices
        model.train()
        for batch, (X, y) in enumerate(dataloader):
            # Compute prediction and loss
            pred = model(X)
            loss = loss_fn(pred.ravel(), y)

            # Backpropagation
            loss.backward()
            optimizer.step()
            optimizer.zero_grad()

            # training loss
            total_loss += loss

        return total_loss


    model = TorchLinearRegression(X_train.shape[1], 1)
    optimizer = torch.optim.SGD(model.parameters(), lr=1e-3)
    loss_fn = torch.nn.MSELoss()

    device = "cpu"
    model = model.to(device)
    dataset = torch.utils.data.TensorDataset(
        torch.Tensor(X_train).to(device), torch.Tensor(y_train).to(device)
    )
    dataloader = torch.utils.data.DataLoader(dataset, batch_size=1)


    for i in range(5):
        loss = train_loop(dataloader, model, loss_fn, optimizer)
        print(f"iteration {i}, loss={loss}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    iteration 0, loss=3388378.75
    iteration 1, loss=246132.15625
    iteration 2, loss=78806.203125
    iteration 3, loss=69241.828125
    iteration 4, loss=68663.84375




.. GENERATED FROM PYTHON SOURCE LINES 125-126

Let's check the error

.. GENERATED FROM PYTHON SOURCE LINES 126-132

.. code-block:: Python


    y_pred = model(torch.Tensor(X_test)).detach().numpy()
    tl2 = mean_squared_error(y_test, y_pred)
    tr2 = r2_score(y_test, y_pred)
    print(f"TorchLinearRegression: tl2={tl2}, tr2={tr2}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    TorchLinearRegression: tl2=99.65278124005958, tr2=0.9921734578291762




.. GENERATED FROM PYTHON SOURCE LINES 133-134

And the coefficients.

.. GENERATED FROM PYTHON SOURCE LINES 134-140

.. code-block:: Python


    print("coefficients:")
    for p in model.parameters():
        print(p)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    coefficients:
    Parameter containing:
    tensor([[ 1.0995e+00,  7.2252e+01, -8.1620e-02,  9.3018e+01,  5.0411e-01]],
           requires_grad=True)
    Parameter containing:
    tensor([0.2408], requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 141-145

Conversion to ONNX
==================

Let's convert it to ONNX.

.. GENERATED FROM PYTHON SOURCE LINES 145-148

.. code-block:: Python


    onx = to_onnx(model, (torch.Tensor(X_test[:2]),), input_names=["x"])








.. GENERATED FROM PYTHON SOURCE LINES 149-150

Let's check it is work.

.. GENERATED FROM PYTHON SOURCE LINES 150-155

.. code-block:: Python


    sess = InferenceSession(onx.SerializeToString(), providers=["CPUExecutionProvider"])
    res = sess.run(None, {"x": X_test.astype(np.float32)[:2]})
    print(res)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [array([[-192.17436],
           [ -48.7338 ]], dtype=float32)]




.. GENERATED FROM PYTHON SOURCE LINES 156-157

And the model.

.. GENERATED FROM PYTHON SOURCE LINES 157-161

.. code-block:: Python


    plot_dot(onx)





.. image-sg:: /auto_examples/images/sphx_glr_plot_torch_linreg_101_001.png
   :alt: plot torch linreg 101
   :srcset: /auto_examples/images/sphx_glr_plot_torch_linreg_101_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: >



.. GENERATED FROM PYTHON SOURCE LINES 162-164

With dynamic shapes
===================

.. GENERATED FROM PYTHON SOURCE LINES 164-173

.. code-block:: Python


    onx = to_onnx(
        model,
        (torch.Tensor(X_test[:2]),),
        input_names=["x"],
        dynamic_shapes={"x": {0: torch.export.Dim("batch")}},
    )

    print(onnx_simple_text_plot(onx))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    opset: domain='' version=18
    input: name='x' type=dtype('float32') shape=['batch', 5]
    init: name='arg0_1' type=dtype('float32') shape=(1, 5)
    init: name='arg1_1' type=dtype('float32') shape=(1,) -- array([0.24076203], dtype=float32)
    Gemm(x, arg0_1, arg1_1, transA=0, transB=1, alpha=1.00, beta=1.00) -> output_0
    output: name='output_0' type=dtype('float32') shape=['batch', 1]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.163 seconds)


.. _sphx_glr_download_auto_examples_plot_torch_linreg_101.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_torch_linreg_101.ipynb <plot_torch_linreg_101.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_torch_linreg_101.py <plot_torch_linreg_101.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
