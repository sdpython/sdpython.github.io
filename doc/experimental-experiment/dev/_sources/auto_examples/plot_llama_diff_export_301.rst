
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_llama_diff_export_301.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_llama_diff_export_301.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_llama_diff_export_301.py:


.. _l-plot-llama-diff-export:

301: Compares LLAMA exporters
=============================

The script compares the two exporters implemented in :epkg:`pytorch`
for a part of llama model. The model are compared after all optimizations
were made with and :epkg:`onnxruntime`.

* `TorchScript-based ONNX Exporter
  <https://pytorch.org/docs/stable/onnx.html#torchscript-based-onnx-exporter>`_,
  let's call it **script**
* `TorchDynamo-based ONNX Exporter
  <https://pytorch.org/docs/stable/onnx.html#torchdynamo-based-onnx-exporter>`_,
  let's call it **dynamo**

To run the script:

::

    python _doc/examples/plot_llama_diff_export --help

Some helpers
++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 27-81

.. code-block:: Python


    from experimental_experiment.args import get_parsed_args

    script_args = get_parsed_args(
        "plot_llama_diff_export",
        description=__doc__,
        part=("attention", "one value among attention, decoder, model"),
        exporter=("dynamo", "one value among dynamo, custom"),
        ortopt=(1, "run onnxruntime optimization"),
        opset=(18, "onnx opset"),
        expose="part,exporter,ortopt,opset",
    )

    import contextlib
    import os
    import io
    import warnings
    import logging

    try:
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            import onnxruntime

            has_cuda = "CUDAExecutionProvider" in onnxruntime.get_available_providers()
    except ImportError:
        print("onnxruntime not available.")
        import sys

        sys.exit(0)

    import numpy as np
    import onnx
    from onnx_array_api.reference import compare_onnx_execution, ExtendedReferenceEvaluator
    import torch
    from experimental_experiment.ext_test_case import unit_test_going
    from experimental_experiment.torch_interpreter import to_onnx
    from experimental_experiment.xbuilder import OptimizationOptions
    from experimental_experiment.convert.convert_helper import (
        optimize_model_proto_oxs,
        ort_optimize,
    )
    from experimental_experiment.torch_models.llama_helper import (
        get_llama_model,
        get_llama_attention,
        get_llama_decoder,
    )
    from experimental_experiment.torch_models.dump_helper import reorder_functions_in_proto

    has_cuda = has_cuda and torch.cuda.is_available()
    logging.disable(logging.ERROR)
    provider = "cuda" if has_cuda else "cpu"









.. GENERATED FROM PYTHON SOURCE LINES 82-84

The exporting functions
+++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 84-145

.. code-block:: Python



    print(f"part={script_args.part}")
    print(f"exporter={script_args.exporter}")
    ortopt = script_args.ortopt in (1, "1")
    print(f"ortopt={ortopt}")
    opset = int(script_args.opset)
    print(f"opset={opset}")


    def opt_filename(filename: str) -> str:
        name, ext = os.path.splitext(filename)
        return f"{name}.opt{ext}"


    def export_script(filename, model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                torch.onnx.export(
                    model, args, filename, input_names=["input"], opset_version=opset
                )
        if ortopt:
            onx = onnx.load(filename)
            ort_optimize(onx, opt_filename(filename), providers=provider)


    def export_dynamo(filename, model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                export_output = torch.onnx.export(model, args, dynamo=True)
                model = export_output.model_proto
        try:
            new_model = optimize_model_proto_oxs(model)
        except ImportError as e:
            print("skipping optimization, missing package or failure:", e)
            new_model = model
        with open(filename, "wb") as f:
            f.write(new_model.SerializeToString())
        if ortopt:
            ort_optimize(new_model, opt_filename(filename), providers=provider)


    def export_custom(filename, model, *args):
        new_model = to_onnx(
            model,
            tuple(args),
            input_names=[f"input{i}" for i in range(len(args))],
            options=OptimizationOptions(
                remove_unused=True,
                constant_folding=False,
            ),
            target_opset=opset,
        )
        with open(filename, "wb") as f:
            f.write(new_model.SerializeToString())
        if ortopt:
            ort_optimize(new_model, opt_filename(filename), providers=provider)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    part=attention
    exporter=dynamo
    ortopt=True
    opset=18




.. GENERATED FROM PYTHON SOURCE LINES 146-148

Model and data
++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 148-184

.. code-block:: Python


    if unit_test_going():
        kwargs = dict(input_dims=[(2, 1024)] * 2)
    else:
        kwargs = dict(
            input_dims=[(2, 1024)] * 2,
            _attn_implementation="eager",
            num_hidden_layers=1,
            hidden_size=512,
            vocab_size=4000,
            intermediate_size=2000,
            max_position_embeddings=2048,
            num_attention_heads=8,
        )

    if script_args.part == "attention":
        model, inputs = get_llama_attention(**kwargs)
    elif script_args.part == "decoder":
        model, inputs = get_llama_decoder(**kwargs)
    elif script_args.part == "model":
        model, inputs = get_llama_model(**kwargs)
    else:
        raise RuntimeError(f"Unexpected value for part={script_args.part!r}")

    print(f"simple run with {len(inputs)} inputs")
    expected = model(*inputs[0])
    if isinstance(expected, tuple):
        for t in expected:
            if not isinstance(t, tuple):
                print(f"eager worked {t.shape}, {t.dtype}")
            else:
                print(f"eager worked {type(t)}")
    else:
        print(f"eager mode worked {expected.shape}, {expected.dtype}")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    simple run with 2 inputs
    eager mode worked torch.Size([2, 1024, 512]), torch.float32




.. GENERATED FROM PYTHON SOURCE LINES 185-187

Exporting
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 187-204

.. code-block:: Python


    exporter = script_args.exporter
    file1 = f"llama.{script_args.part}.script.onnx"
    file2 = f"llama.{script_args.part}.{exporter}.onnx"

    print("torch script exporter")
    export_script(file1, model, *inputs[0])

    if exporter == "dynamo":
        print("torch dynamo exporter")
        export_dynamo(file2, model, *inputs[0])
    elif exporter == "custom":
        print("torch custom exporter")
        export_custom(file2, model, *inputs[0])
    else:
        raise AssertionError(f"Unexpected value for exporter={exporter!r}.")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    torch script exporter
    torch dynamo exporter
    Applied 2 of general pattern rewrite rules.




.. GENERATED FROM PYTHON SOURCE LINES 205-207

Verification
++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 207-241

.. code-block:: Python


    if ortopt:
        print("Using models optimized by onnxruntime")
        file1 = f"llama.{script_args.part}.script.opt.onnx"
        file2 = f"llama.{script_args.part}.{exporter}.opt.onnx"


    providers = (
        ["CPUExecutionProvider"]
        if provider == "cpu"
        else [("CUDAExecutionProvider", {}), ("CPUExecutionProvider", {})]
    )

    model1 = onnx.load(file1)
    model2 = onnx.load(file2)

    feeds1, feeds2 = {}, {}
    for i in range(len(inputs[0])):
        x = inputs[0][i].detach().numpy()
        feeds1[model1.graph.input[i].name] = x
        feeds2[model2.graph.input[i].name] = x

    if ortopt:
        sess1 = onnxruntime.InferenceSession(file1, providers=providers)
        sess2 = onnxruntime.InferenceSession(file2, providers=providers)

        got1 = sess1.run(None, feeds1)
        got2 = sess2.run(None, feeds2)

        diff1 = np.abs(expected.detach().numpy() - got1[0]).max()
        diff2 = np.abs(expected.detach().numpy() - got2[0]).max()

        print(f"Error with the eager model and onnxruntime: {diff1}, {diff2}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Using models optimized by onnxruntime
    Error with the eager model and onnxruntime: 3.287359140813351e-05, 3.287359140813351e-05




.. GENERATED FROM PYTHON SOURCE LINES 242-244

Verification with the reference evaluator
+++++++++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 244-267

.. code-block:: Python


    reorder_functions_in_proto(file1)
    reorder_functions_in_proto(file2)

    sess1 = ExtendedReferenceEvaluator(file1)
    try:
        sess2 = ExtendedReferenceEvaluator(file2)
    except NotImplementedError as e:
        print(e)
        sess2 = None

    got1 = sess1.run(None, feeds1)
    got2 = got1 if sess2 is None else sess2.run(None, feeds2)

    if isinstance(expected, tuple):
        diff1 = np.abs(expected[0].detach().numpy() - got1[0]).max()
        diff2 = np.abs(expected[0].detach().numpy() - got2[0]).max()
    else:
        diff1 = np.abs(expected.detach().numpy() - got1[0]).max()
        diff2 = np.abs(expected.detach().numpy() - got2[0]).max()

    print(f"Error with the eager model and the reference evaluator: {diff1}, {diff2}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Error with the eager model and the reference evaluator: 4.0978193283081055e-08, 4.0978193283081055e-08




.. GENERATED FROM PYTHON SOURCE LINES 268-270

Comparison and execution
++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 270-295

.. code-block:: Python



    def clean_name(name):
        return name.replace(
            "_inlfunc_transformers_models_llama_modeling_llama_LlamaAttention", ""
        ).replace("_inlfunc_torch_nn_modules_linear_Linear", "")


    if sess2 is not None:
        try:
            np_inputs = [i.detach().numpy() for i in inputs[0]]
            res1, res2, align, dc = compare_onnx_execution(
                model1, model2, inputs=np_inputs, verbose=1, raise_exc=False
            )
            for r in res2:
                r.name = clean_name(r.name)
            text = dc.to_str(res1, res2, align, column_size=90)
            print(text)
        except AssertionError as e:
            if "Unexpected type <class 'list'> for value, it must be a numpy array." not in str(
                e
            ):
                raise
            print(e)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [compare_onnx_execution] execute with 3 inputs
    [compare_onnx_execution] execute first model
    [compare_onnx_execution] got 60 results
    [compare_onnx_execution] execute second model
    [compare_onnx_execution] got 60 results (first model)
    [compare_onnx_execution] got 61 results (second model)
    [compare_onnx_execution] compute edit distance
    [compare_onnx_execution] got 62 pairs
    [compare_onnx_execution] done
    001 = | INITIA float32  2:512x512            BVZW                 onnx::MatMul_171                 | INITIA float32  2:512x512            BVZW                 t                               
    002 = | INITIA float32  2:512x512            TAKK                 onnx::MatMul_172                 | INITIA float32  2:512x512            TAKK                 t_1                             
    003 = | INITIA float32  2:512x512            DUWT                 onnx::MatMul_173                 | INITIA float32  2:512x512            DUWT                 t_2                             
    004 - | INITIA float32  2:512x512            SIFA                 onnx::MatMul_219                 |                                                                                           
    005 ~ | INITIA int64    1:2                  GGAA                 splits                           | INITIA int64    1:4                  CKIM                 val_1                           
    006 ~ | INITIA int64    1:1                  BAAA                 /attention/Constant_25_output_0  | INITIA float32  3:1x32x1             DAAA                 _to_copy_2                      
    007 ~ | INITIA int64    1:4                  CKIM                 /attention/Constant_2_output_0   | INITIA int64                         BAAA                 node_aten_unsqueeze_72_dim_0    
    008 ~ | INITIA int64    1:1                  AAAA                 /attention/Constant_6_output_0   | INITIA int64    1:1                  BAAA                 val_92                          
    009 ~ | INITIA float32  3:1x32x1             DAAA                 /attention/rotary_emb/Expand_out | INITIA int64    1:2                  GGAA                 splits                          
    010 ~ | INITIA int64    1:1                  KAAA                 /attention/Constant_24_output_0  | INITIA int64    1:1                  ?AAA                 val_88                          
    011 = | INITIA int64    1:2                  GGAA                 splits_token_14                  | INITIA int64    1:2                  GGAA                 splits_token_14                 
    012 + |                                                                                            | INITIA float32  2:512x512            SIFA                 t_3                              
    013 ~ | INITIA int64    1:1                  DAAA                 const_transpose_optimizer_token_ | INITIA int64    1:1                  AAAA                 val_91                          
    014 = | INITIA int64    1:3                  CKZA                 /attention/Constant_26_output_0  | INITIA int64    1:3                  CKZA                 val_115                         
    015 = | INPUT  float32  3:2x1024x512         PZNM                 input                            | INPUT  float32  3:2x1024x512         PZNM                 hidden_states                   
    016 = | INPUT  float32  4:2x1x1024x1024      AAAA                 onnx::Slice_1                    | INPUT  float32  4:2x1x1024x1024      AAAA                 attention_mask                  
    017 = | INPUT  int64    2:1x1024             KAQG                 onnx::Unsqueeze_2                | INPUT  int64    2:1x1024             KAQG                 position_ids                    
    018 + |                                                                                            | RESULT int64    2:1x1024             KAQG Slice           slice_2                          
    019 = | RESULT int64    3:1x1x1024           KAQG Unsqueeze       /attention/rotary_emb/Unsqueeze_ | RESULT int64    3:1x1x1024           KAQG Unsqueeze       unsqueeze_2                     
    020 = | RESULT float32  3:1x1x1024           KAQG Cast            /attention/rotary_emb/Cast_outpu | RESULT float32  3:1x1x1024           KAQG Cast            _to_copy_1                      
    021 = | RESULT float32  3:1x32x1024          EFXM MatMul          /attention/rotary_emb/MatMul_out | RESULT float32  3:1x32x1024          EFXM MatMul          matmul_3                        
    022 = | RESULT float32  3:1x64x1024          JKJK Concat          /attention/rotary_emb/Concat     | RESULT float32  3:1x64x1024          JKJK Concat          node_Concat_64                  
    023 = | RESULT float32  3:1x64x1024          RMRM Sin             /attention/rotary_emb/Sin        | RESULT float32  3:1x64x1024          RMRM Sin             node_Sin_66                     
    024 = | RESULT float32  4:1x1x64x1024        RMRM Unsqueeze       /attention/Unsqueeze_1           | RESULT float32  4:1x1x64x1024        RMRM Unsqueeze       node_aten_unsqueeze_73_n2       
    025 = | RESULT float32  4:1x1024x1x64        GSEC Transpose       Transpose_token_7_out0           | RESULT float32  4:1x1024x1x64        GSEC Transpose       Transpose_token_7_out0          
    026 = | RESULT float32  3:2x1024x512         NYJH MatMul          /attention/k_proj/MatMul_output_ | RESULT float32  3:2x1024x512         NYJH MatMul          matmul_1                        
    027 = | RESULT float32  4:2x1024x8x64        NYJH Reshape         /attention/Reshape_1_output_0    | RESULT float32  4:2x1024x8x64        NYJH Reshape         view_1                          
    028 = | RESULT float32  4:2x1024x8x32        BESA Split           /attention/Slice_2               | RESULT float32  4:2x1024x8x32        BESA Split           node_Slice_114                  
    029 = | RESULT float32  4:2x1024x8x32        MURI Split           /attention/Slice_3               | RESULT float32  4:2x1024x8x32        MURI Split           node_Slice_125                  
    030 = | RESULT float32  4:2x1024x8x32        OGJS Neg             /attention/Neg_1                 | RESULT float32  4:2x1024x8x32        OGJS Neg             node_aten_neg_126_n0            
    031 = | RESULT float32  4:2x1024x8x64        OKCR Concat          /attention/Concat_1              | RESULT float32  4:2x1024x8x64        OKCR Concat          node_Concat_127                 
    032 = | RESULT float32  4:2x1024x8x64        SWCV Mul             /attention/Mul_3                 | RESULT float32  4:2x1024x8x64        SWCV Mul             node_Mul_128                    
    033 = | RESULT float32  3:1x64x1024          NHNH Cos             /attention/rotary_emb/Cos        | RESULT float32  3:1x64x1024          NHNH Cos             node_Cos_65                     
    034 = | RESULT float32  4:1x1x64x1024        NHNH Unsqueeze       /attention/Unsqueeze             | RESULT float32  4:1x1x64x1024        NHNH Unsqueeze       node_aten_unsqueeze_72_n2       
    035 = | RESULT float32  4:1x1024x1x64        CJYF Transpose       Transpose_token_11_out0          | RESULT float32  4:1x1024x1x64        CJYF Transpose       Transpose_token_11_out0         
    036 = | RESULT float32  4:2x1024x8x64        BUHG Mul             /attention/Mul_2                 | RESULT float32  4:2x1024x8x64        BUHG Mul             node_Mul_103                    
    037 = | RESULT float32  4:2x1024x8x64        TQJB Add             /attention/Add_1                 | RESULT float32  4:2x1024x8x64        TQJB Add             node_Add_129                    
    038 = | RESULT float32  4:2x8x64x1024        CHNW Transpose       /attention/Transpose_3_output_0  | RESULT float32  4:2x8x64x1024        CHNW Transpose       transpose_4                     
    039 = | RESULT float32  4:1x1x1024x64        GSEC Transpose       /attention/Unsqueeze_1_output_0  | RESULT float32  4:1x1x1024x64        GSEC Transpose       unsqueeze_4                     
    040 = | RESULT float32  3:2x1024x512         VKNZ MatMul          /attention/q_proj/MatMul_output_ | RESULT float32  3:2x1024x512         VKNZ MatMul          matmul                          
    041 = | RESULT float32  4:2x1024x8x64        VKNZ Reshape         /attention/Reshape_output_0      | RESULT float32  4:2x1024x8x64        VKNZ Reshape         view                            
    042 = | RESULT float32  4:2x8x1024x64        CDMA Transpose       /attention/Transpose_output_0    | RESULT float32  4:2x8x1024x64        CDMA Transpose       transpose                       
    043 = | RESULT float32  4:2x8x1024x32        QJTJ Split           /attention/Slice_output_0        | RESULT float32  4:2x8x1024x32        QJTJ Split           slice_4                         
    044 = | RESULT float32  4:2x8x1024x32        LUUQ Split           /attention/Slice_1_output_0      | RESULT float32  4:2x8x1024x32        LUUQ Split           slice_5                         
    045 = | RESULT float32  4:2x8x1024x32        PGGK Neg             /attention/Neg_output_0          | RESULT float32  4:2x8x1024x32        PGGK Neg             neg                             
    046 = | RESULT float32  4:2x8x1024x64        FPZU Concat          /attention/Concat_output_0       | RESULT float32  4:2x8x1024x64        FPZU Concat          cat_1                           
    047 = | RESULT float32  4:2x8x1024x64        HSFG Mul             /attention/Mul_1_output_0        | RESULT float32  4:2x8x1024x64        HSFG Mul             mul_3                           
    048 = | RESULT float32  4:1x1x1024x64        CJYF Transpose       /attention/Unsqueeze_output_0    | RESULT float32  4:1x1x1024x64        CJYF Transpose       unsqueeze_3                     
    049 = | RESULT float32  4:2x8x1024x64        YXCQ Mul             /attention/Mul_output_0          | RESULT float32  4:2x8x1024x64        YXCQ Mul             mul_2                           
    050 = | RESULT float32  4:2x8x1024x64        FQHX Add             /attention/Add_output_0          | RESULT float32  4:2x8x1024x64        FQHX Add             add                             
    051 = | RESULT float32  4:2x8x1024x1024      XNEQ FusedMatMul     /attention/Div_output_0          | RESULT float32  4:2x8x1024x1024      XNEQ FusedMatMul     div                             
    052 = | RESULT float32  4:2x1x1024x1024      AAAA Slice           /attention/Slice_4_output_0      | RESULT float32  4:2x1x1024x1024      AAAA Slice           slice_8                         
    053 = | RESULT float32  4:2x8x1024x1024      XNEQ Add             /attention/Add_2_output_0        | RESULT float32  4:2x8x1024x1024      XNEQ Add             add_2                           
    054 = | RESULT float32  4:2x8x1024x1024      OOOO Softmax         /attention/Softmax_output_0      | RESULT float32  4:2x8x1024x1024      OOOO Softmax         val_113                         
    055 = | RESULT float32  3:2x1024x512         GBBL MatMul          /attention/v_proj/MatMul_output_ | RESULT float32  3:2x1024x512         GBBL MatMul          matmul_2                        
    056 = | RESULT float32  4:2x1024x8x64        GBBL Reshape         /attention/Reshape_2_output_0    | RESULT float32  4:2x1024x8x64        GBBL Reshape         view_2                          
    057 = | RESULT float32  4:2x8x1024x64        YIHF Transpose       /attention/Transpose_2_output_0  | RESULT float32  4:2x8x1024x64        YIHF Transpose       transpose_2                     
    058 = | RESULT float32  4:2x8x1024x64        UGGH MatMul          /attention/MatMul_1_output_0     | RESULT float32  4:2x8x1024x64        UGGH MatMul          matmul_5                        
    059 = | RESULT float32  4:2x1024x8x64        ZBDK Transpose       /attention/Transpose_4_output_0  | RESULT float32  4:2x1024x8x64        ZBDK Transpose       transpose_5                     
    060 = | RESULT float32  3:2x1024x512         ZBDK Reshape         /attention/Reshape_3_output_0    | RESULT float32  3:2x1024x512         ZBDK Reshape         view_3                          
    061 = | RESULT float32  3:2x1024x512         UPUU MatMul          170                              | RESULT float32  3:2x1024x512         UPUU MatMul          matmul_6                        
    062 = | OUTPUT float32  3:2x1024x512         UPUU                 170                              | OUTPUT float32  3:2x1024x512         UPUU                 matmul_6                        




.. GENERATED FROM PYTHON SOURCE LINES 296-297

See :ref:`l-long-outputs-llama-diff-export` for a better view.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 10.695 seconds)


.. _sphx_glr_download_auto_examples_plot_llama_diff_export_301.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_llama_diff_export_301.ipynb <plot_llama_diff_export_301.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_llama_diff_export_301.py <plot_llama_diff_export_301.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_llama_diff_export_301.zip <plot_llama_diff_export_301.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
