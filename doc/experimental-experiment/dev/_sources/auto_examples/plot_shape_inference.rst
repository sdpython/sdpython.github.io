
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_shape_inference.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_shape_inference.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_shape_inference.py:


.. _l-plot-shape_inference-201:

===========================
201: Better shape inference
===========================


A simple model
==============

.. GENERATED FROM PYTHON SOURCE LINES 12-43

.. code-block:: Python


    import numpy as np
    import onnx
    import onnx.helper as oh
    import onnx.shape_inference as osh
    from onnx.reference import ReferenceEvaluator
    from experimental_experiment.xshape.shape_builder_impl import BasicShapeBuilder

    model = oh.make_model(
        oh.make_graph(
            [
                oh.make_node("Concat", ["X", "Y"], ["xy"], axis=1),
                oh.make_node("Split", ["xy"], ["S1", "S2"], axis=1, num_outputs=2),
                oh.make_node("Concat", ["S2", "S1"], ["zs"], axis=1),
                oh.make_node("Relu", ["zs"], ["Z"]),
            ],
            "dummy",
            [
                oh.make_tensor_value_info("X", onnx.TensorProto.FLOAT, ["a", "b"]),
                oh.make_tensor_value_info("Y", onnx.TensorProto.FLOAT, ["a", "c"]),
            ],
            [oh.make_tensor_value_info("Z", onnx.TensorProto.FLOAT, ["a", "e"])],
        ),
        opset_imports=[oh.make_opsetid("", 18)],
        ir_version=9,
    )

    feeds = dict(X=np.random.rand(3, 4).astype(np.float32), Y=np.random.rand(3, 6).astype(np.float32))
    ref = ReferenceEvaluator(model)
    expected = ref.run(None, feeds)








.. GENERATED FROM PYTHON SOURCE LINES 44-46

Classic Shape Inference
=======================

.. GENERATED FROM PYTHON SOURCE LINES 46-54

.. code-block:: Python


    model2 = osh.infer_shapes(model)

    for info in model2.graph.value_info:
        t = info.type.tensor_type
        shape = tuple(d.dim_param or d.dim_value for d in t.shape.dim)
        print(f"{info.name}: {t.elem_type}:{shape}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    xy: 1:('a', 'unk__0')
    S1: 1:('a', 'unk__1')
    S2: 1:('a', 'unk__2')
    zs: 1:('a', 'unk__3')




.. GENERATED FROM PYTHON SOURCE LINES 55-60

Basic Shape Inference
=====================

The algorithm infer shapes wherever the output shape of a node does not
depend on the content even. The evaluation relies on :mod:`ast`.

.. GENERATED FROM PYTHON SOURCE LINES 60-70

.. code-block:: Python


    builder = BasicShapeBuilder()
    builder.run_model(model)
    builder.update_shapes(model)

    for info in model.graph.value_info:
        t = info.type.tensor_type
        shape = tuple(d.dim_param or d.dim_value for d in t.shape.dim)
        print(f"{info.name}: {t.elem_type}:{shape}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    xy: 1:('a', 'b+c')
    S1: 1:('a', 'CeilToInt(b+c,2)')
    S2: 1:('a', 'b+c-CeilToInt(b+c,2)')
    zs: 1:('a', 'b+c')




.. GENERATED FROM PYTHON SOURCE LINES 71-75

Evaluate Expressions
====================

We can also evaluate every expression without evaluating the model itself.

.. GENERATED FROM PYTHON SOURCE LINES 75-80

.. code-block:: Python


    dimensions = dict(a=3, b=4, c=6)
    for name in ["X", "Y", "xy", "S1", "S2", "zs", "Z"]:
        sh = builder.evaluate_shape(name, dimensions)
        print(f"shape of {name!r} is {sh}")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    shape of 'X' is (3, 4)
    shape of 'Y' is (3, 6)
    shape of 'xy' is (3, 10)
    shape of 'S1' is (3, 5)
    shape of 'S2' is (3, 5)
    shape of 'zs' is (3, 10)
    shape of 'Z' is (3, 10)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.012 seconds)


.. _sphx_glr_download_auto_examples_plot_shape_inference.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_shape_inference.ipynb <plot_shape_inference.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_shape_inference.py <plot_shape_inference.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_shape_inference.zip <plot_shape_inference.zip>`


.. include:: plot_shape_inference.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
