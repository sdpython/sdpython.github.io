
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_rewrite_101.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_rewrite_101.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_rewrite_101.py:


.. _l-plot-rewrite-101:

=========================
101: Onnx Model Rewriting
=========================

This example shows how to rewrite a graph using a pattern.

A model
=======

.. GENERATED FROM PYTHON SOURCE LINES 13-47

.. code-block:: Python


    from typing import List, Optional
    import onnx.helper as oh
    from onnx import NodeProto, TensorProto
    from experimental_experiment.helpers import pretty_onnx
    from onnx_array_api.plotting.graphviz_helper import plot_dot
    from experimental_experiment.xbuilder.graph_builder import (
        GraphBuilder,
        OptimizationOptions,
    )
    from experimental_experiment.xoptim import EasyPatternOptimization


    proto = oh.make_model(
        oh.make_graph(
            [
                oh.make_node("Sigmoid", ["Y"], ["sy"]),
                oh.make_node("Mul", ["Y", "sy"], ["ysy"]),
                oh.make_node("Mul", ["X", "ysy"], ["final"]),
            ],
            "nd",
            [
                oh.make_tensor_value_info("X", TensorProto.FLOAT, [1, "b", "c"]),
                oh.make_tensor_value_info("Y", TensorProto.FLOAT, ["a", "b", "c"]),
            ],
            [oh.make_tensor_value_info("final", TensorProto.FLOAT, ["a", "b", "c"])],
        ),
        opset_imports=[oh.make_opsetid("", 18)],
        ir_version=9,
    )


    print(pretty_onnx(proto))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    opset: domain='' version=18
    input: name='X' type=dtype('float32') shape=[1, 'b', 'c']
    input: name='Y' type=dtype('float32') shape=['a', 'b', 'c']
    Sigmoid(Y) -> sy
      Mul(Y, sy) -> ysy
        Mul(X, ysy) -> final
    output: name='final' type=dtype('float32') shape=['a', 'b', 'c']




.. GENERATED FROM PYTHON SOURCE LINES 48-49

And visually.

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: Python


    plot_dot(proto)




.. image-sg:: /auto_examples/images/sphx_glr_plot_rewrite_101_001.png
   :alt: plot rewrite 101
   :srcset: /auto_examples/images/sphx_glr_plot_rewrite_101_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 53-55

The pattern
===========

.. GENERATED FROM PYTHON SOURCE LINES 55-65

.. code-block:: Python



    class MulMulSigmoidPattern(EasyPatternOptimization):
        def match_pattern(self, g: GraphBuilder, X, Y):
            return g.op.Mul(X, g.op.Mul(Y, g.op.Sigmoid(Y)))

        def apply_pattern(self, g: GraphBuilder, X, Y):
            return g.anyop.MulMulSigmoid(X, Y, domain="onnx_extended.ortops.optim.cuda")









.. GENERATED FROM PYTHON SOURCE LINES 66-68

Optimization
============

.. GENERATED FROM PYTHON SOURCE LINES 68-81

.. code-block:: Python


    gr = GraphBuilder(
        proto,
        infer_shapes_options=True,
        optimization_options=OptimizationOptions(
            patterns=[MulMulSigmoidPattern(verbose=1)],
            verbose=1,  # a higher value increases the verbosity when optimizations for patterns
        ),
    )

    new_proto = gr.to_onnx()
    print(pretty_onnx(new_proto))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [GraphBuilder-CRG.optimize] start with 3 nodes
    [GraphBuilder-CRG.optimize] #patterns=1
    [GraphBuilderPatternOptimization-CRG.optimize] start with 3 nodes, 0 initializers, 1 patterns, priorities=[0]
    [GraphBuilderPatternOptimization-CRG.optimize] iteration 0: 3 nodes, priority=0
    [GraphBuilderPatternOptimization-CRG.optimize] applies 1 matches, [0]=MatchResult: MulMulSigmoidPattern replaces ['Sigmoid', 'Mul', 'Mul'] - time=0.001 | max_time=MulMulSigmoidPattern:0.001
    [GraphBuilderPatternOptimization-CRG.optimize] iteration 1: 1 nodes, priority=0
    [GraphBuilderPatternOptimization-CRG.optimize] stops current_priority_index=1, priorities=[0]
    [GraphBuilderPatternOptimization-CRG.optimize] done after 2 iterations with 1 nodes in 0.002
    [GraphBuilder-CRG.optimize] done with 1 nodes in 0.002
    opset: domain='' version=18
    opset: domain='onnx_extended.ortops.optim.cuda' version=1
    input: name='X' type=dtype('float32') shape=[1, 'b', 'c']
    input: name='Y' type=dtype('float32') shape=['a', 'b', 'c']
    MulMulSigmoid[onnx_extended.ortops.optim.cuda](X, Y) -> final
    output: name='final' type=dtype('float32') shape=['a', 'b', 'c']




.. GENERATED FROM PYTHON SOURCE LINES 82-83

And visually.

.. GENERATED FROM PYTHON SOURCE LINES 83-86

.. code-block:: Python


    plot_dot(new_proto)




.. image-sg:: /auto_examples/images/sphx_glr_plot_rewrite_101_002.png
   :alt: plot rewrite 101
   :srcset: /auto_examples/images/sphx_glr_plot_rewrite_101_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 87-92

Filtering
=========

Let's assume now we want to apply the pattern only when the
shapes are identical.

.. GENERATED FROM PYTHON SOURCE LINES 92-137

.. code-block:: Python



    class MulMulSigmoidPattern2(EasyPatternOptimization):
        def match_pattern(self, g: GraphBuilder, X, Y):
            return g.op.Mul(X, g.op.Mul(Y, g.op.Sigmoid(Y)))

        def apply_pattern(self, g: GraphBuilder, X, Y):
            return g.anyop.MulMulSigmoid(X, Y, domain="onnx_extended.ortops.optim.cuda")

        def validate_mapping(
            self,
            g: GraphBuilder,
            deleted_nodes: List[NodeProto],
            pattern_nodes: Optional[List[NodeProto]] = None,
        ) -> bool:
            for node in deleted_nodes:
                if (
                    node.op_type == "Mul"
                    and g.has_shape(node.input[0])
                    and g.has_shape(node.input[1])
                ):
                    sh1 = g.get_shape(node.input[0])
                    sh2 = g.get_shape(node.input[1])
                    if sh1 != sh2:
                        if self.verbose > 0:
                            print(
                                f"[MulMulSigmoidPattern2.validate_mapping] "
                                f"match not valid because shapes are different"
                                f"{node.input[0]}:{sh1} != {node.input[1]}:{sh2}"
                            )
                        return False
            return True


    gr = GraphBuilder(
        proto,
        infer_shapes_options=True,
        optimization_options=OptimizationOptions(
            patterns=[MulMulSigmoidPattern2(verbose=1)],
            verbose=0,
        ),
    )

    new_proto = gr.to_onnx()
    print(pretty_onnx(new_proto))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [MulMulSigmoidPattern2.validate_mapping] match not valid because shapes are differentX:(1, 'b', 'c') != ysy:('a', 'b', 'c')
    opset: domain='' version=18
    input: name='X' type=dtype('float32') shape=[1, 'b', 'c']
    input: name='Y' type=dtype('float32') shape=['a', 'b', 'c']
    Sigmoid(Y) -> sy
      Mul(Y, sy) -> ysy
        Mul(X, ysy) -> final
    output: name='final' type=dtype('float32') shape=['a', 'b', 'c']





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.214 seconds)


.. _sphx_glr_download_auto_examples_plot_rewrite_101.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_rewrite_101.ipynb <plot_rewrite_101.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_rewrite_101.py <plot_rewrite_101.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_rewrite_101.zip <plot_rewrite_101.zip>`


.. include:: plot_rewrite_101.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
