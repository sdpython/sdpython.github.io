
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_torch_dort.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_torch_dort.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_torch_dort.py:


Evaluate DORT
=============

It compares DORT to eager mode and the default backend.

To run the script:

::

    python _doc/examples/plot_torch_dort --help

Some helpers
++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 16-86

.. code-block:: Python

    import warnings

    try:
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            import onnxruntime

            has_cuda = "CUDAExecutionProvider" in onnxruntime.get_available_providers()
    except ImportError:
        print("onnxruntime not available.")
        import sys

        sys.exit(0)

    import torch._dynamo
    import contextlib
    import itertools
    import os
    import gc
    import platform

    # import pickle
    import pprint
    import multiprocessing
    import time
    import cProfile
    import pstats
    import io
    import logging
    from pstats import SortKey

    import numpy as np
    import matplotlib.pyplot as plt
    import pandas
    import onnx
    from onnx_array_api.profiling import profile2graph
    import torch
    from torch import nn
    import torch.nn.functional as F
    import experimental_experiment
    from experimental_experiment.plotting.memory import memory_peak_plot
    from experimental_experiment.ext_test_case import (
        get_parsed_args,
        measure_time,
        get_figure,
    )
    from experimental_experiment.memory_peak import start_spying_on
    from tqdm import tqdm

    has_cuda = has_cuda and torch.cuda.is_available()
    logging.disable(logging.ERROR)


    def system_info():
        obs = {}
        obs["processor"] = platform.processor()
        obs["cores"] = multiprocessing.cpu_count()
        try:
            obs["cuda"] = 1 if torch.cuda.is_available() else 0
            obs["cuda_count"] = torch.cuda.device_count()
            obs["cuda_name"] = torch.cuda.get_device_name()
            obs["cuda_capa"] = torch.cuda.get_device_capability()
        except (RuntimeError, AssertionError):
            # no cuda
            pass
        return obs


    pprint.pprint(system_info())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'cores': 8,
     'cuda': 1,
     'cuda_capa': (6, 1),
     'cuda_count': 1,
     'cuda_name': 'NVIDIA GeForce GTX 1060',
     'processor': 'x86_64'}




.. GENERATED FROM PYTHON SOURCE LINES 87-88

Scripts arguments

.. GENERATED FROM PYTHON SOURCE LINES 88-117

.. code-block:: Python



    script_args = get_parsed_args(
        "plot_torch_dort",
        description=__doc__,
        scenarios={
            "small": "small model to test",
            "middle": "55Mb model",
            "large": "1Gb model",
        },
        warmup=5,
        repeat=5,
        repeat1=(1, "repeat for the first iteration"),
        maxtime=(
            2,
            "maximum time to run a model to measure the computation time, "
            "it is 0.1 when scenario is small",
        ),
        expose="scenarios,repeat,repeat1,warmup",
    )

    if script_args.scenario in (None, "small"):
        script_args.maxtime = 0.1
    print(f"scenario={script_args.scenario or 'small'}")
    print(f"warmup={script_args.warmup}")
    print(f"repeat={script_args.repeat}")
    print(f"repeat1={script_args.repeat1}")
    print(f"maxtime={script_args.maxtime}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    scenario=small
    warmup=5
    repeat=5
    repeat1=1
    maxtime=0.1




.. GENERATED FROM PYTHON SOURCE LINES 118-122

The model
+++++++++

A simple model to convert.

.. GENERATED FROM PYTHON SOURCE LINES 122-213

.. code-block:: Python



    class MyModelClass(nn.Module):
        def __init__(self, scenario=script_args.scenario):
            super(MyModelClass, self).__init__()
            if scenario == "middle":
                self.large = False
                self.conv1 = nn.Conv2d(1, 32, 5)
                # self.conv2 = nn.Conv2d(128, 16, 5)
                self.fc1 = nn.Linear(30752, 1024)
                self.fcs = []
                self.fc2 = nn.Linear(1024, 128)
                self.fc3 = nn.Linear(128, 10)
            elif scenario in (None, "small"):
                self.large = False
                self.conv1 = nn.Conv2d(1, 16, 5)
                # self.conv2 = nn.Conv2d(16, 16, 5)
                self.fc1 = nn.Linear(144, 512)
                self.fcs = []
                self.fc2 = nn.Linear(512, 128)
                self.fc3 = nn.Linear(128, 10)
            elif scenario in (None, "large"):
                self.large = True
                self.conv1 = nn.Conv2d(1, 32, 5)
                # self.conv2 = nn.Conv2d(128, 16, 5)
                self.fc1 = nn.Linear(30752, 4096)
                # torch script does not support loops.
                self.fca = nn.Linear(4096, 4096)
                self.fcb = nn.Linear(4096, 4096)
                self.fcc = nn.Linear(4096, 4096)
                self.fcd = nn.Linear(4096, 4096)
                self.fce = nn.Linear(4096, 4096)
                self.fcf = nn.Linear(4096, 4096)
                self.fcg = nn.Linear(4096, 4096)
                self.fch = nn.Linear(4096, 4096)
                self.fci = nn.Linear(4096, 4096)
                # end of the unfolded loop.
                self.fc2 = nn.Linear(4096, 128)
                self.fc3 = nn.Linear(128, 10)
            else:
                raise ValueError(f"Unsupported scenario={scenario!r}.")

        def forward(self, x):
            x = F.max_pool2d(F.relu(self.conv1(x)), (4, 4))
            # x = F.max_pool2d(F.relu(self.conv2(x)), 2)
            x = torch.flatten(x, 1)
            x = F.relu(self.fc1(x))
            if self.large:
                # loop
                x = F.relu(self.fca(x))
                x = F.relu(self.fcb(x))
                x = F.relu(self.fcc(x))
                x = F.relu(self.fcd(x))
                x = F.relu(self.fce(x))
                x = F.relu(self.fcf(x))
                x = F.relu(self.fcg(x))
                x = F.relu(self.fch(x))
                x = F.relu(self.fci(x))
                # end of the loop
            x = F.relu(self.fc2(x))
            y = self.fc3(x)
            return y


    def create_model_and_input(scenario=script_args.scenario):
        if scenario == "middle":
            shape = [1, 1, 128, 128]
        elif scenario in (None, "small"):
            shape = [1, 1, 16, 16]
        elif scenario == "large":
            shape = [1, 1, 128, 128]
        else:
            raise ValueError(f"Unsupported scenario={scenario!r}.")
        input_tensor = torch.rand(*shape).to(torch.float32)
        model = MyModelClass(scenario=scenario)
        assert model(input_tensor) is not None
        return model, input_tensor


    def torch_model_size(model):
        size_model = 0
        for param in model.parameters():
            size = param.numel() * torch.finfo(param.data.dtype).bits / 8
            size_model += size
        return size_model


    model, input_tensor = create_model_and_input()
    model_size = torch_model_size(model)
    print(f"model size={model_size / 2 ** 20} Mb")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    model size=0.5401992797851562 Mb




.. GENERATED FROM PYTHON SOURCE LINES 214-216

Backends
++++++++

.. GENERATED FROM PYTHON SOURCE LINES 216-259

.. code-block:: Python



    def get_torch_eager(model, *args):
        def my_compiler(gm, example_inputs):
            return gm.forward

        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, fullgraph=True, backend=my_compiler)
                optimized_mod(*args)
                return optimized_mod


    def get_torch_default(model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, fullgraph=True, mode="reduce-overhead")
                optimized_mod(*args)
                return optimized_mod


    def get_torch_dort(model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, backend="onnxrt", fullgraph=True)
                optimized_mod(*args)
                return optimized_mod


    def get_torch_opti(model, *args):
        with contextlib.redirect_stdout(io.StringIO()):
            os.environ["ONNX_OPTIMIZER"] = "1"
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                optimized_mod = torch.compile(model, backend="onnxrt", fullgraph=True)
                optimized_mod(*args)
                os.environ["ONNX_OPTIMIZER"] = "0"
                return optimized_mod









.. GENERATED FROM PYTHON SOURCE LINES 260-261

Let's check they are working.

.. GENERATED FROM PYTHON SOURCE LINES 261-288

.. code-block:: Python


    export_functions = [
        get_torch_eager,
        get_torch_default,
        get_torch_dort,
        # get_torch_opti,
    ]

    exporters = {f.__name__.replace("get_", ""): f for f in export_functions}

    supported_exporters = {}
    for k, v in exporters.items():
        print(f"run function {k}")
        filename = f"plot_torch_dort_{k}.onnx"
        torch._dynamo.reset()
        model, input_tensor = create_model_and_input()
        try:
            v(model, input_tensor)
        except Exception as e:
            print(f"skipped due to {str(e)[:1000]}")
            continue
        supported_exporters[k] = v
        del model
        gc.collect()
        time.sleep(1)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run function torch_eager
    run function torch_default
    run function torch_dort




.. GENERATED FROM PYTHON SOURCE LINES 289-291

Compile and Memory
++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 291-343

.. code-block:: Python



    def flatten(ps):
        obs = ps["cpu"].to_dict(unit=2**20)
        if "gpus" in ps:
            for i, g in enumerate(ps["gpus"]):
                for k, v in g.to_dict(unit=2**20).items():
                    obs[f"gpu{i}_{k}"] = v
        return obs


    data = []

    for k, v in supported_exporters.items():
        print(f"run compile for memory {k} on cpu")
        filename = f"plot_torch_dort_{k}.onnx"
        if has_cuda:
            torch.cuda.set_device(0)
        torch._dynamo.reset()
        # CPU
        model, input_tensor = create_model_and_input()
        stat = start_spying_on(cuda=1 if has_cuda else 0)
        v(model, input_tensor)
        obs = flatten(stat.stop())
        print("done.")
        obs.update(dict(export=k, p="cpu"))
        data.append(obs)
        del model
        gc.collect()
        time.sleep(1)

        if not has_cuda:
            continue
        if k in {"torch_default"}:
            print(f"skip compile for memory {k} on cuda")
            continue
        torch._dynamo.reset()
        # CUDA
        model, input_tensor = create_model_and_input()
        model = model.cuda()
        input_tensor = input_tensor.cuda()
        print(f"run compile for memory {k} on cuda")
        stat = start_spying_on(cuda=1 if has_cuda else 0)
        v(model, input_tensor)
        obs = flatten(stat.stop())
        print("done.")
        obs.update(dict(export=k, p="cuda"))
        data.append(obs)
        del model
        gc.collect()
        time.sleep(1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run compile for memory torch_eager on cpu
    done.
    run compile for memory torch_eager on cuda
    done.
    run compile for memory torch_default on cpu
    done.
    skip compile for memory torch_default on cuda
    run compile for memory torch_dort on cpu
    done.
    run compile for memory torch_dort on cuda
    done.




.. GENERATED FROM PYTHON SOURCE LINES 344-345

The result.

.. GENERATED FROM PYTHON SOURCE LINES 345-362

.. code-block:: Python

    df1 = pandas.DataFrame(data)
    df1.to_csv("plot_torch_dort_1_memory.csv", index=False)
    df1.to_excel("plot_torch_dort_1_memory.xlsx", index=False)
    print(df1)

    for p in ["cpu", "cuda"]:
        if not has_cuda and p == "cuda":
            continue
        ax = memory_peak_plot(
            df1[df1["p"] == p],
            key=("export",),
            bars=[model_size * i / 2**20 for i in range(1, 5)],
            suptitle=f"Memory Consumption of the Compilation on {p}\n"
            f"model size={model_size / 2**20:1.0f} Mb",
        )
        get_figure(ax).savefig(f"plot_torch_dort_1_memory_{p}.png")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_001.png
         :alt: Memory Consumption of the Compilation on cpu model size=1 Mb, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_002.png
         :alt: Memory Consumption of the Compilation on cuda model size=1 Mb, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              peak         mean         n  ...    gpu0_end         export     p
    0  2237.472656  2237.459375  0.000010  ...  498.269531    torch_eager   cpu
    1  3231.246094  2649.958333  0.000564  ...  770.269531    torch_eager  cuda
    2  3209.824219  3208.832242  0.000071  ...  770.269531  torch_default   cpu
    3  3209.871094  3209.842142  0.000032  ...  770.269531     torch_dort   cpu
    4  3441.015625  3301.095796  0.000160  ...  846.269531     torch_dort  cuda

    [5 rows x 12 columns]




.. GENERATED FROM PYTHON SOURCE LINES 363-365

dort first iteration speed
++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 365-438

.. code-block:: Python


    data = []

    for k, v in supported_exporters.items():
        print(f"run dort cpu {k}: {script_args.repeat1}")
        times = []
        for i in range(int(script_args.repeat1)):
            model, input_tensor = create_model_and_input()
            torch._dynamo.reset()
            if k == "opti":
                os.environ["ONNX_OPTIMIZER"] = "1"
            begin = time.perf_counter()
            v(model, input_tensor)
            duration = time.perf_counter() - begin
            if k == "opti":
                os.environ["ONNX_OPTIMIZER"] = "0"
            times.append(duration)
            del model
            gc.collect()
            time.sleep(1)

        print(f"done: {times[-1]}")
        data.append(
            dict(
                export=k,
                time=np.mean(times),
                min=min(times),
                max=max(times),
                first=times[0],
                last=times[-1],
                std=np.std(times),
                p="cpu",
            )
        )

        if not has_cuda:
            continue
        if k in {"torch_dort", "torch_default"}:
            print(f"skip dort cuda {k}: {script_args.repeat1}")
            continue
        print(f"run dort cuda {k}: {script_args.repeat1}")
        times = []
        for i in range(int(script_args.repeat1)):
            model, input_tensor = create_model_and_input()
            model = model.cuda()
            input_tensor = input_tensor.cuda()
            torch._dynamo.reset()
            if k == "opti":
                os.environ["ONNX_OPTIMIZER"] = "1"
            begin = time.perf_counter()
            v(model, input_tensor)
            duration = time.perf_counter() - begin
            if k == "opti":
                os.environ["ONNX_OPTIMIZER"] = "0"
            times.append(duration)
            del model
            gc.collect()
            time.sleep(1)

        print(f"done: {times[-1]}")
        data.append(
            dict(
                export=k,
                time=np.mean(times),
                min=min(times),
                max=max(times),
                first=times[0],
                last=times[-1],
                std=np.std(times),
                p="cuda",
            )
        )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run dort cpu torch_eager: 1
    done: 0.04843570000048203
    run dort cuda torch_eager: 1
    done: 0.05946849999963888
    run dort cpu torch_default: 1
    done: 0.6832434000007197
    skip dort cuda torch_default: 1
    run dort cpu torch_dort: 1
    done: 0.37028580000151123
    skip dort cuda torch_dort: 1




.. GENERATED FROM PYTHON SOURCE LINES 439-440

The result.

.. GENERATED FROM PYTHON SOURCE LINES 440-451

.. code-block:: Python

    df1 = pandas.DataFrame(data)
    df1.to_csv("plot_torch_dort_1_time.csv", index=False)
    df1.to_excel("plot_torch_dort_1_time.xlsx", index=False)
    print(df1)

    fig, ax = plt.subplots(1, 1)
    dfi = df1[["export", "p", "time", "std"]].set_index(["export", "p"])
    dfi["time"].plot.bar(ax=ax, title="Compilation time", yerr=dfi["std"], rot=30)
    fig.tight_layout()
    fig.savefig("plot_torch_dort_1_time.png")




.. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_003.png
   :alt: Compilation time
   :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              export      time       min       max     first      last  std     p
    0    torch_eager  0.048436  0.048436  0.048436  0.048436  0.048436  0.0   cpu
    1    torch_eager  0.059468  0.059468  0.059468  0.059468  0.059468  0.0  cuda
    2  torch_default  0.683243  0.683243  0.683243  0.683243  0.683243  0.0   cpu
    3     torch_dort  0.370286  0.370286  0.370286  0.370286  0.370286  0.0   cpu




.. GENERATED FROM PYTHON SOURCE LINES 452-454

Compilation Profiling
+++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 454-526

.. code-block:: Python



    def clean_text(text):
        pathes = [
            os.path.abspath(
                os.path.normpath(os.path.join(os.path.dirname(torch.__file__), ".."))
            ),
            os.path.abspath(
                os.path.normpath(os.path.join(os.path.dirname(onnx.__file__), ".."))
            ),
            os.path.abspath(
                os.path.normpath(
                    os.path.join(os.path.dirname(experimental_experiment.__file__), "..")
                )
            ),
        ]
        for p in pathes:
            text = text.replace(p, "")
        text = text.replace("experimental_experiment", "experimental_experiment".upper())
        return text


    def profile_function(
        name, export_function, with_args=True, verbose=False, suffix="export"
    ):
        if verbose:
            print(f"profile {name}: {export_function}")
        if with_args:
            model, input_tensor = create_model_and_input()
            pr = cProfile.Profile()
            pr.enable()
            for i in range(int(script_args.repeat1)):
                export_function(model, input_tensor)
            pr.disable()
        else:
            pr = cProfile.Profile()
            pr.enable()
            for i in range(int(script_args.repeat1)):
                export_function()
            pr.disable()
        s = io.StringIO()
        sortby = SortKey.CUMULATIVE
        ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
        ps.print_stats()
        # with open(f"plot_torch_dort_profile_{name}_{suffix}.pickle", "wb") as f:
        #     pickle.dump(ps, f)

        raw = s.getvalue()
        text = "\n".join(raw.split("\n")[:200])
        if verbose:
            print(text)
        with open(f"plot_torch_dort_profile_{name}_{suffix}.txt", "w") as f:
            f.write(raw)

        root, nodes = profile2graph(ps, clean_text=clean_text)
        text = root.to_text()
        with open(f"plot_torch_dort_profile_{name}_{suffix}_h.txt", "w") as f:
            f.write(text)
        if verbose:
            print("done.")


    model, input_tensor = create_model_and_input()


    def function_to_profile(model=model, input_tensor=input_tensor):
        return get_torch_dort(model, input_tensor)


    profile_function("dort", function_to_profile, verbose=True, suffix="1")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    profile dort: <function function_to_profile at 0x7f6747340d30>
             559620 function calls (534282 primitive calls) in 0.967 seconds

       Ordered by: cumulative time

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000    1.000    1.000 /home/xadupre/github/experimental-experiment/_doc/examples/plot_torch_dort.py:519(function_to_profile)
            1    0.000    0.000    1.000    1.000 /home/xadupre/github/experimental-experiment/_doc/examples/plot_torch_dort.py:239(get_torch_dort)
         15/1    0.000    0.000    0.998    0.998 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/module.py:1507(_wrapped_call_impl)
         15/1    0.000    0.000    0.998    0.998 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/module.py:1513(_call_impl)
          4/1    0.000    0.000    0.998    0.998 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py:385(_fn)
            1    0.000    0.000    0.839    0.839 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py:531(catch_errors)
            1    0.000    0.000    0.839    0.839 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:274(_convert_frame_assert)
            1    0.000    0.000    0.838    0.838 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:433(_compile)
          3/1    0.000    0.000    0.838    0.838 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:240(time_wrapper)
            1    0.000    0.000    0.838    0.838 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:513(compile_inner)
            1    0.000    0.000    0.826    0.826 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/bytecode_transformation.py:1025(transform_code_object)
            1    0.000    0.000    0.823    0.823 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:136(_fn)
            1    0.000    0.000    0.823    0.823 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py:466(transform)
            1    0.000    0.000    0.819    0.819 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:2097(run)
            1    0.000    0.000    0.819    0.819 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:773(run)
           44    0.001    0.000    0.819    0.019 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:671(step)
            1    0.000    0.000    0.718    0.718 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:2202(RETURN_VALUE)
            1    0.000    0.000    0.718    0.718 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/output_graph.py:803(compile_subgraph)
            1    0.000    0.000    0.717    0.717 /usr/lib/python3.10/contextlib.py:76(inner)
            1    0.000    0.000    0.717    0.717 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/output_graph.py:1028(compile_and_call_fx_graph)
            1    0.000    0.000    0.711    0.711 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/output_graph.py:1109(call_user_compiler)
          2/1    0.000    0.000    0.711    0.711 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/repro/after_dynamo.py:59(debug_wrapper)
            1    0.000    0.000    0.711    0.711 /home/xadupre/.local/lib/python3.10/site-packages/torch/__init__.py:1735(__call__)
            1    0.000    0.000    0.711    0.711 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:1041(torch_compile_backend)
            1    0.000    0.000    0.711    0.711 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:939(__call__)
            1    0.000    0.000    0.711    0.711 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/backends/common.py:16(compiler_fn)
            1    0.000    0.000    0.710    0.710 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/aot_autograd.py:790(aot_module_simplified)
            1    0.000    0.000    0.709    0.709 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/aot_autograd.py:385(create_aot_dispatcher_function)
            1    0.000    0.000    0.605    0.605 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/runtime_wrappers.py:394(aot_wrapper_dedupe)
            1    0.000    0.000    0.605    0.605 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/runtime_wrappers.py:613(aot_wrapper_synthetic_base)
            1    0.000    0.000    0.604    0.604 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/jit_compile_runtime_wrappers.py:144(aot_dispatch_autograd)
          3/2    0.000    0.000    0.543    0.271 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/external_utils.py:23(inner)
     1186/577    0.004    0.000    0.462    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_stats.py:15(wrapper)
          282    0.012    0.000    0.427    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/functional_tensor.py:246(__torch_dispatch__)
            1    0.000    0.000    0.403    0.403 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/dispatch_and_compile_graph.py:120(aot_dispatch_autograd_graph)
            1    0.000    0.000    0.385    0.385 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/dispatch_and_compile_graph.py:31(_create_graph)
            1    0.000    0.000    0.385    0.385 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:942(wrapped)
            1    0.000    0.000    0.384    0.384 /home/xadupre/.local/lib/python3.10/site-packages/torch/_compile.py:20(inner)
            1    0.000    0.000    0.384    0.384 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:498(dispatch_trace)
            1    0.000    0.000    0.371    0.371 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:724(trace)
            1    0.000    0.000    0.366    0.366 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:711(flatten_fn)
            1    0.000    0.000    0.366    0.366 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:521(wrapped)
      879/675    0.006    0.000    0.340    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1473(__torch_dispatch__)
            1    0.000    0.000    0.338    0.338 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:466(joint_helper)
            1    0.000    0.000    0.338    0.338 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:348(_functionalized_f_helper)
      879/675    0.029    0.000    0.331    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1505(dispatch)
            1    0.000    0.000    0.319    0.319 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:249(inner_fn_with_anomaly)
            1    0.000    0.000    0.319    0.319 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:184(inner_fn)
            4    0.001    0.000    0.272    0.068 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:105(run)
      263/242    0.002    0.000    0.249    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:605(__torch_dispatch__)
      263/242    0.001    0.000    0.241    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:636(inner_torch_dispatch)
           76    0.001    0.000    0.234    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:183(run_node)
        69/54    0.004    0.000    0.233    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:279(proxy_call)
     1341/820    0.003    0.000    0.215    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_ops.py:568(__call__)
            1    0.000    0.000    0.209    0.209 /home/xadupre/.local/lib/python3.10/site-packages/torch/autograd/__init__.py:278(grad)
            1    0.000    0.000    0.208    0.208 /home/xadupre/.local/lib/python3.10/site-packages/torch/autograd/graph.py:685(_engine_run_backward)
            1    0.003    0.003    0.208    0.208 {method 'run_backward' of 'torch._C._EngineBase' objects}
    1191/1008    0.006    0.000    0.197    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:724(tree_map)
            2    0.000    0.000    0.177    0.088 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:594(functional_call)
            1    0.001    0.001    0.169    0.169 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:619(min_cut_rematerialization_partition)
      296/170    0.001    0.000    0.162    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_prims_common/wrappers.py:242(_fn)
            1    0.000    0.000    0.159    0.159 /home/xadupre/github/experimental-experiment/_doc/examples/plot_torch_dort.py:164(forward)
            1    0.000    0.000    0.159    0.159 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/aot_autograd.py:899(forward)
          3/1    0.000    0.000    0.159    0.159 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/utils.py:80(g)
            1    0.000    0.000    0.159    0.159 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/runtime_wrappers.py:75(runtime_wrapper)
          2/1    0.000    0.000    0.159    0.159 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/utils.py:97(call_func_at_runtime_with_args)
            1    0.000    0.000    0.159    0.159 /home/xadupre/.local/lib/python3.10/site-packages/torch/autograd/function.py:537(apply)
            1    0.000    0.000    0.159    0.159 {built-in method apply}
            1    0.000    0.000    0.159    0.159 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/jit_compile_runtime_wrappers.py:390(forward)
          2/1    0.000    0.000    0.159    0.159 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph_module.py:736(call_wrapped)
            1    0.000    0.000    0.159    0.159 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph_module.py:299(__call__)
            1    0.000    0.000    0.159    0.159 <eval_with_key>.173:4(forward)
            1    0.000    0.000    0.158    0.158 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:714(_ort_acclerated_call)
    5721/1418    0.029    0.000    0.153    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:599(unflatten)
           44    0.000    0.000    0.131    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:255(call_function)
      131/123    0.003    0.000    0.122    0.001 {method 'detach' of 'torch._C.TensorBase' objects}
    11968/5633    0.042    0.000    0.119    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:687(map_aggregate)
         1834    0.003    0.000    0.116    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:664(tree_flatten)
    6126/1834    0.023    0.000    0.112    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:643(_tree_flatten_helper)
          755    0.003    0.000    0.112    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:899(tree_map_only)
            1    0.000    0.000    0.109    0.109 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/traced_function_transforms.py:100(inner_fn)
            9    0.000    0.000    0.108    0.012 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/linear.py:115(forward)
            9    0.002    0.000    0.108    0.012 {built-in method torch._C._nn.linear}
          112    0.000    0.000    0.107    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:117(snapshot_fake)
    5633/5597    0.010    0.000    0.101    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:679(map_arg)
            8    0.000    0.000    0.097    0.012 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/interpreter.py:297(call_module)
           15    0.000    0.000    0.089    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/_decomp/decompositions.py:50(inner)
            1    0.000    0.000    0.087    0.087 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/collect_metadata_analysis.py:92(inner)
           61    0.000    0.000    0.086    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:187(track_tensor_tree)
            9    0.000    0.000    0.086    0.010 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:452(wrapper)
        76/61    0.000    0.000    0.086    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:188(wrap_with_proxy)
            9    0.000    0.000    0.085    0.009 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:1186(CALL_FUNCTION)
            9    0.000    0.000    0.085    0.009 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py:624(call_function)
           74    0.001    0.000    0.080    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:149(set_meta)
            1    0.000    0.000    0.078    0.078 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:133(_extract_fwd_bwd_modules)
           10    0.000    0.000    0.078    0.008 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/builder.py:1279(wrap_fx_proxy)
           10    0.001    0.000    0.078    0.008 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/builder.py:1339(wrap_fx_proxy_cls)
        79/74    0.000    0.000    0.077    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:120(extract_val)
            5    0.002    0.000    0.076    0.015 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/partitioners.py:55(_extract_graph_with_inputs_outputs)
    3334/1244    0.006    0.000    0.073    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:657(<listcomp>)
           10    0.000    0.000    0.072    0.007 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph_module.py:707(recompile)
            9    0.000    0.000    0.070    0.008 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1532(get_fake_value)
           14    0.000    0.000    0.069    0.005 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1117(wrap_fake_exception)
           10    0.000    0.000    0.067    0.007 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1268(python_code)
            4    0.000    0.000    0.066    0.016 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/nn_module.py:240(call_function)
    7283/7127    0.006    0.000    0.066    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:693(<genexpr>)
           10    0.000    0.000    0.064    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1330(_python_code)
           10    0.005    0.001    0.064    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:360(_gen_python_code)
            1    0.000    0.000    0.064    0.064 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/fake_tensor_prop.py:64(propagate)
    96635/94935    0.052    0.000    0.064    0.000 {built-in method builtins.isinstance}
           15    0.001    0.000    0.062    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/_decomp/decompositions.py:1311(addmm)
            9    0.000    0.000    0.061    0.007 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/functional.py:1489(relu)
            9    0.001    0.000    0.061    0.007 {built-in method torch.relu}
         87/3    0.002    0.000    0.061    0.020 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py:71(wrapper)
            1    0.000    0.000    0.060    0.060 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/fake_tensor_prop.py:71(propagate_dont_convert_inputs)
           27    0.000    0.000    0.059    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/fake_tensor_prop.py:32(run_node)
          464    0.003    0.000    0.057    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:865(create_node)
            4    0.000    0.000    0.054    0.014 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:814(module_call_wrapper)
            4    0.000    0.000    0.054    0.014 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:458(call_module)
            4    0.000    0.000    0.054    0.014 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:816(forward)
          376    0.001    0.000    0.052    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1832(wrap_meta_outputs_with_default_device_logic)
          303    0.002    0.000    0.049    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1205(node_copy)
        79/56    0.001    0.000    0.046    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/modules/module.py:1690(__setattr__)
        96/66    0.002    0.000    0.046    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_prims_common/wrappers.py:115(_fn)
            7    0.000    0.000    0.045    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph_module.py:462(graph)
          381    0.006    0.000    0.042    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1839(wrap)
        13361    0.016    0.000    0.040    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:466(_get_node_type)
         9088    0.012    0.000    0.040    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:473(_is_leaf)
          474    0.003    0.000    0.040    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:163(__init__)
        69/54    0.000    0.000    0.038    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/experimental/proxy_tensor.py:1080(maybe_handle_decomp)
            3    0.000    0.000    0.038    0.013 /home/xadupre/.local/lib/python3.10/site-packages/torch/_decomp/__init__.py:115(_fn)
            3    0.000    0.000    0.038    0.013 /home/xadupre/.local/lib/python3.10/site-packages/torch/_decomp/decompositions.py:209(threshold_backward)
            2    0.000    0.000    0.037    0.019 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/_pass.py:240(run)
            1    0.000    0.000    0.037    0.037 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py:1712(_run)
            9    0.000    0.000    0.037    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1579(<lambda>)
            9    0.000    0.000    0.037    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1649(run_node)
           27    0.000    0.000    0.034    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py:1630(run_node)
         3334    0.010    0.000    0.034    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:494(__post_init__)
           94    0.001    0.000    0.033    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/proxy.py:171(create_proxy)
            5    0.000    0.000    0.032    0.006 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph_module.py:354(__init__)
           18    0.001    0.000    0.032    0.002 {built-in method torch.where}
           19    0.000    0.000    0.031    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/_aot_autograd/functional_utils.py:23(to_fun)
       129/69    0.001    0.000    0.031    0.000 /usr/lib/python3.10/copy.py:259(_reconstruct)
           19    0.000    0.000    0.031    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/functional_tensor.py:172(to_functional)
      329/317    0.002    0.000    0.031    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_ops.py:594(decompose)
           36    0.000    0.000    0.030    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/fake_tensor_prop.py:45(extract_val)
            4    0.000    0.000    0.030    0.008 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1128(deepcopy_to_fake_tensor)
            4    0.000    0.000    0.030    0.008 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/utils.py:1130(<lambda>)
        216/4    0.001    0.000    0.030    0.008 /usr/lib/python3.10/copy.py:128(deepcopy)
            1    0.000    0.000    0.030    0.030 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/onnxruntime.py:882(compile)
            4    0.000    0.000    0.030    0.007 /usr/lib/python3.10/copy.py:227(_deepcopy_dict)
            7    0.001    0.000    0.028    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1443(eliminate_dead_code)
          468    0.004    0.000    0.028    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:515(emit_node)
           13    0.003    0.000    0.028    0.002 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/graph.py:1372(lint)
            8    0.000    0.000    0.027    0.003 /home/xadupre/.local/lib/python3.10/site-packages/torch/nn/parameter.py:55(__deepcopy__)
           40    0.000    0.000    0.027    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:2040(__torch_function__)
    2962/1432    0.008    0.000    0.026    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:688(_tree_leaves_helper)
            1    0.000    0.000    0.026    0.026 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/infra/partitioner.py:275(partition_and_fuse)
          635    0.003    0.000    0.025    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:433(__update_args_kwargs)
        13361    0.018    0.000    0.025    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:455(_is_namedtuple_instance)
    5166/4916    0.006    0.000    0.025    0.000 {built-in method builtins.next}
          381    0.003    0.000    0.024    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:378(from_meta_and_device)
            1    0.000    0.000    0.024    0.024 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/infra/partitioner.py:214(fuse_partitions)
            1    0.000    0.000    0.024    0.024 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/passes/utils/fuser_utils.py:218(fuse_by_partitions)
            1    0.000    0.000    0.023    0.023 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py:458(run)
         6676    0.013    0.000    0.022    0.000 {built-in method builtins.sum}
           71    0.001    0.000    0.022    0.000 {method 'to' of 'torch._C.TensorBase' objects}
            1    0.000    0.000    0.022    0.022 /home/xadupre/.local/lib/python3.10/site-packages/networkx/algorithms/flow/maxflow.py:304(minimum_cut)
           39    0.000    0.000    0.022    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:395(__call__)
           39    0.000    0.000    0.022    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:317(from_real_tensor)
        44/36    0.000    0.000    0.021    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1255(__torch_dispatch__)
           39    0.001    0.000    0.020    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/meta_utils.py:627(__call__)
            1    0.001    0.001    0.020    0.020 /home/xadupre/.local/lib/python3.10/site-packages/torch/_functorch/compile_utils.py:23(fx_graph_cse)
            1    0.000    0.000    0.020    0.020 /home/xadupre/.local/lib/python3.10/site-packages/networkx/algorithms/flow/preflowpush.py:291(preflow_push)
            1    0.001    0.001    0.020    0.020 /home/xadupre/.local/lib/python3.10/site-packages/networkx/algorithms/flow/preflowpush.py:22(preflow_push_impl)
           96    0.001    0.000    0.020    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/proxy.py:115(create_node)
           27    0.000    0.000    0.020    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py:376(run_node)
           39    0.003    0.000    0.019    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/meta_utils.py:186(meta_tensor)
          540    0.001    0.000    0.019    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:706(tree_leaves)
            5    0.000    0.000    0.019    0.004 /home/xadupre/.local/lib/python3.10/site-packages/torch/_dynamo/variables/torch.py:203(call_function)
          475    0.001    0.000    0.019    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/utils/_pytree.py:676(tree_unflatten)
            1    0.000    0.000    0.018    0.018 /home/xadupre/github/onnxruntime/build/linux_cuda/Release/onnxruntime/capi/onnxruntime_inference_collection.py:358(__init__)
            1    0.018    0.018    0.018    0.018 /home/xadupre/github/onnxruntime/build/linux_cuda/Release/onnxruntime/capi/onnxruntime_inference_collection.py:436(_create_inference_session)
           15    0.000    0.000    0.017    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_refs/nn/functional/__init__.py:134(_fn)
           17    0.000    0.000    0.017    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py:610(call_function)
         5553    0.008    0.000    0.017    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/fx/node.py:685(<lambda>)
          133    0.000    0.000    0.017    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_decomp/decompositions.py:1902(nop_decomposition)
          136    0.000    0.000    0.017    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_ops.py:817(__call__)
           45    0.000    0.000    0.017    0.000 /home/xadupre/.local/lib/python3.10/site-packages/torch/_decomp/decompositions.py:60(increase_prec)
          133    0.002    0.000    0.016    0.000 {built-in method torch._ops.aten.alias}
    30355/30259    0.016    0.000    0.016    0.000 {built-in method builtins.len}
           27    0.000    0.000    0.015    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_subclasses/fake_tensor.py:1921(from_tensor)
           15    0.000    0.000    0.015    0.001 /home/xadupre/.local/lib/python3.10/site-packages/torch/_refs/nn/functional/__init__.py:246(relu)
          134    0.002    0.000    0.015    0.000 {method 'view' of 'torch._C.TensorBase' objects}
    1646/1532    0.003    0.000    0.015    0.000 /usr/lib/python3.10/contextlib.py:130(__enter__)
    done.




.. GENERATED FROM PYTHON SOURCE LINES 527-529

Benchmark exported models with ORT
++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 529-630

.. code-block:: Python



    def benchmark(shape):
        data = []
        data_mem_first_run = []
        data_mem_run = []
        confs = list(
            itertools.product(
                export_functions,
                ["CPU", "CUDA"],
            )
        )
        loop = tqdm(confs)
        print(f"number of experiments: {len(loop)}")
        for export_fct, p in loop:
            name = export_fct.__name__.replace("get_torch_", "")
            obs = {}  # system_info()
            obs["name"] = name
            obs["compute"] = p
            obs["export"] = name

            model, input_tensor = create_model_and_input()
            if p == "CUDA":
                if not has_cuda:
                    continue
                model = model.cuda()
                input_tensor = input_tensor.cuda()
            try:
                exported_model = export_fct(model, input_tensor)
            except torch._dynamo.exc.BackendCompilerFailed as e:
                # Triton only supports devices of CUDA Capability >= 7.0, but your device is of CUDA capability 6.1
                obs["error"] = str(e)
                data.append(obs)
                continue

            def call_model(
                export_fct=export_fct,
                exported_model=exported_model,
                input_tensor=input_tensor,
            ):
                if "opti" in export_fct.__name__:
                    os.environ["ONNX_OPTIMIZER"] = "1"
                res = exported_model(input_tensor).sum()
                if "opti" in export_fct.__name__:
                    os.environ["ONNX_OPTIMIZER"] = "0"
                return res

            stat = start_spying_on(cuda=1 if has_cuda else 0)
            try:
                call_model()
            except Exception as e:
                loop.set_description(f"ERROR-run: {name} {e}")
                obs.update({"error": e, "step": "load"})
                data.append(obs)
                stat.stop()
                continue
            memobs = flatten(stat.stop())
            memobs.update(obs)
            data_mem_first_run.append(memobs)

            # memory consumption
            stat = start_spying_on(cuda=1 if has_cuda else 0)
            for i in range(0, script_args.warmup):
                call_model()
            memobs = flatten(stat.stop())
            memobs.update(obs)
            data_mem_run.append(memobs)

            obs.update(
                measure_time(
                    call_model,
                    max_time=script_args.maxtime,
                    repeat=script_args.repeat,
                    number=1,
                )
            )

            profile_function(name, call_model, with_args=False, suffix=f"run_{p}")

            loop.set_description(f"{obs['average']} {name} {p}")
            data.append(obs)
            del model
            del exported_model
            gc.collect()
            time.sleep(1)

        df = pandas.DataFrame(data)
        df.to_csv("plot_torch_dort_ort_time.csv", index=False)
        df.to_excel("plot_torch_dort_ort_time.xlsx", index=False)
        dfmemr = pandas.DataFrame(data_mem_run)
        dfmemr.to_csv("plot_torch_dort_ort_run_mem.csv", index=False)
        dfmemr.to_excel("plot_torch_dort_ort_run_mem.xlsx", index=False)
        dfmemfr = pandas.DataFrame(data_mem_first_run)
        dfmemfr.to_csv("plot_torch_dort_ort_first_run_mem.csv", index=False)
        dfmemfr.to_excel("plot_torch_dort_ort_first_run_mem.xlsx", index=False)
        return df, dfmemfr, dfmemr


    df, dfmemfr, dfmemr = benchmark(list(input_tensor.shape))
    print(df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/6 [00:00<?, ?it/s]number of experiments: 6
    0.0004913864734277926 eager CPU:   0%|          | 0/6 [00:00<?, ?it/s]    0.0004913864734277926 eager CPU:  17%|█▋        | 1/6 [00:01<00:09,  1.81s/it]    0.0006466560000020157 eager CUDA:  17%|█▋        | 1/6 [00:02<00:09,  1.81s/it]    0.0006466560000020157 eager CUDA:  33%|███▎      | 2/6 [00:03<00:07,  1.91s/it]    0.0005933378995481913 default CPU:  33%|███▎      | 2/6 [00:04<00:07,  1.91s/it]    0.0005933378995481913 default CPU:  50%|█████     | 3/6 [00:06<00:06,  2.17s/it]    0.0005933378995481913 default CPU:  67%|██████▋   | 4/6 [00:06<00:02,  1.50s/it]    0.00044507250857794107 dort CPU:  67%|██████▋   | 4/6 [00:07<00:02,  1.50s/it]      0.00044507250857794107 dort CPU:  83%|████████▎ | 5/6 [00:08<00:01,  1.69s/it]    0.0034066558823456837 dort CUDA:  83%|████████▎ | 5/6 [00:09<00:01,  1.69s/it]    0.0034066558823456837 dort CUDA: 100%|██████████| 6/6 [00:11<00:00,  1.88s/it]    0.0034066558823456837 dort CUDA: 100%|██████████| 6/6 [00:11<00:00,  1.84s/it]
          name  ...                                              error
    0    eager  ...                                                NaN
    1    eager  ...                                                NaN
    2  default  ...                                                NaN
    3  default  ...  backend='inductor' raised:\nRuntimeError: Foun...
    4     dort  ...                                                NaN
    5     dort  ...                                                NaN

    [6 rows x 13 columns]




.. GENERATED FROM PYTHON SOURCE LINES 631-632

Other view

.. GENERATED FROM PYTHON SOURCE LINES 632-668

.. code-block:: Python



    def view_time(df, title, suffix="time"):
        piv = pandas.pivot_table(df, index="export", columns=["compute"], values="average")
        print(piv)
        piv.to_csv(f"plot_torch_dort_{suffix}_compute.csv")
        piv.to_excel(f"plot_torch_dort_{suffix}_compute.xlsx")

        piv_cpu = pandas.pivot_table(
            df[df.compute == "CPU"],
            index="export",
            columns=["compute"],
            values="average",
        )

        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        fig.suptitle(title)
        piv_cpu.plot.barh(ax=ax[0], title="CPU", logx=True)

        if has_cuda:
            piv_gpu = pandas.pivot_table(
                df[df.compute == "CUDA"],
                index="export",
                columns=["compute"],
                values="average",
            )
            piv_gpu.plot.barh(ax=ax[1], title="CUDA", logx=True)

        fig.tight_layout()
        fig.savefig(f"plot_torch_dort_{suffix}.png")
        return ax


    view_time(df, "Compares processing time on backends")





.. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_004.png
   :alt: Compares processing time on backends, CPU, CUDA
   :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    compute       CPU      CUDA
    export                     
    default  0.000593       NaN
    dort     0.000445  0.003407
    eager    0.000491  0.000647

    array([<Axes: title={'center': 'CPU'}, ylabel='export'>,
           <Axes: title={'center': 'CUDA'}, ylabel='export'>], dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 669-671

Memory First Running Time (ORT)
+++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 671-685

.. code-block:: Python


    for compute in ["CPU", "CUDA"]:
        if not has_cuda and compute == "CUDA":
            continue
        ax = memory_peak_plot(
            dfmemfr[dfmemfr.compute == compute],
            ("export",),
            suptitle=f"Memory Consumption of backend, first running time"
            f"\nrunning on {compute}",
            bars=[model_size * i / 2**20 for i in range(1, 3)],
            figsize=(18, 6),
        )
        get_figure(ax).savefig(f"plot_torch_dort_first_run_mem_{compute}.png")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_005.png
         :alt: Memory Consumption of backend, first running time running on CPU, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_006.png
         :alt: Memory Consumption of backend, first running time running on CUDA, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_006.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 686-688

Memory Running Time (ORT)
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 688-701

.. code-block:: Python


    for compute in ["CPU", "CUDA"]:
        if not has_cuda and compute == "CUDA":
            continue
        ax = memory_peak_plot(
            dfmemr[dfmemr.compute == compute],
            ("export",),
            suptitle=f"Memory Consumption of backens, running time"
            f"\nrunning on {compute}",
            bars=[model_size * i / 2**20 for i in range(1, 3)],
            figsize=(18, 6),
        )
        get_figure(ax).savefig(f"plot_torch_dort_run_mem_{compute}.png")



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_007.png
         :alt: Memory Consumption of backens, running time running on CPU, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_torch_dort_008.png
         :alt: Memory Consumption of backens, running time running on CUDA, Memory peak (Mb), Memory peak - memory begin (Mb), Memory average - memory begin (Mb), GPU Memory peak (Mb), GPU Memory peak - memory begin (Mb), GPU Memory average - memory begin (Mb)
         :srcset: /auto_examples/images/sphx_glr_plot_torch_dort_008.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 0.009 seconds)


.. _sphx_glr_download_auto_examples_plot_torch_dort.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_torch_dort.ipynb <plot_torch_dort.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_torch_dort.py <plot_torch_dort.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
