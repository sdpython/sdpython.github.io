
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_recipes/plot_exporter_exporter_with_dynamic_cache.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_recipes_plot_exporter_exporter_with_dynamic_cache.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_recipes_plot_exporter_exporter_with_dynamic_cache.py:


.. _l-plot-torch-export-with-dynamic-cache-201:

Export a model using a custom type as input
===========================================

We will a class used in many model: :class:`transformers.cache_utils.DynamicCache`.

First try: it fails
+++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 12-25

.. code-block:: Python


    import torch
    from onnx_diagnostic.helpers.cache_helper import make_dynamic_cache


    class ModelTakingDynamicCacheAsInput(torch.nn.Module):
        def forward(self, x, dc):
            kc = torch.cat(dc.key_cache, axis=1)
            vc = torch.cat(dc.value_cache, axis=1)
            y = (kc + vc).sum(axis=2, keepdim=True)
            return x + y









.. GENERATED FROM PYTHON SOURCE LINES 26-27

Let's check the model runs.

.. GENERATED FROM PYTHON SOURCE LINES 27-36

.. code-block:: Python


    x = torch.randn(3, 8, 7, 1)
    cache = make_dynamic_cache([(torch.ones((3, 8, 5, 6)), (torch.ones((3, 8, 5, 6)) * 2))])

    model = ModelTakingDynamicCacheAsInput()
    expected = model(x, cache)

    print(expected.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    torch.Size([3, 8, 7, 6])




.. GENERATED FROM PYTHON SOURCE LINES 37-38

Let's check it works with other shapes.

.. GENERATED FROM PYTHON SOURCE LINES 38-47

.. code-block:: Python


    x = torch.randn(4, 8, 7, 1)
    cache = make_dynamic_cache([(torch.ones((4, 8, 11, 6)), (torch.ones((4, 8, 11, 6)) * 2))])

    model = ModelTakingDynamicCacheAsInput()
    expected = model(x, cache)

    print(expected.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    torch.Size([4, 8, 7, 6])




.. GENERATED FROM PYTHON SOURCE LINES 48-49

Let's export.

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: Python


    ep = torch.export.export(model, (x, cache))
    print(ep.graph)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    graph():
        %x : [num_users=1] = placeholder[target=x]
        %dc_key_cache_0 : [num_users=1] = placeholder[target=dc_key_cache_0]
        %dc_value_cache_0 : [num_users=1] = placeholder[target=dc_value_cache_0]
        %cat : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%dc_key_cache_0], 1), kwargs = {})
        %cat_1 : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%dc_value_cache_0], 1), kwargs = {})
        %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%cat, %cat_1), kwargs = {})
        %sum_1 : [num_users=1] = call_function[target=torch.ops.aten.sum.dim_IntList](args = (%add, [2], True), kwargs = {})
        %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%x, %sum_1), kwargs = {})
        return (add_1,)




.. GENERATED FROM PYTHON SOURCE LINES 54-55

With dynamic shapes now.

.. GENERATED FROM PYTHON SOURCE LINES 55-72

.. code-block:: Python



    batch = torch.export.Dim("batch", min=1, max=1024)
    clength = torch.export.Dim("clength", min=1, max=1024)

    try:
        ep = torch.export.export(
            model,
            (x, cache),
            dynamic_shapes=({0: batch}, [[{0: batch, 2: clength}], [{0: batch, 2: clength}]]),
        )
        print(ep.graph)
        failed = False
    except Exception as e:
        print("FAILS:", e)
        failed = True





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    graph():
        %x : [num_users=1] = placeholder[target=x]
        %dc_key_cache_0 : [num_users=1] = placeholder[target=dc_key_cache_0]
        %dc_value_cache_0 : [num_users=1] = placeholder[target=dc_value_cache_0]
        %cat : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%dc_key_cache_0], 1), kwargs = {})
        %cat_1 : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%dc_value_cache_0], 1), kwargs = {})
        %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%cat, %cat_1), kwargs = {})
        %sum_1 : [num_users=1] = call_function[target=torch.ops.aten.sum.dim_IntList](args = (%add, [2], True), kwargs = {})
        %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%x, %sum_1), kwargs = {})
        return (add_1,)




.. GENERATED FROM PYTHON SOURCE LINES 73-74

If it failed, let's understand why.

.. GENERATED FROM PYTHON SOURCE LINES 74-92

.. code-block:: Python


    if failed:

        class Model(torch.nn.Module):
            def forward(self, dc):
                kc = dc.key_cache[0]
                vc = dc.value_cache[0]
                return kc + vc

        ep = torch.export.export(
            Model(),
            (cache,),
            dynamic_shapes={"dc": [[{0: batch, 2: clength}], [{0: batch, 2: clength}]]},
        )
        for node in ep.graph.nodes:
            print(f"{node.name} -> {node.meta.get('val', '-')}")
            # it prints out ``dc_key_cache_0 -> FakeTensor(..., size=(4, 8, 11, 6))``
            # but it should be ``dc_key_cache_0 -> FakeTensor(..., size=(s0, 8, s1, 6))``








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.173 seconds)


.. _sphx_glr_download_auto_recipes_plot_exporter_exporter_with_dynamic_cache.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_exporter_exporter_with_dynamic_cache.ipynb <plot_exporter_exporter_with_dynamic_cache.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_exporter_exporter_with_dynamic_cache.py <plot_exporter_exporter_with_dynamic_cache.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_exporter_exporter_with_dynamic_cache.zip <plot_exporter_exporter_with_dynamic_cache.zip>`


.. include:: plot_exporter_exporter_with_dynamic_cache.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
