
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_recipes/plot_exporter_recipes_c_custom_ops_inplace.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_recipes_plot_exporter_recipes_c_custom_ops_inplace.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_recipes_plot_exporter_recipes_c_custom_ops_inplace.py:


.. _l-plot-exporter-recipes-custom-custom-ops-inplace:

to_onnx and a custom operator inplace
=====================================

This example shows how to convert a custom operator as defined
in the tutorial `Python Custom Operators
<https://pytorch.org/tutorials/advanced/python_custom_ops.html#python-custom-ops-tutorial>`_.

Inplace modification are not supported by onnx.

A model with a custom ops
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 16-26

.. code-block:: Python


    from typing import Any, Dict, List, Optional
    import numpy as np
    import torch
    from onnx_array_api.plotting.graphviz_helper import plot_dot
    from experimental_experiment.xbuilder import GraphBuilder
    from experimental_experiment.helpers import pretty_onnx
    from experimental_experiment.torch_interpreter import to_onnx, Dispatcher, ExportOptions









.. GENERATED FROM PYTHON SOURCE LINES 27-28

We define a model with a custom operator.

.. GENERATED FROM PYTHON SOURCE LINES 28-48

.. code-block:: Python



    @torch.library.custom_op("mylib::numpy_sin", mutates_args={"output"}, device_types="cpu")
    def numpy_sin(x: torch.Tensor, output: torch.Tensor) -> None:
        assert x.device == output.device
        assert x.device.type == "cpu"
        x_np = x.numpy()
        output_np = output.numpy()
        np.sin(x_np, out=output_np)


    class ModuleWithACustomOperator(torch.nn.Module):
        def forward(self, x):
            out = torch.zeros(x.shape)
            numpy_sin(x, out)
            return out


    model = ModuleWithACustomOperator()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/library.py:356: UserWarning: Warning only once for all operators,  other operators may also be overridden.
      Overriding a previously registered kernel for the same operator and the same dispatch key
      operator: mylib::numpy_sin(Tensor x, Tensor(a1!) output) -> ()
        registered at /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_library/custom_ops.py:922
      dispatch key: ADInplaceOrView
      previous kernel: no debug info
           new kernel: registered at /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/_library/custom_ops.py:922 (Triggered internally at /pytorch/aten/src/ATen/core/dispatch/OperatorEntry.cpp:208.)
      self.m.impl(




.. GENERATED FROM PYTHON SOURCE LINES 49-50

Let's check it runs.

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: Python

    x = torch.randn(1, 3)
    model(x)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    tensor([[ 0.9795, -0.7488,  0.9797]])



.. GENERATED FROM PYTHON SOURCE LINES 54-55

As expected, it does not export.

.. GENERATED FROM PYTHON SOURCE LINES 55-61

.. code-block:: Python

    try:
        torch.export.export(model, (x,))
        raise AssertionError("This export should failed unless pytorch now supports this model.")
    except Exception as e:
        print(e)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    This export should failed unless pytorch now supports this model.




.. GENERATED FROM PYTHON SOURCE LINES 62-63

The exporter fails with the same eror as it expects torch.export.export to work.

.. GENERATED FROM PYTHON SOURCE LINES 63-70

.. code-block:: Python


    try:
        to_onnx(model, (x,))
    except Exception as e:
        print(e)









.. GENERATED FROM PYTHON SOURCE LINES 71-78

Registration
++++++++++++

The exporter how to convert the new exporter into ONNX.
This must be defined. The first piece is to tell the exporter
that the shape of the output is the same as x.
input names must be the same.

.. GENERATED FROM PYTHON SOURCE LINES 78-85

.. code-block:: Python



    @numpy_sin.register_fake
    def numpy_sin_shape(x, output):
        pass









.. GENERATED FROM PYTHON SOURCE LINES 86-87

Let's see what the fx graph looks like.

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: Python


    print(torch.export.export(model, (x,)).graph)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    graph():
        %x : [num_users=1] = placeholder[target=x]
        %zeros : [num_users=2] = call_function[target=torch.ops.aten.zeros.default](args = ([1, 3],), kwargs = {device: cpu, pin_memory: False})
        %numpy_sin : [num_users=0] = call_function[target=torch.ops.mylib.numpy_sin.default](args = (%x, %zeros), kwargs = {})
        return (zeros,)




.. GENERATED FROM PYTHON SOURCE LINES 91-92

Next is the conversion to onnx.

.. GENERATED FROM PYTHON SOURCE LINES 92-110

.. code-block:: Python

    T = str  # a tensor name


    def numpy_sin_to_onnx(
        g: GraphBuilder,
        sts: Dict[str, Any],
        outputs: List[str],
        x: T,
        output: Optional[T] = None,
        name: str = "mylib.numpy_sin",
    ) -> T:
        # name= ... lets the user know when the node comes from
        # o is not used, we could check the shape are equal.
        # outputs contains unexpectedly two outputs
        g.op.Sin(x, name=name, outputs=outputs[1:])
        return outputs









.. GENERATED FROM PYTHON SOURCE LINES 111-112

We create a :class:`Dispatcher <experimental_experiment.torch_interpreter.Dispatcher>`.

.. GENERATED FROM PYTHON SOURCE LINES 112-115

.. code-block:: Python


    dispatcher = Dispatcher({"mylib::numpy_sin": numpy_sin_to_onnx})








.. GENERATED FROM PYTHON SOURCE LINES 116-117

And we convert again.

.. GENERATED FROM PYTHON SOURCE LINES 117-127

.. code-block:: Python


    onx = to_onnx(
        model,
        (x,),
        dispatcher=dispatcher,
        optimize=False,
        export_options=ExportOptions(decomposition_table="default"),
    )
    print(pretty_onnx(onx))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    opset: domain='' version=18
    input: name='x' type=dtype('float32') shape=[1, 3]
    init: name='init7_s2_1_3' type=int64 shape=(2,) -- array([1, 3])      -- Opset.make_node.1/Shape
    ConstantOfShape(init7_s2_1_3, value=[0.0]) -> zeros
    Sin(x) -> auto_functionalized#1
      Identity(auto_functionalized#1) -> getitem_1
        Identity(getitem_1) -> output_0
    output: name='output_0' type=dtype('float32') shape=[1, 3]




.. GENERATED FROM PYTHON SOURCE LINES 128-129

And we convert again with optimization this time.

.. GENERATED FROM PYTHON SOURCE LINES 129-139

.. code-block:: Python


    onx = to_onnx(
        model,
        (x,),
        dispatcher=dispatcher,
        optimize=True,
        export_options=ExportOptions(decomposition_table="default"),
    )
    print(pretty_onnx(onx))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    opset: domain='' version=18
    input: name='x' type=dtype('float32') shape=[1, 3]
    Sin(x) -> output_0
    output: name='output_0' type=dtype('float32') shape=[1, 3]




.. GENERATED FROM PYTHON SOURCE LINES 140-141

And visually.

.. GENERATED FROM PYTHON SOURCE LINES 141-143

.. code-block:: Python


    plot_dot(onx)



.. image-sg:: /auto_recipes/images/sphx_glr_plot_exporter_recipes_c_custom_ops_inplace_001.png
   :alt: plot exporter recipes c custom ops inplace
   :srcset: /auto_recipes/images/sphx_glr_plot_exporter_recipes_c_custom_ops_inplace_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.588 seconds)


.. _sphx_glr_download_auto_recipes_plot_exporter_recipes_c_custom_ops_inplace.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_exporter_recipes_c_custom_ops_inplace.ipynb <plot_exporter_recipes_c_custom_ops_inplace.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_exporter_recipes_c_custom_ops_inplace.py <plot_exporter_recipes_c_custom_ops_inplace.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_exporter_recipes_c_custom_ops_inplace.zip <plot_exporter_recipes_c_custom_ops_inplace.zip>`


.. include:: plot_exporter_recipes_c_custom_ops_inplace.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
