
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_cpu.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_bench_cpu.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_cpu.py:


.. _l-example-bench-cpu:

Measuring CPU performance
=========================

Processor caches must be taken into account when writing an algorithm,
see `Memory part 2: CPU caches <https://lwn.net/Articles/252125/>`_
from Ulrich Drepper.

Cache Performance
+++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 14-24

.. code-block:: Python

    from tqdm import tqdm
    import matplotlib.pyplot as plt
    from pandas import DataFrame, concat
    from sphinx_runpython.runpython import run_cmd
    from teachcompute.ext_test_case import unit_test_going
    from teachcompute.validation.cpu._validation import (
        benchmark_cache,
        benchmark_cache_tree,
    )



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/xadupre/github/teachcompute/_doc/examples/plot_bench_cpu.py", line 19, in <module>
        from teachcompute.validation.cpu._validation import (
    ImportError: cannot import name 'benchmark_cache' from 'teachcompute.validation.cpu._validation' (/home/xadupre/github/teachcompute/teachcompute/validation/cpu/_validation.cpython-310-x86_64-linux-gnu.so)




.. GENERATED FROM PYTHON SOURCE LINES 25-27

Code of `benchmark_cache
<https://github.com/sdpython/teachcompute/blob/main/teachcompute/validation/cpu/speed_metrics.cpp#L17>`_.

.. GENERATED FROM PYTHON SOURCE LINES 27-55

.. code-block:: Python


    obs = []
    step = 2**12
    for i in tqdm(range(step, 2**20 + step, step)):
        res = min(
            [
                benchmark_cache(i, False),
                benchmark_cache(i, False),
                benchmark_cache(i, False),
            ]
        )
        if res < 0:
            # overflow
            continue
        obs.append(dict(size=i, perf=res))

    df = DataFrame(obs)
    mean = df.perf.mean()
    lag = 32
    for i in range(2, df.shape[0]):
        df.loc[i, "smooth"] = df.loc[i - 8 : i + 8, "perf"].median()
        if i > lag and i < df.shape[0] - lag:
            df.loc[i, "delta"] = (
                mean
                + df.loc[i : i + lag, "perf"].mean()
                - df.loc[i - lag + 1 : i + 1, "perf"]
            ).mean()


.. GENERATED FROM PYTHON SOURCE LINES 56-58

Cache size estimator
++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: Python


    cache_size_index = int(df.delta.argmax())
    cache_size = df.loc[cache_size_index, "size"] * 2
    print(f"L2 cache size estimation is {cache_size / 2 ** 20:1.3f} Mb.")


.. GENERATED FROM PYTHON SOURCE LINES 64-66

Verification
++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 66-79

.. code-block:: Python


    try:
        out, err = run_cmd("lscpu", wait=True)
        print("\n".join(_ for _ in out.split("\n") if "cache:" in _))
    except Exception as e:
        print(f"failed due to {e}")

    df = df.set_index("size")
    fig, ax = plt.subplots(1, 1, figsize=(12, 4))
    df.plot(ax=ax, title="Cache Performance time/size", logy=True)
    fig.tight_layout()
    fig.savefig("plot_benchmark_cpu_array.png")


.. GENERATED FROM PYTHON SOURCE LINES 80-89

TreeEnsemble Performance
++++++++++++++++++++++++

We simulate the computation of a TreeEnsemble
of 50 features, 100 trees and depth of 10
(so :math:`2^{10}` nodes.)
The code of `benchmark_cache_tree
<https://github.com/sdpython/teachcompute/blob/main/teachcompute/validation/cpu/speed_metrics.cpp#L50>`_


.. GENERATED FROM PYTHON SOURCE LINES 89-117

.. code-block:: Python


    dfs = []
    cols = []
    drop = []
    for n in tqdm(range(2 if unit_test_going() else 5)):
        res = benchmark_cache_tree(
            n_rows=2000,
            n_features=50,
            n_trees=100,
            tree_size=1024,
            max_depth=10,
            search_step=64,
        )
        res = [[max(r.row, i), r.time] for i, r in enumerate(res)]
        df = DataFrame(res)
        df.columns = [f"i{n}", f"time{n}"]
        dfs.append(df)
        cols.append(df.columns[-1])
        drop.append(df.columns[0])

    df = concat(dfs, axis=1).reset_index(drop=True)
    df["i"] = df["i0"]
    df = df.drop(drop, axis=1)
    df["time_avg"] = df[cols].mean(axis=1)
    df["time_med"] = df[cols].median(axis=1)

    df.head()


.. GENERATED FROM PYTHON SOURCE LINES 118-120

Estimation
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 120-128

.. code-block:: Python


    print("Optimal batch size is among:")
    dfi = df[["time_med", "i"]].groupby("time_med").min()
    dfi_min = set(dfi["i"])
    dfsub = df[df["i"].isin(dfi_min)]
    dfs = dfsub.sort_values("time_med").reset_index()
    print(dfs[["i", "time_med", "time_avg"]].head(10))


.. GENERATED FROM PYTHON SOURCE LINES 129-130

One possible estimation

.. GENERATED FROM PYTHON SOURCE LINES 130-135

.. code-block:: Python


    subdfs = dfs[:20]
    avg = (subdfs["i"] / subdfs["time_avg"]).sum() / (subdfs["time_avg"] ** (-1)).sum()
    print(f"Estimation: {avg}")


.. GENERATED FROM PYTHON SOURCE LINES 136-137

Plots.

.. GENERATED FROM PYTHON SOURCE LINES 137-146

.. code-block:: Python


    cols_time = ["time_avg", "time_med"]
    fig, ax = plt.subplots(2, 1, figsize=(12, 6))
    df.set_index("i").drop(cols_time, axis=1).plot(
        ax=ax[0], title="TreeEnsemble Performance time per row", logy=True, linewidth=0.2
    )
    df.set_index("i")[cols_time].plot(ax=ax[1], linewidth=1.0, logy=True)
    fig.tight_layout()
    fig.savefig("plot_bench_cpu.png")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.004 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_cpu.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_cpu.ipynb <plot_bench_cpu.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_cpu.py <plot_bench_cpu.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
