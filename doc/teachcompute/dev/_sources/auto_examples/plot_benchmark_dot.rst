
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_benchmark_dot.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_benchmark_dot.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_benchmark_dot.py:


Compares dot implementations (numpy, python, blas)
==================================================

:epkg:`numpy` has a very fast implementation of
the dot product. It is difficult to be better and very easy
to be slower. This example looks into a couple of slower
implementations.

Compared implementations:

* :func:`pydot <teachcompute.validation.cython.dotpy.pydot>`
* `cblas_ddot <https://github.com/sdpython/teachcompute/
  blob/main/teachcompute/validation/cython/dot_blas_lapack.pyx#L39>`_

.. GENERATED FROM PYTHON SOURCE LINES 17-26

.. code-block:: Python


    import pprint
    import numpy
    import matplotlib.pyplot as plt
    from pandas import DataFrame, concat
    from teachcompute.validation.cython.dotpy import pydot
    from teachcompute.validation.cython.dot_blas_lapack import cblas_ddot
    from teachcompute.ext_test_case import measure_time_dim








.. GENERATED FROM PYTHON SOURCE LINES 27-33

python dot: pydot
+++++++++++++++++

The first function :func:`pydot
<teachcompute.validation.cython.dotpy.pydot>` uses
python to implement the dot product.

.. GENERATED FROM PYTHON SOURCE LINES 33-48

.. code-block:: Python


    ctxs = [
        dict(
            va=numpy.random.randn(n).astype(numpy.float64),
            vb=numpy.random.randn(n).astype(numpy.float64),
            pydot=pydot,
            x_name=n,
        )
        for n in range(10, 1000, 100)
    ]

    res_pydot = list(measure_time_dim("pydot(va, vb)", ctxs, verbose=1))

    pprint.pprint(res_pydot[:2])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/10 [00:00<?, ?it/s]     50%|█████     | 5/10 [00:00<00:00, 41.17it/s]    100%|██████████| 10/10 [00:00<00:00, 16.78it/s]    100%|██████████| 10/10 [00:00<00:00, 18.40it/s]
    [{'average': 3.7561766803264616e-06,
      'context_size': 184,
      'deviation': 7.356365275415628e-08,
      'max_exec': 3.942325711250305e-06,
      'min_exec': 3.7072226405143737e-06,
      'number': 50,
      'repeat': 10,
      'ttime': 3.756176680326462e-05,
      'warmup_time': 1.8363818526268005e-05,
      'x_name': 10},
     {'average': 2.615700289607048e-05,
      'context_size': 184,
      'deviation': 1.2125261829320515e-06,
      'max_exec': 2.9783658683300017e-05,
      'min_exec': 2.5673583149909972e-05,
      'number': 50,
      'repeat': 10,
      'ttime': 0.0002615700289607048,
      'warmup_time': 3.089383244514465e-05,
      'x_name': 110}]




.. GENERATED FROM PYTHON SOURCE LINES 49-52

numpy dot
+++++++++


.. GENERATED FROM PYTHON SOURCE LINES 52-67

.. code-block:: Python


    ctxs = [
        dict(
            va=numpy.random.randn(n).astype(numpy.float64),
            vb=numpy.random.randn(n).astype(numpy.float64),
            dot=numpy.dot,
            x_name=n,
        )
        for n in range(10, 50000, 100)
    ]

    res_dot = list(measure_time_dim("dot(va, vb)", ctxs, verbose=1))

    pprint.pprint(res_dot[:2])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/500 [00:00<?, ?it/s]     15%|█▍        | 73/500 [00:00<00:00, 722.15it/s]     29%|██▉       | 146/500 [00:05<00:14, 24.71it/s]     35%|███▌      | 177/500 [00:07<00:16, 19.28it/s]     39%|███▉      | 195/500 [00:08<00:16, 17.96it/s]     41%|████      | 206/500 [00:09<00:17, 16.59it/s]     43%|████▎     | 214/500 [00:10<00:17, 16.06it/s]     44%|████▍     | 220/500 [00:11<00:18, 15.52it/s]     45%|████▍     | 224/500 [00:11<00:17, 15.78it/s]     46%|████▌     | 228/500 [00:11<00:17, 15.48it/s]     46%|████▌     | 231/500 [00:11<00:18, 14.46it/s]     47%|████▋     | 234/500 [00:12<00:19, 13.66it/s]     47%|████▋     | 236/500 [00:12<00:20, 13.04it/s]     48%|████▊     | 238/500 [00:12<00:19, 13.68it/s]     48%|████▊     | 240/500 [00:12<00:18, 14.35it/s]     48%|████▊     | 242/500 [00:12<00:19, 13.53it/s]     49%|████▉     | 244/500 [00:12<00:17, 14.40it/s]     49%|████▉     | 246/500 [00:12<00:16, 15.28it/s]     50%|████▉     | 248/500 [00:13<00:15, 16.09it/s]     50%|█████     | 250/500 [00:13<00:14, 16.89it/s]     51%|█████     | 253/500 [00:13<00:14, 16.57it/s]     51%|█████     | 255/500 [00:13<00:14, 17.31it/s]     51%|█████▏    | 257/500 [00:13<00:13, 17.85it/s]     52%|█████▏    | 259/500 [00:13<00:19, 12.50it/s]     52%|█████▏    | 261/500 [00:13<00:17, 13.58it/s]     53%|█████▎    | 263/500 [00:14<00:22, 10.41it/s]     53%|█████▎    | 265/500 [00:14<00:36,  6.47it/s]     53%|█████▎    | 267/500 [00:15<00:38,  6.01it/s]     54%|█████▎    | 268/500 [00:15<00:36,  6.43it/s]     54%|█████▍    | 270/500 [00:15<00:28,  8.20it/s]     54%|█████▍    | 272/500 [00:15<00:25,  8.91it/s]     55%|█████▍    | 274/500 [00:15<00:25,  8.86it/s]     55%|█████▌    | 276/500 [00:16<00:27,  8.18it/s]     55%|█████▌    | 277/500 [00:16<00:26,  8.44it/s]     56%|█████▌    | 278/500 [00:16<00:29,  7.40it/s]     56%|█████▌    | 279/500 [00:16<00:28,  7.70it/s]     56%|█████▌    | 280/500 [00:16<00:32,  6.81it/s]     56%|█████▌    | 281/500 [00:17<00:45,  4.82it/s]     56%|█████▋    | 282/500 [00:17<00:40,  5.43it/s]     57%|█████▋    | 283/500 [00:17<00:40,  5.35it/s]     57%|█████▋    | 284/500 [00:17<00:40,  5.30it/s]     57%|█████▋    | 285/500 [00:17<00:40,  5.25it/s]     57%|█████▋    | 286/500 [00:17<00:35,  6.07it/s]     57%|█████▋    | 287/500 [00:18<00:31,  6.70it/s]     58%|█████▊    | 288/500 [00:18<00:28,  7.42it/s]     58%|█████▊    | 290/500 [00:18<00:24,  8.58it/s]     58%|█████▊    | 291/500 [00:18<00:23,  8.84it/s]     58%|█████▊    | 292/500 [00:18<00:23,  8.95it/s]     59%|█████▉    | 294/500 [00:18<00:25,  8.12it/s]     59%|█████▉    | 296/500 [00:18<00:20,  9.95it/s]     60%|█████▉    | 298/500 [00:19<00:23,  8.63it/s]     60%|█████▉    | 299/500 [00:19<00:22,  8.85it/s]     60%|██████    | 300/500 [00:19<00:30,  6.58it/s]     60%|██████    | 302/500 [00:19<00:22,  8.73it/s]     61%|██████    | 304/500 [00:19<00:18, 10.77it/s]     61%|██████    | 306/500 [00:20<00:18, 10.62it/s]     62%|██████▏   | 308/500 [00:20<00:18, 10.54it/s]     62%|██████▏   | 310/500 [00:20<00:15, 12.13it/s]     62%|██████▏   | 312/500 [00:20<00:16, 11.37it/s]     63%|██████▎   | 314/500 [00:20<00:16, 11.12it/s]     63%|██████▎   | 316/500 [00:20<00:14, 12.54it/s]     64%|██████▎   | 318/500 [00:21<00:14, 12.14it/s]     64%|██████▍   | 320/500 [00:21<00:15, 11.45it/s]     64%|██████▍   | 322/500 [00:21<00:13, 12.80it/s]     65%|██████▍   | 324/500 [00:21<00:14, 11.84it/s]     65%|██████▌   | 326/500 [00:21<00:15, 11.21it/s]     66%|██████▌   | 328/500 [00:22<00:18,  9.36it/s]     66%|██████▌   | 330/500 [00:22<00:17,  9.66it/s]     66%|██████▋   | 332/500 [00:22<00:17,  9.64it/s]     67%|██████▋   | 334/500 [00:22<00:16,  9.86it/s]     67%|██████▋   | 336/500 [00:22<00:14, 11.23it/s]     68%|██████▊   | 338/500 [00:22<00:14, 11.20it/s]     68%|██████▊   | 340/500 [00:23<00:12, 12.55it/s]     68%|██████▊   | 342/500 [00:23<00:11, 13.82it/s]     69%|██████▉   | 345/500 [00:23<00:10, 14.88it/s]     69%|██████▉   | 347/500 [00:23<00:09, 15.72it/s]     70%|██████▉   | 349/500 [00:23<00:09, 16.52it/s]     70%|███████   | 351/500 [00:23<00:10, 14.10it/s]     71%|███████   | 353/500 [00:23<00:09, 14.99it/s]     71%|███████   | 355/500 [00:23<00:09, 16.04it/s]     72%|███████▏  | 358/500 [00:24<00:10, 13.50it/s]     72%|███████▏  | 360/500 [00:24<00:09, 14.77it/s]     72%|███████▏  | 362/500 [00:24<00:08, 15.85it/s]     73%|███████▎  | 365/500 [00:24<00:07, 18.60it/s]     74%|███████▎  | 368/500 [00:24<00:09, 14.52it/s]     74%|███████▍  | 370/500 [00:24<00:08, 15.31it/s]     74%|███████▍  | 372/500 [00:25<00:07, 16.27it/s]     75%|███████▍  | 374/500 [00:25<00:08, 14.21it/s]     75%|███████▌  | 377/500 [00:25<00:07, 17.32it/s]     76%|███████▌  | 379/500 [00:25<00:06, 17.67it/s]     76%|███████▌  | 381/500 [00:25<00:07, 15.11it/s]     77%|███████▋  | 383/500 [00:25<00:07, 15.85it/s]     77%|███████▋  | 385/500 [00:25<00:08, 13.91it/s]     77%|███████▋  | 387/500 [00:26<00:07, 15.18it/s]     78%|███████▊  | 389/500 [00:26<00:06, 16.14it/s]     78%|███████▊  | 392/500 [00:26<00:05, 19.10it/s]     79%|███████▉  | 395/500 [00:26<00:05, 17.89it/s]     80%|███████▉  | 398/500 [00:26<00:05, 20.13it/s]     80%|████████  | 401/500 [00:26<00:05, 18.53it/s]     81%|████████  | 403/500 [00:26<00:05, 18.66it/s]     81%|████████  | 405/500 [00:26<00:05, 18.78it/s]     81%|████████▏ | 407/500 [00:27<00:04, 18.92it/s]     82%|████████▏ | 410/500 [00:27<00:05, 17.75it/s]     82%|████████▏ | 412/500 [00:27<00:04, 18.16it/s]     83%|████████▎ | 414/500 [00:27<00:05, 14.94it/s]     83%|████████▎ | 416/500 [00:27<00:05, 15.82it/s]     84%|████████▎ | 418/500 [00:27<00:04, 16.74it/s]     84%|████████▍ | 420/500 [00:27<00:05, 14.37it/s]     84%|████████▍ | 422/500 [00:28<00:05, 15.44it/s]     85%|████████▍ | 424/500 [00:28<00:04, 16.52it/s]     85%|████████▌ | 426/500 [00:28<00:04, 17.40it/s]     86%|████████▌ | 428/500 [00:28<00:04, 14.86it/s]     86%|████████▌ | 430/500 [00:28<00:04, 15.69it/s]     86%|████████▋ | 432/500 [00:28<00:04, 16.69it/s]     87%|████████▋ | 434/500 [00:28<00:03, 17.43it/s]     87%|████████▋ | 436/500 [00:28<00:03, 18.11it/s]     88%|████████▊ | 438/500 [00:28<00:03, 18.29it/s]     88%|████████▊ | 440/500 [00:29<00:03, 15.38it/s]     88%|████████▊ | 442/500 [00:29<00:03, 16.14it/s]     89%|████████▉ | 444/500 [00:29<00:03, 16.95it/s]     89%|████████▉ | 446/500 [00:29<00:03, 13.71it/s]     90%|████████▉ | 448/500 [00:29<00:04, 10.60it/s]     90%|█████████ | 450/500 [00:30<00:04, 10.52it/s]     90%|█████████ | 452/500 [00:30<00:03, 12.06it/s]     91%|█████████ | 454/500 [00:30<00:04, 11.46it/s]     91%|█████████ | 456/500 [00:30<00:04, 10.86it/s]     92%|█████████▏| 458/500 [00:30<00:03, 12.43it/s]     92%|█████████▏| 460/500 [00:30<00:03, 11.73it/s]     92%|█████████▏| 462/500 [00:30<00:02, 12.93it/s]     93%|█████████▎| 465/500 [00:31<00:02, 14.10it/s]     93%|█████████▎| 467/500 [00:31<00:02, 15.25it/s]     94%|█████████▍| 470/500 [00:31<00:01, 15.50it/s]     94%|█████████▍| 472/500 [00:31<00:01, 16.27it/s]     95%|█████████▍| 474/500 [00:31<00:01, 16.85it/s]     95%|█████████▌| 476/500 [00:31<00:01, 14.83it/s]     96%|█████████▌| 478/500 [00:31<00:01, 15.64it/s]     96%|█████████▌| 480/500 [00:32<00:01, 16.51it/s]     96%|█████████▋| 482/500 [00:32<00:01, 16.95it/s]     97%|█████████▋| 484/500 [00:32<00:01, 14.29it/s]     97%|█████████▋| 486/500 [00:32<00:01, 10.83it/s]     98%|█████████▊| 488/500 [00:32<00:01, 10.52it/s]     98%|█████████▊| 490/500 [00:33<00:00, 10.38it/s]     98%|█████████▊| 492/500 [00:33<00:00, 10.37it/s]     99%|█████████▉| 494/500 [00:33<00:00,  8.77it/s]     99%|█████████▉| 495/500 [00:33<00:00,  7.73it/s]     99%|█████████▉| 496/500 [00:33<00:00,  7.95it/s]     99%|█████████▉| 497/500 [00:34<00:00,  6.14it/s]    100%|█████████▉| 499/500 [00:34<00:00,  7.14it/s]    100%|██████████| 500/500 [00:34<00:00,  6.75it/s]    100%|██████████| 500/500 [00:34<00:00, 14.47it/s]
    [{'average': 8.464679121971132e-07,
      'context_size': 184,
      'deviation': 1.0678271663529885e-07,
      'max_exec': 1.1184811592102051e-06,
      'min_exec': 7.736310362815856e-07,
      'number': 50,
      'repeat': 10,
      'ttime': 8.464679121971131e-06,
      'warmup_time': 1.9591301679611206e-05,
      'x_name': 10},
     {'average': 8.957497775554656e-07,
      'context_size': 184,
      'deviation': 1.5693127066165047e-08,
      'max_exec': 9.367987513542175e-07,
      'min_exec': 8.71308147907257e-07,
      'number': 50,
      'repeat': 10,
      'ttime': 8.957497775554656e-06,
      'warmup_time': 4.9229711294174194e-06,
      'x_name': 110}]




.. GENERATED FROM PYTHON SOURCE LINES 68-73

blas dot
++++++++

:epkg:`numpy` implementation uses :epkg:`BLAS`.
Let's make a direct call to it.

.. GENERATED FROM PYTHON SOURCE LINES 73-81

.. code-block:: Python


    for ctx in ctxs:
        ctx["ddot"] = cblas_ddot

    res_ddot = list(measure_time_dim("ddot(va, vb)", ctxs, verbose=1))

    pprint.pprint(res_ddot[:2])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/500 [00:00<?, ?it/s]      4%|▍         | 20/500 [00:00<00:02, 198.68it/s]     15%|█▍        | 74/500 [00:00<00:01, 393.62it/s]     23%|██▎       | 114/500 [00:00<00:02, 169.72it/s]     28%|██▊       | 140/500 [00:01<00:03, 113.69it/s]     32%|███▏      | 159/500 [00:01<00:03, 96.20it/s]      35%|███▍      | 173/500 [00:01<00:03, 89.09it/s]     37%|███▋      | 185/500 [00:01<00:03, 81.86it/s]     39%|███▉      | 195/500 [00:01<00:03, 82.45it/s]     41%|████      | 205/500 [00:01<00:03, 74.99it/s]     43%|████▎     | 214/500 [00:02<00:03, 75.86it/s]     45%|████▍     | 223/500 [00:02<00:03, 76.84it/s]     46%|████▋     | 232/500 [00:02<00:03, 67.41it/s]     48%|████▊     | 240/500 [00:02<00:03, 68.90it/s]     50%|████▉     | 248/500 [00:02<00:03, 70.25it/s]     51%|█████     | 256/500 [00:02<00:03, 71.37it/s]     53%|█████▎    | 264/500 [00:02<00:03, 62.58it/s]     54%|█████▍    | 271/500 [00:02<00:03, 63.99it/s]     56%|█████▌    | 279/500 [00:03<00:03, 67.23it/s]     57%|█████▋    | 286/500 [00:03<00:03, 67.51it/s]     59%|█████▊    | 293/500 [00:03<00:03, 67.66it/s]     60%|██████    | 300/500 [00:03<00:02, 67.74it/s]     61%|██████▏   | 307/500 [00:03<00:02, 67.87it/s]     63%|██████▎   | 314/500 [00:03<00:02, 68.05it/s]     64%|██████▍   | 321/500 [00:03<00:02, 67.40it/s]     66%|██████▌   | 328/500 [00:03<00:02, 67.60it/s]     67%|██████▋   | 335/500 [00:03<00:02, 67.82it/s]     68%|██████▊   | 342/500 [00:04<00:02, 57.71it/s]     70%|██████▉   | 349/500 [00:04<00:02, 59.76it/s]     71%|███████   | 356/500 [00:04<00:02, 61.93it/s]     73%|███████▎  | 363/500 [00:04<00:02, 63.38it/s]     74%|███████▍  | 370/500 [00:04<00:02, 64.79it/s]     75%|███████▌  | 377/500 [00:04<00:01, 65.58it/s]     77%|███████▋  | 384/500 [00:04<00:01, 65.74it/s]     78%|███████▊  | 391/500 [00:04<00:01, 65.60it/s]     80%|███████▉  | 398/500 [00:04<00:01, 55.97it/s]     81%|████████  | 404/500 [00:05<00:01, 55.72it/s]     82%|████████▏ | 410/500 [00:05<00:02, 44.09it/s]     83%|████████▎ | 416/500 [00:05<00:01, 47.00it/s]     84%|████████▍ | 422/500 [00:05<00:01, 49.44it/s]     86%|████████▌ | 428/500 [00:05<00:01, 51.36it/s]     87%|████████▋ | 434/500 [00:05<00:01, 45.66it/s]     88%|████████▊ | 440/500 [00:05<00:01, 48.35it/s]     89%|████████▉ | 446/500 [00:06<00:01, 50.53it/s]     90%|█████████ | 452/500 [00:06<00:00, 51.65it/s]     92%|█████████▏| 458/500 [00:06<00:00, 52.94it/s]     93%|█████████▎| 464/500 [00:06<00:00, 46.57it/s]     94%|█████████▍| 470/500 [00:06<00:00, 48.98it/s]     95%|█████████▌| 476/500 [00:06<00:00, 50.99it/s]     96%|█████████▋| 482/500 [00:06<00:00, 52.54it/s]     98%|█████████▊| 488/500 [00:06<00:00, 53.42it/s]     99%|█████████▉| 494/500 [00:06<00:00, 54.20it/s]    100%|██████████| 500/500 [00:07<00:00, 47.42it/s]    100%|██████████| 500/500 [00:07<00:00, 70.52it/s]
    [{'average': 2.4474412202835084e-06,
      'context_size': 272,
      'deviation': 3.84676080955251e-08,
      'max_exec': 2.5602057576179504e-06,
      'min_exec': 2.4193897843360903e-06,
      'number': 50,
      'repeat': 10,
      'ttime': 2.4474412202835084e-05,
      'warmup_time': 8.581206202507019e-05,
      'x_name': 10},
     {'average': 2.54121795296669e-06,
      'context_size': 272,
      'deviation': 1.0918719996637317e-07,
      'max_exec': 2.808570861816406e-06,
      'min_exec': 2.330020070075989e-06,
      'number': 50,
      'repeat': 10,
      'ttime': 2.54121795296669e-05,
      'warmup_time': 1.2997537851333618e-05,
      'x_name': 110}]




.. GENERATED FROM PYTHON SOURCE LINES 82-84

Let's display the results
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 84-105

.. code-block:: Python


    df1 = DataFrame(res_pydot)
    df1["fct"] = "pydot"
    df2 = DataFrame(res_dot)
    df2["fct"] = "numpy.dot"
    df3 = DataFrame(res_ddot)
    df3["fct"] = "ddot"

    cc = concat([df1, df2, df3])
    cc["N"] = cc["x_name"]

    fig, ax = plt.subplots(1, 2, figsize=(10, 4))
    cc[cc.N <= 1100].pivot(index="N", columns="fct", values="average").plot(
        logy=True, logx=True, ax=ax[0]
    )
    cc[cc.fct != "pydot"].pivot(index="N", columns="fct", values="average").plot(
        logy=True, logx=True, ax=ax[1]
    )
    ax[0].set_title("Comparison of dot implementations")
    ax[1].set_title("Comparison of dot implementations\nwithout python")




.. image-sg:: /auto_examples/images/sphx_glr_plot_benchmark_dot_001.png
   :alt: Comparison of dot implementations, Comparison of dot implementations without python
   :srcset: /auto_examples/images/sphx_glr_plot_benchmark_dot_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Comparison of dot implementations\nwithout python')



.. GENERATED FROM PYTHON SOURCE LINES 106-109

The results depends on the machine, its
number of cores, the compilation settings
of :epkg:`numpy` or this module.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 43.865 seconds)


.. _sphx_glr_download_auto_examples_plot_benchmark_dot.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_benchmark_dot.ipynb <plot_benchmark_dot.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_benchmark_dot.py <plot_benchmark_dot.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
