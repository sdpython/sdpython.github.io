
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_check_random_order.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_check_random_order.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_check_random_order.py:


Random order for a sum
======================

Parallelization usually means a summation is done with a random order.
That may lead to different values if the computation is made many times
even though the result should be the same. This example compares
summation of random permutation of the same array of values.

Setup
+++++

.. GENERATED FROM PYTHON SOURCE LINES 13-32

.. code-block:: Python

    from tqdm import tqdm
    import numpy as np
    import pandas

    unique_values = np.array(
        [2.1102535724639893, 0.5986238718032837, -0.49545818567276], dtype=np.float32
    )
    random_index = np.random.randint(0, 3, 2000)
    assert set(random_index) == {0, 1, 2}
    values = unique_values[random_index]

    s0 = values.sum()
    s1 = np.array(0, dtype=np.float32)
    for n in values:
        s1 += n

    delta = s1 - s0
    print(f"reduced sum={s0}, iterative sum={s1}, delta={delta}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    reduced sum=1618.072509765625, iterative sum=1618.0577392578125, delta=-0.0147705078125




.. GENERATED FROM PYTHON SOURCE LINES 33-40

There are discrepancies.

Random order
++++++++++++

Let's go further and check the sum of random permutation of the same set.
Let's compare the result with the same sum done with a higher precision (double).

.. GENERATED FROM PYTHON SOURCE LINES 40-77

.. code-block:: Python



    def check_orders(values, n=200, bias=0):
        double_sums = []
        sums = []
        reduced_sums = []
        reduced_dsums = []
        for i in tqdm(range(n)):
            permuted_values = np.random.permutation(values)
            s = np.array(bias, dtype=np.float32)
            sd = np.array(bias, dtype=np.float64)
            for n in permuted_values:
                s += n
                sd += n
            sums.append(s)
            double_sums.append(sd)
            reduced_sums.append(permuted_values.sum() + bias)
            reduced_dsums.append(permuted_values.astype(np.float64).sum() + bias)

        data = []
        mi, ma = min(sums), max(sums)
        data.append(dict(name="seq_fp32", min=mi, max=ma, bias=bias))
        print(f"min={mi} max={ma} delta={ma-mi}")
        mi, ma = min(double_sums), max(double_sums)
        data.append(dict(name="seq_fp64", min=mi, max=ma, bias=bias))
        print(f"min={mi} max={ma} delta={ma-mi} (double)")
        mi, ma = min(reduced_sums), max(reduced_sums)
        data.append(dict(name="red_f32", min=mi, max=ma, bias=bias))
        print(f"min={mi} max={ma} delta={ma-mi} (reduced)")
        mi, ma = min(reduced_dsums), max(reduced_dsums)
        data.append(dict(name="red_f64", min=mi, max=ma, bias=bias))
        print(f"min={mi} max={ma} delta={ma-mi} (reduced)")
        return data


    data1 = check_orders(values)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/200 [00:00<?, ?it/s]      4%|▍         | 9/200 [00:00<00:02, 84.39it/s]      9%|▉         | 18/200 [00:00<00:02, 81.55it/s]     14%|█▎        | 27/200 [00:00<00:02, 79.57it/s]     18%|█▊        | 37/200 [00:00<00:01, 86.93it/s]     23%|██▎       | 46/200 [00:00<00:01, 85.55it/s]     28%|██▊       | 56/200 [00:00<00:01, 90.09it/s]     35%|███▌      | 70/200 [00:00<00:01, 105.78it/s]     40%|████      | 81/200 [00:00<00:01, 100.59it/s]     48%|████▊     | 97/200 [00:00<00:00, 117.86it/s]     55%|█████▍    | 109/200 [00:01<00:00, 116.16it/s]     60%|██████    | 121/200 [00:01<00:00, 107.94it/s]     68%|██████▊   | 135/200 [00:01<00:00, 116.24it/s]     74%|███████▎  | 147/200 [00:01<00:00, 116.99it/s]     80%|████████  | 160/200 [00:01<00:00, 118.81it/s]     88%|████████▊ | 175/200 [00:01<00:00, 127.75it/s]     94%|█████████▍| 189/200 [00:01<00:00, 128.88it/s]    100%|██████████| 200/200 [00:01<00:00, 111.11it/s]
    min=1618.05517578125 max=1618.0579833984375 delta=0.0028076171875
    min=1618.0725121498108 max=1618.0725121498108 delta=0.0 (double)
    min=1618.0723876953125 max=1618.072509765625 delta=0.0001220703125 (reduced)
    min=1618.0725121498108 max=1618.0725121498108 delta=0.0 (reduced)




.. GENERATED FROM PYTHON SOURCE LINES 78-90

This example clearly shows the order has an impact.
It is usually unavoidable but it could reduced if the sum
it close to zero. In that case, the sum would be of the same
order of magnitude of the add values.

Removing the average
++++++++++++++++++++

Computing the average of the values requires to compute the sum.
However if we have an estimator of this average, not necessarily
the exact value, we would help the summation to keep the same order
of magnitude than the values it adds.

.. GENERATED FROM PYTHON SOURCE LINES 90-95

.. code-block:: Python


    mean = unique_values.mean()
    values -= mean
    data2 = check_orders(values, bias=len(values) * mean)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/200 [00:00<?, ?it/s]      6%|▋         | 13/200 [00:00<00:01, 121.99it/s]     13%|█▎        | 26/200 [00:00<00:01, 95.88it/s]      20%|██        | 40/200 [00:00<00:01, 110.26it/s]     26%|██▌       | 52/200 [00:00<00:01, 110.35it/s]     33%|███▎      | 66/200 [00:00<00:01, 119.81it/s]     40%|████      | 81/200 [00:00<00:00, 128.05it/s]     48%|████▊     | 96/200 [00:00<00:00, 133.99it/s]     55%|█████▌    | 110/200 [00:00<00:00, 129.82it/s]     62%|██████▏   | 124/200 [00:01<00:00, 107.33it/s]     68%|██████▊   | 136/200 [00:01<00:00, 98.16it/s]      74%|███████▎  | 147/200 [00:01<00:00, 93.10it/s]     78%|███████▊  | 157/200 [00:01<00:00, 71.40it/s]     83%|████████▎ | 166/200 [00:01<00:00, 72.03it/s]     90%|████████▉ | 179/200 [00:01<00:00, 84.76it/s]     94%|█████████▍| 189/200 [00:01<00:00, 85.74it/s]    100%|██████████| 200/200 [00:02<00:00, 90.48it/s]    100%|██████████| 200/200 [00:02<00:00, 98.04it/s]
    min=1618.0731201171875 max=1618.0731201171875 delta=0.0
    min=1618.0724694132805 max=1618.0724694132805 delta=0.0 (double)
    min=1618.072470664978 max=1618.0725011825562 delta=3.0517578125e-05 (reduced)
    min=1618.0724694132805 max=1618.0724694132805 delta=0.0 (reduced)




.. GENERATED FROM PYTHON SOURCE LINES 96-97

The differences are clearly lower.

.. GENERATED FROM PYTHON SOURCE LINES 97-103

.. code-block:: Python


    df = pandas.DataFrame(data1 + data2)
    df["delta"] = df["max"] - df["min"]
    piv = df.pivot(index="name", columns="bias", values="delta")
    print(piv)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    bias     0.000000    1475.612998
    name                            
    red_f32     0.000122    0.000031
    red_f64          0.0         0.0
    seq_fp32    0.002808         0.0
    seq_fp64         0.0         0.0




.. GENERATED FROM PYTHON SOURCE LINES 104-105

Plots.

.. GENERATED FROM PYTHON SOURCE LINES 105-110

.. code-block:: Python


    ax = piv.plot.barh()
    ax.set_title("max(sum) - min(sum) over random orders")
    ax.get_figure().tight_layout()
    ax.get_figure().savefig("plot_check_random_order.png")



.. image-sg:: /auto_examples/images/sphx_glr_plot_check_random_order_001.png
   :alt: max(sum) - min(sum) over random orders
   :srcset: /auto_examples/images/sphx_glr_plot_check_random_order_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.671 seconds)


.. _sphx_glr_download_auto_examples_plot_check_random_order.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_check_random_order.ipynb <plot_check_random_order.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_check_random_order.py <plot_check_random_order.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
