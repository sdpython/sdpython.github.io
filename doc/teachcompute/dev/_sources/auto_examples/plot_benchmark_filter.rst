
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_benchmark_filter.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_benchmark_filter.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_benchmark_filter.py:


Compares filtering implementations (numpy, cython)
==================================================

The benchmark looks into different ways to implement
thresholding: every value of a vector superior to *mx*
is replaced by *mx*. It compares several implementation
to :epkg:`numpy`.

* :func:`cfilter_dmax <teachcompute.validation.cython.experiment_cython.cfilter_dmax>`
  `cfilter_dmax <https://github.com/sdpython/teachcompute/blob/main/
  teachcompute/validation/cython/experiment_cython.pyx#L93>`_
* :func:`cfilter_dmax2 <teachcompute.validation.cython.experiment_cython.cfilter_dmax2>`
  `cfilter_dmax2 <https://github.com/sdpython/teachcompute/blob/main/
  teachcompute/validation/cython/experiment_cython.pyx#L107>`_
* :func:`cfilter_dmax4 <teachcompute.validation.cython.experiment_cython.cfilter_dmax4>`
  `cfilter_dmax4 <https://github.com/sdpython/teachcompute/blob/main/
  teachcompute/validation/cython/experiment_cython.pyx#L138>`_
* :func:`cfilter_dmax16 <teachcompute.validation.cython.experiment_cython.cfilter_dmax16>`
  `cfilter_dmax16 <https://github.com/sdpython/teachcompute/blob/main/
  teachcompute/validation/cython/experiment_cython.pyx#L122>`_
* :func:`cyfilter_dmax <teachcompute.validation.cython.experiment_cython.cyfilter_dmax>`
  `cyfilter_dmax <https://github.com/sdpython/teachcompute/blob/main/
  teachcompute/validation/cython/experiment_cython.pyx#L72>`_
* :func:`filter_dmax_cython
  <teachcompute.validation.cython.experiment_cython.filter_dmax_cython>`
  `filter_dmax_cython <https://github.com/sdpython/teachcompute/blob/main/
  teachcompute/validation/cython/experiment_cython.pyx#L28>`_
* :func:`filter_dmax_cython_optim
  <teachcompute.validation.cython.experiment_cython.filter_dmax_cython_optim>`
  `filter_dmax_cython_optim <https://github.com/sdpython/teachcompute/blob/main/
  teachcompute/validation/cython/experiment_cython.pyx#L43>`_
* :func:`pyfilter_dmax
  <teachcompute.validation.cython.experiment_cython.pyfilter_dmax>`
  `pyfilter_dmax <https://github.com/sdpython/teachcompute/blob/main/
  teachcompute/validation/cython/experiment_cython.pyx#L15>`_

.. GENERATED FROM PYTHON SOURCE LINES 38-94

.. code-block:: Python


    import pprint
    import numpy
    import matplotlib.pyplot as plt
    from pandas import DataFrame
    from teachcompute.validation.cython.experiment_cython import (
        pyfilter_dmax,
        filter_dmax_cython,
        filter_dmax_cython_optim,
        cyfilter_dmax,
        cfilter_dmax,
        cfilter_dmax2,
        cfilter_dmax16,
        cfilter_dmax4,
    )
    from teachcompute.ext_test_case import measure_time_dim


    def get_vectors(fct, n, h=200, dtype=numpy.float64):
        ctxs = [
            dict(
                va=numpy.random.randn(n).astype(dtype),
                fil=fct,
                mx=numpy.float64(0),
                x_name=n,
            )
            for n in range(10, n, h)
        ]
        return ctxs


    def numpy_filter(va, mx):
        va[va > mx] = mx


    all_res = []
    for fct in [
        numpy_filter,
        pyfilter_dmax,
        filter_dmax_cython,
        filter_dmax_cython_optim,
        cyfilter_dmax,
        cfilter_dmax,
        cfilter_dmax2,
        cfilter_dmax16,
        cfilter_dmax4,
    ]:
        print(fct)
        ctxs = get_vectors(fct, 1000 if fct == pyfilter_dmax else 40000)
        res = list(measure_time_dim("fil(va, mx)", ctxs, verbose=1))
        for r in res:
            r["fct"] = fct.__name__
        all_res.extend(res)

    pprint.pprint(all_res[:2])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <function numpy_filter at 0x7f50b7028940>
      0%|          | 0/200 [00:00<?, ?it/s]     24%|██▍       | 48/200 [00:00<00:00, 478.21it/s]     48%|████▊     | 96/200 [00:00<00:00, 312.14it/s]     66%|██████▌   | 131/200 [00:00<00:00, 254.36it/s]     80%|███████▉  | 159/200 [00:00<00:00, 222.36it/s]     92%|█████████▏| 183/200 [00:00<00:00, 192.67it/s]    100%|██████████| 200/200 [00:00<00:00, 216.88it/s]
    <cyfunction pyfilter_dmax at 0x7f5088f7ac20>
      0%|          | 0/5 [00:00<?, ?it/s]    100%|██████████| 5/5 [00:00<00:00, 53.97it/s]
    <cyfunction filter_dmax_cython at 0x7f5088f7b850>
      0%|          | 0/200 [00:00<?, ?it/s]     37%|███▋      | 74/200 [00:00<00:00, 731.10it/s]     74%|███████▍  | 148/200 [00:00<00:00, 359.33it/s]     97%|█████████▋| 194/200 [00:00<00:00, 285.14it/s]    100%|██████████| 200/200 [00:00<00:00, 312.74it/s]
    <cyfunction filter_dmax_cython_optim at 0x7f5088f7bed0>
      0%|          | 0/200 [00:00<?, ?it/s]     40%|████      | 80/200 [00:00<00:00, 791.45it/s]     80%|████████  | 160/200 [00:00<00:00, 357.75it/s]    100%|██████████| 200/200 [00:00<00:00, 323.16it/s]
    <cyfunction cyfilter_dmax at 0x7f5088f7be00>
      0%|          | 0/200 [00:00<?, ?it/s]     40%|████      | 80/200 [00:00<00:00, 795.13it/s]     80%|████████  | 160/200 [00:00<00:00, 389.43it/s]    100%|██████████| 200/200 [00:00<00:00, 339.95it/s]
    <cyfunction cfilter_dmax at 0x7f50b6ef0ee0>
      0%|          | 0/200 [00:00<?, ?it/s]     40%|████      | 80/200 [00:00<00:00, 790.24it/s]     80%|████████  | 160/200 [00:00<00:00, 395.88it/s]    100%|██████████| 200/200 [00:00<00:00, 336.80it/s]
    <cyfunction cfilter_dmax2 at 0x7f50b6ef0e10>
      0%|          | 0/200 [00:00<?, ?it/s]     47%|████▋     | 94/200 [00:00<00:00, 925.16it/s]     94%|█████████▎| 187/200 [00:00<00:00, 454.19it/s]    100%|██████████| 200/200 [00:00<00:00, 463.34it/s]
    <cyfunction cfilter_dmax16 at 0x7f50b6ef0d40>
      0%|          | 0/200 [00:00<?, ?it/s]     29%|██▉       | 58/200 [00:00<00:00, 576.40it/s]     58%|█████▊    | 116/200 [00:00<00:00, 265.64it/s]     76%|███████▌  | 152/200 [00:00<00:00, 171.54it/s]     88%|████████▊ | 176/200 [00:01<00:00, 143.08it/s]     98%|█████████▊| 195/200 [00:01<00:00, 124.70it/s]    100%|██████████| 200/200 [00:01<00:00, 154.62it/s]
    <cyfunction cfilter_dmax4 at 0x7f50b6ef0c70>
      0%|          | 0/200 [00:00<?, ?it/s]     26%|██▌       | 51/200 [00:00<00:00, 507.25it/s]     51%|█████     | 102/200 [00:00<00:00, 262.13it/s]     68%|██████▊   | 135/200 [00:00<00:00, 192.44it/s]     80%|███████▉  | 159/200 [00:00<00:00, 157.36it/s]     89%|████████▉ | 178/200 [00:01<00:00, 134.61it/s]     97%|█████████▋| 194/200 [00:01<00:00, 121.06it/s]    100%|██████████| 200/200 [00:01<00:00, 151.25it/s]
    [{'average': 1.2499999984356692e-06,
      'context_size': 232,
      'deviation': 1.3535141185601317e-08,
      'fct': 'numpy_filter',
      'max_exec': 1.2820000029023503e-06,
      'min_exec': 1.2359999982436421e-06,
      'number': 50,
      'repeat': 10,
      'ttime': 1.2499999984356691e-05,
      'warmup_time': 3.5600000046542846e-05,
      'x_name': 10},
     {'average': 1.4046000005691895e-06,
      'context_size': 232,
      'deviation': 1.834536447496029e-07,
      'fct': 'numpy_filter',
      'max_exec': 1.8980000004376053e-06,
      'min_exec': 1.2859999969805358e-06,
      'number': 50,
      'repeat': 10,
      'ttime': 1.4046000005691894e-05,
      'warmup_time': 1.8900000213761814e-05,
      'x_name': 210}]




.. GENERATED FROM PYTHON SOURCE LINES 95-97

Let's display the results
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 97-117

.. code-block:: Python


    cc = DataFrame(all_res)
    cc["N"] = cc["x_name"]

    fig, ax = plt.subplots(2, 2, figsize=(10, 10))
    cc[cc.N <= 1100].pivot(index="N", columns="fct", values="average").plot(
        logy=True, ax=ax[0, 0]
    )
    cc[cc.fct != "pyfilter_dmax"].pivot(index="N", columns="fct", values="average").plot(
        logy=True, ax=ax[0, 1]
    )
    cc[cc.fct != "pyfilter_dmax"].pivot(index="N", columns="fct", values="average").plot(
        logy=True, logx=True, ax=ax[1, 1]
    )
    cc[(cc.fct.str.contains("cfilter") | cc.fct.str.contains("numpy"))].pivot(
        index="N", columns="fct", values="average"
    ).plot(logy=True, ax=ax[1, 0])
    ax[0, 0].set_title("Comparison of filter implementations")
    ax[0, 1].set_title("Comparison of filter implementations\n" "without pyfilter_dmax")




.. image-sg:: /auto_examples/images/sphx_glr_plot_benchmark_filter_001.png
   :alt: Comparison of filter implementations, Comparison of filter implementations without pyfilter_dmax
   :srcset: /auto_examples/images/sphx_glr_plot_benchmark_filter_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Comparison of filter implementations\nwithout pyfilter_dmax')



.. GENERATED FROM PYTHON SOURCE LINES 118-121

The results depends on the machine, its
number of cores, the compilation settings
of :epkg:`numpy` or this module.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 8.258 seconds)


.. _sphx_glr_download_auto_examples_plot_benchmark_filter.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_benchmark_filter.ipynb <plot_benchmark_filter.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_benchmark_filter.py <plot_benchmark_filter.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
