
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_cpu_vector_sum_avx_parallel.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_bench_cpu_vector_sum_avx_parallel.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_cpu_vector_sum_avx_parallel.py:


Measuring CPU performance with a parallelized vector sum and AVX
================================================================

The example compares the time spend in computing the sum of all
coefficients of a matrix when the function walks through the coefficients
by rows or by columns when the computation is parallelized or uses
AVX instructions.

Vector Sum
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 13-94

.. code-block:: Python


    from tqdm import tqdm
    import numpy
    import matplotlib.pyplot as plt
    from pandas import DataFrame
    from teachcompute.ext_test_case import measure_time, unit_test_going
    from teachcompute.validation.cpu._validation import (
        vector_sum_array as vector_sum,
        vector_sum_array_parallel as vector_sum_parallel,
        vector_sum_array_avx as vector_sum_avx,
        vector_sum_array_avx_parallel as vector_sum_avx_parallel,
    )

    obs = []
    dims = [500, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 2000]
    if unit_test_going():
        dims = [10, 20]
    for dim in tqdm(dims):
        values = numpy.ones((dim, dim), dtype=numpy.float32).ravel()
        diff = abs(vector_sum(dim, values, True) - dim**2)

        res = measure_time(lambda: vector_sum(dim, values, True), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="rows",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        res = measure_time(lambda: vector_sum_parallel(dim, values, True), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="rows//",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        diff = abs(vector_sum_avx(dim, values) - dim**2)
        res = measure_time(lambda: vector_sum_avx(dim, values), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="avx",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        diff = abs(vector_sum_avx_parallel(dim, values) - dim**2)
        res = measure_time(lambda: vector_sum_avx_parallel(dim, values), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="avx//",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )


    df = DataFrame(obs)
    piv = df.pivot(index="dim", columns="direction", values="time_per_element")
    print(piv)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/14 [00:00<?, ?it/s]      7%|▋         | 1/14 [00:04<00:55,  4.24s/it]     14%|█▍        | 2/14 [00:06<00:37,  3.09s/it]     21%|██▏       | 3/14 [00:09<00:33,  3.05s/it]     29%|██▊       | 4/14 [00:11<00:27,  2.79s/it]     36%|███▌      | 5/14 [00:15<00:26,  2.94s/it]     43%|████▎     | 6/14 [00:17<00:23,  2.90s/it]     50%|█████     | 7/14 [00:23<00:27,  3.91s/it]     57%|█████▋    | 8/14 [00:28<00:24,  4.10s/it]     64%|██████▍   | 9/14 [00:30<00:17,  3.60s/it]     71%|███████▏  | 10/14 [00:33<00:13,  3.32s/it]     79%|███████▊  | 11/14 [00:36<00:09,  3.04s/it]     86%|████████▌ | 12/14 [00:38<00:05,  2.94s/it]     93%|█████████▎| 13/14 [00:41<00:02,  2.95s/it]    100%|██████████| 14/14 [00:45<00:00,  3.06s/it]    100%|██████████| 14/14 [00:45<00:00,  3.22s/it]
    direction           avx         avx//          rows        rows//
    dim                                                              
    500        1.512167e-10  2.950616e-09  1.855241e-09  1.440139e-08
    700        1.877625e-10  6.237171e-08  2.155305e-09  8.599473e-08
    800        1.629355e-10  1.772770e-09  1.848690e-09  6.424635e-08
    900        1.924012e-10  5.653333e-08  1.834217e-09  5.465495e-08
    1000       1.666293e-10  3.315017e-10  1.883859e-09  6.585092e-10
    1100       1.705578e-10  4.004711e-10  1.831431e-09  1.083185e-09
    1200       1.716864e-10  1.081397e-09  2.090013e-09  4.139317e-09
    1300       1.747439e-10  2.599927e-10  1.830424e-09  2.032528e-09
    1400       1.766222e-10  2.636467e-08  1.834431e-09  1.047474e-09
    1500       1.795695e-10  2.446098e-08  2.064137e-09  2.316949e-08
    1600       2.151855e-10  2.526122e-08  1.832087e-09  1.761861e-08
    1700       2.002644e-10  9.046881e-10  1.867974e-09  2.021210e-08
    1800       1.918103e-10  1.838992e-08  1.831447e-09  8.453765e-10
    2000       1.961881e-10  1.179109e-10  1.831125e-09  5.457923e-09




.. GENERATED FROM PYTHON SOURCE LINES 95-97

Plots
+++++

.. GENERATED FROM PYTHON SOURCE LINES 97-108

.. code-block:: Python


    piv_diff = df.pivot(index="dim", columns="direction", values="diff")
    piv_time = df.pivot(index="dim", columns="direction", values="time")

    fig, ax = plt.subplots(1, 3, figsize=(12, 6))
    piv.plot(ax=ax[0], logx=True, title="Comparison between two summation")
    piv_diff.plot(ax=ax[1], logx=True, logy=True, title="Summation errors")
    piv_time.plot(ax=ax[2], logx=True, logy=True, title="Total time")
    fig.tight_layout()
    fig.savefig("plot_bench_cpu_vector_sum_avx_parallel.png")




.. image-sg:: /auto_examples/images/sphx_glr_plot_bench_cpu_vector_sum_avx_parallel_001.png
   :alt: Comparison between two summation, Summation errors, Total time
   :srcset: /auto_examples/images/sphx_glr_plot_bench_cpu_vector_sum_avx_parallel_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 109-110

AVX is faster.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 46.293 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_cpu_vector_sum_avx_parallel.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_cpu_vector_sum_avx_parallel.ipynb <plot_bench_cpu_vector_sum_avx_parallel.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_cpu_vector_sum_avx_parallel.py <plot_bench_cpu_vector_sum_avx_parallel.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
