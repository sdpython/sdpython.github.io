
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_serialisation_examples.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_serialisation_examples.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_serialisation_examples.py:


=============
Sérialisation
=============

Le notebook explore différentes façons de sérialiser des données et leurs limites.

JSON
====

Le format :epkg:`JSON` est le format le plus utilisé sur internet
notemmant via les :epkg:`API REST`.

Ecriture (json)
+++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 18-40

.. code-block:: Python

    from io import StringIO, BytesIO
    import timeit
    import json
    import numpy
    import ujson
    import cloudpickle
    import pickle
    import matplotlib.pyplot as plt
    import pandas


    data = {
        "records": [
            {
                "nom": "Xavier",
                "prénom": "Xavier",
                "langages": [{"nom": "C++", "age": 40}, {"nom": "Python", "age": 20}],
            }
        ]
    }









.. GENERATED FROM PYTHON SOURCE LINES 42-49

.. code-block:: Python


    buffer = StringIO()
    res = json.dump(data, buffer)  # 1
    seq = buffer.getvalue()
    seq






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    '{"records": [{"nom": "Xavier", "pr\\u00e9nom": "Xavier", "langages": [{"nom": "C++", "age": 40}, {"nom": "Python", "age": 20}]}]}'



.. GENERATED FROM PYTHON SOURCE LINES 50-52

Lecture (json)
++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 52-59

.. code-block:: Python



    buffer = StringIO(seq)
    read = json.load(buffer)
    read






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'records': [{'nom': 'Xavier', 'prénom': 'Xavier', 'langages': [{'nom': 'C++', 'age': 40}, {'nom': 'Python', 'age': 20}]}]}



.. GENERATED FROM PYTHON SOURCE LINES 60-64

Limite
++++++

Les matrices :epkg:`numpy` ne sont pas sérialisables facilement.

.. GENERATED FROM PYTHON SOURCE LINES 64-75

.. code-block:: Python



    data = {"mat": numpy.array([0, 1])}

    buffer = StringIO()
    try:
        json.dump(data, buffer)
    except Exception as e:
        print(e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Object of type ndarray is not JSON serializable




.. GENERATED FROM PYTHON SOURCE LINES 76-77

Les classes ne sont pas sérialisables non plus facilement.

.. GENERATED FROM PYTHON SOURCE LINES 77-92

.. code-block:: Python



    class A:
        def __init__(self, att):
            self.att = att


    data = A("e")
    buffer = StringIO()
    try:
        json.dump(data, buffer)
    except Exception as e:
        print(e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Object of type A is not JSON serializable




.. GENERATED FROM PYTHON SOURCE LINES 93-96

Pour ce faire, il faut indiquer au module :mod:`json`
comment convertir la classe en un ensemble de listes et dictionnaires et
la classe :class:`json.JSONEncoder`.

.. GENERATED FROM PYTHON SOURCE LINES 96-109

.. code-block:: Python



    class MyEncoder(json.JSONEncoder):
        def default(self, o):
            return {"classname": o.__class__.__name__, "data": o.__dict__}


    data = A("e")
    buffer = StringIO()
    res = json.dump(data, buffer, cls=MyEncoder)
    res = buffer.getvalue()
    res





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    '{"classname": "A", "data": {"att": "e"}}'



.. GENERATED FROM PYTHON SOURCE LINES 110-111

Et la relecture avec la classe :class:`json.JSONDecoder`.

.. GENERATED FROM PYTHON SOURCE LINES 111-127

.. code-block:: Python



    class MyDecoder(json.JSONDecoder):
        def decode(self, o):
            dec = json.JSONDecoder.decode(self, o)
            if isinstance(dec, dict) and dec.get("classname") == "A":
                return A(dec["data"]["att"])
            else:
                return dec


    buffer = StringIO(res)
    obj = json.load(buffer, cls=MyDecoder)
    obj






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <__main__.A object at 0x7ff9335a77d0>



.. GENERATED FROM PYTHON SOURCE LINES 128-134

Sérialisation rapide
++++++++++++++++++++

Le module :mod:`json` est la librairie standard de Python mais comme
la sérialisation au format *JSON* est un besoin très fréquent,
il existe des alternative plus rapide comme :epkg:`ujson`.

.. GENERATED FROM PYTHON SOURCE LINES 134-147

.. code-block:: Python



    data = {
        "records": [
            {
                "nom": "Xavier",
                "prénom": "Xavier",
                "langages": [{"nom": "C++", "age": 40}, {"nom": "Python", "age": 20}],
            }
        ]
    }









.. GENERATED FROM PYTHON SOURCE LINES 149-157

.. code-block:: Python


    data_time = []
    expression = "json.dump(data, StringIO())"
    d = timeit.timeit(expression, globals=globals(), number=100)
    data_time.append(dict(expression=expression, time=d))
    d






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0015926189998936024



.. GENERATED FROM PYTHON SOURCE LINES 159-166

.. code-block:: Python


    expression = "ujson.dump(data, StringIO())"
    d = timeit.timeit(expression, globals=globals(), number=100)
    data_time.append(dict(expression=expression, time=d))
    d






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.000265873999978794



.. GENERATED FROM PYTHON SOURCE LINES 167-169

Ces deux lignes mesures l'écriture au format JSON
mais il faut aussi mesurer la lecture.

.. GENERATED FROM PYTHON SOURCE LINES 169-180

.. code-block:: Python



    buffer = StringIO()
    ujson.dump(data, buffer)
    res = buffer.getvalue()

    expression = "json.load(StringIO(res))"
    d = timeit.timeit(expression, globals=globals(), number=100)
    data_time.append(dict(expression=expression, time=d))
    d





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.00045357999988482334



.. GENERATED FROM PYTHON SOURCE LINES 182-188

.. code-block:: Python


    expression = "ujson.load(StringIO(res))"
    d = timeit.timeit(expression, globals=globals(), number=100)
    data_time.append(dict(expression=expression, time=d))
    d





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.000348645000030956



.. GENERATED FROM PYTHON SOURCE LINES 189-190

On enlève le temps passé dans la creation du buffer.

.. GENERATED FROM PYTHON SOURCE LINES 190-197

.. code-block:: Python


    expression = "StringIO(res)"
    d = timeit.timeit(expression, globals=globals(), number=100)
    data_time.append(dict(expression=expression, time=d))
    d






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2.877700012504647e-05



.. GENERATED FROM PYTHON SOURCE LINES 198-207

Pickle
======

Le module :mod:`pickle` effectue la même chose mais au format binaire.
Celui-ci est propre à *Python* et ne peut être lu d'autres langages,
voire parfois par d'autres versions de *Python*.

Ecriture (pickle)
+++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 207-220

.. code-block:: Python



    data = {
        "records": [
            {
                "nom": "Xavier",
                "prénom": "Xavier",
                "langages": [{"nom": "C++", "age": 40}, {"nom": "Python", "age": 20}],
            }
        ]
    }









.. GENERATED FROM PYTHON SOURCE LINES 222-230

.. code-block:: Python



    buffer = BytesIO()
    res = pickle.dump(data, buffer)
    seq = buffer.getvalue()
    seq






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'\x80\x04\x95f\x00\x00\x00\x00\x00\x00\x00}\x94\x8c\x07records\x94]\x94}\x94(\x8c\x03nom\x94\x8c\x06Xavier\x94\x8c\x07pr\xc3\xa9nom\x94h\x05\x8c\x08langages\x94]\x94(}\x94(h\x04\x8c\x03C++\x94\x8c\x03age\x94K(u}\x94(h\x04\x8c\x06Python\x94h\x0bK\x14ueuas.'



.. GENERATED FROM PYTHON SOURCE LINES 231-233

Lecture (pickle)
++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 233-240

.. code-block:: Python



    buffer = BytesIO(seq)
    read = pickle.load(buffer)
    read






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'records': [{'nom': 'Xavier', 'prénom': 'Xavier', 'langages': [{'nom': 'C++', 'age': 40}, {'nom': 'Python', 'age': 20}]}]}



.. GENERATED FROM PYTHON SOURCE LINES 241-247

Les classes
+++++++++++

A l'inverse du format *JSON*, les classes sont sérialisables avec
:mod:`pickle` parce que le langage utilise un format très proche
de ce qu'il a en mémoire. Il n'a pas besoin de conversion supplémentaire.

.. GENERATED FROM PYTHON SOURCE LINES 247-256

.. code-block:: Python



    data = A("r")
    buffer = BytesIO()
    res = pickle.dump(data, buffer)
    seq = buffer.getvalue()
    seq






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'\x80\x04\x95#\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x01A\x94\x93\x94)\x81\x94}\x94\x8c\x03att\x94\x8c\x01r\x94sb.'



.. GENERATED FROM PYTHON SOURCE LINES 258-264

.. code-block:: Python


    buffer = BytesIO(seq)
    read = pickle.load(buffer)
    read






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <__main__.A object at 0x7ff933580da0>



.. GENERATED FROM PYTHON SOURCE LINES 265-270

Réduire la taille
+++++++++++++++++

Certaines informations sont duppliquées et il est préférable de ne pas
les sérialiser deux fois surtout si elles sont voluminueuses.

.. GENERATED FROM PYTHON SOURCE LINES 270-278

.. code-block:: Python



    class B:
        def __init__(self, att):
            self.att1 = att
            self.att2 = att









.. GENERATED FROM PYTHON SOURCE LINES 280-288

.. code-block:: Python


    data = B("r")
    buffer = BytesIO()
    res = pickle.dump(data, buffer)
    seq = buffer.getvalue()
    seq






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'\x80\x04\x95.\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x01B\x94\x93\x94)\x81\x94}\x94(\x8c\x04att1\x94\x8c\x01r\x94\x8c\x04att2\x94h\x06ub.'



.. GENERATED FROM PYTHON SOURCE LINES 289-290

Evitons maintenant de stocker deux fois le même attribut.

.. GENERATED FROM PYTHON SOURCE LINES 290-308

.. code-block:: Python



    class B:
        def __init__(self, att):
            self.att1 = att
            self.att2 = att

        def __getstate__(self):
            return dict(att=self.att1)


    data = B("r")
    buffer = BytesIO()
    res = pickle.dump(data, buffer)
    seq = buffer.getvalue()
    seq






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'\x80\x04\x95#\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x01B\x94\x93\x94)\x81\x94}\x94\x8c\x03att\x94\x8c\x01r\x94sb.'



.. GENERATED FROM PYTHON SOURCE LINES 309-310

C'est plus court mais il faut inclure maintenant la relecture.

.. GENERATED FROM PYTHON SOURCE LINES 310-330

.. code-block:: Python



    class B:
        def __init__(self, att):
            self.att1 = att
            self.att2 = att

        def __getstate__(self):
            return dict(att=self.att1)

        def __setstate__(self, state):
            setattr(self, "att1", state["att"])
            setattr(self, "att2", state["att"])


    buffer = BytesIO(seq)
    read = pickle.load(buffer)
    read






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <__main__.B object at 0x7ff933592840>



.. GENERATED FROM PYTHON SOURCE LINES 332-336

.. code-block:: Python


    read.att1, read.att2






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ('r', 'r')



.. GENERATED FROM PYTHON SOURCE LINES 338-345

.. code-block:: Python


    data = B("r")
    expression = "pickle.dump(data, BytesIO())"
    d = timeit.timeit(expression, globals=globals(), number=100)
    data_time.append(dict(expression=expression, time=d))
    d





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.00018823899995368265



.. GENERATED FROM PYTHON SOURCE LINES 347-353

.. code-block:: Python


    expression = "pickle.load(BytesIO(seq))"
    d = timeit.timeit(expression, globals=globals(), number=100)
    data_time.append(dict(expression=expression, time=d))
    d





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0001456649999909132



.. GENERATED FROM PYTHON SOURCE LINES 354-358

La sérialisation binaire est habituellement plus rapide dans les langages
bas niveau comme C++. La même comparaison pour un langage haut niveau
tel que Python n'est pas toujours prévisible.
Il est possible d'accélérer un peu les choses.

.. GENERATED FROM PYTHON SOURCE LINES 358-365

.. code-block:: Python



    expression = "pickle.dump(data, BytesIO(), protocol=pickle.HIGHEST_PROTOCOL)"
    d = timeit.timeit(expression, globals=globals(), number=100)
    data_time.append(dict(expression=expression, time=d))
    d





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0002036920000136888



.. GENERATED FROM PYTHON SOURCE LINES 366-375

Cas des fonctions
=================

La sérialisation s'applique à des données et non à du code mais le
fait de sérialiser des fonctions est tout de même tentant.
La sérialisation binaire fonctionne même avec les fonctions.

Binaire
+++++++

.. GENERATED FROM PYTHON SOURCE LINES 375-389

.. code-block:: Python



    def myfunc(x):
        return x + 1


    data = {"x": 5, "f": myfunc}


    buffer = BytesIO()
    res = pickle.dump(data, buffer)
    buffer.getvalue()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'\x80\x04\x95%\x00\x00\x00\x00\x00\x00\x00}\x94(\x8c\x01x\x94K\x05\x8c\x01f\x94\x8c\x08__main__\x94\x8c\x06myfunc\x94\x93\x94u.'



.. GENERATED FROM PYTHON SOURCE LINES 391-397

.. code-block:: Python



    res = pickle.load(BytesIO(buffer.getvalue()))
    res






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'x': 5, 'f': <function myfunc at 0x7ff943c671a0>}



.. GENERATED FROM PYTHON SOURCE LINES 399-403

.. code-block:: Python


    res["f"](res["x"])






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    6



.. GENERATED FROM PYTHON SOURCE LINES 404-407

La sérialisation ne conserve pas le code de la fonction, juste son nom.
Cela veut dire que si elle n'est pas disponible lorsqu'elle est appelée,
il sera impossible de s'en servir.

.. GENERATED FROM PYTHON SOURCE LINES 407-418

.. code-block:: Python



    del myfunc


    try:
        pickle.load(BytesIO(buffer.getvalue()))
    except Exception as e:
        print(e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Can't get attribute 'myfunc' on <module '__main__'>




.. GENERATED FROM PYTHON SOURCE LINES 419-421

Il est possible de contourner l'obstacle en utilisant le module
:epkg:`cloudpickle` qui stocke le code de la fonction.

.. GENERATED FROM PYTHON SOURCE LINES 421-435

.. code-block:: Python



    def myfunc(x):
        return x + 1


    data = {"x": 5, "f": myfunc}


    buffer = BytesIO()
    res = cloudpickle.dump(data, buffer)
    buffer.getvalue()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'\x80\x05\x95\t\x02\x00\x00\x00\x00\x00\x00}\x94(\x8c\x01x\x94K\x05\x8c\x01f\x94\x8c\x17cloudpickle.cloudpickle\x94\x8c\x0e_make_function\x94\x93\x94(h\x03\x8c\r_builtin_type\x94\x93\x94\x8c\x08CodeType\x94\x85\x94R\x94(K\x01K\x00K\x00K\x01K\x02K\x03C\x0c\x97\x00|\x00d\x01z\x00\x00\x00S\x00\x94NK\x01\x86\x94)h\x01\x85\x94\x8cN/home/xadupre/github/teachcompute/_doc/examples/plot_serialisation_examples.py\x94\x8c\x06myfunc\x94\x8c\x06myfunc\x94M\xa7\x01C\x0b\x80\x00\xd8\x0b\x0c\x88q\x895\x80L\x94C\x00\x94))t\x94R\x94}\x94(\x8c\x0b__package__\x94\x8c\x00\x94\x8c\x08__name__\x94\x8c\x08__main__\x94uNNNt\x94R\x94h\x03\x8c\x12_function_setstate\x94\x93\x94h\x1b}\x94}\x94(h\x18\x8c\x06myfunc\x94\x8c\x0c__qualname__\x94\x8c\x06myfunc\x94\x8c\x0f__annotations__\x94}\x94\x8c\x0e__kwdefaults__\x94N\x8c\x0c__defaults__\x94N\x8c\n__module__\x94h\x19\x8c\x07__doc__\x94N\x8c\x0b__closure__\x94N\x8c\x17_cloudpickle_submodules\x94]\x94\x8c\x0b__globals__\x94}\x94u\x86\x94\x86R0u.'



.. GENERATED FROM PYTHON SOURCE LINES 437-445

.. code-block:: Python


    del myfunc


    res = cloudpickle.load(BytesIO(buffer.getvalue()))
    res






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'x': 5, 'f': <function myfunc at 0x7ff943c66980>}



.. GENERATED FROM PYTHON SOURCE LINES 447-451

.. code-block:: Python


    res["f"](res["x"])






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    6



.. GENERATED FROM PYTHON SOURCE LINES 452-457

Fonction et JSON
++++++++++++++++

La sérialisation d'une fonction au format JSON ne
fonctionne pas avec le module standard.

.. GENERATED FROM PYTHON SOURCE LINES 457-466

.. code-block:: Python



    buffer = StringIO()
    try:
        json.dump(data, buffer)  # 2
    except Exception as e:
        print(e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Object of type function is not JSON serializable




.. GENERATED FROM PYTHON SOURCE LINES 467-469

La sérialisation avec :epkg:`ujson` ne fonctionne pas non plus
même si elle ne produit pas toujours d'erreur.

.. GENERATED FROM PYTHON SOURCE LINES 469-479

.. code-block:: Python



    buffer = StringIO()
    try:
        res = ujson.dump(data, buffer)  # 3
    except TypeError as e:
        print(e)
    buffer.getvalue()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <function myfunc at 0x7ff943c67920> is not JSON serializable

    ''



.. GENERATED FROM PYTHON SOURCE LINES 480-485

Cas des itérateurs
==================

Les itérateurs fonctionnent avec la sérialisation binaire mais ceci
implique de stocker l'ensemble que l'itérateur parcourt.

.. GENERATED FROM PYTHON SOURCE LINES 485-497

.. code-block:: Python



    ens = [1, 2]

    data = {"x": 5, "it": iter(ens)}


    buffer = BytesIO()
    res = pickle.dump(data, buffer)  # 4
    buffer.getvalue()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'\x80\x04\x953\x00\x00\x00\x00\x00\x00\x00}\x94(\x8c\x01x\x94K\x05\x8c\x02it\x94\x8c\x08builtins\x94\x8c\x04iter\x94\x93\x94]\x94(K\x01K\x02e\x85\x94R\x94K\x00bu.'



.. GENERATED FROM PYTHON SOURCE LINES 499-506

.. code-block:: Python


    del ens

    res = pickle.load(BytesIO(buffer.getvalue()))
    res






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'x': 5, 'it': <list_iterator object at 0x7ff93358bcd0>}



.. GENERATED FROM PYTHON SOURCE LINES 508-512

.. code-block:: Python


    list(res["it"])






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [1, 2]



.. GENERATED FROM PYTHON SOURCE LINES 514-518

.. code-block:: Python


    list(res["it"])






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    []



.. GENERATED FROM PYTHON SOURCE LINES 519-525

Cas des générateurs
===================

Ils ne peuvent être sérialisés car le langage n'a pas accès à l'ensemble
des éléments que le générateur parcourt. Il n'y a aucun moyen de
sérialiser un générateur mais on peut sérialiser la fonction qui crée le générateur.

.. GENERATED FROM PYTHON SOURCE LINES 525-542

.. code-block:: Python



    def ensgen():
        yield 1
        yield 2


    data = {"x": 5, "it": ensgen()}


    buffer = BytesIO()
    try:
        pickle.dump(data, buffer)
    except Exception as e:
        print(e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    cannot pickle 'generator' object




.. GENERATED FROM PYTHON SOURCE LINES 543-545

Summary
=======

.. GENERATED FROM PYTHON SOURCE LINES 545-549

.. code-block:: Python


    df = pandas.DataFrame(data_time)
    print(df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                                              expression      time
    0                        json.dump(data, StringIO())  0.001593
    1                       ujson.dump(data, StringIO())  0.000266
    2                           json.load(StringIO(res))  0.000454
    3                          ujson.load(StringIO(res))  0.000349
    4                                      StringIO(res)  0.000029
    5                       pickle.dump(data, BytesIO())  0.000188
    6                          pickle.load(BytesIO(seq))  0.000146
    7  pickle.dump(data, BytesIO(), protocol=pickle.H...  0.000204




.. GENERATED FROM PYTHON SOURCE LINES 551-560

.. code-block:: Python


    fig, ax = plt.subplots(1, 2, figsize=(10, 4), sharey=True)
    df.set_index("expression").plot.barh(ax=ax[0])
    df.loc[0, "time"] = numpy.nan
    df.set_index("expression").plot.barh(ax=ax[1])
    ax[0].set_title("Time")
    ax[1].set_title("Time without `json.dump`")
    fig.tight_layout()
    fig.savefig("plot_serialisation_examples.png")



.. image-sg:: /auto_examples/images/sphx_glr_plot_serialisation_examples_001.png
   :alt: Time, Time without `json.dump`
   :srcset: /auto_examples/images/sphx_glr_plot_serialisation_examples_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.308 seconds)


.. _sphx_glr_download_auto_examples_plot_serialisation_examples.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_serialisation_examples.ipynb <plot_serialisation_examples.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_serialisation_examples.py <plot_serialisation_examples.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_serialisation_examples.zip <plot_serialisation_examples.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
