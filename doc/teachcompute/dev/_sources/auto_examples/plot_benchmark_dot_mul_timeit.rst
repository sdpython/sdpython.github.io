
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_benchmark_dot_mul_timeit.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_benchmark_dot_mul_timeit.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_benchmark_dot_mul_timeit.py:


Compares matrix multiplication implementations with timeit
==========================================================

:epkg:`numpy` has a very fast implementation of
matrix multiplication. There are many ways to be slower.
The following uses :mod:`timeit` to compare implementations.

Compared implementations:

* :func:`multiply_matrix <teachcompute.validation.cython.td_mul_cython.multiply_matrix>`
  `multiply_matrix <https://github.com/sdpython/teachcompute/blob/main/
  teachcompute/validation/cython/td_mul_cython.pyx#L14>`_
* :func:`c_multiply_matrix <teachcompute.validation.cython.td_mul_cython.c_multiply_matrix>`
  `c_multiply_matrix <https://github.com/sdpython/teachcompute/blob/main/
  teachcompute/validation/cython/td_mul_cython.pyx#L69>`_
* :func:`c_multiply_matrix_parallel
  <teachcompute.validation.cython.td_mul_cython.c_multiply_matrix_parallel>`
  `c_multiply_matrix_parallel <https://github.com/sdpython/teachcompute/blob/main/
  teachcompute/validation/cython/td_mul_cython.pyx#L49>`_
* :func:`c_multiply_matrix_parallel_transposed
  <teachcompute.validation.cython.td_mul_cython.c_multiply_matrix_parallel_transposed>`
  `c_multiply_matrix_parallel_transposed <https://github.com/sdpython/teachcompute/blob/main/
  teachcompute/validation/cython/td_mul_cython.pyx#L106>`_


Preparation
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 30-53

.. code-block:: Python


    import timeit
    import numpy

    from teachcompute.validation.cython.td_mul_cython import (
        multiply_matrix,
        c_multiply_matrix,
        c_multiply_matrix_parallel,
        c_multiply_matrix_parallel_transposed as cmulparamtr,
    )


    va = numpy.random.randn(150, 100).astype(numpy.float64)
    vb = numpy.random.randn(100, 100).astype(numpy.float64)
    ctx = {
        "va": va,
        "vb": vb,
        "c_multiply_matrix": c_multiply_matrix,
        "multiply_matrix": multiply_matrix,
        "c_multiply_matrix_parallel": c_multiply_matrix_parallel,
        "c_multiply_matrix_parallel_transposed": cmulparamtr,
    }








.. GENERATED FROM PYTHON SOURCE LINES 54-58

Measures
++++++++

numpy

.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: Python

    res0 = timeit.timeit("va @ vb", number=100, globals=ctx)
    print("numpy time", res0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    numpy time 0.011885600000823615




.. GENERATED FROM PYTHON SOURCE LINES 62-63

python implementation

.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: Python


    res1 = timeit.timeit("multiply_matrix(va, vb)", number=10, globals=ctx)
    print("python implementation", res1)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    python implementation 7.265511200001129




.. GENERATED FROM PYTHON SOURCE LINES 69-70

cython implementation

.. GENERATED FROM PYTHON SOURCE LINES 70-75

.. code-block:: Python


    res2 = timeit.timeit("c_multiply_matrix(va, vb)", number=100, globals=ctx)
    print("cython implementation", res2)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    cython implementation 0.1918974000000162




.. GENERATED FROM PYTHON SOURCE LINES 76-77

cython implementation parallelized

.. GENERATED FROM PYTHON SOURCE LINES 77-82

.. code-block:: Python


    res3 = timeit.timeit("c_multiply_matrix_parallel(va, vb)", number=100, globals=ctx)
    print("cython implementation parallelized", res3)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    cython implementation parallelized 0.9288433000001532




.. GENERATED FROM PYTHON SOURCE LINES 83-84

cython implementation parallelized, AVX + transposed

.. GENERATED FROM PYTHON SOURCE LINES 84-91

.. code-block:: Python


    res4 = timeit.timeit(
        "c_multiply_matrix_parallel_transposed(va, vb)", number=100, globals=ctx
    )
    print("cython implementation parallelized avx", res4)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    cython implementation parallelized avx 0.8376110999997763




.. GENERATED FROM PYTHON SOURCE LINES 92-93

Speed up...

.. GENERATED FROM PYTHON SOURCE LINES 93-98

.. code-block:: Python


    print(f"numpy is {res1 / res0:f} faster than pure python.")
    print(f"numpy is {res2 / res0:f} faster than cython.")
    print(f"numpy is {res3 / res0:f} faster than parallelized cython.")
    print(f"numpy is {res4 / res0:f} faster than avx parallelized cython.")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    numpy is 611.286868 faster than pure python.
    numpy is 16.145369 faster than cython.
    numpy is 78.148625 faster than parallelized cython.
    numpy is 70.472765 faster than avx parallelized cython.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 9.253 seconds)


.. _sphx_glr_download_auto_examples_plot_benchmark_dot_mul_timeit.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_benchmark_dot_mul_timeit.ipynb <plot_benchmark_dot_mul_timeit.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_benchmark_dot_mul_timeit.py <plot_benchmark_dot_mul_timeit.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
