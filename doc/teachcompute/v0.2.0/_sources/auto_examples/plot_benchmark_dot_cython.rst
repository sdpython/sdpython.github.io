
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_benchmark_dot_cython.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_benchmark_dot_cython.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_benchmark_dot_cython.py:


Compares dot implementations (numpy, cython, c++, sse)
======================================================

:epkg:`numpy` has a very fast implementation of
the dot product. It is difficult to be better and very easy
to be slower. This example looks into a couple of slower
implementations with cython. The tested functions are
the following:

* :func:`dot_product <teachcompute.validation.cython.dot_cython.dot_product>`
  `dot_product <https://github.com/sdpython/teachcompute/blob/
  main/teachcompute/validation/cython/dot_cython.pyx#L15>`_
* :func:`ddot_cython_array <teachcompute.validation.cython.dot_cython.ddot_cython_array>`
  `ddot_cython_array <https://github.com/sdpython/teachcompute/blob/
  main/teachcompute/validation/cython/dot_cython.pyx#L29>`_
* :func:`ddot_cython_array_optim
  <teachcompute.validation.cython.dot_cython.ddot_cython_array_optim>`
  `ddot_cython_array_optim <https://github.com/sdpython/teachcompute/blob/
  main/teachcompute/validation/cython/dot_cython.pyx#L63>`_
* :func:`ddot_array <teachcompute.validation.cython.dot_cython.ddot_array>`
  `dot_cython <https://github.com/sdpython/teachcompute/blob/
  main/teachcompute/validation/cython/dot_cython.pyx#L141>`_
* :func:`ddot_array_16 <teachcompute.validation.cython.dot_cython.ddot_array_16>`
  `ddot_array_16 <https://github.com/sdpython/teachcompute/blob/
  main/teachcompute/validation/cython/dot_cython.pyx#L188>`_
* :func:`ddot_array_16_sse <teachcompute.validation.cython.dot_cython.ddot_array_16_sse>`
  `ddot_array_16_sse <https://github.com/sdpython/teachcompute/blob/
  main/teachcompute/validation/cython/dot_cython.pyx#L230>`_

.. GENERATED FROM PYTHON SOURCE LINES 31-66

.. code-block:: Python


    import numpy
    import matplotlib.pyplot as plt
    from pandas import DataFrame, concat
    from teachcompute.validation.cython.dot_cython import (
        dot_product,
        ddot_cython_array,
        ddot_cython_array_optim,
        ddot_array,
        ddot_array_16,
        ddot_array_16_sse,
    )
    from teachcompute.validation.cython.dot_cython import (
        sdot_cython_array,
        sdot_cython_array_optim,
        sdot_array,
        sdot_array_16,
        sdot_array_16_sse,
    )
    from teachcompute.ext_test_case import measure_time_dim


    def get_vectors(fct, n, h=100, dtype=numpy.float64):
        ctxs = [
            dict(
                va=numpy.random.randn(n).astype(dtype),
                vb=numpy.random.randn(n).astype(dtype),
                dot=fct,
                x_name=n,
            )
            for n in range(10, n, h)
        ]
        return ctxs









.. GENERATED FROM PYTHON SOURCE LINES 67-70

numpy dot
+++++++++


.. GENERATED FROM PYTHON SOURCE LINES 70-78

.. code-block:: Python



    ctxs = get_vectors(numpy.dot, 10000)
    df = DataFrame(list(measure_time_dim("dot(va, vb)", ctxs, verbose=1)))
    df["fct"] = "numpy.dot"
    print(df.tail(n=3))
    dfs = [df]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/100 [00:00<?, ?it/s]     83%|████████▎ | 83/100 [00:00<00:00, 825.73it/s]    100%|██████████| 100/100 [00:00<00:00, 717.51it/s]
         average     deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time  x_name        fct
    97  0.000005  5.567451e-08  0.000005  0.000005      10      50  0.000048           184     0.000045    9710  numpy.dot
    98  0.000005  7.171121e-08  0.000005  0.000005      10      50  0.000048           184     0.000034    9810  numpy.dot
    99  0.000005  1.322544e-08  0.000005  0.000005      10      50  0.000048           184     0.000032    9910  numpy.dot




.. GENERATED FROM PYTHON SOURCE LINES 79-82

Several cython dot
++++++++++++++++++


.. GENERATED FROM PYTHON SOURCE LINES 82-98

.. code-block:: Python


    for fct in [
        dot_product,
        ddot_cython_array,
        ddot_cython_array_optim,
        ddot_array,
        ddot_array_16,
        ddot_array_16_sse,
    ]:
        ctxs = get_vectors(fct, 10000 if fct.__name__ != "dot_product" else 1000)

        df = DataFrame(list(measure_time_dim("dot(va, vb)", ctxs, verbose=1)))
        df["fct"] = fct.__name__
        dfs.append(df)
        print(df.tail(n=3))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/10 [00:00<?, ?it/s]     50%|█████     | 5/10 [00:00<00:00, 38.87it/s]     90%|█████████ | 9/10 [00:00<00:00, 17.47it/s]    100%|██████████| 10/10 [00:00<00:00, 16.59it/s]
        average  deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time  x_name          fct
    7  0.000180   0.000018  0.000170  0.000225      10      50  0.001804           184     0.000184     710  dot_product
    8  0.000217   0.000004  0.000211  0.000222      10      50  0.002167           184     0.000232     810  dot_product
    9  0.000268   0.000076  0.000238  0.000496      10      50  0.002676           184     0.000254     910  dot_product
      0%|          | 0/100 [00:00<?, ?it/s]     43%|████▎     | 43/100 [00:00<00:00, 416.37it/s]     85%|████████▌ | 85/100 [00:00<00:00, 213.14it/s]    100%|██████████| 100/100 [00:00<00:00, 198.44it/s]
         average     deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time  x_name                fct
    97  0.000018  1.846142e-07  0.000018  0.000019      10      50  0.000184           184     0.000031    9710  ddot_cython_array
    98  0.000019  8.775263e-08  0.000018  0.000019      10      50  0.000186           184     0.000036    9810  ddot_cython_array
    99  0.000019  1.667822e-07  0.000019  0.000019      10      50  0.000188           184     0.000038    9910  ddot_cython_array
      0%|          | 0/100 [00:00<?, ?it/s]     43%|████▎     | 43/100 [00:00<00:00, 417.00it/s]     85%|████████▌ | 85/100 [00:00<00:00, 206.68it/s]    100%|██████████| 100/100 [00:00<00:00, 194.43it/s]
         average     deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time  x_name                      fct
    97  0.000018  5.498743e-07  0.000018  0.000020      10      50  0.000185           184     0.000024    9710  ddot_cython_array_optim
    98  0.000019  3.318086e-07  0.000018  0.000020      10      50  0.000186           184     0.000026    9810  ddot_cython_array_optim
    99  0.000019  8.832152e-08  0.000019  0.000019      10      50  0.000187           184     0.000026    9910  ddot_cython_array_optim
      0%|          | 0/100 [00:00<?, ?it/s]     42%|████▏     | 42/100 [00:00<00:00, 418.89it/s]     84%|████████▍ | 84/100 [00:00<00:00, 213.91it/s]    100%|██████████| 100/100 [00:00<00:00, 211.09it/s]
         average     deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time  x_name         fct
    97  0.000012  1.314560e-07  0.000012  0.000013      10      50  0.000123           184     0.000021    9710  ddot_array
    98  0.000012  1.612003e-07  0.000012  0.000013      10      50  0.000124           184     0.000025    9810  ddot_array
    99  0.000012  2.363394e-07  0.000012  0.000013      10      50  0.000124           184     0.000021    9910  ddot_array
      0%|          | 0/100 [00:00<?, ?it/s]     76%|███████▌  | 76/100 [00:00<00:00, 752.18it/s]    100%|██████████| 100/100 [00:00<00:00, 628.80it/s]
         average  deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time  x_name            fct
    97  0.000005   0.000001  0.000005  0.000009      10      50  0.000053           184     0.000014    9710  ddot_array_16
    98  0.000005   0.000001  0.000005  0.000009      10      50  0.000050           184     0.000013    9810  ddot_array_16
    99  0.000005   0.000001  0.000005  0.000009      10      50  0.000051           184     0.000014    9910  ddot_array_16
      0%|          | 0/100 [00:00<?, ?it/s]     92%|█████████▏| 92/100 [00:00<00:00, 908.72it/s]    100%|██████████| 100/100 [00:00<00:00, 856.57it/s]
         average     deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time  x_name                fct
    97  0.000004  8.402981e-07  0.000003  0.000005      10      50  0.000037           184     0.000013    9710  ddot_array_16_sse
    98  0.000004  8.613698e-07  0.000003  0.000006      10      50  0.000038           184     0.000013    9810  ddot_array_16_sse
    99  0.000004  8.132702e-07  0.000003  0.000006      10      50  0.000038           184     0.000013    9910  ddot_array_16_sse




.. GENERATED FROM PYTHON SOURCE LINES 99-101

Let's display the results
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 101-121

.. code-block:: Python


    cc = concat(dfs)
    cc["N"] = cc["x_name"]

    fig, ax = plt.subplots(2, 2, figsize=(10, 10))
    cc[cc.N <= 1100].pivot(index="N", columns="fct", values="average").plot(
        logy=True, logx=True, ax=ax[0, 0]
    )
    cc[cc.fct != "dot_product"].pivot(index="N", columns="fct", values="average").plot(
        logy=True, ax=ax[0, 1]
    )
    cc[cc.fct != "dot_product"].pivot(index="N", columns="fct", values="average").plot(
        logy=True, logx=True, ax=ax[1, 1]
    )
    ax[0, 0].set_title("Comparison of cython ddot implementations")
    ax[0, 1].set_title("Comparison of cython ddot implementations" "\nwithout dot_product")

    ###################
    # :epkg:`numpy` is faster but we are able to catch up.




.. image-sg:: /auto_examples/images/sphx_glr_plot_benchmark_dot_cython_001.png
   :alt: Comparison of cython ddot implementations, Comparison of cython ddot implementations without dot_product
   :srcset: /auto_examples/images/sphx_glr_plot_benchmark_dot_cython_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Comparison of cython ddot implementations\nwithout dot_product')



.. GENERATED FROM PYTHON SOURCE LINES 122-126

Same for floats
+++++++++++++++

Let's for single floats.

.. GENERATED FROM PYTHON SOURCE LINES 126-156

.. code-block:: Python


    dfs = []
    for fct in [
        numpy.dot,
        sdot_cython_array,
        sdot_cython_array_optim,
        sdot_array,
        sdot_array_16,
        sdot_array_16_sse,
    ]:
        ctxs = get_vectors(
            fct, 10000 if fct.__name__ != "dot_product" else 1000, dtype=numpy.float32
        )

        df = DataFrame(list(measure_time_dim("dot(va, vb)", ctxs, verbose=1)))
        df["fct"] = fct.__name__
        dfs.append(df)
        print(df.tail(n=3))


    cc = concat(dfs)
    cc["N"] = cc["x_name"]

    fig, ax = plt.subplots(1, 2, figsize=(10, 4))
    cc.pivot(index="N", columns="fct", values="average").plot(logy=True, ax=ax[0])
    cc.pivot(index="N", columns="fct", values="average").plot(
        logy=True, logx=True, ax=ax[1]
    )
    ax[0].set_title("Comparison of cython sdot implementations")
    ax[1].set_title("Comparison of cython sdot implementations")



.. image-sg:: /auto_examples/images/sphx_glr_plot_benchmark_dot_cython_002.png
   :alt: Comparison of cython sdot implementations, Comparison of cython sdot implementations
   :srcset: /auto_examples/images/sphx_glr_plot_benchmark_dot_cython_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/100 [00:00<?, ?it/s]    100%|██████████| 100/100 [00:00<00:00, 1558.17it/s]
         average     deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time  x_name  fct
    97  0.000002  5.126824e-08  0.000002  0.000002      10      50  0.000019           184     0.000007    9710  dot
    98  0.000002  4.335641e-08  0.000002  0.000002      10      50  0.000019           184     0.000007    9810  dot
    99  0.000002  2.670888e-08  0.000002  0.000002      10      50  0.000016           184     0.000007    9910  dot
      0%|          | 0/100 [00:00<?, ?it/s]     53%|█████▎    | 53/100 [00:00<00:00, 518.00it/s]    100%|██████████| 100/100 [00:00<00:00, 292.80it/s]
         average     deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time  x_name                fct
    97  0.000012  1.228858e-07  0.000012  0.000012      10      50  0.000119           184     0.000015    9710  sdot_cython_array
    98  0.000012  1.515265e-07  0.000012  0.000013      10      50  0.000123           184     0.000017    9810  sdot_cython_array
    99  0.000012  1.409700e-07  0.000012  0.000013      10      50  0.000121           184     0.000019    9910  sdot_cython_array
      0%|          | 0/100 [00:00<?, ?it/s]     54%|█████▍    | 54/100 [00:00<00:00, 521.73it/s]    100%|██████████| 100/100 [00:00<00:00, 287.41it/s]
         average     deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time  x_name                      fct
    97  0.000014  2.349815e-07  0.000014  0.000015      10      50  0.000144           184     0.000017    9710  sdot_cython_array_optim
    98  0.000015  3.409098e-08  0.000014  0.000015      10      50  0.000145           184     0.000018    9810  sdot_cython_array_optim
    99  0.000015  2.711420e-08  0.000015  0.000015      10      50  0.000146           184     0.000018    9910  sdot_cython_array_optim
      0%|          | 0/100 [00:00<?, ?it/s]     49%|████▉     | 49/100 [00:00<00:00, 489.59it/s]     98%|█████████▊| 98/100 [00:00<00:00, 269.97it/s]    100%|██████████| 100/100 [00:00<00:00, 284.78it/s]
         average     deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time  x_name         fct
    97  0.000012  1.230915e-07  0.000012  0.000012      10      50  0.000119           184     0.000018    9710  sdot_array
    98  0.000012  1.185807e-07  0.000012  0.000012      10      50  0.000120           184     0.000016    9810  sdot_array
    99  0.000012  1.238003e-07  0.000012  0.000013      10      50  0.000122           184     0.000016    9910  sdot_array
      0%|          | 0/100 [00:00<?, ?it/s]     77%|███████▋  | 77/100 [00:00<00:00, 769.02it/s]    100%|██████████| 100/100 [00:00<00:00, 626.92it/s]
         average  deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time  x_name            fct
    97  0.000005   0.000001  0.000005  0.000008      10      50  0.000050           184     0.000014    9710  sdot_array_16
    98  0.000005   0.000001  0.000005  0.000009      10      50  0.000051           184     0.000011    9810  sdot_array_16
    99  0.000005   0.000001  0.000005  0.000009      10      50  0.000052           184     0.000008    9910  sdot_array_16
      0%|          | 0/100 [00:00<?, ?it/s]    100%|██████████| 100/100 [00:00<00:00, 1123.65it/s]
         average     deviation  min_exec  max_exec  repeat  number     ttime  context_size  warmup_time  x_name                fct
    97  0.000003  7.584551e-07  0.000002  0.000004      10      50  0.000027           184     0.000007    9710  sdot_array_16_sse
    98  0.000003  2.899705e-07  0.000002  0.000003      10      50  0.000025           184     0.000009    9810  sdot_array_16_sse
    99  0.000007  8.655526e-06  0.000003  0.000033      10      50  0.000074           184     0.000011    9910  sdot_array_16_sse

    Text(0.5, 1.0, 'Comparison of cython sdot implementations')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.148 seconds)


.. _sphx_glr_download_auto_examples_plot_benchmark_dot_cython.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_benchmark_dot_cython.ipynb <plot_benchmark_dot_cython.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_benchmark_dot_cython.py <plot_benchmark_dot_cython.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
