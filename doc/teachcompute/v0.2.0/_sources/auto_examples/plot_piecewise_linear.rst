
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_piecewise_linear.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_piecewise_linear.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_piecewise_linear.py:


.. _l-example-dot-profile:

Compares implementations for a Piecewise Linear
===============================================

A piecewise linear function is implemented and trained
following the tutorial :epkg:`Custom C++ and CUDA Extensions`.

Piecewise linear regression
+++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 14-54

.. code-block:: Python


    import time
    import pandas
    import matplotlib.pyplot as plt
    import torch
    from teachcompute.torch_extensions.piecewise_linear import (
        PiecewiseLinearFunction,
        PiecewiseLinearFunctionC,
        PiecewiseLinearFunctionCBetter,
    )


    def train_piecewise_linear(x, y, device, cls, max_iter=400, learning_rate=1e-4):

        alpha_pos = torch.tensor([1], dtype=torch.float32).to(device)
        alpha_neg = torch.tensor([0.5], dtype=torch.float32).to(device)
        alpha_pos.requires_grad_()
        alpha_neg.requires_grad_()

        losses = []
        fct = cls.apply

        for _t in range(max_iter):

            y_pred = fct(x, alpha_neg, alpha_pos)
            loss = (y_pred - y).pow(2).sum()
            loss.backward()
            losses.append(loss)

            with torch.no_grad():
                alpha_pos -= learning_rate * alpha_pos.grad
                alpha_neg -= learning_rate * alpha_neg.grad

                # Manually zero the gradients after updating weights
                alpha_pos.grad.zero_()
                alpha_neg.grad.zero_()

        return losses, alpha_neg, alpha_pos









.. GENERATED FROM PYTHON SOURCE LINES 55-57

Python implementation
+++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 57-72

.. code-block:: Python


    device = "cuda:0" if torch.cuda.is_available() else "cpu"
    print("device:", device)
    x = torch.randn(100, 1, dtype=torch.float32)
    y = x * 0.2 + (x > 0).to(torch.float32) * x * 1.5 + torch.randn(100, 1) / 5
    x = x.to(device).requires_grad_()
    y = y.to(device).requires_grad_()

    begin = time.perf_counter()
    losses, alpha_neg, alpha_pos = train_piecewise_linear(
        x, y, device, PiecewiseLinearFunction
    )
    end = time.perf_counter()
    print(f"duration={end - begin}, alpha_neg={alpha_neg} alpha_pos={alpha_pos}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    device: cuda:0
    duration=0.40994256199996926, alpha_neg=tensor([0.2226], device='cuda:0', requires_grad=True) alpha_pos=tensor([1.7327], device='cuda:0', requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 73-75

C++ implementation
++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 75-83

.. code-block:: Python


    begin = time.perf_counter()
    losses, alpha_neg, alpha_pos = train_piecewise_linear(
        x, y, device, PiecewiseLinearFunctionC
    )
    end = time.perf_counter()
    print(f"duration={end - begin}, alpha_neg={alpha_neg} alpha_pos={alpha_pos}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    duration=0.34935435700003836, alpha_neg=tensor([0.2226], device='cuda:0', requires_grad=True) alpha_pos=tensor([1.7327], device='cuda:0', requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 84-86

C++ implementation, second try
++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 86-94

.. code-block:: Python


    begin = time.perf_counter()
    losses, alpha_neg, alpha_pos = train_piecewise_linear(
        x, y, device, PiecewiseLinearFunctionCBetter
    )
    end = time.perf_counter()
    print(f"duration={end - begin}, alpha_neg={alpha_neg} alpha_pos={alpha_pos}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    duration=0.33429017399998884, alpha_neg=tensor([0.2226], device='cuda:0', requires_grad=True) alpha_pos=tensor([1.7327], device='cuda:0', requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 95-98

The C++ implementation is very close to the python code.
The second implementation in C++ is faster because
it reuses created tensors.

.. GENERATED FROM PYTHON SOURCE LINES 100-102

Graphs
++++++

.. GENERATED FROM PYTHON SOURCE LINES 102-116

.. code-block:: Python


    df = pandas.DataFrame()
    df["x"] = x.cpu().detach().numpy().ravel()
    df["y"] = y.cpu().detach().numpy().ravel()
    df["yp"] = PiecewiseLinearFunction.apply(x, alpha_neg, alpha_pos).cpu().detach().numpy()

    fig, ax = plt.subplots(1, 2, figsize=(10, 4))
    df.plot.scatter(x="x", y="y", label="y", color="blue", ax=ax[0])
    df.plot.scatter(x="x", y="yp", ax=ax[0], label="yp", color="orange")
    ax[1].plot([float(lo.detach()) for lo in losses], label="loss")
    ax[1].legend()


    # plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_piecewise_linear_001.png
   :alt: plot piecewise linear
   :srcset: /auto_examples/images/sphx_glr_plot_piecewise_linear_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7ffa18669220>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.075 seconds)


.. _sphx_glr_download_auto_examples_plot_piecewise_linear.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_piecewise_linear.ipynb <plot_piecewise_linear.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_piecewise_linear.py <plot_piecewise_linear.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_piecewise_linear.zip <plot_piecewise_linear.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
