
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_cpu_vector_sum_avx_parallel.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_bench_cpu_vector_sum_avx_parallel.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_cpu_vector_sum_avx_parallel.py:


Measuring CPU performance with a parallelized vector sum and AVX
================================================================

The example compares the time spend in computing the sum of all
coefficients of a matrix when the function walks through the coefficients
by rows or by columns when the computation is parallelized or uses
AVX instructions.

Vector Sum
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 13-93

.. code-block:: Python

    from tqdm import tqdm
    import numpy
    import matplotlib.pyplot as plt
    from pandas import DataFrame
    from teachcompute.ext_test_case import measure_time, unit_test_going
    from teachcompute.validation.cpu._validation import (
        vector_sum_array as vector_sum,
        vector_sum_array_parallel as vector_sum_parallel,
        vector_sum_array_avx as vector_sum_avx,
        vector_sum_array_avx_parallel as vector_sum_avx_parallel,
    )

    obs = []
    dims = [500, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 2000]
    if unit_test_going():
        dims = [10, 20]
    for dim in tqdm(dims):
        values = numpy.ones((dim, dim), dtype=numpy.float32).ravel()
        diff = abs(vector_sum(dim, values, True) - dim**2)

        res = measure_time(lambda: vector_sum(dim, values, True), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="rows",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        res = measure_time(lambda: vector_sum_parallel(dim, values, True), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="rows//",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        diff = abs(vector_sum_avx(dim, values) - dim**2)
        res = measure_time(lambda: vector_sum_avx(dim, values), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="avx",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        diff = abs(vector_sum_avx_parallel(dim, values) - dim**2)
        res = measure_time(lambda: vector_sum_avx_parallel(dim, values), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="avx//",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )


    df = DataFrame(obs)
    piv = df.pivot(index="dim", columns="direction", values="time_per_element")
    print(piv)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/14 [00:00<?, ?it/s]      7%|▋         | 1/14 [00:02<00:32,  2.53s/it]     14%|█▍        | 2/14 [00:06<00:38,  3.25s/it]     21%|██▏       | 3/14 [00:12<00:52,  4.77s/it]     29%|██▊       | 4/14 [00:15<00:40,  4.08s/it]     36%|███▌      | 5/14 [00:20<00:38,  4.25s/it]     43%|████▎     | 6/14 [00:34<01:00,  7.60s/it]     50%|█████     | 7/14 [00:37<00:43,  6.20s/it]     57%|█████▋    | 8/14 [00:40<00:30,  5.01s/it]     64%|██████▍   | 9/14 [00:44<00:23,  4.74s/it]     71%|███████▏  | 10/14 [00:46<00:16,  4.05s/it]     79%|███████▊  | 11/14 [00:51<00:12,  4.08s/it]     86%|████████▌ | 12/14 [00:54<00:07,  3.76s/it]     93%|█████████▎| 13/14 [00:56<00:03,  3.38s/it]    100%|██████████| 14/14 [00:59<00:00,  3.19s/it]    100%|██████████| 14/14 [00:59<00:00,  4.24s/it]
    direction           avx         avx//          rows        rows//
    dim                                                              
    500        1.362234e-10  4.739820e-11  1.364050e-09  4.088201e-10
    700        1.123477e-10  1.155977e-10  1.155085e-09  3.680393e-10
    800        1.564581e-10  1.633466e-09  1.177398e-09  2.280686e-09
    900        1.423280e-10  5.296811e-11  1.290845e-09  3.395833e-09
    1000       2.083962e-10  1.121524e-09  1.329900e-09  3.174858e-09
    1100       3.659656e-10  2.069011e-09  1.557380e-09  3.858741e-09
    1200       8.901789e-10  3.557879e-09  1.901206e-09  3.655519e-09
    1300       4.997694e-10  2.949630e-09  2.819378e-09  3.184054e-09
    1400       4.826433e-10  1.538408e-09  1.922412e-09  2.358900e-09
    1500       4.818815e-10  1.373158e-09  2.002003e-09  1.494899e-09
    1600       5.383845e-10  1.147169e-09  1.885809e-09  1.977512e-09
    1700       4.312572e-10  9.495409e-10  1.705877e-09  1.484585e-09
    1800       4.608644e-10  5.553874e-10  1.554297e-09  1.284800e-09
    2000       4.270783e-10  3.299269e-10  1.374330e-09  6.887369e-10




.. GENERATED FROM PYTHON SOURCE LINES 94-96

Plots
+++++

.. GENERATED FROM PYTHON SOURCE LINES 96-107

.. code-block:: Python


    piv_diff = df.pivot(index="dim", columns="direction", values="diff")
    piv_time = df.pivot(index="dim", columns="direction", values="time")

    fig, ax = plt.subplots(1, 3, figsize=(12, 6))
    piv.plot(ax=ax[0], logx=True, title="Comparison between two summation")
    piv_diff.plot(ax=ax[1], logx=True, logy=True, title="Summation errors")
    piv_time.plot(ax=ax[2], logx=True, logy=True, title="Total time")
    fig.tight_layout()
    fig.savefig("plot_bench_cpu_vector_sum_avx_parallel.png")




.. image-sg:: /auto_examples/images/sphx_glr_plot_bench_cpu_vector_sum_avx_parallel_001.png
   :alt: Comparison between two summation, Summation errors, Total time
   :srcset: /auto_examples/images/sphx_glr_plot_bench_cpu_vector_sum_avx_parallel_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 108-109

AVX is faster.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 0.636 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_cpu_vector_sum_avx_parallel.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_cpu_vector_sum_avx_parallel.ipynb <plot_bench_cpu_vector_sum_avx_parallel.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_cpu_vector_sum_avx_parallel.py <plot_bench_cpu_vector_sum_avx_parallel.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
