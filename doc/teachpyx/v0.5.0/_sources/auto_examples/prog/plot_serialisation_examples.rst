
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/prog/plot_serialisation_examples.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_prog_plot_serialisation_examples.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_prog_plot_serialisation_examples.py:


=============
Sérialisation
=============

Le notebook explore différentes façons de sérialiser des données et leurs limites.

JSON
====

Le format :epkg:`JSON` est le format le plus utilisé sur internet
notemmant via les :epkg:`API REST`.

Ecriture (json)
+++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 18-38

.. code-block:: Python

    from io import StringIO, BytesIO
    import timeit
    import json
    import numpy
    import ujson
    import cloudpickle
    import pickle


    data = {
        "records": [
            {
                "nom": "Xavier",
                "prénom": "Xavier",
                "langages": [{"nom": "C++", "age": 40}, {"nom": "Python", "age": 20}],
            }
        ]
    }









.. GENERATED FROM PYTHON SOURCE LINES 40-47

.. code-block:: Python


    buffer = StringIO()
    res = json.dump(data, buffer)  # 1
    seq = buffer.getvalue()
    seq






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    '{"records": [{"nom": "Xavier", "pr\\u00e9nom": "Xavier", "langages": [{"nom": "C++", "age": 40}, {"nom": "Python", "age": 20}]}]}'



.. GENERATED FROM PYTHON SOURCE LINES 48-50

Lecture (json)
++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 50-57

.. code-block:: Python



    buffer = StringIO(seq)
    read = json.load(buffer)
    read






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'records': [{'nom': 'Xavier', 'prénom': 'Xavier', 'langages': [{'nom': 'C++', 'age': 40}, {'nom': 'Python', 'age': 20}]}]}



.. GENERATED FROM PYTHON SOURCE LINES 58-62

Limite
++++++

Les matrices :epkg:`numpy` ne sont pas sérialisables facilement.

.. GENERATED FROM PYTHON SOURCE LINES 62-73

.. code-block:: Python



    data = {"mat": numpy.array([0, 1])}

    buffer = StringIO()
    try:
        json.dump(data, buffer)
    except Exception as e:
        print(e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Object of type ndarray is not JSON serializable




.. GENERATED FROM PYTHON SOURCE LINES 74-75

Les classes ne sont pas sérialisables non plus facilement.

.. GENERATED FROM PYTHON SOURCE LINES 75-90

.. code-block:: Python



    class A:
        def __init__(self, att):
            self.att = att


    data = A("e")
    buffer = StringIO()
    try:
        json.dump(data, buffer)
    except Exception as e:
        print(e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Object of type A is not JSON serializable




.. GENERATED FROM PYTHON SOURCE LINES 91-94

Pour ce faire, il faut indiquer au module :mod:`json`
comment convertir la classe en un ensemble de listes et dictionnaires et
la classe :class:`json.JSONEncoder`.

.. GENERATED FROM PYTHON SOURCE LINES 94-107

.. code-block:: Python



    class MyEncoder(json.JSONEncoder):
        def default(self, o):
            return {"classname": o.__class__.__name__, "data": o.__dict__}


    data = A("e")
    buffer = StringIO()
    res = json.dump(data, buffer, cls=MyEncoder)
    res = buffer.getvalue()
    res





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    '{"classname": "A", "data": {"att": "e"}}'



.. GENERATED FROM PYTHON SOURCE LINES 108-109

Et la relecture avec la classe :class:`json.JSONDecoder`.

.. GENERATED FROM PYTHON SOURCE LINES 109-125

.. code-block:: Python



    class MyDecoder(json.JSONDecoder):
        def decode(self, o):
            dec = json.JSONDecoder.decode(self, o)
            if isinstance(dec, dict) and dec.get("classname") == "A":
                return A(dec["data"]["att"])
            else:
                return dec


    buffer = StringIO(res)
    obj = json.load(buffer, cls=MyDecoder)
    obj






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <__main__.A object at 0x7f1656d86380>



.. GENERATED FROM PYTHON SOURCE LINES 126-132

Sérialisation rapide
++++++++++++++++++++

Le module :mod:`json` est la librairie standard de Python mais comme
la sérialisation au format *JSON* est un besoin très fréquent,
il existe des alternative plus rapide comme :epkg:`ujson`.

.. GENERATED FROM PYTHON SOURCE LINES 132-145

.. code-block:: Python



    data = {
        "records": [
            {
                "nom": "Xavier",
                "prénom": "Xavier",
                "langages": [{"nom": "C++", "age": 40}, {"nom": "Python", "age": 20}],
            }
        ]
    }









.. GENERATED FROM PYTHON SOURCE LINES 147-152

.. code-block:: Python



    timeit.timeit("json.dump(data, StringIO())", globals=globals(), number=100)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.001755029000378272



.. GENERATED FROM PYTHON SOURCE LINES 154-159

.. code-block:: Python



    timeit.timeit("ujson.dump(data, StringIO())", globals=globals(), number=100)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.00018962499962071888



.. GENERATED FROM PYTHON SOURCE LINES 160-162

Ces deux lignes mesures l'écriture au format JSON
mais il faut aussi mesurer la lecture.

.. GENERATED FROM PYTHON SOURCE LINES 162-170

.. code-block:: Python



    buffer = StringIO()
    ujson.dump(data, buffer)
    res = buffer.getvalue()
    timeit.timeit("json.load(StringIO(res))", globals=globals(), number=100)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0005293539998092456



.. GENERATED FROM PYTHON SOURCE LINES 172-176

.. code-block:: Python


    timeit.timeit("ujson.load(StringIO(res))", globals=globals(), number=100)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.00021988000025885412



.. GENERATED FROM PYTHON SOURCE LINES 177-178

On enlève le temps passé dans la creation du buffer.

.. GENERATED FROM PYTHON SOURCE LINES 178-183

.. code-block:: Python



    timeit.timeit("StringIO(res)", globals=globals(), number=100)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2.3614999918208923e-05



.. GENERATED FROM PYTHON SOURCE LINES 184-193

Pickle
======

Le module :mod:`pickle` effectue la même chose mais au format binaire.
Celui-ci est propre à *Python* et ne peut être lu d'autres langages,
voire parfois par d'autres versions de *Python*.

Ecriture (pickle)
+++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 193-206

.. code-block:: Python



    data = {
        "records": [
            {
                "nom": "Xavier",
                "prénom": "Xavier",
                "langages": [{"nom": "C++", "age": 40}, {"nom": "Python", "age": 20}],
            }
        ]
    }









.. GENERATED FROM PYTHON SOURCE LINES 208-216

.. code-block:: Python



    buffer = BytesIO()
    res = pickle.dump(data, buffer)
    seq = buffer.getvalue()
    seq






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'\x80\x04\x95f\x00\x00\x00\x00\x00\x00\x00}\x94\x8c\x07records\x94]\x94}\x94(\x8c\x03nom\x94\x8c\x06Xavier\x94\x8c\x07pr\xc3\xa9nom\x94h\x05\x8c\x08langages\x94]\x94(}\x94(h\x04\x8c\x03C++\x94\x8c\x03age\x94K(u}\x94(h\x04\x8c\x06Python\x94h\x0bK\x14ueuas.'



.. GENERATED FROM PYTHON SOURCE LINES 217-219

Lecture (pickle)
++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 219-226

.. code-block:: Python



    buffer = BytesIO(seq)
    read = pickle.load(buffer)
    read






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'records': [{'nom': 'Xavier', 'prénom': 'Xavier', 'langages': [{'nom': 'C++', 'age': 40}, {'nom': 'Python', 'age': 20}]}]}



.. GENERATED FROM PYTHON SOURCE LINES 227-233

Les classes
+++++++++++

A l'inverse du format *JSON*, les classes sont sérialisables avec
:mod:`pickle` parce que le langage utilise un format très proche
de ce qu'il a en mémoire. Il n'a pas besoin de conversion supplémentaire.

.. GENERATED FROM PYTHON SOURCE LINES 233-242

.. code-block:: Python



    data = A("r")
    buffer = BytesIO()
    res = pickle.dump(data, buffer)
    seq = buffer.getvalue()
    seq






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'\x80\x04\x95#\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x01A\x94\x93\x94)\x81\x94}\x94\x8c\x03att\x94\x8c\x01r\x94sb.'



.. GENERATED FROM PYTHON SOURCE LINES 244-250

.. code-block:: Python


    buffer = BytesIO(seq)
    read = pickle.load(buffer)
    read






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <__main__.A object at 0x7f165832e7a0>



.. GENERATED FROM PYTHON SOURCE LINES 251-256

Réduire la taille
+++++++++++++++++

Certaines informations sont duppliquées et il est préférable de ne pas
les sérialiser deux fois surtout si elles sont voluminueuses.

.. GENERATED FROM PYTHON SOURCE LINES 256-264

.. code-block:: Python



    class B:
        def __init__(self, att):
            self.att1 = att
            self.att2 = att









.. GENERATED FROM PYTHON SOURCE LINES 266-274

.. code-block:: Python


    data = B("r")
    buffer = BytesIO()
    res = pickle.dump(data, buffer)
    seq = buffer.getvalue()
    seq






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'\x80\x04\x95.\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x01B\x94\x93\x94)\x81\x94}\x94(\x8c\x04att1\x94\x8c\x01r\x94\x8c\x04att2\x94h\x06ub.'



.. GENERATED FROM PYTHON SOURCE LINES 275-276

Evitons maintenant de stocker deux fois le même attribut.

.. GENERATED FROM PYTHON SOURCE LINES 276-294

.. code-block:: Python



    class B:
        def __init__(self, att):
            self.att1 = att
            self.att2 = att

        def __getstate__(self):
            return dict(att=self.att1)


    data = B("r")
    buffer = BytesIO()
    res = pickle.dump(data, buffer)
    seq = buffer.getvalue()
    seq






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'\x80\x04\x95#\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x01B\x94\x93\x94)\x81\x94}\x94\x8c\x03att\x94\x8c\x01r\x94sb.'



.. GENERATED FROM PYTHON SOURCE LINES 295-296

C'est plus court mais il faut inclure maintenant la relecture.

.. GENERATED FROM PYTHON SOURCE LINES 296-316

.. code-block:: Python



    class B:
        def __init__(self, att):
            self.att1 = att
            self.att2 = att

        def __getstate__(self):
            return dict(att=self.att1)

        def __setstate__(self, state):
            setattr(self, "att1", state["att"])
            setattr(self, "att2", state["att"])


    buffer = BytesIO(seq)
    read = pickle.load(buffer)
    read






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <__main__.B object at 0x7f165832d8d0>



.. GENERATED FROM PYTHON SOURCE LINES 318-322

.. code-block:: Python


    read.att1, read.att2






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ('r', 'r')



.. GENERATED FROM PYTHON SOURCE LINES 324-329

.. code-block:: Python


    data = B("r")
    timeit.timeit("pickle.dump(data, BytesIO())", globals=globals(), number=100)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0002514369998607435



.. GENERATED FROM PYTHON SOURCE LINES 331-335

.. code-block:: Python


    timeit.timeit("pickle.load(BytesIO(seq))", globals=globals(), number=100)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.00022162899949762505



.. GENERATED FROM PYTHON SOURCE LINES 336-340

La sérialisation binaire est habituellement plus rapide dans les langages
bas niveau comme C++. La même comparaison pour un langage haut niveau
tel que Python n'est pas toujours prévisible.
Il est possible d'accélérer un peu les choses.

.. GENERATED FROM PYTHON SOURCE LINES 340-349

.. code-block:: Python



    timeit.timeit(
        "pickle.dump(data, BytesIO(), protocol=pickle.HIGHEST_PROTOCOL)",
        globals=globals(),
        number=100,
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0003348099999129772



.. GENERATED FROM PYTHON SOURCE LINES 350-359

Cas des fonctions
=================

La sérialisation s'applique à des données et non à du code mais le
fait de sérialiser des fonctions est tout de même tentant.
La sérialisation binaire fonctionne même avec les fonctions.

Binaire
+++++++

.. GENERATED FROM PYTHON SOURCE LINES 359-373

.. code-block:: Python



    def myfunc(x):
        return x + 1


    data = {"x": 5, "f": myfunc}


    buffer = BytesIO()
    res = pickle.dump(data, buffer)
    buffer.getvalue()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'\x80\x04\x95%\x00\x00\x00\x00\x00\x00\x00}\x94(\x8c\x01x\x94K\x05\x8c\x01f\x94\x8c\x08__main__\x94\x8c\x06myfunc\x94\x93\x94u.'



.. GENERATED FROM PYTHON SOURCE LINES 375-381

.. code-block:: Python



    res = pickle.load(BytesIO(buffer.getvalue()))
    res






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'x': 5, 'f': <function myfunc at 0x7f16570f01f0>}



.. GENERATED FROM PYTHON SOURCE LINES 383-387

.. code-block:: Python


    res["f"](res["x"])






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    6



.. GENERATED FROM PYTHON SOURCE LINES 388-391

La sérialisation ne conserve pas le code de la fonction, juste son nom.
Cela veut dire que si elle n'est pas disponible lorsqu'elle est appelée,
il sera impossible de s'en servir.

.. GENERATED FROM PYTHON SOURCE LINES 391-402

.. code-block:: Python



    del myfunc


    try:
        pickle.load(BytesIO(buffer.getvalue()))
    except Exception as e:
        print(e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Can't get attribute 'myfunc' on <module '__main__'>




.. GENERATED FROM PYTHON SOURCE LINES 403-405

Il est possible de contourner l'obstacle en utilisant le module
:epkg:`cloudpickle` qui stocke le code de la fonction.

.. GENERATED FROM PYTHON SOURCE LINES 405-419

.. code-block:: Python



    def myfunc(x):
        return x + 1


    data = {"x": 5, "f": myfunc}


    buffer = BytesIO()
    res = cloudpickle.dump(data, buffer)
    buffer.getvalue()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'\x80\x05\x95\xe3\x01\x00\x00\x00\x00\x00\x00}\x94(\x8c\x01x\x94K\x05\x8c\x01f\x94\x8c\x17cloudpickle.cloudpickle\x94\x8c\x0e_make_function\x94\x93\x94(h\x03\x8c\r_builtin_type\x94\x93\x94\x8c\x08CodeType\x94\x85\x94R\x94(K\x01K\x00K\x00K\x01K\x02KCC\x08|\x00d\x01\x17\x00S\x00\x94NK\x01\x86\x94)h\x01\x85\x94\x8cO/home/xadupre/github/teachpyx/_doc/examples/prog/plot_serialisation_examples.py\x94\x8c\x06myfunc\x94M\x97\x01C\x02\x08\x01\x94))t\x94R\x94}\x94(\x8c\x0b__package__\x94\x8c\x00\x94\x8c\x08__name__\x94\x8c\x08__main__\x94uNNNt\x94R\x94h\x03\x8c\x12_function_setstate\x94\x93\x94h\x19}\x94}\x94(h\x16h\x0f\x8c\x0c__qualname__\x94h\x0f\x8c\x0f__annotations__\x94}\x94\x8c\x0e__kwdefaults__\x94N\x8c\x0c__defaults__\x94N\x8c\n__module__\x94h\x17\x8c\x07__doc__\x94N\x8c\x0b__closure__\x94N\x8c\x17_cloudpickle_submodules\x94]\x94\x8c\x0b__globals__\x94}\x94u\x86\x94\x86R0u.'



.. GENERATED FROM PYTHON SOURCE LINES 421-429

.. code-block:: Python


    del myfunc


    res = cloudpickle.load(BytesIO(buffer.getvalue()))
    res






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'x': 5, 'f': <function myfunc at 0x7f16570f0670>}



.. GENERATED FROM PYTHON SOURCE LINES 431-435

.. code-block:: Python


    res["f"](res["x"])






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    6



.. GENERATED FROM PYTHON SOURCE LINES 436-441

Fonction et JSON
++++++++++++++++

La sérialisation d'une fonction au format JSON ne
fonctionne pas avec le module standard.

.. GENERATED FROM PYTHON SOURCE LINES 441-450

.. code-block:: Python



    buffer = StringIO()
    try:
        json.dump(data, buffer)  # 2
    except Exception as e:
        print(e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Object of type function is not JSON serializable




.. GENERATED FROM PYTHON SOURCE LINES 451-453

La sérialisation avec :epkg:`ujson` ne fonctionne pas non plus
même si elle ne produit pas toujours d'erreur.

.. GENERATED FROM PYTHON SOURCE LINES 453-463

.. code-block:: Python



    buffer = StringIO()
    try:
        res = ujson.dump(data, buffer)  # 3
    except TypeError as e:
        print(e)
    buffer.getvalue()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <function myfunc at 0x7f16570f04c0> is not JSON serializable

    ''



.. GENERATED FROM PYTHON SOURCE LINES 464-469

Cas des itérateurs
==================

Les itérateurs fonctionnent avec la sérialisation binaire mais ceci
implique de stocker l'ensemble que l'itérateur parcourt.

.. GENERATED FROM PYTHON SOURCE LINES 469-481

.. code-block:: Python



    ens = [1, 2]

    data = {"x": 5, "it": iter(ens)}


    buffer = BytesIO()
    res = pickle.dump(data, buffer)  # 4
    buffer.getvalue()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b'\x80\x04\x953\x00\x00\x00\x00\x00\x00\x00}\x94(\x8c\x01x\x94K\x05\x8c\x02it\x94\x8c\x08builtins\x94\x8c\x04iter\x94\x93\x94]\x94(K\x01K\x02e\x85\x94R\x94K\x00bu.'



.. GENERATED FROM PYTHON SOURCE LINES 483-490

.. code-block:: Python


    del ens

    res = pickle.load(BytesIO(buffer.getvalue()))
    res






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'x': 5, 'it': <list_iterator object at 0x7f165832ce50>}



.. GENERATED FROM PYTHON SOURCE LINES 492-496

.. code-block:: Python


    list(res["it"])






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [1, 2]



.. GENERATED FROM PYTHON SOURCE LINES 498-502

.. code-block:: Python


    list(res["it"])






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    []



.. GENERATED FROM PYTHON SOURCE LINES 503-509

Cas des générateurs
===================

Ils ne peuvent être sérialisés car le langage n'a pas accès à l'ensemble
des éléments que le générateur parcourt. Il n'y a aucun moyen de
sérialiser un générateur mais on peut sérialiser la fonction qui crée le générateur.

.. GENERATED FROM PYTHON SOURCE LINES 509-524

.. code-block:: Python



    def ensgen():
        yield 1
        yield 2


    data = {"x": 5, "it": ensgen()}


    buffer = BytesIO()
    try:
        pickle.dump(data, buffer)
    except Exception as e:
        print(e)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    cannot pickle 'generator' object





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.021 seconds)


.. _sphx_glr_download_auto_examples_prog_plot_serialisation_examples.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_serialisation_examples.ipynb <plot_serialisation_examples.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_serialisation_examples.py <plot_serialisation_examples.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_serialisation_examples.zip <plot_serialisation_examples.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
