
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/prog/plot_serialisation_protobuf.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_prog_plot_serialisation_protobuf.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_prog_plot_serialisation_protobuf.py:


.. _l-example-protobuf:

===========================
Sérialisation avec protobuf
===========================

:epkg:`protobuf` optimise la sérialisation de deux façons.
Elle accélère l'écriture et la lecture des données et permet aussi
un accès rapide à une information précise dans désérialiser
les autres. Elle réalise cela en imposant un schéma strict de données.

L'exemple fonctionne si l'exécutable `protoc` et le package `protobuf`
ont des versions compatibles. Un message apparaîtra dans le cas contraire.

::

    protoc --version
    python -c "import google.protobuf as gp;print(gp.__version__)"

Schéma
======

On récupère l'exemple du `tutorial
<https://developers.google.com/protocol-buffers/docs/pythontutorial>`_.

.. GENERATED FROM PYTHON SOURCE LINES 28-66

.. code-block:: Python

    import os
    import sys
    import timeit
    import struct
    from io import BytesIO
    from sphinx_runpython.runpython import run_cmd
    import google.protobuf as gp
    from google.protobuf.json_format import MessageToJson, Parse as ParseJson

    schema = """
    syntax = "proto2";

    package tutorial;

    message Person {
      optional string name = 1;
      optional int32 id = 2;
      optional string email = 3;

      enum PhoneType {
        MOBILE = 0;
        HOME = 1;
        WORK = 2;
      }

      message PhoneNumber {
        optional string number = 1;
        optional PhoneType type = 2 [default = HOME];
      }

      repeated PhoneNumber phones = 4;
    }

    message AddressBook {
      repeated Person people = 1;
    }
    """








.. GENERATED FROM PYTHON SOURCE LINES 67-73

Compilation
===========

Il faut d'abord récupérer le compilateur. Cela peut se faire depuis
le site de :epkg:`protobuf` ou sur Linux (Ubuntu/Debian)
``apt-get install protobuf-compiler`` pour obtenir le programme ``protoc``.

.. GENERATED FROM PYTHON SOURCE LINES 73-79

.. code-block:: Python



    version = gp.__version__
    version






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    '4.23.4'



.. GENERATED FROM PYTHON SOURCE LINES 81-105

.. code-block:: Python



    with open("schema.proto", "w") as f:
        f.write(schema)


    # Et on peut compiler.

    # In[8]:


    cmd = "protoc --python_out=. schema.proto"
    try:
        out, err = run_cmd(cmd=cmd, wait=True)
        use_protoc = True
    except FileNotFoundError as e:
        print(f"error: {e}")
        print("unable to use protoc")
        use_protoc = False
    if use_protoc:
        print(out)
        print(err)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    error: [Errno 2] No such file or directory: 'protoc'
    unable to use protoc




.. GENERATED FROM PYTHON SOURCE LINES 106-107

Un fichier a été généré.

.. GENERATED FROM PYTHON SOURCE LINES 107-112

.. code-block:: Python



    [_ for _ in os.listdir(".") if ".py" in _]






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['plot_lambda_function.py', 'plot_matador.py', 'plot_pandas_groupby.py', 'plot_tarabiscote.py', 'plot_serialisation_examples.py', 'plot_partie_dame.py', 'plot_serialisation_protobuf.py', 'plot_gil_example.py', 'plot_numpy_tricks.py', 'plot_float_and_double_rouding.py', 'plot_tsp.py', 'plot_hypercube.py', 'plot_einstein_riddle.py']



.. GENERATED FROM PYTHON SOURCE LINES 113-122

.. code-block:: Python


    if os.path.exists("schema_pb2.py"):
        with open("schema_pb2.py", "r") as f:
            content = f.read()
        print(content[:1000])
    else:
        print("schema_pb2.py missing")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    schema_pb2.py missing




.. GENERATED FROM PYTHON SOURCE LINES 123-127

Import du module créé
=====================

Pour utliser *protobuf*, il faut importer le module créé.

.. GENERATED FROM PYTHON SOURCE LINES 127-133

.. code-block:: Python



    if use_protoc:
        sys.path.append(".")
        import schema_pb2  # noqa: E402








.. GENERATED FROM PYTHON SOURCE LINES 134-135

On créé un enregistrement.

.. GENERATED FROM PYTHON SOURCE LINES 135-147

.. code-block:: Python



    if use_protoc:
        person = schema_pb2.Person()
        person.id = 1234
        person.name = "John Doe"
        person.email = "jdoe@example.com"
        phone = person.phones.add()
        phone.number = "555-4321"
        phone.type = schema_pb2.Person.HOME









.. GENERATED FROM PYTHON SOURCE LINES 149-154

.. code-block:: Python


    if use_protoc:
        person









.. GENERATED FROM PYTHON SOURCE LINES 155-157

Sérialisation en chaîne de caractères
=====================================

.. GENERATED FROM PYTHON SOURCE LINES 157-164

.. code-block:: Python



    if use_protoc:
        res = person.SerializeToString()
        print(type(res), res)









.. GENERATED FROM PYTHON SOURCE LINES 166-171

.. code-block:: Python


    if use_protoc:
        print(timeit.timeit("person.SerializeToString()", globals=globals(), number=100))









.. GENERATED FROM PYTHON SOURCE LINES 173-179

.. code-block:: Python


    if use_protoc:
        pers = schema_pb2.Person.FromString(res)
        print(pers)









.. GENERATED FROM PYTHON SOURCE LINES 181-188

.. code-block:: Python


    if use_protoc:
        pers = schema_pb2.Person()
        pers.ParseFromString(res)
        print(pers)









.. GENERATED FROM PYTHON SOURCE LINES 190-199

.. code-block:: Python


    if use_protoc:
        print(
            timeit.timeit(
                "schema_pb2.Person.FromString(res)", globals=globals(), number=100
            )
        )









.. GENERATED FROM PYTHON SOURCE LINES 201-206

.. code-block:: Python


    if use_protoc:
        print(timeit.timeit("pers.ParseFromString(res)", globals=globals(), number=100))









.. GENERATED FROM PYTHON SOURCE LINES 207-209

Plusieurs chaînes de caractères
===============================

.. GENERATED FROM PYTHON SOURCE LINES 209-232

.. code-block:: Python



    db = []
    if use_protoc:
        person = schema_pb2.Person()
        person.id = 1234
        person.name = "John Doe"
        person.email = "jdoe@example.com"
        phone = person.phones.add()
        phone.number = "555-4321"
        phone.type = schema_pb2.Person.HOME
        db.append(person)

        person = schema_pb2.Person()
        person.id = 5678
        person.name = "Johnette Doette"
        person.email = "jtdoet@example2.com"
        phone = person.phones.add()
        phone.number = "777-1234"
        phone.type = schema_pb2.Person.MOBILE
        db.append(person)









.. GENERATED FROM PYTHON SOURCE LINES 234-245

.. code-block:: Python



    buffer = BytesIO()
    for p in db:
        size = p.ByteSize()
        buffer.write(struct.pack("i", size))
        buffer.write(p.SerializeToString())
    res = buffer.getvalue()
    res






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    b''



.. GENERATED FROM PYTHON SOURCE LINES 247-263

.. code-block:: Python



    db2 = []
    buffer = BytesIO(res)
    n = 0
    while True:
        bsize = buffer.read(4)
        if len(bsize) == 0:
            # C'est fini.
            break
        size = struct.unpack("i", bsize)[0]
        data = buffer.read(size)
        p = schema_pb2.Person.FromString(data)
        db2.append(p)









.. GENERATED FROM PYTHON SOURCE LINES 265-270

.. code-block:: Python


    if db2:
        print(db2[0], db2[1])









.. GENERATED FROM PYTHON SOURCE LINES 271-273

Sérialisation JSON
==================

.. GENERATED FROM PYTHON SOURCE LINES 273-278

.. code-block:: Python


    if use_protoc:
        print(MessageToJson(pers))









.. GENERATED FROM PYTHON SOURCE LINES 280-285

.. code-block:: Python


    if use_protoc:
        print(timeit.timeit("MessageToJson(pers)", globals=globals(), number=100))









.. GENERATED FROM PYTHON SOURCE LINES 287-295

.. code-block:: Python



    if use_protoc:
        js = MessageToJson(pers)
        res = ParseJson(js, message=schema_pb2.Person())
        print(res)









.. GENERATED FROM PYTHON SOURCE LINES 297-304

.. code-block:: Python


    if use_protoc:
        print(
            timeit.timeit(
                "ParseJson(js, message=schema_pb2.Person())", globals=globals(), number=100
            )
        )








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.067 seconds)


.. _sphx_glr_download_auto_examples_prog_plot_serialisation_protobuf.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_serialisation_protobuf.ipynb <plot_serialisation_protobuf.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_serialisation_protobuf.py <plot_serialisation_protobuf.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
