
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/prog/plot_float_and_double_rouding.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_prog_plot_float_and_double_rouding.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_prog_plot_float_and_double_rouding.py:


================
Float Conversion
================

I came up with the following question
:math:`(float64)x < (float64)y \Longrightarrow (float32) x < (float32)y`?
What is the probability this holds?

Probability (float64)x == (float32)x
====================================

Let's evaluate how many time we draw a random double
number equal to its float conversion.

.. GENERATED FROM PYTHON SOURCE LINES 17-27

.. code-block:: Python


    import random
    import numpy
    import pandas
    import matplotlib.pyplot as plt


    rnd = numpy.random.random(100000000)
    rnd.shape, rnd.dtype





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ((100000000,), dtype('float64'))



.. GENERATED FROM PYTHON SOURCE LINES 29-35

.. code-block:: Python


    rnd32 = rnd.astype(numpy.float32).astype(numpy.float64)
    equal = (rnd == rnd32).sum()
    equal






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    1



.. GENERATED FROM PYTHON SOURCE LINES 36-37

It is very low. Let's check the reverse is true.

.. GENERATED FROM PYTHON SOURCE LINES 37-44

.. code-block:: Python



    rnd32b = rnd32.astype(numpy.float64).astype(numpy.float32)
    equal = (rnd32b == rnd32).sum()
    equal






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    100000000



.. GENERATED FROM PYTHON SOURCE LINES 45-46

Let's study the distribution of the difference.

.. GENERATED FROM PYTHON SOURCE LINES 46-52

.. code-block:: Python



    delta = rnd - rnd32
    numpy.min(delta), numpy.max(delta)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (-2.9802318946003936e-08, 2.9802320389293868e-08)



.. GENERATED FROM PYTHON SOURCE LINES 54-58

.. code-block:: Python


    numpy.min(rnd), numpy.max(rnd)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (2.9529422240770486e-09, 0.9999999984933388)



.. GENERATED FROM PYTHON SOURCE LINES 60-65

.. code-block:: Python



    plt.hist(delta, bins=1000)





.. image-sg:: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_001.png
   :alt: plot float and double rouding
   :srcset: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([ 50251.,  49779.,  49946.,  50016.,  50129.,  49780.,  49941.,
            49857.,  49713.,  50167.,  50067.,  49810.,  49871.,  50138.,
            49770.,  49920.,  49503.,  50190.,  50054.,  49807.,  50367.,
            50202.,  50043.,  49913.,  49825.,  50190.,  50212.,  49822.,
            49941.,  50042.,  50331.,  50089.,  50080.,  49810.,  50057.,
            49952.,  49683.,  49522.,  49941.,  50060.,  49782.,  50379.,
            50292.,  50150.,  49961.,  49998.,  50106.,  50176.,  49719.,
            50496.,  50010.,  49474.,  50154.,  50386.,  50327.,  50041.,
            50224.,  49953.,  49814.,  50021.,  50354.,  49762.,  50110.,
            49846.,  50177.,  50362.,  50053.,  50061.,  50137.,  49869.,
            49747.,  50269.,  50081.,  49808.,  50508.,  49671.,  50015.,
            49982.,  49654.,  50132.,  49664.,  49936.,  50256.,  50170.,
            49934.,  49772.,  49974.,  49789.,  49863.,  50130.,  50233.,
            49945.,  50050.,  49595.,  50366.,  50154.,  49968.,  50350.,
            49884.,  49877.,  49792.,  50066.,  49657.,  49938.,  50327.,
            50120.,  49744.,  50411.,  50028.,  49926.,  50028.,  50391.,
            50022.,  50287.,  50147.,  49738.,  49821.,  50063.,  49798.,
            50595.,  49670.,  49942.,  49905.,  50488.,  50325.,  49957.,
            50133.,  49957.,  49953.,  50142.,  49708.,  50106.,  50188.,
            49810.,  50002.,  49592.,  49766.,  49829.,  49930.,  50173.,
            50233.,  49618.,  50127.,  49608.,  50301.,  50232.,  49778.,
            49861.,  50211.,  49839.,  50095.,  50005.,  50308.,  49882.,
            50123.,  50242.,  49957.,  50088.,  50238.,  50003.,  49981.,
            50252.,  50203.,  49979.,  50016.,  49361.,  50092.,  49672.,
            49779.,  50052.,  49882.,  49624.,  49892.,  49672.,  49740.,
            50026.,  49973.,  49912.,  50234.,  49896.,  49816.,  49939.,
            49768.,  49878.,  49913.,  49803.,  49983.,  50366.,  49971.,
            49519.,  50118.,  49957.,  49984.,  50027.,  49997.,  49899.,
            50233.,  49889.,  49917.,  50029.,  49953.,  50151.,  49696.,
            50128.,  49993.,  49900.,  50199.,  49991.,  49996.,  50111.,
            50395.,  49675.,  49953.,  50225.,  49967.,  49905.,  49802.,
            50225.,  49891.,  50128.,  50043.,  49651.,  49647.,  49901.,
            49797.,  50392.,  49552.,  49685.,  49987.,  49882.,  50004.,
            50026.,  49951.,  50067.,  49864.,  50023.,  50002.,  49648.,
            50404.,  49648.,  50025.,  49948.,  50172.,  50206.,  49829.,
            50226.,  49916.,  49946.,  50106.,  49828.,  99923., 100180.,
           100468.,  99962.,  99873., 100347., 100189.,  99946.,  99972.,
            99914., 100199., 100150., 100158.,  99882.,  99528., 100395.,
           100126., 100420., 100093.,  99765.,  99560., 100091., 100240.,
            99811., 100392., 100200.,  99976.,  99512., 100069.,  99755.,
           100255.,  99869.,  99560.,  99698., 100150.,  99657.,  99540.,
            99690.,  99622.,  99558., 100080., 100061.,  99783.,  99600.,
            99689., 100125., 100438., 100125., 100830., 100457., 100185.,
            99959.,  99522.,  99674., 100214.,  99937., 100221.,  99933.,
           100257.,  99621.,  99523., 100297.,  99760.,  99507.,  99557.,
            99739., 100228., 100114.,  99523., 100001.,  99902., 100019.,
            99965., 100391., 100280., 100222.,  99287.,  99348., 100122.,
            99873.,  99875.,  99654.,  99411.,  99887., 100264., 100732.,
            99427., 100242., 100722., 100032., 100235.,  99973., 100729.,
           100309.,  99825., 100282., 100108., 100035.,  99867.,  99946.,
           100134., 100269., 100292., 100123.,  99794., 100106., 100672.,
            99786., 100502., 100264.,  99946.,  99950., 100426., 100026.,
            99838., 100497.,  99634.,  99857.,  99762.,  99876., 100157.,
            99763., 100083.,  99834., 100240., 150046., 149516., 149954.,
           149898., 150324., 149920., 149949., 149798., 149910., 149897.,
           149656., 149821., 149864., 150317., 150148., 149865., 149240.,
           150167., 150054., 149946., 150028., 149540., 149134., 150309.,
           149854., 149825., 150732., 149716., 149410., 150172., 150249.,
           150200., 150370., 149370., 150570., 149860., 150577., 149843.,
           150416., 150566., 149457., 149256., 149235., 150317., 150789.,
           150521., 150021., 149600., 150308., 149605., 150094., 150239.,
           150114., 150325., 149689., 149564., 149693., 150202., 150426.,
           150319., 149453., 150071., 174856., 200213., 200036., 199808.,
           201567., 199827., 199664., 200627., 200144., 200124., 199188.,
           199297., 200116., 200218., 200741., 199991., 199601., 199638.,
           200559., 200626., 200668., 199605., 200022., 199788., 199461.,
           200210., 200094., 199174., 199747., 199717., 199518., 212887.,
           249443., 249677., 250402., 250180., 249891., 249775., 250369.,
           250059., 250337., 250784., 249573., 249219., 250546., 249861.,
           250196., 280879., 299473., 300348., 300197., 299859., 301069.,
           300033., 300466., 340765., 350245., 351051., 349761., 396981.,
           399723., 447924., 547573., 547639., 447967., 399110., 395705.,
           350329., 349364., 350462., 340999., 300735., 299982., 300739.,
           300746., 299809., 299409., 299717., 281853., 249818., 249710.,
           249845., 250035., 249965., 250678., 249067., 249240., 249802.,
           250291., 250420., 250869., 250118., 250177., 250337., 212408.,
           199886., 200109., 199702., 200221., 200028., 199984., 200059.,
           200811., 201183., 200372., 200321., 199960., 200014., 200164.,
           199817., 199999., 199435., 200125., 199667., 199742., 200231.,
           199897., 200430., 199896., 200252., 201000., 200348., 199315.,
           199825., 199394., 176023., 150424., 150156., 150606., 149708.,
           150174., 149965., 149932., 150293., 149804., 149937., 149727.,
           150060., 150510., 149836., 149899., 150018., 149614., 149837.,
           150569., 150078., 150429., 149549., 149713., 149728., 149581.,
           149982., 149535., 149855., 150169., 149500., 149389., 149953.,
           150214., 149281., 150197., 150203., 150209., 149886., 150453.,
           150045., 149518., 150347., 150416., 150360., 149876., 149997.,
           150162., 149978., 149685., 150313., 150782., 150088., 149866.,
           149714., 150184., 149837., 150211., 149803., 149545., 149699.,
           149591., 150197., 100182.,  99513.,  99782., 100263.,  99785.,
            99715., 100579., 100423., 100228.,  99918.,  99710.,  99956.,
           100007., 100271., 100223.,  99778., 100048.,  99659., 100179.,
            99870., 100204., 100410.,  99988.,  99954., 100003.,  99889.,
           100461., 100304.,  99656., 100010.,  99909.,  99713., 100134.,
           100319., 100087.,  99997., 100005., 100553., 100271., 100554.,
           100393., 100138.,  99930., 100055., 100084., 100204.,  99771.,
           100138.,  99905.,  99169., 100659.,  99727., 100061., 100526.,
           100554.,  99713., 100208., 100384.,  99949.,  99914.,  99787.,
           100253.,  99821.,  99887.,  99780.,  99703.,  99965.,  99686.,
           100064.,  99822., 100332.,  99692., 100005., 100074.,  99928.,
           100143.,  99890., 100185.,  99758., 100015., 100531.,  99781.,
            99982.,  99872.,  99878.,  99615.,  99750.,  99573.,  99931.,
            99643.,  99814.,  99697.,  99535.,  99946., 100122.,  99933.,
           100046.,  99826., 100227.,  99499.,  99921.,  99798., 100099.,
            99545., 100054., 100197.,  99588.,  99589.,  99911., 100256.,
            99686., 100270., 100323., 100625., 100230.,  99922.,  99797.,
           100067., 100137.,  99656.,  99904., 100397.,  99551.,  99807.,
           100222.,  50236.,  49917.,  49929.,  50280.,  49943.,  49870.,
            49807.,  49995.,  50156.,  49975.,  49978.,  49812.,  50037.,
            49596.,  49690.,  49876.,  50035.,  49865.,  50168.,  50008.,
            50217.,  49856.,  49959.,  49666.,  50198.,  49797.,  49903.,
            50254.,  49732.,  49916.,  49776.,  50030.,  49930.,  49933.,
            49918.,  49979.,  49726.,  49690.,  50178.,  50160.,  49795.,
            49712.,  49834.,  50273.,  50111.,  50098.,  49521.,  49897.,
            49941.,  50114.,  49642.,  49714.,  50094.,  49719.,  50012.,
            49968.,  49906.,  49837.,  50087.,  49883.,  50039.,  50092.,
            49972.,  49739.,  49496.,  50166.,  50066.,  50391.,  49582.,
            50126.,  49742.,  50562.,  49909.,  50054.,  49948.,  49949.,
            49847.,  49830.,  50018.,  50031.,  49806.,  50483.,  50065.,
            50012.,  49578.,  50097.,  50075.,  49954.,  49884.,  50815.,
            50033.,  49956.,  50238.,  50090.,  49945.,  50098.,  50034.,
            49673.,  50172.,  50148.,  50035.,  50170.,  49806.,  49981.,
            49802.,  49805.,  49687.,  50370.,  50146.,  50031.,  49829.,
            49772.,  49979.,  50012.,  50039.,  50147.,  50302.,  49806.,
            50226.,  49718.,  50246.,  49913.,  49825.,  49888.,  50157.,
            49972.,  50059.,  49994.,  50295.,  49984.,  50173.,  50065.,
            50129.,  50203.,  50077.,  49796.,  49885.,  49924.,  50094.,
            49988.,  50218.,  49998.,  50223.,  49863.,  50403.,  50453.,
            49579.,  49887.,  50113.,  49914.,  49842.,  49820.,  49915.,
            49820.,  49785.,  50200.,  49978.,  50158.,  50119.,  49845.,
            49903.,  49886.,  49983.,  50155.,  50333.,  49972.,  49933.,
            49628.,  49878.,  49932.,  49937.,  49708.,  50057.,  49997.,
            49852.,  50094.,  49869.,  49794.,  49877.,  49755.,  49811.,
            50161.,  50201.,  50132.,  49593.,  49879.,  49681.,  49945.,
            50098.,  49830.,  49691.,  49872.,  50116.,  49998.,  50148.,
            49986.,  49828.,  50033.,  49760.,  49935.,  50465.,  50200.,
            50077.,  50155.,  49541.,  50331.,  49839.,  49635.,  49867.,
            50443.,  49703.,  49965.,  50026.,  49983.,  50002.,  49781.,
            50211.,  50347.,  50343.,  50125.,  49529.,  49879.,  49990.,
            49678.,  49908.,  50168.,  49994.,  50029.,  50260.,  50190.,
            49646.,  50208.,  50007.,  50304.,  49550.,  50182.,  50004.,
            50040.,  50127.,  50127.,  50197.,  49737.,  50111.,  49967.,
            49907.,  50049.,  49611.,  49701.,  49915.,  50041.]), array([-2.98023189e-08, -2.97427143e-08, -2.96831097e-08, ...,
            2.96831111e-08,  2.97427157e-08,  2.98023204e-08]), <BarContainer object of 1000 artists>)



.. GENERATED FROM PYTHON SOURCE LINES 66-67

We finally check that double operations between float numpers remain floats.

.. GENERATED FROM PYTHON SOURCE LINES 67-81

.. code-block:: Python



    for i in range(100000):
        i, j = random.randint(0, len(rnd32) - 1), random.randint(0, len(rnd32) - 1)
        d32 = numpy.float64(rnd32[i] * rnd32[j])
        d64 = numpy.float64(rnd32[i]) * numpy.float64(rnd32[j])
        if d32 != d64:
            raise AssertionError(
                "Issue with somme={0} = {1} + {2}".format(
                    rnd32[i] + rnd32[j], rnd32[i], rnd32[j]
                )
            )









.. GENERATED FROM PYTHON SOURCE LINES 82-87

Interval length distribution
============================

Let's imagine now we want to define an intervalle in which a
double is converted to the same float. Let's find out about it length.

.. GENERATED FROM PYTHON SOURCE LINES 87-111

.. code-block:: Python



    def find_interval(x):
        dx = numpy.abs(x - numpy.float32(x))  # usually not zero
        dx /= 100
        f = numpy.float32(x)
        x1 = x
        while numpy.float32(x1) == f:
            x1 -= dx
        x2 = x
        while numpy.float32(x2) == f:
            x2 += dx
        return x1 + dx, x2 - dx


    length = numpy.zeros((2000,))
    for i in range(length.shape[0]):
        x = rnd[i]
        x1, x2 = find_interval(x)
        length[i] = x2 - x1

    min(length), max(length)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (2.9072249490592894e-11, 5.960462923226828e-08)



.. GENERATED FROM PYTHON SOURCE LINES 112-116

.. code-block:: Python


    plt.hist(length, bins=50)





.. image-sg:: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_002.png
   :alt: plot float and double rouding
   :srcset: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([ 32.,  33.,   0.,  61.,   0.,   0., 144.,   0.,   0.,   0.,   0.,
             0., 243.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
             0.,   0., 516.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
             0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
             0.,   0.,   0.,   0.,   0., 971.]), array([2.90722495e-11, 1.22058339e-09, 2.41209453e-09, 3.60360567e-09,
           4.79511681e-09, 5.98662795e-09, 7.17813909e-09, 8.36965023e-09,
           9.56116137e-09, 1.07526725e-08, 1.19441836e-08, 1.31356948e-08,
           1.43272059e-08, 1.55187171e-08, 1.67102282e-08, 1.79017393e-08,
           1.90932505e-08, 2.02847616e-08, 2.14762728e-08, 2.26677839e-08,
           2.38592950e-08, 2.50508062e-08, 2.62423173e-08, 2.74338285e-08,
           2.86253396e-08, 2.98168507e-08, 3.10083619e-08, 3.21998730e-08,
           3.33913842e-08, 3.45828953e-08, 3.57744064e-08, 3.69659176e-08,
           3.81574287e-08, 3.93489399e-08, 4.05404510e-08, 4.17319621e-08,
           4.29234733e-08, 4.41149844e-08, 4.53064956e-08, 4.64980067e-08,
           4.76895178e-08, 4.88810290e-08, 5.00725401e-08, 5.12640513e-08,
           5.24555624e-08, 5.36470735e-08, 5.48385847e-08, 5.60300958e-08,
           5.72216070e-08, 5.84131181e-08, 5.96046292e-08]), <BarContainer object of 50 artists>)



.. GENERATED FROM PYTHON SOURCE LINES 117-118

So we can approximate this interval by something like this:

.. GENERATED FROM PYTHON SOURCE LINES 118-124

.. code-block:: Python



    ql = numpy.sort(length)[int(length.shape[0] * 0.8)]
    ql






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    5.9522871964645674e-08



.. GENERATED FROM PYTHON SOURCE LINES 125-131

An answer to the initial question
=================================

Let's estimate
:math:`\mathbb{P}\left(x_{64} < y_{64} \Longrightarrow x_{32}
< y_{32} \; | \; |x-y| \leqslant d\right)` ?

.. GENERATED FROM PYTHON SOURCE LINES 131-165

.. code-block:: Python



    def inf_strict(x, y):
        f1 = x < y
        f2 = numpy.float32(x) < numpy.float32(y)
        return f1, f2


    def count_events(fct):
        rows = []
        for di in range(1, 1001):
            d = di * ql / 100
            total = 0
            ok = 0
            rnd = numpy.random.random((2000 * 3,))
            for i in range(0, rnd.shape[0], 3):
                s = -1 if rnd[i + 2] < 0.5 else 1
                x, y = rnd[i], rnd[i] + rnd[i + 1] * d * s
                f1, f2 = fct(x, y)
                if f1:
                    total += 1
                    if f2:
                        ok += 1
            if (di + 10) % 100 == 0:
                print(di, d, ":", ok, total)
            rows.append(dict(d=d, ratio=ok * 1.0 / total, total=total))

        return pandas.DataFrame(rows)


    df = count_events(inf_strict)
    df.head()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    90 5.3570584768181105e-08 : 673 1033
    190 1.1309345673282679e-07 : 838 1005
    290 1.7261632869747246e-07 : 898 1016
    390 2.3213920066211813e-07 : 895 977
    490 2.916620726267638e-07 : 935 1004
    590 3.5118494459140945e-07 : 953 1006
    690 4.1070781655605513e-07 : 946 993
    790 4.702306885207008e-07 : 930 978
    890 5.297535604853465e-07 : 963 1007
    990 5.892764324499922e-07 : 957 989


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>d</th>
          <th>ratio</th>
          <th>total</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>5.952287e-10</td>
          <td>0.028513</td>
          <td>982</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1.190457e-09</td>
          <td>0.038223</td>
          <td>968</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1.785686e-09</td>
          <td>0.069647</td>
          <td>962</td>
        </tr>
        <tr>
          <th>3</th>
          <td>2.380915e-09</td>
          <td>0.081511</td>
          <td>1006</td>
        </tr>
        <tr>
          <th>4</th>
          <td>2.976144e-09</td>
          <td>0.082822</td>
          <td>978</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 166-170

.. code-block:: Python


    df.plot(x="d", y="ratio")





.. image-sg:: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_003.png
   :alt: plot float and double rouding
   :srcset: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: xlabel='d'>



.. GENERATED FROM PYTHON SOURCE LINES 171-175

.. code-block:: Python


    df.plot(x="d", y="ratio", logx=True)





.. image-sg:: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_004.png
   :alt: plot float and double rouding
   :srcset: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: xlabel='d'>



.. GENERATED FROM PYTHON SOURCE LINES 176-182

An answer to a similar question: what about not strict comparison?
==================================================================

Let's estimate
:math:`\mathbb{P}\left(x_{64} \leqslant y_{64} \Longrightarrow x_{32}
\leqslant y_{32} \; | \; |x-y| \leqslant d\right)` ?

.. GENERATED FROM PYTHON SOURCE LINES 182-194

.. code-block:: Python



    def inf_equal(x, y):
        f1 = x <= y
        f2 = numpy.float32(x) <= numpy.float32(y)
        return f1, f2


    df2 = count_events(inf_equal)
    df2.head()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    90 5.3570584768181105e-08 : 997 997
    190 1.1309345673282679e-07 : 1017 1017
    290 1.7261632869747246e-07 : 1031 1031
    390 2.3213920066211813e-07 : 1010 1010
    490 2.916620726267638e-07 : 1017 1017
    590 3.5118494459140945e-07 : 1012 1012
    690 4.1070781655605513e-07 : 1013 1013
    790 4.702306885207008e-07 : 974 974
    890 5.297535604853465e-07 : 973 973
    990 5.892764324499922e-07 : 1003 1003


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>d</th>
          <th>ratio</th>
          <th>total</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>5.952287e-10</td>
          <td>1.0</td>
          <td>996</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1.190457e-09</td>
          <td>1.0</td>
          <td>1004</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1.785686e-09</td>
          <td>1.0</td>
          <td>973</td>
        </tr>
        <tr>
          <th>3</th>
          <td>2.380915e-09</td>
          <td>1.0</td>
          <td>1026</td>
        </tr>
        <tr>
          <th>4</th>
          <td>2.976144e-09</td>
          <td>1.0</td>
          <td>962</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 196-201

.. code-block:: Python


    ax = df.plot(x="d", y="ratio", logx=True, label="<")
    df2.plot(x="d", y="ratio", logx=True, label="<=", ax=ax)





.. image-sg:: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_005.png
   :alt: plot float and double rouding
   :srcset: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: xlabel='d'>



.. GENERATED FROM PYTHON SOURCE LINES 203-215

.. code-block:: Python



    def sup_strict(x, y):
        f1 = x > y
        f2 = numpy.float32(x) > numpy.float32(y)
        return f1, f2


    df3 = count_events(sup_strict)
    df3.head()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    90 5.3570584768181105e-08 : 651 1022
    190 1.1309345673282679e-07 : 861 1043
    290 1.7261632869747246e-07 : 872 971
    390 2.3213920066211813e-07 : 950 1031
    490 2.916620726267638e-07 : 937 1010
    590 3.5118494459140945e-07 : 923 974
    690 4.1070781655605513e-07 : 967 1008
    790 4.702306885207008e-07 : 940 974
    890 5.297535604853465e-07 : 973 1002
    990 5.892764324499922e-07 : 1002 1043


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>d</th>
          <th>ratio</th>
          <th>total</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>5.952287e-10</td>
          <td>0.018962</td>
          <td>1002</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1.190457e-09</td>
          <td>0.040877</td>
          <td>1003</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1.785686e-09</td>
          <td>0.064322</td>
          <td>995</td>
        </tr>
        <tr>
          <th>3</th>
          <td>2.380915e-09</td>
          <td>0.076541</td>
          <td>1006</td>
        </tr>
        <tr>
          <th>4</th>
          <td>2.976144e-09</td>
          <td>0.080169</td>
          <td>948</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 217-223

.. code-block:: Python


    ax = df.plot(x="d", y="ratio", logx=True, label="<")
    df2.plot(x="d", y="ratio", logx=True, label="<=", ax=ax)
    df3.plot(x="d", y="ratio", logx=True, label=">", ax=ax)





.. image-sg:: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_006.png
   :alt: plot float and double rouding
   :srcset: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: xlabel='d'>



.. GENERATED FROM PYTHON SOURCE LINES 225-237

.. code-block:: Python



    def sup_equal(x, y):
        f1 = x >= y
        f2 = numpy.float32(x) >= numpy.float32(y)
        return f1, f2


    df4 = count_events(sup_equal)
    df4.head()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    90 5.3570584768181105e-08 : 1005 1005
    190 1.1309345673282679e-07 : 989 989
    290 1.7261632869747246e-07 : 1033 1033
    390 2.3213920066211813e-07 : 1032 1032
    490 2.916620726267638e-07 : 1028 1028
    590 3.5118494459140945e-07 : 1008 1008
    690 4.1070781655605513e-07 : 1009 1009
    790 4.702306885207008e-07 : 1009 1009
    890 5.297535604853465e-07 : 1000 1000
    990 5.892764324499922e-07 : 1069 1069


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>d</th>
          <th>ratio</th>
          <th>total</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>5.952287e-10</td>
          <td>1.0</td>
          <td>1007</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1.190457e-09</td>
          <td>1.0</td>
          <td>1005</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1.785686e-09</td>
          <td>1.0</td>
          <td>1031</td>
        </tr>
        <tr>
          <th>3</th>
          <td>2.380915e-09</td>
          <td>1.0</td>
          <td>1006</td>
        </tr>
        <tr>
          <th>4</th>
          <td>2.976144e-09</td>
          <td>1.0</td>
          <td>1036</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 239-246

.. code-block:: Python


    ax = df.plot(x="d", y="ratio", logx=True, label="<")
    df2.plot(x="d", y="ratio", logx=True, label="<=", ax=ax)
    df3.plot(x="d", y="ratio", logx=True, label=">", ax=ax)
    df4.plot(x="d", y="ratio", logx=True, label=">=", ax=ax)





.. image-sg:: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_007.png
   :alt: plot float and double rouding
   :srcset: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: xlabel='d'>



.. GENERATED FROM PYTHON SOURCE LINES 248-260

.. code-block:: Python



    def inf_strict_neg(x, y):
        f1 = (-x) >= (-y)
        f2 = (-numpy.float32(x)) >= (-numpy.float32(y))
        return f1, f2


    dfn = count_events(inf_strict_neg)
    dfn.head()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    90 5.3570584768181105e-08 : 1012 1012
    190 1.1309345673282679e-07 : 984 984
    290 1.7261632869747246e-07 : 970 970
    390 2.3213920066211813e-07 : 983 983
    490 2.916620726267638e-07 : 1010 1010
    590 3.5118494459140945e-07 : 1002 1002
    690 4.1070781655605513e-07 : 991 991
    790 4.702306885207008e-07 : 1002 1002
    890 5.297535604853465e-07 : 974 974
    990 5.892764324499922e-07 : 972 972


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>d</th>
          <th>ratio</th>
          <th>total</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>5.952287e-10</td>
          <td>1.0</td>
          <td>998</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1.190457e-09</td>
          <td>1.0</td>
          <td>994</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1.785686e-09</td>
          <td>1.0</td>
          <td>1014</td>
        </tr>
        <tr>
          <th>3</th>
          <td>2.380915e-09</td>
          <td>1.0</td>
          <td>1010</td>
        </tr>
        <tr>
          <th>4</th>
          <td>2.976144e-09</td>
          <td>1.0</td>
          <td>945</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 262-267

.. code-block:: Python


    ax = df.plot(x="d", y="ratio", logx=True, label="<")
    dfn.plot(x="d", y="ratio", logx=True, label="-1 x >=", ax=ax)





.. image-sg:: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_008.png
   :alt: plot float and double rouding
   :srcset: /auto_examples/prog/images/sphx_glr_plot_float_and_double_rouding_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: xlabel='d'>



.. GENERATED FROM PYTHON SOURCE LINES 268-280

Conclusion
==========

The result is expected. As soon as two float are rounded to the same value,
the strict inequality no longer holds. However, if you need to write a
code which has to handle double and float (in a template for example),
you should use not strict inequalities. It is easier to compare the results
but you should read some article like `Is < faster than <=?
<https://stackoverflow.com/questions/12135518/is-faster-than>`_.
According to
`Processing costs of non-strict versus strict comparison
<http://www.crcummins.com/CRCProcessing.pdf>`_, ``<`` is 5-10% faster than ``<=``.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 33.164 seconds)


.. _sphx_glr_download_auto_examples_prog_plot_float_and_double_rouding.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_float_and_double_rouding.ipynb <plot_float_and_double_rouding.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_float_and_double_rouding.py <plot_float_and_double_rouding.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_float_and_double_rouding.zip <plot_float_and_double_rouding.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
