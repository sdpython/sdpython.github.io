
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ml/plot_roc.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_ml_plot_roc.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ml_plot_roc.py:


Receiver Operating Characteristic (ROC)
=======================================

Un problème de classification binaire consiste à trouver
un moyen de séparer deux nuages de points
(voir `classification <https://sdpython.github.io/doc/mlstatpy/dev/c_ml/rn/rn_3_clas.html>`_)
et on évalue le plus souvent sa pertinence à l'aide d'une courbe
:epkg:`ROC`. Cet exemple montre différente représentation de la même
information.

Classification binaire
----------------------

On commence par générer un nuage de points artificiel.

.. GENERATED FROM PYTHON SOURCE LINES 18-40

.. code-block:: Python


    import numpy
    from sklearn.metrics import (
        f1_score,
        precision_recall_curve,
        roc_curve,
        confusion_matrix,
    )
    from sklearn.linear_model import LogisticRegression
    from sklearn.model_selection import train_test_split
    from sklearn.datasets import make_classification
    import matplotlib.pyplot as plt
    from teachpyx.ext_test_case import unit_test_going

    X, Y = make_classification(
        n_samples=10000 if unit_test_going() else 100,
        n_features=2,
        n_classes=2,
        n_repeated=0,
        n_redundant=0,
    )








.. GENERATED FROM PYTHON SOURCE LINES 41-42

On représente ces données.

.. GENERATED FROM PYTHON SOURCE LINES 42-48

.. code-block:: Python


    fig = plt.figure(figsize=(5, 5))
    ax = plt.subplot()
    ax.plot(X[Y == 0, 0], X[Y == 0, 1], ".b")
    ax.plot(X[Y == 1, 0], X[Y == 1, 1], ".r")




.. image-sg:: /auto_examples/ml/images/sphx_glr_plot_roc_001.png
   :alt: plot roc
   :srcset: /auto_examples/ml/images/sphx_glr_plot_roc_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.lines.Line2D object at 0x7fc282a263b0>]



.. GENERATED FROM PYTHON SOURCE LINES 49-50

On découpe en train / test.

.. GENERATED FROM PYTHON SOURCE LINES 50-52

.. code-block:: Python

    X_train, X_test, y_train, y_test = train_test_split(X, Y)








.. GENERATED FROM PYTHON SOURCE LINES 53-54

On apprend sur la base d'apprentissage.

.. GENERATED FROM PYTHON SOURCE LINES 54-58

.. code-block:: Python


    logreg = LogisticRegression()
    logreg.fit(X_train, y_train)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {
      /* Definition of color scheme common for light and dark mode */
      --sklearn-color-text: black;
      --sklearn-color-line: gray;
      /* Definition of color scheme for unfitted estimators */
      --sklearn-color-unfitted-level-0: #fff5e6;
      --sklearn-color-unfitted-level-1: #f6e4d2;
      --sklearn-color-unfitted-level-2: #ffe0b3;
      --sklearn-color-unfitted-level-3: chocolate;
      /* Definition of color scheme for fitted estimators */
      --sklearn-color-fitted-level-0: #f0f8ff;
      --sklearn-color-fitted-level-1: #d4ebff;
      --sklearn-color-fitted-level-2: #b3dbfd;
      --sklearn-color-fitted-level-3: cornflowerblue;

      /* Specific color for light theme */
      --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
      --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-icon: #696969;

      @media (prefers-color-scheme: dark) {
        /* Redefinition of color scheme for dark theme */
        --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
        --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-icon: #878787;
      }
    }

    #sk-container-id-1 {
      color: var(--sklearn-color-text);
    }

    #sk-container-id-1 pre {
      padding: 0;
    }

    #sk-container-id-1 input.sk-hidden--visually {
      border: 0;
      clip: rect(1px 1px 1px 1px);
      clip: rect(1px, 1px, 1px, 1px);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    #sk-container-id-1 div.sk-dashed-wrapped {
      border: 1px dashed var(--sklearn-color-line);
      margin: 0 0.4em 0.5em 0.4em;
      box-sizing: border-box;
      padding-bottom: 0.4em;
      background-color: var(--sklearn-color-background);
    }

    #sk-container-id-1 div.sk-container {
      /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
         but bootstrap.min.css set `[hidden] { display: none !important; }`
         so we also need the `!important` here to be able to override the
         default hidden behavior on the sphinx rendered scikit-learn.org.
         See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
      display: inline-block !important;
      position: relative;
    }

    #sk-container-id-1 div.sk-text-repr-fallback {
      display: none;
    }

    div.sk-parallel-item,
    div.sk-serial,
    div.sk-item {
      /* draw centered vertical line to link estimators */
      background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
      background-size: 2px 100%;
      background-repeat: no-repeat;
      background-position: center center;
    }

    /* Parallel-specific style estimator block */

    #sk-container-id-1 div.sk-parallel-item::after {
      content: "";
      width: 100%;
      border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
      flex-grow: 1;
    }

    #sk-container-id-1 div.sk-parallel {
      display: flex;
      align-items: stretch;
      justify-content: center;
      background-color: var(--sklearn-color-background);
      position: relative;
    }

    #sk-container-id-1 div.sk-parallel-item {
      display: flex;
      flex-direction: column;
    }

    #sk-container-id-1 div.sk-parallel-item:first-child::after {
      align-self: flex-end;
      width: 50%;
    }

    #sk-container-id-1 div.sk-parallel-item:last-child::after {
      align-self: flex-start;
      width: 50%;
    }

    #sk-container-id-1 div.sk-parallel-item:only-child::after {
      width: 0;
    }

    /* Serial-specific style estimator block */

    #sk-container-id-1 div.sk-serial {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--sklearn-color-background);
      padding-right: 1em;
      padding-left: 1em;
    }


    /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
    clickable and can be expanded/collapsed.
    - Pipeline and ColumnTransformer use this feature and define the default style
    - Estimators will overwrite some part of the style using the `sk-estimator` class
    */

    /* Pipeline and ColumnTransformer style (default) */

    #sk-container-id-1 div.sk-toggleable {
      /* Default theme specific background. It is overwritten whether we have a
      specific estimator or a Pipeline/ColumnTransformer */
      background-color: var(--sklearn-color-background);
    }

    /* Toggleable label */
    #sk-container-id-1 label.sk-toggleable__label {
      cursor: pointer;
      display: block;
      width: 100%;
      margin-bottom: 0;
      padding: 0.5em;
      box-sizing: border-box;
      text-align: center;
    }

    #sk-container-id-1 label.sk-toggleable__label-arrow:before {
      /* Arrow on the left of the label */
      content: "▸";
      float: left;
      margin-right: 0.25em;
      color: var(--sklearn-color-icon);
    }

    #sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {
      color: var(--sklearn-color-text);
    }

    /* Toggleable content - dropdown */

    #sk-container-id-1 div.sk-toggleable__content {
      max-height: 0;
      max-width: 0;
      overflow: hidden;
      text-align: left;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content pre {
      margin: 0.2em;
      border-radius: 0.25em;
      color: var(--sklearn-color-text);
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content.fitted pre {
      /* unfitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {
      /* Expand drop-down */
      max-height: 200px;
      max-width: 100%;
      overflow: auto;
    }

    #sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
      content: "▾";
    }

    /* Pipeline/ColumnTransformer-specific style */

    #sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator-specific style */

    /* Colorize estimator box */
    #sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    #sk-container-id-1 div.sk-label label.sk-toggleable__label,
    #sk-container-id-1 div.sk-label label {
      /* The background is the default theme color */
      color: var(--sklearn-color-text-on-default-background);
    }

    /* On hover, darken the color of the background */
    #sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    /* Label box, darken color on hover, fitted */
    #sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator label */

    #sk-container-id-1 div.sk-label label {
      font-family: monospace;
      font-weight: bold;
      display: inline-block;
      line-height: 1.2em;
    }

    #sk-container-id-1 div.sk-label-container {
      text-align: center;
    }

    /* Estimator-specific */
    #sk-container-id-1 div.sk-estimator {
      font-family: monospace;
      border: 1px dotted var(--sklearn-color-border-box);
      border-radius: 0.25em;
      box-sizing: border-box;
      margin-bottom: 0.5em;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-estimator.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    /* on hover */
    #sk-container-id-1 div.sk-estimator:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-estimator.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Specification for estimator info (e.g. "i" and "?") */

    /* Common style for "i" and "?" */

    .sk-estimator-doc-link,
    a:link.sk-estimator-doc-link,
    a:visited.sk-estimator-doc-link {
      float: right;
      font-size: smaller;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1em;
      height: 1em;
      width: 1em;
      text-decoration: none !important;
      margin-left: 1ex;
      /* unfitted */
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
      color: var(--sklearn-color-unfitted-level-1);
    }

    .sk-estimator-doc-link.fitted,
    a:link.sk-estimator-doc-link.fitted,
    a:visited.sk-estimator-doc-link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    div.sk-estimator:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover,
    div.sk-label-container:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover,
    div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    /* Span, style for the box shown on hovering the info icon */
    .sk-estimator-doc-link span {
      display: none;
      z-index: 9999;
      position: relative;
      font-weight: normal;
      right: .2ex;
      padding: .5ex;
      margin: .5ex;
      width: min-content;
      min-width: 20ex;
      max-width: 50ex;
      color: var(--sklearn-color-text);
      box-shadow: 2pt 2pt 4pt #999;
      /* unfitted */
      background: var(--sklearn-color-unfitted-level-0);
      border: .5pt solid var(--sklearn-color-unfitted-level-3);
    }

    .sk-estimator-doc-link.fitted span {
      /* fitted */
      background: var(--sklearn-color-fitted-level-0);
      border: var(--sklearn-color-fitted-level-3);
    }

    .sk-estimator-doc-link:hover span {
      display: block;
    }

    /* "?"-specific style due to the `<a>` HTML tag */

    #sk-container-id-1 a.estimator_doc_link {
      float: right;
      font-size: 1rem;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1rem;
      height: 1rem;
      width: 1rem;
      text-decoration: none;
      /* unfitted */
      color: var(--sklearn-color-unfitted-level-1);
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
    }

    #sk-container-id-1 a.estimator_doc_link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    #sk-container-id-1 a.estimator_doc_link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    #sk-container-id-1 a.estimator_doc_link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
    }
    </style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked><label for="sk-estimator-id-1" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;LogisticRegression<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/dev/modules/generated/sklearn.linear_model.LogisticRegression.html">?<span>Documentation for LogisticRegression</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>LogisticRegression()</pre></div> </div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 59-60

Et on prédit sur la base de test.

.. GENERATED FROM PYTHON SOURCE LINES 60-62

.. code-block:: Python

    y_pred = logreg.predict(X_test)








.. GENERATED FROM PYTHON SOURCE LINES 63-64

On calcule la :epkg:`matrice de confusion`.

.. GENERATED FROM PYTHON SOURCE LINES 64-68

.. code-block:: Python

    conf = confusion_matrix(y_test, y_pred)
    print(conf)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[ 9  1]
     [ 1 14]]




.. GENERATED FROM PYTHON SOURCE LINES 69-91

Trois courbes
-------------

La courbe :epkg:`ROC` s'applique toujours à un problème
de classification binaire qu'on peut scinder en trois questions :

* Le modèle a bien classé un exemple dans la classe 0.
* Le modèle a bien classé un exemple dans la classe 1.
* Le modèle a bien classé un exemple, que ce soit dans la
  classe 0 ou la classe 1.
  Ce problème suppose implicitement que le même seuil est
  utilisé sur chacun des classes.
  C'est-à-dire qu'on prédit la classe 1 si le score pour la
  classe 1 est supérieur à
  à celui obtenu pour la classe 0 mais aussi qu'on valide la réponse
  si le score de la classe 1 ou celui de la classe 0
  est supérieur au même seuil *s*,
  ce qui n'est pas nécessairement le meilleur choix.

Si les réponses sont liées, le modèle peut répondre de manière
plus ou moins efficace à ces trois questions.
On calcule les courbes :epkg:`ROC` à ces trois questions.

.. GENERATED FROM PYTHON SOURCE LINES 91-109

.. code-block:: Python



    fpr_cl = dict()
    tpr_cl = dict()

    y_pred = logreg.predict(X_test)
    y_proba = logreg.predict_proba(X_test)

    fpr_cl["classe 0"], tpr_cl["classe 0"], _ = roc_curve(
        y_test == 0, y_proba[:, 0].ravel()
    )
    fpr_cl["classe 1"], tpr_cl["classe 1"], _ = roc_curve(
        y_test, y_proba[:, 1].ravel()
    )  # y_test == 1

    prob_pred = numpy.array([y_proba[i, 1 if c else 0] for i, c in enumerate(y_pred)])
    fpr_cl["tout"], tpr_cl["tout"], _ = roc_curve((y_pred == y_test).ravel(), prob_pred)








.. GENERATED FROM PYTHON SOURCE LINES 110-111

Et on les représente.

.. GENERATED FROM PYTHON SOURCE LINES 111-124

.. code-block:: Python

    plt.figure()
    for key in fpr_cl:
        plt.plot(fpr_cl[key], tpr_cl[key], label=key)

    lw = 2
    plt.plot([0, 1], [0, 1], color="navy", lw=lw, linestyle="--")
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel("Proportion mal classée")
    plt.ylabel("Proportion bien classée")
    plt.title("ROC(s) avec predict_proba")
    plt.legend(loc="lower right")




.. image-sg:: /auto_examples/ml/images/sphx_glr_plot_roc_002.png
   :alt: ROC(s) avec predict_proba
   :srcset: /auto_examples/ml/images/sphx_glr_plot_roc_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc282af0520>



.. GENERATED FROM PYTHON SOURCE LINES 125-139

predict_proba ou decision_function
----------------------------------

Le fait que la courbe :epkg:`ROC` pour la dernière question,
les deux classes à la fois, suggère que les seuils optimaux seront
différents pour les deux premières questions.
La courbe :epkg:`ROC` ne change pas qu'on prenne la fonction
`predict_proba <https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html#
sklearn.linear_model.LogisticRegression.predict_proba>`_
ou `decision_function <https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html#
sklearn.linear_model.LogisticRegression.decision_function>`_
car ces deux scores
sont liés par une fonction monotone.
On recommence avec la seconde fonction.

.. GENERATED FROM PYTHON SOURCE LINES 139-166

.. code-block:: Python


    y_pred = logreg.predict(X_test)
    y_proba = logreg.decision_function(X_test)
    y_proba = numpy.vstack([-y_proba, y_proba]).T

    fpr_cl["classe 0"], tpr_cl["classe 0"], _ = roc_curve(
        y_test == 0, y_proba[:, 0].ravel()
    )
    fpr_cl["classe 1"], tpr_cl["classe 1"], _ = roc_curve(
        y_test, y_proba[:, 1].ravel()
    )  # y_test == 1
    prob_pred = numpy.array([y_proba[i, 1 if c else 0] for i, c in enumerate(y_pred)])
    fpr_cl["tout"], tpr_cl["tout"], _ = roc_curve((y_pred == y_test).ravel(), prob_pred)

    plt.figure()
    for key in fpr_cl:
        plt.plot(fpr_cl[key], tpr_cl[key], label=key)

    lw = 2
    plt.plot([0, 1], [0, 1], color="navy", lw=lw, linestyle="--")
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel("Proportion mal classée")
    plt.ylabel("Proportion bien classée")
    plt.title("ROC(s) avec decision_function")
    plt.legend(loc="lower right")




.. image-sg:: /auto_examples/ml/images/sphx_glr_plot_roc_003.png
   :alt: ROC(s) avec decision_function
   :srcset: /auto_examples/ml/images/sphx_glr_plot_roc_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc2829633a0>



.. GENERATED FROM PYTHON SOURCE LINES 167-179

Precision Rappel
----------------

En ce qui me concerne, je n'arrive jamais à retenir la
définition de False Positive Rate (FPR) and True Positive Rate (TPR).
Je lui préfère la précision et le rappel.
Pour un seuil donné, le rappel
est l'ensemble de ces documents dont le score est supérieur à un seuil *s*,
la précision est l'ensemble des documents bien classé parmi ceux-ci.
On utilise la fonction
`precision_recall_curve <https://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_recall_curve.html#
sklearn.metrics.precision_recall_curve>`_.

.. GENERATED FROM PYTHON SOURCE LINES 179-209

.. code-block:: Python


    y_pred = logreg.predict(X_test)
    y_proba = logreg.predict_proba(X_test)


    prec = dict()
    rapp = dict()

    prec["classe 0"], rapp["classe 0"], _ = precision_recall_curve(
        y_test == 0, y_proba[:, 0].ravel()
    )
    prec["classe 1"], rapp["classe 1"], _ = precision_recall_curve(
        y_test, y_proba[:, 1].ravel()
    )  # y_test == 1
    prob_pred = numpy.array([y_proba[i, 1 if c else 0] for i, c in enumerate(y_pred)])
    prec["tout"], rapp["tout"], _ = precision_recall_curve(
        (y_pred == y_test).ravel(), prob_pred
    )

    plt.figure()
    for key in fpr_cl:
        plt.plot(prec[key], rapp[key], label=key)

    plt.plot([0, 1], [0, 1], color="navy", lw=2, linestyle="--")
    plt.xlabel("Précision")
    plt.ylabel("Rappel")
    plt.title("Courbe Précision / Rappel")
    plt.legend(loc="lower right")





.. image-sg:: /auto_examples/ml/images/sphx_glr_plot_roc_004.png
   :alt: Courbe Précision / Rappel
   :srcset: /auto_examples/ml/images/sphx_glr_plot_roc_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc28280c550>



.. GENERATED FROM PYTHON SOURCE LINES 210-220

Métrique F1
-----------

La courbe *Précision / Rappel* ne montre pas les
scores même s'il intervient dans
chaque point de la courbe. Pour le faire apparaître, on utilise un graphe
où il est en abscisse.
La métrique `F1 <https://scikit-learn.org/stable/modules/generated/sklearn.metrics.f1_score.html>`_
propose une pondération entre les deux :
:math:`F1 = 2 \frac{precision * rappel}{precision + rappel}`.

.. GENERATED FROM PYTHON SOURCE LINES 220-249

.. code-block:: Python



    y_pred = logreg.predict(X_test)
    y_proba = logreg.predict_proba(X_test)
    prec, rapp, seuil = precision_recall_curve(y_test == 1, y_proba[:, 1].ravel())
    f1 = [
        f1_score(y_test[y_proba[:, 1] >= s].ravel(), y_pred[y_proba[:, 1] >= s])
        for s in seuil.ravel()
    ]

    y_score = logreg.decision_function(X_test)
    precd, rappd, seuild = precision_recall_curve(y_test == 1, y_score.ravel())
    f1d = [
        f1_score(y_test[y_score >= s].ravel(), y_pred[y_score >= s]) for s in seuil.ravel()
    ]

    fig, ax = plt.subplots(1, 2, figsize=(12, 4))
    ax[0].plot(seuil, prec[1:], label="Précision")
    ax[0].plot(seuil, rapp[1:], label="Rappel")
    ax[0].plot(seuil, f1, label="F1")
    ax[0].set_title("predict_proba")
    ax[0].legend()

    ax[1].plot(seuild, precd[1:], label="Précision")
    ax[1].plot(seuild, rappd[1:], label="Rappel")
    ax[1].plot(seuild, f1d, label="F1")
    ax[1].set_title("decision_function")
    ax[1].legend()




.. image-sg:: /auto_examples/ml/images/sphx_glr_plot_roc_005.png
   :alt: predict_proba, decision_function
   :srcset: /auto_examples/ml/images/sphx_glr_plot_roc_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc2828ce740>



.. GENERATED FROM PYTHON SOURCE LINES 250-265

Pourquoi ROC alors ?
--------------------

On peut se demander pourquoi on utilise la courbe :epkg:`ROC`
si d'autres graphiques sont plus compréhensibles.
C'est parce que l'aire sous la courbe
(`AUC <https://en.wikipedia.org/wiki/
Receiver_operating_characteristic#Area_under_the_curve>`_)
est relié à un résultat important :
:math:`\mathbb{P}(S_F < S_T)` où
:math:`S_F` représente la variable aléatoire
*score pour une observation mal classée*
et :math:`S_T` la variable aléatoire
*score pour une observation bien classée*
(voir `ROC <https://sdpython.github.io/doc/mlstatpy/dev/c_metric/roc.html>`_).

.. GENERATED FROM PYTHON SOURCE LINES 265-283

.. code-block:: Python


    y_pred = logreg.predict(X_test)
    y_proba = logreg.predict_proba(X_test)
    y_score = logreg.decision_function(X_test)


    fix, ax = plt.subplots(1, 2, figsize=(12, 4))
    ax[0].hist(y_proba[y_test == 0, 1], color="r", label="proba -", alpha=0.5, bins=20)
    ax[0].hist(y_proba[y_test == 1, 1], color="b", label="proba +", alpha=0.5, bins=20)
    ax[0].set_title("predict_proba")
    ax[0].plot([0.8, 0.8], [0, 600], "--")
    ax[0].legend()
    ax[1].hist(y_score[y_test == 0], color="r", label="score -", alpha=0.5, bins=20)
    ax[1].hist(y_score[y_test == 1], color="b", label="score +", alpha=0.5, bins=20)
    ax[1].set_title("decision_function")
    ax[1].plot([1, 1], [0, 250], "--")
    ax[1].legend()




.. image-sg:: /auto_examples/ml/images/sphx_glr_plot_roc_006.png
   :alt: predict_proba, decision_function
   :srcset: /auto_examples/ml/images/sphx_glr_plot_roc_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fc28266d8d0>



.. GENERATED FROM PYTHON SOURCE LINES 284-295

La ligne en pointillés délimité la zone à partir de laquelle le modèle
est sûr de sa décision. Elle est ajusté en fonction des besoins
selon qu'on a besoin de plus de rappel (seuil bas) ou plus
de précision (seuil haut).
Le modèle est performant si les deux histogrammes sont bien séparés.
Si on note *T(s)* l'aire bleue après la ligne en pointillé et
*E(s)* l'aire rouge toujours après la ligne en pointillé.
Ces deux quantités sont reliées à la distribution du score
pour les bonnes et mauvaises prédictions.
La courbe :epkg:`ROC` est constituée des point :math:`(1-T(s), 1-E(s))`
lorsque le seuil *s* varie.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.923 seconds)


.. _sphx_glr_download_auto_examples_ml_plot_roc.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_roc.ipynb <plot_roc.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_roc.py <plot_roc.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
