
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_gemm_f8.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_bench_gemm_f8.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_gemm_f8.py:


.. _l-example-gemm-f8:

Measuring Gemm performance with different input and output tests
================================================================

This benchmark looks into various combinations allowed by functions
:epkg:`cublasLtMatmul`. The tested configurations are available at
:epkg:`cuda_gemm.cu`.

.. GENERATED FROM PYTHON SOURCE LINES 11-67

.. code-block:: default

    import pprint
    import warnings
    from itertools import product
    from tqdm import tqdm
    import matplotlib.pyplot as plt
    from pandas import DataFrame
    from onnx_extended.ext_test_case import unit_test_going, get_parsed_args

    try:
        from onnx_extended.validation.cuda.cuda_example_py import (
            gemm_benchmark_test,
            get_device_prop,
        )

        has_cuda = True
    except ImportError:
        # CUDA not available.
        has_cuda = False
        gemm_benchmark_test = None

    if has_cuda:
        prop = get_device_prop()
        if prop["major"] <= 0:
            # No CUDA.
            dtests, ddims = "", ""
        elif prop["major"] < 7:
            # No float 8.
            dtests, ddims = "0,1,2,3,4", "16,32,64"
        elif prop["major"] < 9:  # T100, A100
            # No float 8.
            dtests, ddims = "0,1,2,3,4", "16,32,64,128,256,512,1024,2048,4096,8192"
        else:
            dtests, ddims = (
                "0,1,2,3,4,5,6,7,11,14",
                "16,32,64,128,256,512,1024,2048,4096,8192,16384",
            )
    else:
        dtests, ddims = "", ""


    script_args = get_parsed_args(
        "plot_bench_gemm_f8",
        description=__doc__,
        dims=(
            "16,32" if unit_test_going() else ddims,
            "square matrix dimensions to try, comma separated values",
        ),
        tests=(
            "0,1,2" if unit_test_going() else dtests,
            "configuration to check, see cuda_gemm.cu",
        ),
        warmup=2 if unit_test_going() else 5,
        repeat=2 if unit_test_going() else 10,
        expose="repeat,warmup",
    )








.. GENERATED FROM PYTHON SOURCE LINES 68-70

Device
++++++

.. GENERATED FROM PYTHON SOURCE LINES 70-79

.. code-block:: default


    if has_cuda:
        prop = get_device_prop()
        pprint.pprint(prop)
    else:
        print("CUDA is not available")
        prop = dict(major=0)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'clockRate': 1569000,
     'computeMode': 0,
     'concurrentKernels': 1,
     'isMultiGpuBoard': 0,
     'major': 6,
     'maxThreadsPerBlock': 1024,
     'minor': 1,
     'multiProcessorCount': 10,
     'name': 'NVIDIA GeForce GTX 1060',
     'sharedMemPerBlock': 49152,
     'totalConstMem': 65536,
     'totalGlobalMem': 6442319872}




.. GENERATED FROM PYTHON SOURCE LINES 80-82

Benchmark
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 82-146

.. code-block:: default



    def type2string(dt):
        dtests = {0: "F32", 2: "F16", 14: "BF16", 28: "E4M3", 29: "E5M2"}
        return dtests[int(dt)]


    if gemm_benchmark_test is None:
        # No CUDA.
        dims = []
        tests = []
    else:
        dims = list(int(i) for i in script_args.dims.split(","))
        tests = list(int(i) for i in script_args.tests.split(","))

    pbar = tqdm(list(product(tests, dims)))
    obs = []
    for test, dim in pbar:
        pbar.set_description(f"type={test} dim={dim}")
        if test in {8, 9, 10, 12, 13}:
            warnings.warn(f"unsupported configuration {test}.")
            continue
        if dim < 128:
            n, N = script_args.warmup * 8, script_args.repeat * 8
        elif dim < 512:
            n, N = script_args.warmup * 4, script_args.repeat * 4
        elif dim < 8192:
            n, N = script_args.warmup * 2, script_args.repeat * 2
        else:
            n, N = script_args.warmup, script_args.repeat

        # warmup
        gemm_benchmark_test(test, n, dim)

        # benchmark
        res = gemm_benchmark_test(test, N, dim)

        # better rendering
        res["test"] = test
        update = {}
        for k, v in res.items():
            if "type_" in k:
                update[k] = type2string(v)
            if k.startswith("t-"):
                update[k] = res[k] / res["N"]
        update["compute_type"] = f"C{int(res['compute_type'])}"
        update["N"] = int(res["N"])
        update["dim"] = int(res["dim"])
        update["name"] = (
            f"{update['type_a']}x{update['type_b']}->"
            f"{update['type_d']}{update['compute_type']}"
        )
        res.update(update)
        obs.append(res)
        if unit_test_going() and len(obs) > 2:
            break

    df = DataFrame(obs)
    df.to_csv("plot_bench_gemm_f8.csv", index=False)
    df.to_excel("plot_bench_gemm_f8.xlsx", index=False)
    print(df.head().T)

    df.head().T





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/15 [00:00<?, ?it/s]    type=0 dim=16:   0%|          | 0/15 [00:00<?, ?it/s]    type=0 dim=16:   7%|6         | 1/15 [00:12<02:58, 12.78s/it]    type=0 dim=32:   7%|6         | 1/15 [00:12<02:58, 12.78s/it]    type=0 dim=64:   7%|6         | 1/15 [00:12<02:58, 12.78s/it]    type=0 dim=64:  20%|##        | 3/15 [00:12<00:40,  3.36s/it]    type=1 dim=16:  20%|##        | 3/15 [00:12<00:40,  3.36s/it]    type=1 dim=32:  20%|##        | 3/15 [00:12<00:40,  3.36s/it]    type=1 dim=32:  33%|###3      | 5/15 [00:13<00:16,  1.67s/it]    type=1 dim=64:  33%|###3      | 5/15 [00:13<00:16,  1.67s/it]    type=2 dim=16:  33%|###3      | 5/15 [00:13<00:16,  1.67s/it]    type=2 dim=16:  47%|####6     | 7/15 [00:13<00:08,  1.01s/it]    type=2 dim=32:  47%|####6     | 7/15 [00:13<00:08,  1.01s/it]    type=2 dim=64:  47%|####6     | 7/15 [00:13<00:08,  1.01s/it]    type=2 dim=64:  60%|######    | 9/15 [00:13<00:04,  1.50it/s]    type=3 dim=16:  60%|######    | 9/15 [00:13<00:04,  1.50it/s]    type=3 dim=32:  60%|######    | 9/15 [00:13<00:04,  1.50it/s]    type=3 dim=32:  73%|#######3  | 11/15 [00:14<00:02,  1.82it/s]    type=3 dim=64:  73%|#######3  | 11/15 [00:14<00:02,  1.82it/s]    type=3 dim=64:  80%|########  | 12/15 [00:14<00:01,  1.68it/s]    type=4 dim=16:  80%|########  | 12/15 [00:14<00:01,  1.68it/s]    type=4 dim=32:  80%|########  | 12/15 [00:14<00:01,  1.68it/s]    type=4 dim=32:  93%|#########3| 14/15 [00:15<00:00,  2.49it/s]    type=4 dim=64:  93%|#########3| 14/15 [00:15<00:00,  2.49it/s]    type=4 dim=64: 100%|##########| 15/15 [00:15<00:00,  1.01s/it]
                                    0  ...                4
    t-total                  0.000218  ...         0.000503
    t-clean                  0.000002  ...         0.000004
    t-gemm_in                0.000026  ...         0.000067
    t-setup                  0.000015  ...         0.000064
    epiloque                      1.0  ...              1.0
    compute_type                  C68  ...              C77
    dim                            16  ...               32
    type_a                        F32  ...              F32
    t-gemm                   0.000044  ...          0.00014
    type_b                        F32  ...              F32
    t-workspace_new          0.000007  ...         0.000018
    type_d                        F32  ...              F32
    N                              80  ...               80
    algo                         11.0  ...              0.0
    t-workspace_free         0.000009  ...         0.000023
    t-stream_create               0.0  ...              0.0
    t-gemm_sync              0.000191  ...         0.000438
    workspace_size          1048576.0  ...        1048576.0
    t-stream_destroy         0.000004  ...          0.00001
    test                            0  ...                1
    name              F32xF32->F32C68  ...  F32xF32->F32C77

    [21 rows x 5 columns]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>0</th>
          <th>1</th>
          <th>2</th>
          <th>3</th>
          <th>4</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>t-total</th>
          <td>0.000218</td>
          <td>0.00026</td>
          <td>0.000233</td>
          <td>0.000152</td>
          <td>0.000503</td>
        </tr>
        <tr>
          <th>t-clean</th>
          <td>0.000002</td>
          <td>0.000002</td>
          <td>0.000001</td>
          <td>0.000001</td>
          <td>0.000004</td>
        </tr>
        <tr>
          <th>t-gemm_in</th>
          <td>0.000026</td>
          <td>0.000029</td>
          <td>0.000017</td>
          <td>0.000015</td>
          <td>0.000067</td>
        </tr>
        <tr>
          <th>t-setup</th>
          <td>0.000015</td>
          <td>0.000023</td>
          <td>0.000015</td>
          <td>0.000008</td>
          <td>0.000064</td>
        </tr>
        <tr>
          <th>epiloque</th>
          <td>1.0</td>
          <td>1.0</td>
          <td>1.0</td>
          <td>1.0</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>compute_type</th>
          <td>C68</td>
          <td>C68</td>
          <td>C68</td>
          <td>C77</td>
          <td>C77</td>
        </tr>
        <tr>
          <th>dim</th>
          <td>16</td>
          <td>32</td>
          <td>64</td>
          <td>16</td>
          <td>32</td>
        </tr>
        <tr>
          <th>type_a</th>
          <td>F32</td>
          <td>F32</td>
          <td>F32</td>
          <td>F32</td>
          <td>F32</td>
        </tr>
        <tr>
          <th>t-gemm</th>
          <td>0.000044</td>
          <td>0.000056</td>
          <td>0.000035</td>
          <td>0.000026</td>
          <td>0.00014</td>
        </tr>
        <tr>
          <th>type_b</th>
          <td>F32</td>
          <td>F32</td>
          <td>F32</td>
          <td>F32</td>
          <td>F32</td>
        </tr>
        <tr>
          <th>t-workspace_new</th>
          <td>0.000007</td>
          <td>0.000008</td>
          <td>0.000005</td>
          <td>0.000004</td>
          <td>0.000018</td>
        </tr>
        <tr>
          <th>type_d</th>
          <td>F32</td>
          <td>F32</td>
          <td>F32</td>
          <td>F32</td>
          <td>F32</td>
        </tr>
        <tr>
          <th>N</th>
          <td>80</td>
          <td>80</td>
          <td>80</td>
          <td>80</td>
          <td>80</td>
        </tr>
        <tr>
          <th>algo</th>
          <td>11.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>11.0</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>t-workspace_free</th>
          <td>0.000009</td>
          <td>0.000009</td>
          <td>0.000005</td>
          <td>0.000005</td>
          <td>0.000023</td>
        </tr>
        <tr>
          <th>t-stream_create</th>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>t-gemm_sync</th>
          <td>0.000191</td>
          <td>0.000229</td>
          <td>0.000216</td>
          <td>0.000137</td>
          <td>0.000438</td>
        </tr>
        <tr>
          <th>workspace_size</th>
          <td>1048576.0</td>
          <td>1048576.0</td>
          <td>1048576.0</td>
          <td>1048576.0</td>
          <td>1048576.0</td>
        </tr>
        <tr>
          <th>t-stream_destroy</th>
          <td>0.000004</td>
          <td>0.000006</td>
          <td>0.000003</td>
          <td>0.000002</td>
          <td>0.00001</td>
        </tr>
        <tr>
          <th>test</th>
          <td>0</td>
          <td>0</td>
          <td>0</td>
          <td>1</td>
          <td>1</td>
        </tr>
        <tr>
          <th>name</th>
          <td>F32xF32-&gt;F32C68</td>
          <td>F32xF32-&gt;F32C68</td>
          <td>F32xF32-&gt;F32C68</td>
          <td>F32xF32-&gt;F32C77</td>
          <td>F32xF32-&gt;F32C77</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 147-149

Test definition
+++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 149-156

.. code-block:: default


    col_def = ["name", "test", "type_a", "type_b", "type_d", "compute_type"]
    if df.shape[0] > 0:
        deft = df.copy()
        gr = deft[col_def].groupby(col_def, as_index=False).count()
        print(gr)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                     name  test type_a type_b type_d compute_type
    0  BF16xBF16->BF16C68     4   BF16   BF16   BF16          C68
    1     F16xF16->F16C64     3    F16    F16    F16          C64
    2     F32xF32->F32C68     0    F32    F32    F32          C68
    3     F32xF32->F32C75     2    F32    F32    F32          C75
    4     F32xF32->F32C77     1    F32    F32    F32          C77




.. GENERATED FROM PYTHON SOURCE LINES 157-159

Total time and only gemm
++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 159-164

.. code-block:: default


    if df.shape[0] > 0:
        dfi = df[col_def + ["dim", "t-total", "t-gemm_sync"]]
        print(dfi)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                      name  test type_a  ... dim   t-total t-gemm_sync
    0      F32xF32->F32C68     0    F32  ...  16  0.000218    0.000191
    1      F32xF32->F32C68     0    F32  ...  32  0.000260    0.000229
    2      F32xF32->F32C68     0    F32  ...  64  0.000233    0.000216
    3      F32xF32->F32C77     1    F32  ...  16  0.000152    0.000137
    4      F32xF32->F32C77     1    F32  ...  32  0.000503    0.000438
    5      F32xF32->F32C77     1    F32  ...  64  0.000501    0.000456
    6      F32xF32->F32C75     2    F32  ...  16  0.000354    0.000310
    7      F32xF32->F32C75     2    F32  ...  32  0.000458    0.000413
    8      F32xF32->F32C75     2    F32  ...  64  0.000493    0.000441
    9      F16xF16->F16C64     3    F16  ...  16  0.001433    0.001333
    10     F16xF16->F16C64     3    F16  ...  32  0.003370    0.003329
    11     F16xF16->F16C64     3    F16  ...  64  0.006252    0.006214
    12  BF16xBF16->BF16C68     4   BF16  ...  16  0.000249    0.000211
    13  BF16xBF16->BF16C68     4   BF16  ...  32  0.000385    0.000360
    14  BF16xBF16->BF16C68     4   BF16  ...  64  0.000434    0.000412

    [15 rows x 9 columns]




.. GENERATED FROM PYTHON SOURCE LINES 165-167

Smaller sets
++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 167-181

.. code-block:: default


    if df.shape[0] > 0:
        subset = {1, 3, 4, 5, 7}
        dfis = dfi[dfi.test.isin(subset)]
        print()
        print("t-gemm_sync")
        pivi = dfis.pivot_table(index="dim", columns="name", values="t-gemm_sync")
        print(pivi)
        print()
        print("t-total")
        pivi = dfis.pivot_table(index="dim", columns="name", values="t-total")
        print(pivi)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    t-gemm_sync
    name  BF16xBF16->BF16C68  F16xF16->F16C64  F32xF32->F32C77
    dim                                                       
    16              0.000211         0.001333         0.000137
    32              0.000360         0.003329         0.000438
    64              0.000412         0.006214         0.000456

    t-total
    name  BF16xBF16->BF16C68  F16xF16->F16C64  F32xF32->F32C77
    dim                                                       
    16              0.000249         0.001433         0.000152
    32              0.000385         0.003370         0.000503
    64              0.000434         0.006252         0.000501




.. GENERATED FROM PYTHON SOURCE LINES 182-184

Plots
+++++

.. GENERATED FROM PYTHON SOURCE LINES 184-202

.. code-block:: default


    if df.shape[0] > 0:
        piv = df.pivot_table(index="dim", columns="name", values="t-gemm_sync")
        piv.plot(title="MatMul performances")

        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        piv.plot(ax=ax[0], title="Gemm performance\nlower is better", logx=True, logy=True)

        piv = df[df.test.isin(subset)].pivot_table(
            index="dim", columns="name", values="t-gemm_sync"
        )
        if piv.shape[0] > 0:
            piv.plot(
                ax=ax[1], title="Gemm performance\nlower is better", logx=True, logy=True
            )

        fig.tight_layout()
        fig.savefig("plot_bench_gemm_f8.png")



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_bench_gemm_f8_001.png
         :alt: MatMul performances
         :srcset: /auto_examples/images/sphx_glr_plot_bench_gemm_f8_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_bench_gemm_f8_002.png
         :alt: Gemm performance lower is better, Gemm performance lower is better
         :srcset: /auto_examples/images/sphx_glr_plot_bench_gemm_f8_002.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  19.661 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_gemm_f8.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_gemm_f8.py <plot_bench_gemm_f8.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_gemm_f8.ipynb <plot_bench_gemm_f8.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
