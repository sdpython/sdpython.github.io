
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_gemm_ort.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_bench_gemm_ort.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_gemm_ort.py:


.. _l-example-gemm-ort-f8:


Measuring performance about Gemm with onnxruntime
=================================================

The benchmark measures the performance of Gemm for different
types and configuration. That includes a custom operator
only available on CUDA calling function :epkg:`cublasLtMatmul`.
This function offers many options.

.. GENERATED FROM PYTHON SOURCE LINES 13-97

.. code-block:: default

    import pprint
    import platform
    from itertools import product
    import numpy
    from tqdm import tqdm
    import matplotlib.pyplot as plt
    from pandas import DataFrame, pivot_table
    from onnx import TensorProto
    from onnx.helper import (
        make_model,
        make_node,
        make_graph,
        make_tensor_value_info,
        make_opsetid,
    )
    from onnx.checker import check_model
    from onnx.numpy_helper import from_array
    from onnx.reference import ReferenceEvaluator
    from onnxruntime import InferenceSession, SessionOptions, get_available_providers
    from onnxruntime.capi._pybind_state import (
        OrtValue as C_OrtValue,
        OrtDevice as C_OrtDevice,
    )
    from onnxruntime.capi.onnxruntime_pybind11_state import (
        Fail,
        NotImplemented,
        InvalidGraph,
        InvalidArgument,
    )

    try:
        from onnx_array_api.plotting.text_plot import onnx_simple_text_plot
    except ImportError:
        onnx_simple_text_plot = str
    try:
        from onnx_extended.reference import CReferenceEvaluator
    except ImportError:
        CReferenceEvaluator = ReferenceEvaluator
    from onnx_extended.ext_test_case import unit_test_going, measure_time, get_parsed_args

    try:
        from onnx_extended.validation.cuda.cuda_example_py import get_device_prop
        from onnx_extended.ortops.tutorial.cuda import get_ort_ext_libs

        has_cuda = True
    except ImportError:

        def get_device_prop():
            return {"name": "CPU"}

        def get_ort_ext_libs():
            return None

        has_cuda = False

    default_dims = (
        "32,32,32;64,64,64;128,128,128;256,256,256;"
        "400,400,400;512,512,512;1024,1024,1024"
    )
    if has_cuda:
        prop = get_device_prop()
        if prop.get("major", 0) >= 7:
            default_dims += ";2048,2048,2048;4096,4096,4096"
        if prop.get("major", 0) >= 9:
            default_dims += ";16384,16384,16384"


    script_args = get_parsed_args(
        "plot_bench_gemm_ort",
        description=__doc__,
        dims=(
            "32,32,32;64,64,64" if unit_test_going() else default_dims,
            "square matrix dimensions to try, comma separated values",
        ),
        types=(
            "FLOAT" if unit_test_going() else "FLOAT8E4M3FN,FLOAT,FLOAT16,BFLOAT16",
            "element type to teest",
        ),
        number=2 if unit_test_going() else 4,
        repeat=2 if unit_test_going() else 10,
        warmup=2 if unit_test_going() else 5,
        expose="repeat,number,warmup",
    )








.. GENERATED FROM PYTHON SOURCE LINES 98-100

Device properties
+++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 100-109

.. code-block:: default



    if has_cuda:
        properties = get_device_prop()
        pprint.pprint(properties)
    else:
        properties = {"major": 0}






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'clockRate': 1569000,
     'computeMode': 0,
     'concurrentKernels': 1,
     'isMultiGpuBoard': 0,
     'major': 6,
     'maxThreadsPerBlock': 1024,
     'minor': 1,
     'multiProcessorCount': 10,
     'name': 'NVIDIA GeForce GTX 1060',
     'sharedMemPerBlock': 49152,
     'totalConstMem': 65536,
     'totalGlobalMem': 6442319872}




.. GENERATED FROM PYTHON SOURCE LINES 110-117

Model to benchmark
++++++++++++++++++

It includes one Gemm. The operator changes.
It can the regular Gemm, a custom Gemm from domain `com.microsoft`
or a custom implementation from domain
`onnx_extented.ortops.tutorial.cuda`.

.. GENERATED FROM PYTHON SOURCE LINES 117-200

.. code-block:: default



    def create_model(
        mat_type=TensorProto.FLOAT, provider="CUDAExecutionProvider", domain="com.microsoft"
    ):
        A = make_tensor_value_info("A", mat_type, [None, None])
        B = make_tensor_value_info("B", mat_type, [None, None])
        outputs = [make_tensor_value_info("C", mat_type, [None, None])]
        inits = []
        if domain != "":
            if provider != "CUDAExecutionProvider":
                return None
            f8 = False
            if domain == "com.microsoft":
                op_name = "GemmFloat8"
                computeType = "CUBLAS_COMPUTE_32F"
                node_output = ["C"]
            elif mat_type == TensorProto.FLOAT:
                op_name = "CustomGemmFloat"
                computeType = "CUBLAS_COMPUTE_32F_FAST_TF32"
                node_output = ["C", "time"]
                outputs.append(make_tensor_value_info("time", TensorProto.DOUBLE, [None]))
            elif mat_type == TensorProto.FLOAT16:
                op_name = "CustomGemmFloat16"
                computeType = "CUBLAS_COMPUTE_16F"
                node_output = ["C", "time"]
                outputs.append(make_tensor_value_info("time", TensorProto.DOUBLE, [None]))
            elif mat_type in (TensorProto.FLOAT8E4M3FN, TensorProto.FLOAT8E5M2):
                f8 = True
                op_name = "CustomGemmFloat8E4M3FN"
                computeType = "CUBLAS_COMPUTE_32F"
                node_output = ["C", "time"]
                outputs = [
                    make_tensor_value_info("C", TensorProto.FLOAT16, [None, None]),
                    make_tensor_value_info("time", TensorProto.DOUBLE, [None]),
                ]
                inits.append(from_array(numpy.array([1], dtype=numpy.float32), name="I"))
            else:
                return None
            node_kw = dict(
                alpha=1.0,
                transB=1,
                domain=domain,
                computeType=computeType,
                fastAccumulationMode=1,
                rowMajor=0 if op_name.startswith("CustomGemmFloat") else 1,
            )
            node_kw["name"] = (
                f"{mat_type}.{len(node_output)}.{len(outputs)}."
                f"{domain}..{node_kw['rowMajor']}.."
                f"{node_kw['fastAccumulationMode']}..{node_kw['computeType']}.."
                f"{f8}"
            )
            node_inputs = ["A", "B"]
            if f8:
                node_inputs.append("")
                node_inputs.extend(["I"] * 3)
            nodes = [make_node(op_name, node_inputs, node_output, **node_kw)]
        else:
            nodes = [
                make_node("Gemm", ["A", "B"], ["C"], transA=1, beta=0.0),
            ]
        graph = make_graph(nodes, "a", [A, B], outputs, inits)
        if mat_type < 16:
            # regular type
            opset, ir = 18, 8
        else:
            opset, ir = 19, 9
        onnx_model = make_model(
            graph,
            opset_imports=[
                make_opsetid("", opset),
                make_opsetid("com.microsoft", 1),
                make_opsetid("onnx_extented.ortops.tutorial.cuda", 1),
            ],
            ir_version=ir,
        )
        check_model(onnx_model)
        return onnx_model


    print(onnx_simple_text_plot(create_model()))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    opset: domain='' version=18
    opset: domain='com.microsoft' version=1
    opset: domain='onnx_extented.ortops.tutorial.cuda' version=1
    input: name='A' type=dtype('float32') shape=['', '']
    input: name='B' type=dtype('float32') shape=['', '']
    GemmFloat8[com.microsoft](A, B, alpha=1.00, computeType=b'CUBLAS_COMPUTE_32F', fastAccumulationMode=1, rowMajor=1, transB=1) -> C
    output: name='C' type=dtype('float32') shape=['', '']




.. GENERATED FROM PYTHON SOURCE LINES 201-205

A model to cast into anytype.
numpy does not support float 8. onnxruntime is used
to cast a float array into any type.
It must be called with tensor of type `OrtValue`.

.. GENERATED FROM PYTHON SOURCE LINES 205-235

.. code-block:: default



    def create_cast(to, cuda=False):
        A = make_tensor_value_info("A", TensorProto.FLOAT, [None, None])
        C = make_tensor_value_info("C", to, [None, None])
        if cuda:
            nodes = [
                make_node("Cast", ["A"], ["Cc"], to=to),
                make_node("MemcpyFromHost", ["Cc"], ["C"]),
            ]
        else:
            nodes = [make_node("Cast", ["A"], ["C"], to=to)]
        graph = make_graph(nodes, "a", [A], [C])
        if to < 16:
            # regular type
            opset, ir = 18, 8
        else:
            opset, ir = 19, 9
        onnx_model = make_model(
            graph, opset_imports=[make_opsetid("", opset)], ir_version=ir
        )
        if not cuda:
            # OpType: MemcpyFromHost
            check_model(onnx_model)
        return onnx_model


    print(onnx_simple_text_plot(create_cast(TensorProto.FLOAT16)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    opset: domain='' version=18
    input: name='A' type=dtype('float32') shape=['', '']
    Cast(A, to=10) -> C
    output: name='C' type=dtype('float16') shape=['', '']




.. GENERATED FROM PYTHON SOURCE LINES 236-240

Performance
+++++++++++

The benchmark will run the following configurations.

.. GENERATED FROM PYTHON SOURCE LINES 240-253

.. code-block:: default


    types = list(getattr(TensorProto, a) for a in script_args.types.split(","))
    engine = [InferenceSession, CReferenceEvaluator]
    providers = [
        ["CUDAExecutionProvider", "CPUExecutionProvider"],
        ["CPUExecutionProvider"],
    ]
    # M, N, K
    # we use multiple of 8, otherwise, float8 does not work.
    dims = [list(int(i) for i in line.split(",")) for line in script_args.dims.split(";")]
    domains = ["onnx_extented.ortops.tutorial.cuda", "", "com.microsoft"]









.. GENERATED FROM PYTHON SOURCE LINES 254-255

Let's cache the matrices involved.

.. GENERATED FROM PYTHON SOURCE LINES 255-310

.. code-block:: default



    def to_ort_value(m):
        device = C_OrtDevice(C_OrtDevice.cpu(), C_OrtDevice.default_memory(), 0)
        ort_value = C_OrtValue.ortvalue_from_numpy(m, device)
        return ort_value


    def cached_inputs(dims, types):
        matrices = {}
        matrices_cuda = {}
        pbar = tqdm(list(product(dims, types)))
        for dim, tt in pbar:
            m, n, k = dim
            pbar.set_description(f"t={tt} dim={dim}")
            for i, j in [(m, k), (k, n), (k, m)]:
                if (tt, i, j) in matrices:
                    continue
                # CPU
                try:
                    sess = InferenceSession(
                        create_cast(tt).SerializeToString(),
                        providers=["CPUExecutionProvider"],
                    )
                    cpu = True
                except (InvalidGraph, InvalidArgument, NotImplemented):
                    # not support by this version of onnxruntime
                    cpu = False

                if cpu:
                    vect = (numpy.random.randn(i, j) * 10).astype(numpy.float32)
                    ov = to_ort_value(vect)
                    ovtt = sess._sess.run_with_ort_values({"A": ov}, ["C"], None)[0]
                    matrices[tt, i, j] = ovtt
                else:
                    continue

                # CUDA
                if "CUDAExecutionProvider" not in get_available_providers():
                    # No CUDA
                    continue
                sess = InferenceSession(
                    create_cast(tt, cuda=True).SerializeToString(),
                    providers=["CUDAExecutionProvider", "CPUExecutionProvider"],
                )
                vect = (numpy.random.randn(i, j) * 10).astype(numpy.float32)
                ov = to_ort_value(vect)
                ovtt = sess._sess.run_with_ort_values({"A": ov}, ["C"], None)[0]
                matrices_cuda[tt, i, j] = ovtt
        return matrices, matrices_cuda


    matrices, matrices_cuda = cached_inputs(dims, types)
    print(f"{len(matrices)} matrices were created.")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/28 [00:00<?, ?it/s]    t=17 dim=[32, 32, 32]:   0%|          | 0/28 [00:00<?, ?it/s]    t=1 dim=[32, 32, 32]:   0%|          | 0/28 [00:00<?, ?it/s]     t=10 dim=[32, 32, 32]:   0%|          | 0/28 [00:00<?, ?it/s]    t=16 dim=[32, 32, 32]:   0%|          | 0/28 [00:00<?, ?it/s]    t=17 dim=[64, 64, 64]:   0%|          | 0/28 [00:00<?, ?it/s]    t=1 dim=[64, 64, 64]:   0%|          | 0/28 [00:00<?, ?it/s]     t=10 dim=[64, 64, 64]:   0%|          | 0/28 [00:00<?, ?it/s]    t=16 dim=[64, 64, 64]:   0%|          | 0/28 [00:00<?, ?it/s]    t=17 dim=[128, 128, 128]:   0%|          | 0/28 [00:00<?, ?it/s]    t=17 dim=[128, 128, 128]:  32%|###2      | 9/28 [00:00<00:00, 89.22it/s]    t=1 dim=[128, 128, 128]:  32%|###2      | 9/28 [00:00<00:00, 89.22it/s]     t=10 dim=[128, 128, 128]:  32%|###2      | 9/28 [00:00<00:00, 89.22it/s]    t=16 dim=[128, 128, 128]:  32%|###2      | 9/28 [00:00<00:00, 89.22it/s]    t=17 dim=[256, 256, 256]:  32%|###2      | 9/28 [00:00<00:00, 89.22it/s]    t=1 dim=[256, 256, 256]:  32%|###2      | 9/28 [00:00<00:00, 89.22it/s]     t=10 dim=[256, 256, 256]:  32%|###2      | 9/28 [00:00<00:00, 89.22it/s]    t=16 dim=[256, 256, 256]:  32%|###2      | 9/28 [00:00<00:00, 89.22it/s]    t=17 dim=[400, 400, 400]:  32%|###2      | 9/28 [00:00<00:00, 89.22it/s]    t=1 dim=[400, 400, 400]:  32%|###2      | 9/28 [00:00<00:00, 89.22it/s]     t=1 dim=[400, 400, 400]:  64%|######4   | 18/28 [00:00<00:00, 70.93it/s]    t=10 dim=[400, 400, 400]:  64%|######4   | 18/28 [00:00<00:00, 70.93it/s]    t=16 dim=[400, 400, 400]:  64%|######4   | 18/28 [00:00<00:00, 70.93it/s]    t=17 dim=[512, 512, 512]:  64%|######4   | 18/28 [00:00<00:00, 70.93it/s]    t=1 dim=[512, 512, 512]:  64%|######4   | 18/28 [00:00<00:00, 70.93it/s]     t=10 dim=[512, 512, 512]:  64%|######4   | 18/28 [00:00<00:00, 70.93it/s]    t=16 dim=[512, 512, 512]:  64%|######4   | 18/28 [00:00<00:00, 70.93it/s]    t=17 dim=[1024, 1024, 1024]:  64%|######4   | 18/28 [00:00<00:00, 70.93it/s]    t=1 dim=[1024, 1024, 1024]:  64%|######4   | 18/28 [00:00<00:00, 70.93it/s]     t=1 dim=[1024, 1024, 1024]:  93%|#########2| 26/28 [00:00<00:00, 28.42it/s]    t=10 dim=[1024, 1024, 1024]:  93%|#########2| 26/28 [00:00<00:00, 28.42it/s]    t=16 dim=[1024, 1024, 1024]:  93%|#########2| 26/28 [00:00<00:00, 28.42it/s]    t=16 dim=[1024, 1024, 1024]: 100%|##########| 28/28 [00:00<00:00, 29.42it/s]
    28 matrices were created.




.. GENERATED FROM PYTHON SOURCE LINES 311-312

Let's run the benchmark

.. GENERATED FROM PYTHON SOURCE LINES 312-474

.. code-block:: default



    def rendering_obs(obs, dim, number, repeat, domain, provider, internal_time):
        stype = {
            TensorProto.FLOAT: "f32",
            TensorProto.FLOAT16: "f16",
            TensorProto.BFLOAT16: "bf16",
            TensorProto.INT8: "i8",
            TensorProto.INT16: "i16",
            TensorProto.INT32: "i32",
            TensorProto.UINT32: "u32",
            TensorProto.FLOAT8E4M3FN: "e4m3fn",
            TensorProto.FLOAT8E5M2: "e5m2",
        }[tt]
        obs.update(
            dict(
                engine={"InferenceSession": "ort", "CReferenceEvaluator": "np"}[
                    engine.__name__
                ],
                stype=stype,
                type=f"{stype}",
                M=dim[0],
                N=dim[1],
                K=dim[2],
                cost=numpy.prod(dim) * 4,
                cost_s=f"{numpy.prod(dim) * 4}-{dim[0]}x{dim[1]}x{dim[2]}",
                repeat=repeat,
                number=number,
                domain={
                    "": "ORT",
                    "com.microsoft": "COM",
                    "onnx_extented.ortops.tutorial.cuda": "EXT",
                }[domain],
                provider={
                    "CPUExecutionProvider": "cpu",
                    "CUDAExecutionProvider": "cuda",
                }[provider[0]],
                platform=platform.processor(),
                intime=internal_time,
            )
        )
        return obs


    opts = SessionOptions()
    r = get_ort_ext_libs()
    if r is not None:
        opts.register_custom_ops_library(r[0])


    data = []
    errors = []
    pbar = tqdm(list(product(types, engine, providers, dims, domains)))
    for tt, engine, provider, dim, domain in pbar:
        if (
            tt in {TensorProto.FLOAT8E4M3FN, TensorProto.FLOAT8E5M2}
            and properties.get("major", 0) < 9
        ):
            # f8 not available
            if provider[0] == "CPUExecutionProvider":
                continue
            errors.append(
                f"f8 not available, major={properties.get('major', 0)}, "
                f"tt={tt}, provider={provider!r}, domain={domain!r}."
            )
            continue
        elif provider[0] == "CPUExecutionProvider" and max(dim) > 2000:
            # too long
            continue
        if max(dim) <= 200:
            repeat, number = script_args.repeat * 4, script_args.number * 4
        elif max(dim) <= 256:
            repeat, number = script_args.repeat * 2, script_args.number * 2
        else:
            repeat, number = script_args.repeat, script_args.number

        onx = create_model(tt, provider=provider[0], domain=domain)
        if onx is None:
            if provider[0] == "CPUExecutionProvider":
                continue
            errors.append(
                f"No model for tt={tt}, provider={provider!r}, domain={domain!r}."
            )
            continue
        with open(f"plot_bench_gemm_ort_{tt}_{domain}.onnx", "wb") as f:
            f.write(onx.SerializeToString())
        k1 = (tt, dim[2], dim[0])
        k2 = (tt, dim[2], dim[1])
        if k1 not in matrices:
            errors.append(f"Key k1={k1!r} not in matrices.")
            continue
        if k2 not in matrices:
            errors.append(f"Key k2={k2!r} not in matrices.")
            continue

        pbar.set_description(f"t={tt} e={engine.__name__} p={provider[0][:4]} dim={dim}")

        if engine == CReferenceEvaluator:
            if (
                domain != ""
                or max(dim) > 256
                or provider != ["CPUExecutionProvider"]
                or tt not in [TensorProto.FLOAT, TensorProto.FLOAT16]
            ):
                # All impossible or slow cases.
                continue
            if tt == TensorProto.FLOAT16 and max(dim) > 50:
                repeat, number = 2, 2

            feeds = {"A": matrices[k1].numpy(), "B": matrices[k2].numpy()}
            sess = engine(onx)
            sess.run(None, feeds)
            obs = measure_time(lambda: sess.run(None, feeds), repeat=repeat, number=number)

        elif engine == InferenceSession:
            if provider[0] not in get_available_providers():
                errors.append(f"provider={provider[0]} is missing")
                continue
            try:
                sess = engine(onx.SerializeToString(), opts, providers=provider)
            except (NotImplemented, InvalidGraph, Fail) as e:
                # not implemented
                errors.append((tt, engine.__class__.__name__, provider, domain, e))
                continue

            the_feeds = (
                {"A": matrices[k1], "B": matrices[k2]}
                if provider == ["CPUExecutionProvider"]
                else {"A": matrices_cuda[k1], "B": matrices_cuda[k2]}
            )
            out_names = (
                ["C", "time"] if domain == "onnx_extented.ortops.tutorial.cuda" else ["C"]
            )

            # warmup
            for i in range(script_args.warmup):
                sess._sess.run_with_ort_values(the_feeds, out_names, None)[0]

            # benchamrk
            times = []

            def fct_benchmarked():
                got = sess._sess.run_with_ort_values(the_feeds, out_names, None)
                if len(got) > 1:
                    times.append(got[1])

            obs = measure_time(fct_benchmarked, repeat=repeat, number=number)
            internal_time = None
            if len(times) > 0:
                np_times = [t.numpy() for t in times]
                internal_time = (sum(np_times) / len(times))[0]

        else:
            errors.append(f"unknown engine={engine}")
            continue

        # improves the rendering
        obs = rendering_obs(obs, dim, number, repeat, domain, provider, internal_time)
        data.append(obs)
        if unit_test_going() and len(data) >= 2:
            break





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/336 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[32, 32, 32]:   0%|          | 0/336 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[32, 32, 32]:  25%|##5       | 85/336 [00:01<00:05, 42.97it/s]    t=1 e=InferenceSession p=CUDA dim=[32, 32, 32]:  25%|##5       | 85/336 [00:01<00:05, 42.97it/s]    t=1 e=InferenceSession p=CUDA dim=[32, 32, 32]:  25%|##5       | 85/336 [00:02<00:05, 42.97it/s]    t=1 e=InferenceSession p=CUDA dim=[64, 64, 64]:  25%|##5       | 85/336 [00:02<00:05, 42.97it/s]    t=1 e=InferenceSession p=CUDA dim=[64, 64, 64]:  25%|##5       | 85/336 [00:03<00:05, 42.97it/s]    t=1 e=InferenceSession p=CUDA dim=[64, 64, 64]:  25%|##5       | 85/336 [00:03<00:05, 42.97it/s]    t=1 e=InferenceSession p=CUDA dim=[64, 64, 64]:  27%|##6       | 90/336 [00:03<00:11, 21.59it/s]    t=1 e=InferenceSession p=CUDA dim=[128, 128, 128]:  27%|##6       | 90/336 [00:03<00:11, 21.59it/s]    t=1 e=InferenceSession p=CUDA dim=[128, 128, 128]:  27%|##6       | 90/336 [00:04<00:11, 21.59it/s]    t=1 e=InferenceSession p=CUDA dim=[128, 128, 128]:  27%|##7       | 92/336 [00:05<00:18, 12.94it/s]    t=1 e=InferenceSession p=CUDA dim=[128, 128, 128]:  27%|##7       | 92/336 [00:05<00:18, 12.94it/s]    t=1 e=InferenceSession p=CUDA dim=[256, 256, 256]:  27%|##7       | 92/336 [00:05<00:18, 12.94it/s]    t=1 e=InferenceSession p=CUDA dim=[256, 256, 256]:  28%|##7       | 94/336 [00:05<00:20, 11.75it/s]    t=1 e=InferenceSession p=CUDA dim=[256, 256, 256]:  28%|##7       | 94/336 [00:05<00:20, 11.75it/s]    t=1 e=InferenceSession p=CUDA dim=[256, 256, 256]:  28%|##7       | 94/336 [00:05<00:20, 11.75it/s]    t=1 e=InferenceSession p=CUDA dim=[400, 400, 400]:  28%|##7       | 94/336 [00:05<00:20, 11.75it/s]    t=1 e=InferenceSession p=CUDA dim=[400, 400, 400]:  29%|##8       | 97/336 [00:05<00:20, 11.67it/s]    t=1 e=InferenceSession p=CUDA dim=[400, 400, 400]:  29%|##8       | 97/336 [00:05<00:20, 11.67it/s]    t=1 e=InferenceSession p=CUDA dim=[400, 400, 400]:  29%|##8       | 97/336 [00:05<00:20, 11.67it/s]    t=1 e=InferenceSession p=CUDA dim=[512, 512, 512]:  29%|##8       | 97/336 [00:05<00:20, 11.67it/s]    t=1 e=InferenceSession p=CUDA dim=[512, 512, 512]:  30%|##9       | 100/336 [00:06<00:20, 11.79it/s]    t=1 e=InferenceSession p=CUDA dim=[512, 512, 512]:  30%|##9       | 100/336 [00:06<00:20, 11.79it/s]    t=1 e=InferenceSession p=CUDA dim=[512, 512, 512]:  30%|##9       | 100/336 [00:06<00:20, 11.79it/s]    t=1 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  30%|##9       | 100/336 [00:06<00:20, 11.79it/s]    t=1 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  31%|###       | 103/336 [00:06<00:22, 10.47it/s]    t=1 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  31%|###       | 103/336 [00:06<00:22, 10.47it/s]    t=1 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  31%|###       | 104/336 [00:06<00:24,  9.35it/s]    t=1 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  31%|###       | 104/336 [00:06<00:24,  9.35it/s]    t=1 e=InferenceSession p=CPUE dim=[32, 32, 32]:  31%|###       | 104/336 [00:06<00:24,  9.35it/s]          t=1 e=InferenceSession p=CPUE dim=[64, 64, 64]:  31%|###       | 104/336 [00:06<00:24,  9.35it/s]    t=1 e=InferenceSession p=CPUE dim=[128, 128, 128]:  31%|###       | 104/336 [00:06<00:24,  9.35it/s]    t=1 e=InferenceSession p=CPUE dim=[256, 256, 256]:  31%|###       | 104/336 [00:06<00:24,  9.35it/s]    t=1 e=InferenceSession p=CPUE dim=[256, 256, 256]:  35%|###4      | 116/336 [00:06<00:11, 18.80it/s]    t=1 e=InferenceSession p=CPUE dim=[400, 400, 400]:  35%|###4      | 116/336 [00:06<00:11, 18.80it/s]    t=1 e=InferenceSession p=CPUE dim=[512, 512, 512]:  35%|###4      | 116/336 [00:06<00:11, 18.80it/s]    t=1 e=InferenceSession p=CPUE dim=[512, 512, 512]:  36%|###6      | 122/336 [00:07<00:09, 22.70it/s]    t=1 e=InferenceSession p=CPUE dim=[1024, 1024, 1024]:  36%|###6      | 122/336 [00:07<00:09, 22.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  36%|###6      | 122/336 [00:07<00:09, 22.70it/s]       t=1 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=[32, 32, 32]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]          t=1 e=CReferenceEvaluator p=CPUE dim=[64, 64, 64]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=[128, 128, 128]:  38%|###7      | 127/336 [00:07<00:13, 15.22it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=[128, 128, 128]:  46%|####6     | 155/336 [00:07<00:04, 38.67it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=[256, 256, 256]:  46%|####6     | 155/336 [00:07<00:04, 38.67it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=[400, 400, 400]:  46%|####6     | 155/336 [00:07<00:04, 38.67it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=[512, 512, 512]:  46%|####6     | 155/336 [00:07<00:04, 38.67it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=[512, 512, 512]:  49%|####8     | 164/336 [00:07<00:03, 44.61it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=[1024, 1024, 1024]:  49%|####8     | 164/336 [00:07<00:03, 44.61it/s]    t=10 e=InferenceSession p=CUDA dim=[32, 32, 32]:  49%|####8     | 164/336 [00:07<00:03, 44.61it/s]            t=10 e=InferenceSession p=CUDA dim=[32, 32, 32]:  49%|####8     | 164/336 [00:09<00:03, 44.61it/s]    t=10 e=InferenceSession p=CUDA dim=[32, 32, 32]:  49%|####8     | 164/336 [00:09<00:03, 44.61it/s]    t=10 e=InferenceSession p=CUDA dim=[64, 64, 64]:  49%|####8     | 164/336 [00:09<00:03, 44.61it/s]    t=10 e=InferenceSession p=CUDA dim=[64, 64, 64]:  51%|#####1    | 172/336 [00:11<00:18,  8.96it/s]    t=10 e=InferenceSession p=CUDA dim=[64, 64, 64]:  51%|#####1    | 172/336 [00:11<00:18,  8.96it/s]    t=10 e=InferenceSession p=CUDA dim=[64, 64, 64]:  51%|#####1    | 172/336 [00:11<00:18,  8.96it/s]    t=10 e=InferenceSession p=CUDA dim=[128, 128, 128]:  51%|#####1    | 172/336 [00:11<00:18,  8.96it/s]    t=10 e=InferenceSession p=CUDA dim=[128, 128, 128]:  51%|#####1    | 172/336 [00:12<00:18,  8.96it/s]    t=10 e=InferenceSession p=CUDA dim=[128, 128, 128]:  51%|#####1    | 172/336 [00:13<00:18,  8.96it/s]    t=10 e=InferenceSession p=CUDA dim=[256, 256, 256]:  51%|#####1    | 172/336 [00:13<00:18,  8.96it/s]    t=10 e=InferenceSession p=CUDA dim=[256, 256, 256]:  53%|#####2    | 178/336 [00:13<00:26,  6.03it/s]    t=10 e=InferenceSession p=CUDA dim=[256, 256, 256]:  53%|#####2    | 178/336 [00:13<00:26,  6.03it/s]    t=10 e=InferenceSession p=CUDA dim=[256, 256, 256]:  53%|#####2    | 178/336 [00:13<00:26,  6.03it/s]    t=10 e=InferenceSession p=CUDA dim=[400, 400, 400]:  53%|#####2    | 178/336 [00:13<00:26,  6.03it/s]    t=10 e=InferenceSession p=CUDA dim=[400, 400, 400]:  53%|#####2    | 178/336 [00:13<00:26,  6.03it/s]    t=10 e=InferenceSession p=CUDA dim=[400, 400, 400]:  54%|#####4    | 182/336 [00:13<00:23,  6.45it/s]    t=10 e=InferenceSession p=CUDA dim=[400, 400, 400]:  54%|#####4    | 182/336 [00:13<00:23,  6.45it/s]    t=10 e=InferenceSession p=CUDA dim=[512, 512, 512]:  54%|#####4    | 182/336 [00:13<00:23,  6.45it/s]    t=10 e=InferenceSession p=CUDA dim=[512, 512, 512]:  54%|#####4    | 182/336 [00:14<00:23,  6.45it/s]    t=10 e=InferenceSession p=CUDA dim=[512, 512, 512]:  54%|#####4    | 182/336 [00:14<00:23,  6.45it/s]    t=10 e=InferenceSession p=CUDA dim=[512, 512, 512]:  55%|#####5    | 186/336 [00:14<00:22,  6.77it/s]    t=10 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  55%|#####5    | 186/336 [00:14<00:22,  6.77it/s]    t=10 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  55%|#####5    | 186/336 [00:16<00:22,  6.77it/s]    t=10 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  55%|#####5    | 186/336 [00:16<00:22,  6.77it/s]    t=10 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  56%|#####6    | 189/336 [00:16<00:34,  4.21it/s]    t=10 e=InferenceSession p=CPUE dim=[32, 32, 32]:  56%|#####6    | 189/336 [00:16<00:34,  4.21it/s]          t=10 e=InferenceSession p=CPUE dim=[64, 64, 64]:  56%|#####6    | 189/336 [00:16<00:34,  4.21it/s]    t=10 e=InferenceSession p=CPUE dim=[128, 128, 128]:  56%|#####6    | 189/336 [00:16<00:34,  4.21it/s]    t=10 e=InferenceSession p=CPUE dim=[128, 128, 128]:  59%|#####8    | 197/336 [00:16<00:21,  6.56it/s]    t=10 e=InferenceSession p=CPUE dim=[256, 256, 256]:  59%|#####8    | 197/336 [00:16<00:21,  6.56it/s]    t=10 e=InferenceSession p=CPUE dim=[256, 256, 256]:  60%|#####9    | 201/336 [00:16<00:16,  7.98it/s]    t=10 e=InferenceSession p=CPUE dim=[400, 400, 400]:  60%|#####9    | 201/336 [00:16<00:16,  7.98it/s]    t=10 e=InferenceSession p=CPUE dim=[400, 400, 400]:  61%|######1   | 205/336 [00:16<00:13,  9.83it/s]    t=10 e=InferenceSession p=CPUE dim=[512, 512, 512]:  61%|######1   | 205/336 [00:16<00:13,  9.83it/s]    t=10 e=InferenceSession p=CPUE dim=[1024, 1024, 1024]:  61%|######1   | 205/336 [00:16<00:13,  9.83it/s]    t=10 e=InferenceSession p=CPUE dim=[1024, 1024, 1024]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]       t=10 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[32, 32, 32]:  62%|######2   | 209/336 [00:18<00:20,  6.27it/s]          t=10 e=CReferenceEvaluator p=CPUE dim=[32, 32, 32]:  69%|######9   | 233/336 [00:18<00:05, 17.81it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[64, 64, 64]:  69%|######9   | 233/336 [00:18<00:05, 17.81it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[128, 128, 128]:  69%|######9   | 233/336 [00:18<00:05, 17.81it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[128, 128, 128]:  71%|#######1  | 239/336 [00:18<00:04, 20.57it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[256, 256, 256]:  71%|#######1  | 239/336 [00:18<00:04, 20.57it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[400, 400, 400]:  71%|#######1  | 239/336 [00:19<00:04, 20.57it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[400, 400, 400]:  73%|#######2  | 245/336 [00:19<00:05, 15.61it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[512, 512, 512]:  73%|#######2  | 245/336 [00:19<00:05, 15.61it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[1024, 1024, 1024]:  73%|#######2  | 245/336 [00:19<00:05, 15.61it/s]    t=16 e=InferenceSession p=CUDA dim=[32, 32, 32]:  73%|#######2  | 245/336 [00:19<00:05, 15.61it/s]             t=16 e=InferenceSession p=CUDA dim=[32, 32, 32]:  76%|#######5  | 254/336 [00:19<00:03, 21.06it/s]    t=16 e=InferenceSession p=CUDA dim=[32, 32, 32]:  76%|#######5  | 254/336 [00:19<00:03, 21.06it/s]    t=16 e=InferenceSession p=CUDA dim=[64, 64, 64]:  76%|#######5  | 254/336 [00:19<00:03, 21.06it/s]    t=16 e=InferenceSession p=CUDA dim=[64, 64, 64]:  76%|#######5  | 254/336 [00:19<00:03, 21.06it/s]    t=16 e=InferenceSession p=CUDA dim=[128, 128, 128]:  76%|#######5  | 254/336 [00:19<00:03, 21.06it/s]    t=16 e=InferenceSession p=CUDA dim=[128, 128, 128]:  77%|#######7  | 260/336 [00:19<00:03, 21.80it/s]    t=16 e=InferenceSession p=CUDA dim=[128, 128, 128]:  77%|#######7  | 260/336 [00:19<00:03, 21.80it/s]    t=16 e=InferenceSession p=CUDA dim=[256, 256, 256]:  77%|#######7  | 260/336 [00:19<00:03, 21.80it/s]    t=16 e=InferenceSession p=CUDA dim=[256, 256, 256]:  77%|#######7  | 260/336 [00:19<00:03, 21.80it/s]    t=16 e=InferenceSession p=CUDA dim=[400, 400, 400]:  77%|#######7  | 260/336 [00:19<00:03, 21.80it/s]    t=16 e=InferenceSession p=CUDA dim=[400, 400, 400]:  77%|#######7  | 260/336 [00:19<00:03, 21.80it/s]    t=16 e=InferenceSession p=CUDA dim=[512, 512, 512]:  77%|#######7  | 260/336 [00:19<00:03, 21.80it/s]    t=16 e=InferenceSession p=CUDA dim=[512, 512, 512]:  80%|########  | 269/336 [00:19<00:02, 27.78it/s]    t=16 e=InferenceSession p=CUDA dim=[512, 512, 512]:  80%|########  | 269/336 [00:19<00:02, 27.78it/s]    t=16 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  80%|########  | 269/336 [00:19<00:02, 27.78it/s]    t=16 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  80%|########  | 269/336 [00:19<00:02, 27.78it/s]    t=16 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=InferenceSession p=CPUE dim=[32, 32, 32]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]          t=16 e=InferenceSession p=CPUE dim=[64, 64, 64]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=InferenceSession p=CPUE dim=[128, 128, 128]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=InferenceSession p=CPUE dim=[256, 256, 256]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=InferenceSession p=CPUE dim=[400, 400, 400]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=InferenceSession p=CPUE dim=[512, 512, 512]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=InferenceSession p=CPUE dim=[1024, 1024, 1024]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]       t=16 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=[32, 32, 32]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]          t=16 e=CReferenceEvaluator p=CPUE dim=[64, 64, 64]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=[128, 128, 128]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=[256, 256, 256]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=[400, 400, 400]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=[512, 512, 512]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=[1024, 1024, 1024]:  82%|########1 | 274/336 [00:19<00:02, 27.99it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=[1024, 1024, 1024]: 100%|##########| 336/336 [00:19<00:00, 16.92it/s]




.. GENERATED FROM PYTHON SOURCE LINES 475-477

Results
+++++++

.. GENERATED FROM PYTHON SOURCE LINES 477-485

.. code-block:: default


    df = DataFrame(data)
    df.to_excel("plot_bench_gemm_ort.xlsx")
    df.to_csv("plot_bench_gemm_ort.csv")
    df.drop(["min_exec", "max_exec"], axis=1).to_csv("plot_bench_gemm_ort.csv")
    print(df.head().T)
    df





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                                0  ...                    4
    average              0.002736  ...             0.002142
    deviation            0.000396  ...             0.000151
    min_exec             0.002092  ...             0.001982
    max_exec             0.003623  ...             0.002505
    repeat                     40  ...                   40
    number                     16  ...                   16
    ttime                0.109455  ...             0.085664
    context_size               64  ...                   64
    warmup_time          0.003614  ...             0.002623
    engine                    ort  ...                  ort
    stype                     f32  ...                  f32
    type                      f32  ...                  f32
    M                          32  ...                  128
    N                          32  ...                  128
    K                          32  ...                  128
    cost                   131072  ...              8388608
    cost_s        131072-32x32x32  ...  8388608-128x128x128
    domain                    EXT  ...                  EXT
    provider                 cuda  ...                 cuda
    platform               x86_64  ...               x86_64
    intime               0.002438  ...              0.00186

    [21 rows x 5 columns]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>average</th>
          <th>deviation</th>
          <th>min_exec</th>
          <th>max_exec</th>
          <th>repeat</th>
          <th>number</th>
          <th>ttime</th>
          <th>context_size</th>
          <th>warmup_time</th>
          <th>engine</th>
          <th>stype</th>
          <th>type</th>
          <th>M</th>
          <th>N</th>
          <th>K</th>
          <th>cost</th>
          <th>cost_s</th>
          <th>domain</th>
          <th>provider</th>
          <th>platform</th>
          <th>intime</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.002736</td>
          <td>3.958209e-04</td>
          <td>0.002092</td>
          <td>0.003623</td>
          <td>40</td>
          <td>16</td>
          <td>0.109455</td>
          <td>64</td>
          <td>0.003614</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.002438</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.000184</td>
          <td>5.693531e-05</td>
          <td>0.000131</td>
          <td>0.000334</td>
          <td>40</td>
          <td>16</td>
          <td>0.007350</td>
          <td>64</td>
          <td>0.000200</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.002106</td>
          <td>1.780508e-04</td>
          <td>0.001929</td>
          <td>0.002924</td>
          <td>40</td>
          <td>16</td>
          <td>0.084251</td>
          <td>64</td>
          <td>0.002558</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>64</td>
          <td>64</td>
          <td>64</td>
          <td>1048576</td>
          <td>1048576-64x64x64</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.001878</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.000153</td>
          <td>2.916548e-05</td>
          <td>0.000121</td>
          <td>0.000220</td>
          <td>40</td>
          <td>16</td>
          <td>0.006112</td>
          <td>64</td>
          <td>0.000192</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>64</td>
          <td>64</td>
          <td>64</td>
          <td>1048576</td>
          <td>1048576-64x64x64</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.002142</td>
          <td>1.505862e-04</td>
          <td>0.001982</td>
          <td>0.002505</td>
          <td>40</td>
          <td>16</td>
          <td>0.085664</td>
          <td>64</td>
          <td>0.002623</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.001860</td>
        </tr>
        <tr>
          <th>5</th>
          <td>0.000237</td>
          <td>5.463227e-05</td>
          <td>0.000183</td>
          <td>0.000362</td>
          <td>40</td>
          <td>16</td>
          <td>0.009498</td>
          <td>64</td>
          <td>0.000340</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>6</th>
          <td>0.002525</td>
          <td>1.467427e-04</td>
          <td>0.002300</td>
          <td>0.002841</td>
          <td>20</td>
          <td>8</td>
          <td>0.050493</td>
          <td>64</td>
          <td>0.003406</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.001964</td>
        </tr>
        <tr>
          <th>7</th>
          <td>0.000532</td>
          <td>6.527193e-05</td>
          <td>0.000466</td>
          <td>0.000737</td>
          <td>20</td>
          <td>8</td>
          <td>0.010635</td>
          <td>64</td>
          <td>0.000535</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>8</th>
          <td>0.003635</td>
          <td>2.159152e-04</td>
          <td>0.003382</td>
          <td>0.004126</td>
          <td>10</td>
          <td>4</td>
          <td>0.036351</td>
          <td>64</td>
          <td>0.003060</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.002391</td>
        </tr>
        <tr>
          <th>9</th>
          <td>0.001024</td>
          <td>6.259633e-05</td>
          <td>0.000934</td>
          <td>0.001128</td>
          <td>10</td>
          <td>4</td>
          <td>0.010244</td>
          <td>64</td>
          <td>0.001104</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.003655</td>
          <td>1.650788e-04</td>
          <td>0.003348</td>
          <td>0.003858</td>
          <td>10</td>
          <td>4</td>
          <td>0.036549</td>
          <td>64</td>
          <td>0.003806</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.002168</td>
        </tr>
        <tr>
          <th>11</th>
          <td>0.001578</td>
          <td>5.651730e-05</td>
          <td>0.001484</td>
          <td>0.001721</td>
          <td>10</td>
          <td>4</td>
          <td>0.015776</td>
          <td>64</td>
          <td>0.001522</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>12</th>
          <td>0.007895</td>
          <td>5.312492e-04</td>
          <td>0.007393</td>
          <td>0.009219</td>
          <td>10</td>
          <td>4</td>
          <td>0.078946</td>
          <td>64</td>
          <td>0.008437</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.003298</td>
        </tr>
        <tr>
          <th>13</th>
          <td>0.005123</td>
          <td>9.140282e-05</td>
          <td>0.005026</td>
          <td>0.005337</td>
          <td>10</td>
          <td>4</td>
          <td>0.051229</td>
          <td>64</td>
          <td>0.005062</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>14</th>
          <td>0.000011</td>
          <td>7.547777e-07</td>
          <td>0.000011</td>
          <td>0.000014</td>
          <td>40</td>
          <td>16</td>
          <td>0.000455</td>
          <td>64</td>
          <td>0.000025</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>15</th>
          <td>0.000017</td>
          <td>1.378402e-06</td>
          <td>0.000015</td>
          <td>0.000021</td>
          <td>40</td>
          <td>16</td>
          <td>0.000668</td>
          <td>64</td>
          <td>0.000030</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>64</td>
          <td>64</td>
          <td>64</td>
          <td>1048576</td>
          <td>1048576-64x64x64</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>16</th>
          <td>0.000043</td>
          <td>3.387619e-06</td>
          <td>0.000037</td>
          <td>0.000052</td>
          <td>40</td>
          <td>16</td>
          <td>0.001728</td>
          <td>64</td>
          <td>0.000050</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>17</th>
          <td>0.000197</td>
          <td>4.339857e-05</td>
          <td>0.000131</td>
          <td>0.000253</td>
          <td>20</td>
          <td>8</td>
          <td>0.003938</td>
          <td>64</td>
          <td>0.000206</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>18</th>
          <td>0.000792</td>
          <td>1.663092e-04</td>
          <td>0.000487</td>
          <td>0.001089</td>
          <td>10</td>
          <td>4</td>
          <td>0.007923</td>
          <td>64</td>
          <td>0.000755</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>19</th>
          <td>0.001730</td>
          <td>2.775251e-04</td>
          <td>0.001119</td>
          <td>0.002075</td>
          <td>10</td>
          <td>4</td>
          <td>0.017300</td>
          <td>64</td>
          <td>0.001737</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>20</th>
          <td>0.013985</td>
          <td>1.420632e-03</td>
          <td>0.011834</td>
          <td>0.016546</td>
          <td>10</td>
          <td>4</td>
          <td>0.139848</td>
          <td>64</td>
          <td>0.014136</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>21</th>
          <td>0.000023</td>
          <td>2.315146e-06</td>
          <td>0.000022</td>
          <td>0.000034</td>
          <td>40</td>
          <td>16</td>
          <td>0.000917</td>
          <td>64</td>
          <td>0.000066</td>
          <td>np</td>
          <td>f32</td>
          <td>f32</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>22</th>
          <td>0.000033</td>
          <td>1.620662e-06</td>
          <td>0.000031</td>
          <td>0.000038</td>
          <td>40</td>
          <td>16</td>
          <td>0.001313</td>
          <td>64</td>
          <td>0.000064</td>
          <td>np</td>
          <td>f32</td>
          <td>f32</td>
          <td>64</td>
          <td>64</td>
          <td>64</td>
          <td>1048576</td>
          <td>1048576-64x64x64</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>23</th>
          <td>0.000163</td>
          <td>3.290325e-04</td>
          <td>0.000081</td>
          <td>0.002080</td>
          <td>40</td>
          <td>16</td>
          <td>0.006522</td>
          <td>64</td>
          <td>0.000216</td>
          <td>np</td>
          <td>f32</td>
          <td>f32</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>24</th>
          <td>0.000580</td>
          <td>6.394324e-04</td>
          <td>0.000272</td>
          <td>0.002972</td>
          <td>20</td>
          <td>8</td>
          <td>0.011609</td>
          <td>64</td>
          <td>0.000391</td>
          <td>np</td>
          <td>f32</td>
          <td>f32</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>25</th>
          <td>0.002479</td>
          <td>2.558802e-04</td>
          <td>0.002202</td>
          <td>0.003580</td>
          <td>40</td>
          <td>16</td>
          <td>0.099157</td>
          <td>64</td>
          <td>0.003554</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.002208</td>
        </tr>
        <tr>
          <th>26</th>
          <td>0.000144</td>
          <td>2.827918e-05</td>
          <td>0.000105</td>
          <td>0.000243</td>
          <td>40</td>
          <td>16</td>
          <td>0.005766</td>
          <td>64</td>
          <td>0.000162</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>27</th>
          <td>0.002413</td>
          <td>1.594332e-04</td>
          <td>0.002247</td>
          <td>0.002836</td>
          <td>40</td>
          <td>16</td>
          <td>0.096536</td>
          <td>64</td>
          <td>0.002744</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>64</td>
          <td>64</td>
          <td>64</td>
          <td>1048576</td>
          <td>1048576-64x64x64</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.002181</td>
        </tr>
        <tr>
          <th>28</th>
          <td>0.000149</td>
          <td>2.421176e-05</td>
          <td>0.000123</td>
          <td>0.000261</td>
          <td>40</td>
          <td>16</td>
          <td>0.005973</td>
          <td>64</td>
          <td>0.000174</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>64</td>
          <td>64</td>
          <td>64</td>
          <td>1048576</td>
          <td>1048576-64x64x64</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>29</th>
          <td>0.002484</td>
          <td>2.551140e-04</td>
          <td>0.002281</td>
          <td>0.003316</td>
          <td>40</td>
          <td>16</td>
          <td>0.099367</td>
          <td>64</td>
          <td>0.002678</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.002209</td>
        </tr>
        <tr>
          <th>30</th>
          <td>0.000178</td>
          <td>2.815761e-05</td>
          <td>0.000145</td>
          <td>0.000274</td>
          <td>40</td>
          <td>16</td>
          <td>0.007104</td>
          <td>64</td>
          <td>0.000233</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>31</th>
          <td>0.002828</td>
          <td>1.084962e-04</td>
          <td>0.002658</td>
          <td>0.003068</td>
          <td>20</td>
          <td>8</td>
          <td>0.056558</td>
          <td>64</td>
          <td>0.004025</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.002472</td>
        </tr>
        <tr>
          <th>32</th>
          <td>0.000323</td>
          <td>3.772045e-05</td>
          <td>0.000282</td>
          <td>0.000430</td>
          <td>20</td>
          <td>8</td>
          <td>0.006465</td>
          <td>64</td>
          <td>0.000341</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>33</th>
          <td>0.006310</td>
          <td>1.244661e-04</td>
          <td>0.006142</td>
          <td>0.006589</td>
          <td>10</td>
          <td>4</td>
          <td>0.063103</td>
          <td>64</td>
          <td>0.006047</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.005551</td>
        </tr>
        <tr>
          <th>34</th>
          <td>0.000621</td>
          <td>6.726149e-05</td>
          <td>0.000522</td>
          <td>0.000769</td>
          <td>10</td>
          <td>4</td>
          <td>0.006215</td>
          <td>64</td>
          <td>0.000582</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>35</th>
          <td>0.008800</td>
          <td>1.297538e-04</td>
          <td>0.008538</td>
          <td>0.008993</td>
          <td>10</td>
          <td>4</td>
          <td>0.088001</td>
          <td>64</td>
          <td>0.008999</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.007757</td>
        </tr>
        <tr>
          <th>36</th>
          <td>0.000864</td>
          <td>3.981431e-05</td>
          <td>0.000819</td>
          <td>0.000940</td>
          <td>10</td>
          <td>4</td>
          <td>0.008645</td>
          <td>64</td>
          <td>0.000847</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>37</th>
          <td>0.041805</td>
          <td>7.673008e-04</td>
          <td>0.040716</td>
          <td>0.043312</td>
          <td>10</td>
          <td>4</td>
          <td>0.418050</td>
          <td>64</td>
          <td>0.041182</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.038557</td>
        </tr>
        <tr>
          <th>38</th>
          <td>0.003063</td>
          <td>8.938179e-05</td>
          <td>0.002940</td>
          <td>0.003209</td>
          <td>10</td>
          <td>4</td>
          <td>0.030634</td>
          <td>64</td>
          <td>0.003111</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>39</th>
          <td>0.000016</td>
          <td>2.144816e-06</td>
          <td>0.000014</td>
          <td>0.000025</td>
          <td>40</td>
          <td>16</td>
          <td>0.000626</td>
          <td>64</td>
          <td>0.000032</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>40</th>
          <td>0.000052</td>
          <td>1.284059e-05</td>
          <td>0.000033</td>
          <td>0.000089</td>
          <td>40</td>
          <td>16</td>
          <td>0.002079</td>
          <td>64</td>
          <td>0.000044</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>64</td>
          <td>64</td>
          <td>64</td>
          <td>1048576</td>
          <td>1048576-64x64x64</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>41</th>
          <td>0.000120</td>
          <td>3.514274e-05</td>
          <td>0.000101</td>
          <td>0.000287</td>
          <td>40</td>
          <td>16</td>
          <td>0.004797</td>
          <td>64</td>
          <td>0.000129</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>42</th>
          <td>0.000569</td>
          <td>1.544007e-04</td>
          <td>0.000399</td>
          <td>0.000893</td>
          <td>20</td>
          <td>8</td>
          <td>0.011380</td>
          <td>64</td>
          <td>0.000696</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>43</th>
          <td>0.002128</td>
          <td>2.086557e-04</td>
          <td>0.001716</td>
          <td>0.002403</td>
          <td>10</td>
          <td>4</td>
          <td>0.021277</td>
          <td>64</td>
          <td>0.002052</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>44</th>
          <td>0.003289</td>
          <td>3.516032e-04</td>
          <td>0.002757</td>
          <td>0.003722</td>
          <td>10</td>
          <td>4</td>
          <td>0.032892</td>
          <td>64</td>
          <td>0.002962</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>45</th>
          <td>0.025413</td>
          <td>2.667194e-03</td>
          <td>0.021304</td>
          <td>0.031057</td>
          <td>10</td>
          <td>4</td>
          <td>0.254131</td>
          <td>64</td>
          <td>0.023577</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>46</th>
          <td>0.000290</td>
          <td>1.489187e-05</td>
          <td>0.000264</td>
          <td>0.000341</td>
          <td>40</td>
          <td>16</td>
          <td>0.011602</td>
          <td>64</td>
          <td>0.000341</td>
          <td>np</td>
          <td>f16</td>
          <td>f16</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>47</th>
          <td>0.002152</td>
          <td>2.547500e-05</td>
          <td>0.002126</td>
          <td>0.002177</td>
          <td>2</td>
          <td>2</td>
          <td>0.004304</td>
          <td>64</td>
          <td>0.002846</td>
          <td>np</td>
          <td>f16</td>
          <td>f16</td>
          <td>64</td>
          <td>64</td>
          <td>64</td>
          <td>1048576</td>
          <td>1048576-64x64x64</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>48</th>
          <td>0.014365</td>
          <td>6.381250e-04</td>
          <td>0.013727</td>
          <td>0.015003</td>
          <td>2</td>
          <td>2</td>
          <td>0.028730</td>
          <td>64</td>
          <td>0.016238</td>
          <td>np</td>
          <td>f16</td>
          <td>f16</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>49</th>
          <td>0.117843</td>
          <td>1.695075e-03</td>
          <td>0.116148</td>
          <td>0.119538</td>
          <td>2</td>
          <td>2</td>
          <td>0.235686</td>
          <td>64</td>
          <td>0.119984</td>
          <td>np</td>
          <td>f16</td>
          <td>f16</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>50</th>
          <td>0.000158</td>
          <td>4.863309e-05</td>
          <td>0.000121</td>
          <td>0.000318</td>
          <td>40</td>
          <td>16</td>
          <td>0.006318</td>
          <td>64</td>
          <td>0.000357</td>
          <td>ort</td>
          <td>bf16</td>
          <td>bf16</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>51</th>
          <td>0.000180</td>
          <td>2.150884e-05</td>
          <td>0.000124</td>
          <td>0.000216</td>
          <td>40</td>
          <td>16</td>
          <td>0.007195</td>
          <td>64</td>
          <td>0.000248</td>
          <td>ort</td>
          <td>bf16</td>
          <td>bf16</td>
          <td>64</td>
          <td>64</td>
          <td>64</td>
          <td>1048576</td>
          <td>1048576-64x64x64</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>52</th>
          <td>0.000171</td>
          <td>2.592592e-05</td>
          <td>0.000155</td>
          <td>0.000293</td>
          <td>40</td>
          <td>16</td>
          <td>0.006830</td>
          <td>64</td>
          <td>0.000242</td>
          <td>ort</td>
          <td>bf16</td>
          <td>bf16</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>53</th>
          <td>0.000326</td>
          <td>6.413306e-05</td>
          <td>0.000274</td>
          <td>0.000547</td>
          <td>20</td>
          <td>8</td>
          <td>0.006530</td>
          <td>64</td>
          <td>0.000326</td>
          <td>ort</td>
          <td>bf16</td>
          <td>bf16</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>54</th>
          <td>0.000617</td>
          <td>4.362006e-05</td>
          <td>0.000560</td>
          <td>0.000693</td>
          <td>10</td>
          <td>4</td>
          <td>0.006167</td>
          <td>64</td>
          <td>0.000660</td>
          <td>ort</td>
          <td>bf16</td>
          <td>bf16</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>55</th>
          <td>0.000933</td>
          <td>5.539033e-05</td>
          <td>0.000878</td>
          <td>0.001034</td>
          <td>10</td>
          <td>4</td>
          <td>0.009330</td>
          <td>64</td>
          <td>0.000932</td>
          <td>ort</td>
          <td>bf16</td>
          <td>bf16</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>56</th>
          <td>0.003552</td>
          <td>4.912712e-05</td>
          <td>0.003483</td>
          <td>0.003675</td>
          <td>10</td>
          <td>4</td>
          <td>0.035516</td>
          <td>64</td>
          <td>0.003639</td>
          <td>ort</td>
          <td>bf16</td>
          <td>bf16</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 486-488

The errors
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 488-491

.. code-block:: default

    for i, e in enumerate(errors):
        print(f"{i+1}/{len(errors)}-{e}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    2/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    3/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    4/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    5/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    6/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    7/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    8/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    9/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    10/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    11/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    12/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    13/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    14/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    15/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    16/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    17/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    18/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    19/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    20/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    21/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    22/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    23/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    24/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    25/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    26/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    27/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    28/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    29/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    30/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    31/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    32/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    33/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    34/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    35/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    36/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    37/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    38/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    39/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    40/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    41/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    42/84-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    43/84-(1, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    44/84-(1, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    45/84-(1, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    46/84-(1, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    47/84-(1, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    48/84-(1, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    49/84-(1, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    50/84-(10, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    51/84-(10, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    52/84-(10, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    53/84-(10, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    54/84-(10, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    55/84-(10, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    56/84-(10, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    57/84-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    58/84-(16, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    59/84-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    60/84-(16, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    61/84-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    62/84-(16, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    63/84-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    64/84-(16, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    65/84-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    66/84-(16, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    67/84-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    68/84-(16, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    69/84-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    70/84-(16, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    71/84-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    72/84-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    73/84-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    74/84-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    75/84-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    76/84-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    77/84-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    78/84-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    79/84-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    80/84-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    81/84-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    82/84-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    83/84-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    84/84-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.




.. GENERATED FROM PYTHON SOURCE LINES 492-494

Summary
+++++++

.. GENERATED FROM PYTHON SOURCE LINES 494-509

.. code-block:: default


    piv = pivot_table(
        df,
        index=["cost"],
        columns=["provider", "type", "domain", "engine"],
        values=["average", "intime"],
    )
    piv.reset_index(drop=False).to_excel("plot_bench_gemm_ort_summary.xlsx")
    piv.reset_index(drop=False).to_csv("plot_bench_gemm_ort_summary.csv")


    print("summary")
    print(piv)
    piv





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    summary
                 average                      ...              intime          
    provider         cpu                      ...      cuda      cuda          
    type             f16                 f32  ...       f32       f16       f32
    domain           ORT                 ORT  ...       ORT       EXT       EXT
    engine            np       ort        np  ...       ort       ort       ort
    cost                                      ...                              
    131072      0.000290  0.000016  0.000023  ...  0.000184  0.002208  0.002438
    1048576     0.002152  0.000052  0.000033  ...  0.000153  0.002181  0.001878
    8388608     0.014365  0.000120  0.000163  ...  0.000237  0.002209  0.001860
    67108864    0.117843  0.000569  0.000580  ...  0.000532  0.002472  0.001964
    256000000        NaN  0.002128       NaN  ...  0.001024  0.005551  0.002391
    536870912        NaN  0.003289       NaN  ...  0.001578  0.007757  0.002168
    4294967296       NaN  0.025413       NaN  ...  0.005123  0.038557  0.003298

    [7 rows x 11 columns]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead tr th {
            text-align: left;
        }

        .dataframe thead tr:last-of-type th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th colspan="9" halign="left">average</th>
          <th colspan="2" halign="left">intime</th>
        </tr>
        <tr>
          <th>provider</th>
          <th colspan="4" halign="left">cpu</th>
          <th colspan="5" halign="left">cuda</th>
          <th colspan="2" halign="left">cuda</th>
        </tr>
        <tr>
          <th>type</th>
          <th colspan="2" halign="left">f16</th>
          <th colspan="2" halign="left">f32</th>
          <th>bf16</th>
          <th colspan="2" halign="left">f16</th>
          <th colspan="2" halign="left">f32</th>
          <th>f16</th>
          <th>f32</th>
        </tr>
        <tr>
          <th>domain</th>
          <th colspan="2" halign="left">ORT</th>
          <th colspan="2" halign="left">ORT</th>
          <th>ORT</th>
          <th>EXT</th>
          <th>ORT</th>
          <th>EXT</th>
          <th>ORT</th>
          <th>EXT</th>
          <th>EXT</th>
        </tr>
        <tr>
          <th>engine</th>
          <th>np</th>
          <th>ort</th>
          <th>np</th>
          <th>ort</th>
          <th>ort</th>
          <th>ort</th>
          <th>ort</th>
          <th>ort</th>
          <th>ort</th>
          <th>ort</th>
          <th>ort</th>
        </tr>
        <tr>
          <th>cost</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>131072</th>
          <td>0.000290</td>
          <td>0.000016</td>
          <td>0.000023</td>
          <td>0.000011</td>
          <td>0.000158</td>
          <td>0.002479</td>
          <td>0.000144</td>
          <td>0.002736</td>
          <td>0.000184</td>
          <td>0.002208</td>
          <td>0.002438</td>
        </tr>
        <tr>
          <th>1048576</th>
          <td>0.002152</td>
          <td>0.000052</td>
          <td>0.000033</td>
          <td>0.000017</td>
          <td>0.000180</td>
          <td>0.002413</td>
          <td>0.000149</td>
          <td>0.002106</td>
          <td>0.000153</td>
          <td>0.002181</td>
          <td>0.001878</td>
        </tr>
        <tr>
          <th>8388608</th>
          <td>0.014365</td>
          <td>0.000120</td>
          <td>0.000163</td>
          <td>0.000043</td>
          <td>0.000171</td>
          <td>0.002484</td>
          <td>0.000178</td>
          <td>0.002142</td>
          <td>0.000237</td>
          <td>0.002209</td>
          <td>0.001860</td>
        </tr>
        <tr>
          <th>67108864</th>
          <td>0.117843</td>
          <td>0.000569</td>
          <td>0.000580</td>
          <td>0.000197</td>
          <td>0.000326</td>
          <td>0.002828</td>
          <td>0.000323</td>
          <td>0.002525</td>
          <td>0.000532</td>
          <td>0.002472</td>
          <td>0.001964</td>
        </tr>
        <tr>
          <th>256000000</th>
          <td>NaN</td>
          <td>0.002128</td>
          <td>NaN</td>
          <td>0.000792</td>
          <td>0.000617</td>
          <td>0.006310</td>
          <td>0.000621</td>
          <td>0.003635</td>
          <td>0.001024</td>
          <td>0.005551</td>
          <td>0.002391</td>
        </tr>
        <tr>
          <th>536870912</th>
          <td>NaN</td>
          <td>0.003289</td>
          <td>NaN</td>
          <td>0.001730</td>
          <td>0.000933</td>
          <td>0.008800</td>
          <td>0.000864</td>
          <td>0.003655</td>
          <td>0.001578</td>
          <td>0.007757</td>
          <td>0.002168</td>
        </tr>
        <tr>
          <th>4294967296</th>
          <td>NaN</td>
          <td>0.025413</td>
          <td>NaN</td>
          <td>0.013985</td>
          <td>0.003552</td>
          <td>0.041805</td>
          <td>0.003063</td>
          <td>0.007895</td>
          <td>0.005123</td>
          <td>0.038557</td>
          <td>0.003298</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 510-511

With the dimensions.

.. GENERATED FROM PYTHON SOURCE LINES 511-520

.. code-block:: default


    pivs = pivot_table(
        df,
        index=["cost_s"],
        columns=["provider", "type", "domain", "engine"],
        values=["average", "intime"],
    )
    print(pivs)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                                average            ...    intime          
    provider                        cpu            ...      cuda          
    type                            f16            ...       f16       f32
    domain                          ORT            ...       EXT       EXT
    engine                           np       ort  ...       ort       ort
    cost_s                                         ...                    
    1048576-64x64x64           0.002152  0.000052  ...  0.002181  0.001878
    131072-32x32x32            0.000290  0.000016  ...  0.002208  0.002438
    256000000-400x400x400           NaN  0.002128  ...  0.005551  0.002391
    4294967296-1024x1024x1024       NaN  0.025413  ...  0.038557  0.003298
    536870912-512x512x512           NaN  0.003289  ...  0.007757  0.002168
    67108864-256x256x256       0.117843  0.000569  ...  0.002472  0.001964
    8388608-128x128x128        0.014365  0.000120  ...  0.002209  0.001860

    [7 rows x 11 columns]




.. GENERATED FROM PYTHON SOURCE LINES 521-522

plot

.. GENERATED FROM PYTHON SOURCE LINES 522-544

.. code-block:: default


    dfi = df[
        df.type.isin({"f32", "f16", "bf16", "e4m3fn", "e5m2"}) & df.engine.isin({"ort"})
    ]
    pivi = pivot_table(
        dfi,
        index=["cost"],
        columns=["type", "domain", "provider", "engine"],
        values="average",
    )

    fig, ax = plt.subplots(1, 2, figsize=(12, 6))
    piv.plot(ax=ax[0], title="Gemm performance\nlower is better", logx=True, logy=True)
    if pivi.shape[0] > 0:
        pivi.plot(
            ax=ax[1],
            title=f"Gemm performance ORT\n{platform.processor()}",
            logx=True,
            logy=True,
        )
    fig.tight_layout()
    fig.savefig("plot_bench_gemm_ort.png")



.. image-sg:: /auto_examples/images/sphx_glr_plot_bench_gemm_ort_001.png
   :alt: Gemm performance lower is better, Gemm performance ORT x86_64
   :srcset: /auto_examples/images/sphx_glr_plot_bench_gemm_ort_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  22.371 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_gemm_ort.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_gemm_ort.py <plot_bench_gemm_ort.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_gemm_ort.ipynb <plot_bench_gemm_ort.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
