
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_cpu_vector_sum_avx_parallel.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_bench_cpu_vector_sum_avx_parallel.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_cpu_vector_sum_avx_parallel.py:


Measuring CPU performance with a parallelized vector sum and AVX
================================================================

The example compares the time spend in computing the sum of all
coefficients of a matrix when the function walks through the coefficients
by rows or by columns when the computation is parallelized or uses
AVX instructions.

Vector Sum
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 13-93

.. code-block:: default

    from tqdm import tqdm
    import numpy
    import matplotlib.pyplot as plt
    from pandas import DataFrame
    from onnx_extended.ext_test_case import measure_time, unit_test_going
    from onnx_extended.validation.cpu._validation import (
        vector_sum_array as vector_sum,
        vector_sum_array_parallel as vector_sum_parallel,
        vector_sum_array_avx as vector_sum_avx,
        vector_sum_array_avx_parallel as vector_sum_avx_parallel,
    )

    obs = []
    dims = [500, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 2000]
    if unit_test_going():
        dims = dims[:2]
    for dim in tqdm(dims):
        values = numpy.ones((dim, dim), dtype=numpy.float32).ravel()
        diff = abs(vector_sum(dim, values, True) - dim**2)

        res = measure_time(lambda: vector_sum(dim, values, True), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="rows",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        res = measure_time(lambda: vector_sum_parallel(dim, values, True), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="rows//",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        diff = abs(vector_sum_avx(dim, values) - dim**2)
        res = measure_time(lambda: vector_sum_avx(dim, values), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="avx",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        diff = abs(vector_sum_avx_parallel(dim, values) - dim**2)
        res = measure_time(lambda: vector_sum_avx_parallel(dim, values), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="avx//",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )


    df = DataFrame(obs)
    piv = df.pivot(index="dim", columns="direction", values="time_per_element")
    print(piv)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/14 [00:00<?, ?it/s]      7%|▋         | 1/14 [00:03<00:51,  3.99s/it]     14%|█▍        | 2/14 [00:09<00:55,  4.59s/it]     21%|██▏       | 3/14 [00:11<00:40,  3.69s/it]     29%|██▊       | 4/14 [00:15<00:36,  3.65s/it]     36%|███▌      | 5/14 [00:19<00:34,  3.88s/it]     43%|████▎     | 6/14 [00:23<00:30,  3.77s/it]     50%|█████     | 7/14 [00:25<00:23,  3.35s/it]     57%|█████▋    | 8/14 [00:28<00:19,  3.31s/it]     64%|██████▍   | 9/14 [00:32<00:17,  3.45s/it]     71%|███████▏  | 10/14 [00:35<00:13,  3.33s/it]     79%|███████▊  | 11/14 [00:39<00:10,  3.36s/it]     86%|████████▌ | 12/14 [00:43<00:07,  3.85s/it]     93%|█████████▎| 13/14 [00:47<00:03,  3.82s/it]    100%|██████████| 14/14 [00:50<00:00,  3.63s/it]    100%|██████████| 14/14 [00:50<00:00,  3.64s/it]
    direction           avx         avx//          rows        rows//
    dim                                                              
    500        1.438393e-10  1.362593e-10  1.259939e-09  8.787448e-10
    700        3.701747e-10  3.849949e-10  1.434992e-09  3.260098e-09
    800        3.409934e-10  9.568409e-11  1.415699e-09  8.017670e-10
    900        1.592183e-10  9.248810e-11  1.364022e-09  4.490765e-10
    1000       2.392434e-10  1.878809e-10  1.480394e-09  1.049462e-09
    1100       5.874169e-10  2.971829e-10  1.711563e-09  6.006095e-09
    1200       2.248875e-10  8.617670e-11  1.685720e-09  1.221601e-09
    1300       2.937606e-10  8.326039e-11  1.440050e-09  5.971724e-10
    1400       3.222094e-10  1.271781e-10  1.454842e-09  8.355484e-10
    1500       3.290465e-10  2.276447e-10  1.356997e-09  5.653725e-10
    1600       3.590795e-10  4.420388e-10  1.474187e-09  3.613465e-10
    1700       6.166573e-10  1.999224e-09  1.292450e-09  8.720255e-10
    1800       3.668850e-10  3.261926e-10  1.472763e-09  6.124919e-10
    2000       3.980788e-10  3.200074e-10  1.460363e-09  4.733703e-10




.. GENERATED FROM PYTHON SOURCE LINES 94-96

Plots
+++++

.. GENERATED FROM PYTHON SOURCE LINES 96-107

.. code-block:: default


    piv_diff = df.pivot(index="dim", columns="direction", values="diff")
    piv_time = df.pivot(index="dim", columns="direction", values="time")

    fig, ax = plt.subplots(1, 3, figsize=(12, 6))
    piv.plot(ax=ax[0], logx=True, title="Comparison between two summation")
    piv_diff.plot(ax=ax[1], logx=True, logy=True, title="Summation errors")
    piv_time.plot(ax=ax[2], logx=True, logy=True, title="Total time")
    fig.tight_layout()
    fig.savefig("plot_bench_cpu_vector_sum_avx_parallel.png")




.. image-sg:: /auto_examples/images/sphx_glr_plot_bench_cpu_vector_sum_avx_parallel_001.png
   :alt: Comparison between two summation, Summation errors, Total time
   :srcset: /auto_examples/images/sphx_glr_plot_bench_cpu_vector_sum_avx_parallel_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 108-109

AVX is faster.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 52.829 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_cpu_vector_sum_avx_parallel.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_cpu_vector_sum_avx_parallel.py <plot_bench_cpu_vector_sum_avx_parallel.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_cpu_vector_sum_avx_parallel.ipynb <plot_bench_cpu_vector_sum_avx_parallel.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
