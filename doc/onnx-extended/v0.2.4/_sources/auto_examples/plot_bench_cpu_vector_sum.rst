
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_cpu_vector_sum.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_bench_cpu_vector_sum.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_cpu_vector_sum.py:


Measuring CPU performance with a vector sum
===========================================

The example compares the time spend in computing the sum of all
coefficients of a matrix when the function walks through the coefficients
by rows or by columns.

Vector Sum
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 12-60

.. code-block:: Python

    from tqdm import tqdm
    import numpy
    import matplotlib.pyplot as plt
    from pandas import DataFrame
    from onnx_extended.ext_test_case import measure_time, unit_test_going
    from onnx_extended.validation.cpu._validation import vector_sum_array as vector_sum

    obs = []
    dims = [500, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 2000]
    if unit_test_going():
        dims = dims[:3]
    for dim in tqdm(dims):
        values = numpy.ones((dim, dim), dtype=numpy.float32).ravel()
        diff = abs(vector_sum(dim, values, True) - dim**2)

        res = measure_time(lambda: vector_sum(dim, values, True), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="rows",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        diff = abs(vector_sum(dim, values, False) - dim**2)
        res = measure_time(lambda: vector_sum(dim, values, False), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="cols",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )


    df = DataFrame(obs)
    piv = df.pivot(index="dim", columns="direction", values="time_per_element")
    print(piv)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/14 [00:00<?, ?it/s]      7%|▋         | 1/14 [00:01<00:14,  1.10s/it]     14%|█▍        | 2/14 [00:02<00:12,  1.07s/it]     21%|██▏       | 3/14 [00:03<00:12,  1.11s/it]     29%|██▊       | 4/14 [00:04<00:11,  1.17s/it]     36%|███▌      | 5/14 [00:05<00:11,  1.24s/it]     43%|████▎     | 6/14 [00:07<00:10,  1.28s/it]     50%|█████     | 7/14 [00:08<00:08,  1.27s/it]     57%|█████▋    | 8/14 [00:09<00:07,  1.32s/it]     64%|██████▍   | 9/14 [00:11<00:06,  1.28s/it]     71%|███████▏  | 10/14 [00:12<00:04,  1.24s/it]     79%|███████▊  | 11/14 [00:13<00:03,  1.25s/it]     86%|████████▌ | 12/14 [00:14<00:02,  1.21s/it]     93%|█████████▎| 13/14 [00:15<00:01,  1.23s/it]    100%|██████████| 14/14 [00:17<00:00,  1.23s/it]    100%|██████████| 14/14 [00:17<00:00,  1.23s/it]
    direction          cols          rows
    dim                                  
    500        1.135726e-09  1.165875e-09
    700        1.145957e-09  1.093638e-09
    800        1.340071e-09  1.170840e-09
    900        1.567920e-09  1.275385e-09
    1000       1.539905e-09  1.182090e-09
    1100       1.494326e-09  1.251227e-09
    1200       1.378659e-09  1.221055e-09
    1300       1.997362e-09  1.185168e-09
    1400       1.460494e-09  1.251018e-09
    1500       2.137646e-09  1.180704e-09
    1600       4.364105e-09  1.201662e-09
    1700       6.372006e-09  1.201249e-09
    1800       6.120020e-09  1.214613e-09
    2000       6.625351e-09  1.271502e-09




.. GENERATED FROM PYTHON SOURCE LINES 61-63

Plots
+++++

.. GENERATED FROM PYTHON SOURCE LINES 63-74

.. code-block:: Python


    piv_diff = df.pivot(index="dim", columns="direction", values="diff")
    piv_time = df.pivot(index="dim", columns="direction", values="time")

    fig, ax = plt.subplots(1, 3, figsize=(12, 6))
    piv.plot(ax=ax[0], logx=True, title="Comparison between two summation")
    piv_diff.plot(ax=ax[1], logx=True, logy=True, title="Summation errors")
    piv_time.plot(ax=ax[2], logx=True, logy=True, title="Total time")
    fig.tight_layout()
    fig.savefig("plot_bench_cpu_vector_sum.png")




.. image-sg:: /auto_examples/images/sphx_glr_plot_bench_cpu_vector_sum_001.png
   :alt: Comparison between two summation, Summation errors, Total time
   :srcset: /auto_examples/images/sphx_glr_plot_bench_cpu_vector_sum_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/xadupre/.local/lib/python3.10/site-packages/pandas/plotting/_matplotlib/core.py:747: UserWarning: Data has no positive values, and therefore cannot be log-scaled.
      labels = axis.get_majorticklabels() + axis.get_minorticklabels()




.. GENERATED FROM PYTHON SOURCE LINES 75-78

The summation by rows is much faster as expected.
That explains why it is usually more efficient to
transpose the first matrix before a matrix multiplication.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 19.388 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_cpu_vector_sum.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_cpu_vector_sum.ipynb <plot_bench_cpu_vector_sum.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_cpu_vector_sum.py <plot_bench_cpu_vector_sum.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
