
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_op_einsum.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_op_einsum.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_op_einsum.py:


.. _l-plot-op-einsum:

Compares implementations of Einsum
==================================

This example compares different equations for function :func:`numpy.einsum`.
It compares *numpy* implementation to a custom implementation,
:epkg:`onnxruntime` implementation and :epkg:`opt-einsum` optimisation.
If available, :epkg:`tensorflow` and :epkg:`pytorch` are included as well.
The custom implementation does not do any transpose.
It uses parallelisation and SIMD optimization when the summation
happens on the last axis of both matrices. It only implements
matrix multiplication. We also measure the improvment made with
function :func:`einsum <onnx_extended.tools.einsum.einsum_fct.einsum>`.

Available optimisation
++++++++++++++++++++++

The code shows which optimisation is used for the custom
implementation, *AVX* or *SSE* and the number of available processors,
equal to the default number of used threads to parallelize.

.. GENERATED FROM PYTHON SOURCE LINES 24-47

.. code-block:: Python

    import logging
    import numpy
    import pandas
    import matplotlib.pyplot as plt
    from onnx import TensorProto
    from onnx.helper import (
        make_model,
        make_graph,
        make_node,
        make_tensor_value_info,
        make_opsetid,
    )
    from onnxruntime import InferenceSession
    from onnx_extended.ext_test_case import measure_time, unit_test_going
    from tqdm import tqdm
    from opt_einsum import contract
    from onnx_extended.tools.einsum.einsum_fct import _einsum

    logging.getLogger("matplotlib.font_manager").setLevel(logging.ERROR)
    logging.getLogger("matplotlib.ticker").setLevel(logging.ERROR)
    logging.getLogger("PIL.PngImagePlugin").setLevel(logging.ERROR)
    logging.getLogger("onnx-extended").setLevel(logging.ERROR)








.. GENERATED FROM PYTHON SOURCE LINES 48-50

Einsum: common code
+++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 50-212

.. code-block:: Python


    try:
        from tensorflow import einsum as tf_einsum, convert_to_tensor
    except ImportError:
        tf_einsum = None
    try:
        from torch import einsum as torch_einsum, from_numpy
    except ImportError:
        torch_einsum = None


    def build_ort_einsum(equation, op_version=18):  # opset=13, 14, ...
        onx = make_model(
            make_graph(
                [make_node("Einsum", ["x", "y"], ["z"], equation=equation)],
                equation,
                [
                    make_tensor_value_info("x", TensorProto.FLOAT, None),
                    make_tensor_value_info("y", TensorProto.FLOAT, None),
                ],
                [make_tensor_value_info("z", TensorProto.FLOAT, None)],
            ),
            opset_imports=[make_opsetid("", op_version)],
        )
        sess = InferenceSession(onx.SerializeToString(), providers=["CPUExecutionProvider"])
        return lambda x, y: sess.run(None, {"x": x, "y": y})


    def build_ort_decomposed(equation, op_version=18):  # opset=13, 14, ...
        cache = _einsum(
            equation,
            numpy.float32,
            opset=op_version,
            optimize=True,
            verbose=True,
            runtime="python",
        )
        if not hasattr(cache, "onnx_"):
            cache.build()
        sess = InferenceSession(
            cache.onnx_.SerializeToString(), providers=["CPUExecutionProvider"]
        )
        return lambda x, y: sess.run(None, {"X0": x, "X1": y})


    def loop_einsum_eq(fct, equation, xs, ys):
        for x, y in zip(xs, ys):
            fct(equation, x, y)


    def loop_einsum_eq_th(fct, equation, xs, ys):
        for x, y in zip(xs, ys):
            fct(equation, x, y, nthread=-1)


    def loop_einsum(fct, xs, ys):
        for x, y in zip(xs, ys):
            fct(x, y)


    def timeit(stmt, ctx, dim, name):
        obs = measure_time(stmt, div_by_number=True, context=ctx, repeat=5, number=1)
        obs["dim"] = dim
        obs["fct"] = name
        return obs


    def benchmark_equation(equation):
        # equations
        ort_einsum = build_ort_einsum(equation)
        ort_einsum_decomposed = build_ort_decomposed(equation)
        res = []
        for dim in tqdm([8, 16, 32, 64, 100, 128, 200, 256]):  # , 500, 512]):
            if unit_test_going() and dim > 64:
                break
            xs = [numpy.random.rand(2, dim, 12, 64).astype(numpy.float32) for _ in range(5)]
            ys = [numpy.random.rand(2, dim, 12, 64).astype(numpy.float32) for _ in range(5)]

            # numpy
            ctx = dict(
                equation=equation,
                xs=xs,
                ys=ys,
                einsum=numpy.einsum,
                loop_einsum=loop_einsum,
                loop_einsum_eq=loop_einsum_eq,
                loop_einsum_eq_th=loop_einsum_eq_th,
            )
            obs = timeit(
                "loop_einsum_eq(einsum, equation, xs, ys)", ctx, dim, "numpy.einsum"
            )
            res.append(obs)

            # opt-einsum
            ctx["einsum"] = contract
            obs = timeit("loop_einsum_eq(einsum, equation, xs, ys)", ctx, dim, "opt-einsum")
            res.append(obs)

            # onnxruntime
            ctx["einsum"] = ort_einsum
            obs = timeit("loop_einsum(einsum, xs, ys)", ctx, dim, "ort-einsum")
            res.append(obs)

            # onnxruntime decomposed
            ctx["einsum"] = ort_einsum_decomposed
            obs = timeit("loop_einsum(einsum, xs, ys)", ctx, dim, "ort-dec")
            res.append(obs)

            if tf_einsum is not None:
                # tensorflow
                ctx["einsum"] = tf_einsum
                ctx["xs"] = [convert_to_tensor(x) for x in xs]
                ctx["ys"] = [convert_to_tensor(y) for y in ys]
                obs = timeit(
                    "loop_einsum_eq(einsum, equation, xs, ys)", ctx, dim, "tf-einsum"
                )
                res.append(obs)

            if torch_einsum is not None:
                # torch
                ctx["einsum"] = torch_einsum
                ctx["xs"] = [from_numpy(x) for x in xs]
                ctx["ys"] = [from_numpy(y) for y in ys]
                obs = timeit(
                    "loop_einsum_eq(einsum, equation, xs, ys)", ctx, dim, "torch-einsum"
                )
                res.append(obs)

        # Dataframes
        df = pandas.DataFrame(res)
        piv = df.pivot(index="dim", columns="fct", values="average")

        rs = piv.copy()
        for c in ["ort-einsum", "ort-dec", "tf-einsum", "torch-einsum", "opt-einsum"]:
            if c not in rs.columns:
                continue
            rs[c] = rs["numpy.einsum"] / rs[c]
        rs["numpy.einsum"] = 1.0

        # Graphs.
        fig, ax = plt.subplots(1, 2, figsize=(14, 5))
        piv.plot(
            logx=True,
            logy=True,
            ax=ax[0],
            title=f"Einsum benchmark\n{equation} -- (2, N, 12, 64) lower better",
        )
        ax[0].legend(prop={"size": 9})
        rs.plot(
            logx=True,
            logy=True,
            ax=ax[1],
            title="Einsum Speedup, baseline=numpy\n%s -- (2, N, 12, 64)"
            " higher better" % equation,
        )
        ax[1].plot([min(rs.index), max(rs.index)], [0.5, 0.5], "g--")
        ax[1].plot([min(rs.index), max(rs.index)], [2.0, 2.0], "g--")
        ax[1].legend(prop={"size": 9})

        return df, rs, ax









.. GENERATED FROM PYTHON SOURCE LINES 213-226

First equation: bsnh,btnh->bnts
+++++++++++++++++++++++++++++++

The decomposition of this equation without einsum function gives
the following.

 .. gdot::
      :script:

      from onnx_extended.tools.einsum import decompose_einsum_equation
      dec = decompose_einsum_equation(
          'bsnh,btnh->bnts', strategy='numpy', clean=True)
      print(dec.to_dot())

.. GENERATED FROM PYTHON SOURCE LINES 226-233

.. code-block:: Python


    dfs = []
    equation = "bsnh,btnh->bnts"
    df, piv, ax = benchmark_equation(equation)
    df.pivot(index="fct", columns="dim", values="average")
    dfs.append(df)




.. image-sg:: /auto_examples/images/sphx_glr_plot_op_einsum_001.png
   :alt: Einsum benchmark bsnh,btnh->bnts -- (2, N, 12, 64) lower better, Einsum Speedup, baseline=numpy bsnh,btnh->bnts -- (2, N, 12, 64) higher better
   :srcset: /auto_examples/images/sphx_glr_plot_op_einsum_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/121 [00:00<?, ?it/s]    0.019 rtbest='bsnh,btnh->bnts':   0%|          | 0/121 [00:00<?, ?it/s]    0.019 rtbest='bsnh,btnh->bnts':   1%|          | 1/121 [00:00<00:15,  7.99it/s]    0.013 rtbest='bsnh,btnh->bnts':   1%|          | 1/121 [00:00<00:15,  7.99it/s]    0.013 rtbest='btnh,bsnh->bnst':   1%|          | 1/121 [00:00<00:15,  7.99it/s]    0.012 rtbest='bnsh,btsh->bstn':   1%|          | 1/121 [00:00<00:15,  7.99it/s]    0.012 rtbest='bnth,bsth->btsn':   1%|          | 1/121 [00:00<00:15,  7.99it/s]    0.012 rtbest='bnth,bsth->btsn':   7%|▋         | 8/121 [00:00<00:03, 37.64it/s]    0.012 rtbest='bnth,bsth->btsn':  11%|█         | 13/121 [00:00<00:02, 41.64it/s]    0.011 rtbest='bhsn,btsn->bsth':  11%|█         | 13/121 [00:00<00:02, 41.64it/s]    0.011 rtbest='bhsn,btsn->bsth':  16%|█▌        | 19/121 [00:00<00:02, 46.41it/s]    0.011 rtbest='bsnt,bhnt->bnhs':  16%|█▌        | 19/121 [00:00<00:02, 46.41it/s]    0.01 rtbest='hsnb,htnb->hnts':  16%|█▌        | 19/121 [00:00<00:02, 46.41it/s]     0.01 rtbest='hsnb,htnb->hnts':  21%|██▏       | 26/121 [00:00<00:01, 52.60it/s]    0.0099 rtbest='hnsb,htsb->hstn':  21%|██▏       | 26/121 [00:00<00:01, 52.60it/s]    0.0098 rtbest='hstb,hntb->htns':  21%|██▏       | 26/121 [00:00<00:01, 52.60it/s]    0.0098 rtbest='hstb,hntb->htns':  28%|██▊       | 34/121 [00:00<00:01, 58.11it/s]    0.0098 rtbest='hstb,hntb->htns':  33%|███▎      | 40/121 [00:00<00:01, 53.68it/s]    0.0098 rtbest='stnb,shnb->snht':  33%|███▎      | 40/121 [00:00<00:01, 53.68it/s]    0.0096 rtbest='sntb,shtb->sthn':  33%|███▎      | 40/121 [00:00<00:01, 53.68it/s]    0.0096 rtbest='sntb,shtb->sthn':  40%|███▉      | 48/121 [00:00<00:01, 59.99it/s]    0.0096 rtbest='sntb,shtb->sthn':  47%|████▋     | 57/121 [00:01<00:00, 66.22it/s]    0.0096 rtbest='sntb,shtb->sthn':  53%|█████▎    | 64/121 [00:01<00:00, 62.38it/s]    0.0096 rtbest='sntb,shtb->sthn':  59%|█████▊    | 71/121 [00:01<00:00, 63.15it/s]    0.0096 rtbest='sntb,shtb->sthn':  64%|██████▍   | 78/121 [00:01<00:00, 62.52it/s]    0.0096 rtbest='sntb,shtb->sthn':  70%|███████   | 85/121 [00:01<00:00, 59.80it/s]    0.0096 rtbest='sntb,shtb->sthn':  76%|███████▌  | 92/121 [00:01<00:00, 59.42it/s]    0.0096 rtbest='sntb,shtb->sthn':  81%|████████  | 98/121 [00:01<00:00, 54.86it/s]    0.0096 rtbest='sntb,shtb->sthn':  86%|████████▌ | 104/121 [00:01<00:00, 55.23it/s]    0.0096 rtbest='sntb,shtb->sthn':  91%|█████████ | 110/121 [00:02<00:00, 49.35it/s]    0.0096 rtbest='sntb,shtb->sthn':  97%|█████████▋| 117/121 [00:02<00:00, 50.92it/s]    0.0096 rtbest='sntb,shtb->sthn': 100%|██████████| 121/121 [00:02<00:00, 54.00it/s]
      0%|          | 0/8 [00:00<?, ?it/s]     38%|███▊      | 3/8 [00:00<00:00, 16.94it/s]     62%|██████▎   | 5/8 [00:01<00:00,  3.99it/s]     75%|███████▌  | 6/8 [00:02<00:01,  1.81it/s]     88%|████████▊ | 7/8 [00:05<00:01,  1.17s/it]    100%|██████████| 8/8 [00:09<00:00,  2.02s/it]    100%|██████████| 8/8 [00:09<00:00,  1.20s/it]




.. GENERATED FROM PYTHON SOURCE LINES 234-250

Second equation: bshn,bthn->bnts
++++++++++++++++++++++++++++++++

The summation does not happen on the last axis but
on the previous one.
Is it worth transposing before doing the summation...
The decomposition of this equation without einsum function gives
the following.

 .. gdot::
      :script:

      from onnx_extended.tools.einsum import decompose_einsum_equation
      dec = decompose_einsum_equation(
          'bshn,bthn->bnts', strategy='numpy', clean=True)
      print(dec.to_dot())

.. GENERATED FROM PYTHON SOURCE LINES 250-256

.. code-block:: Python


    equation = "bshn,bthn->bnts"
    df, piv, ax = benchmark_equation(equation)
    df.pivot(index="fct", columns="dim", values="average")
    dfs.append(df)




.. image-sg:: /auto_examples/images/sphx_glr_plot_op_einsum_002.png
   :alt: Einsum benchmark bshn,bthn->bnts -- (2, N, 12, 64) lower better, Einsum Speedup, baseline=numpy bshn,bthn->bnts -- (2, N, 12, 64) higher better
   :srcset: /auto_examples/images/sphx_glr_plot_op_einsum_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/121 [00:00<?, ?it/s]    0.011 rtbest='bshn,bthn->bnts':   0%|          | 0/121 [00:00<?, ?it/s]    0.011 rtbest='bshn,bthn->bnts':   5%|▍         | 6/121 [00:00<00:01, 57.51it/s]    0.011 rtbest='bshn,bthn->bnts':  10%|▉         | 12/121 [00:00<00:02, 49.66it/s]    0.01 rtbest='bhtn,bstn->bnsh':  10%|▉         | 12/121 [00:00<00:02, 49.66it/s]     0.0096 rtbest='bhst,bnst->btnh':  10%|▉         | 12/121 [00:00<00:02, 49.66it/s]    0.0096 rtbest='bhst,bnst->btnh':  15%|█▍        | 18/121 [00:00<00:02, 51.31it/s]    0.0094 rtbest='btsn,bhsn->bnht':  15%|█▍        | 18/121 [00:00<00:02, 51.31it/s]    0.0093 rtbest='hsbn,htbn->hnts':  15%|█▍        | 18/121 [00:00<00:02, 51.31it/s]    0.0093 rtbest='hsbn,htbn->hnts':  21%|██▏       | 26/121 [00:00<00:01, 61.46it/s]    0.0092 rtbest='htbn,hsbn->hnst':  21%|██▏       | 26/121 [00:00<00:01, 61.46it/s]    0.0092 rtbest='htbn,hsbn->hnst':  27%|██▋       | 33/121 [00:00<00:01, 57.76it/s]    0.0092 rtbest='htbn,hsbn->hnst':  32%|███▏      | 39/121 [00:00<00:01, 57.00it/s]    0.0092 rtbest='htbn,hsbn->hnst':  40%|███▉      | 48/121 [00:00<00:01, 64.55it/s]    0.0092 rtbest='htbn,hsbn->hnst':  46%|████▋     | 56/121 [00:00<00:00, 68.82it/s]    0.0092 rtbest='htbn,hsbn->hnst':  52%|█████▏    | 63/121 [00:01<00:00, 68.17it/s]    0.0092 rtbest='htbn,hsbn->hnst':  58%|█████▊    | 70/121 [00:01<00:00, 59.66it/s]    0.0092 rtbest='htbn,hsbn->hnst':  64%|██████▎   | 77/121 [00:01<00:00, 60.08it/s]    0.0092 rtbest='htbn,hsbn->hnst':  69%|██████▉   | 84/121 [00:01<00:00, 58.91it/s]    0.0092 rtbest='htbn,hsbn->hnst':  76%|███████▌  | 92/121 [00:01<00:00, 63.26it/s]    0.0092 rtbest='htbn,hsbn->hnst':  83%|████████▎ | 100/121 [00:01<00:00, 67.07it/s]    0.0092 rtbest='htbn,hsbn->hnst':  88%|████████▊ | 107/121 [00:01<00:00, 64.84it/s]    0.0092 rtbest='htbn,hsbn->hnst':  94%|█████████▍| 114/121 [00:01<00:00, 61.85it/s]    0.0092 rtbest='htbn,hsbn->hnst': 100%|██████████| 121/121 [00:01<00:00, 61.89it/s]    0.0092 rtbest='htbn,hsbn->hnst': 100%|██████████| 121/121 [00:01<00:00, 61.49it/s]
      0%|          | 0/8 [00:00<?, ?it/s]     38%|███▊      | 3/8 [00:00<00:00, 14.15it/s]     62%|██████▎   | 5/8 [00:01<00:01,  2.87it/s]     75%|███████▌  | 6/8 [00:02<00:01,  1.60it/s]     88%|████████▊ | 7/8 [00:06<00:01,  1.41s/it]    100%|██████████| 8/8 [00:12<00:00,  2.63s/it]    100%|██████████| 8/8 [00:12<00:00,  1.53s/it]




.. GENERATED FROM PYTHON SOURCE LINES 257-272

Third equation: bhsn,bhtn->bnts
+++++++++++++++++++++++++++++++

The summation does not happen on the last axis but
on the second one. It is worth transposing before multiplying.
The decomposition of this equation without einsum function gives
the following.

 .. gdot::
      :script:

      from onnx_extended.tools.einsum import decompose_einsum_equation
      dec = decompose_einsum_equation(
          'bhsn,bhtn->bnts', strategy='numpy', clean=True)
      print(dec.to_dot())

.. GENERATED FROM PYTHON SOURCE LINES 272-278

.. code-block:: Python


    equation = "bhsn,bhtn->bnts"
    df, piv, ax = benchmark_equation(equation)
    df.pivot(index="fct", columns="dim", values="average")
    dfs.append(df)




.. image-sg:: /auto_examples/images/sphx_glr_plot_op_einsum_003.png
   :alt: Einsum benchmark bhsn,bhtn->bnts -- (2, N, 12, 64) lower better, Einsum Speedup, baseline=numpy bhsn,bhtn->bnts -- (2, N, 12, 64) higher better
   :srcset: /auto_examples/images/sphx_glr_plot_op_einsum_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/121 [00:00<?, ?it/s]    0.02 rtbest='bhsn,bhtn->bnts':   0%|          | 0/121 [00:00<?, ?it/s]    0.012 rtbest='bhsn,bhtn->bnts':   0%|          | 0/121 [00:00<?, ?it/s]    0.012 rtbest='bhsn,bhtn->bnts':   5%|▍         | 6/121 [00:00<00:02, 51.81it/s]    0.012 rtbest='bhsn,bhtn->bnts':  10%|▉         | 12/121 [00:00<00:02, 42.20it/s]    0.012 rtbest='bhsn,bhtn->bnts':  14%|█▍        | 17/121 [00:00<00:02, 41.11it/s]    0.012 rtbest='bhsn,bhtn->bnts':  18%|█▊        | 22/121 [00:00<00:02, 42.39it/s]    0.012 rtbest='bhsn,bhtn->bnts':  22%|██▏       | 27/121 [00:00<00:02, 42.31it/s]    0.012 rtbest='bhsn,bhtn->bnts':  26%|██▋       | 32/121 [00:00<00:02, 42.91it/s]    0.012 rtbest='bhsn,bhtn->bnts':  31%|███       | 37/121 [00:00<00:01, 43.04it/s]    0.012 rtbest='bhsn,bhtn->bnts':  35%|███▍      | 42/121 [00:01<00:02, 34.86it/s]    0.012 rtbest='bhsn,bhtn->bnts':  38%|███▊      | 46/121 [00:01<00:02, 31.00it/s]    0.012 rtbest='bhsn,bhtn->bnts':  41%|████▏     | 50/121 [00:01<00:02, 30.77it/s]    0.012 rtbest='bhsn,bhtn->bnts':  45%|████▍     | 54/121 [00:01<00:02, 32.02it/s]    0.012 rtbest='bhsn,bhtn->bnts':  48%|████▊     | 58/121 [00:01<00:01, 33.01it/s]    0.012 rtbest='bhsn,bhtn->bnts':  51%|█████     | 62/121 [00:01<00:01, 32.67it/s]    0.012 rtbest='bhsn,bhtn->bnts':  55%|█████▍    | 66/121 [00:01<00:01, 33.11it/s]    0.012 rtbest='bhsn,bhtn->bnts':  60%|█████▉    | 72/121 [00:01<00:01, 38.00it/s]    0.012 rtbest='bhsn,bhtn->bnts':  63%|██████▎   | 76/121 [00:02<00:01, 37.47it/s]    0.012 rtbest='bhsn,bhtn->bnts':  66%|██████▌   | 80/121 [00:02<00:01, 31.11it/s]    0.012 rtbest='bhsn,bhtn->bnts':  69%|██████▉   | 84/121 [00:02<00:01, 31.23it/s]    0.012 rtbest='bhsn,bhtn->bnts':  74%|███████▎  | 89/121 [00:02<00:00, 34.33it/s]    0.012 rtbest='bhsn,bhtn->bnts':  79%|███████▊  | 95/121 [00:02<00:00, 39.47it/s]    0.012 rtbest='hnts,hnbs->hsbt':  79%|███████▊  | 95/121 [00:02<00:00, 39.47it/s]    0.011 rtbest='hnst,hnbt->htbs':  79%|███████▊  | 95/121 [00:02<00:00, 39.47it/s]    0.011 rtbest='hstn,hsbn->hnbt':  79%|███████▊  | 95/121 [00:02<00:00, 39.47it/s]    0.011 rtbest='htsn,htbn->hnbs':  79%|███████▊  | 95/121 [00:02<00:00, 39.47it/s]    0.011 rtbest='htsn,htbn->hnbs':  84%|████████▍ | 102/121 [00:02<00:00, 46.55it/s]    0.011 rtbest='htns,htbs->hsbn':  84%|████████▍ | 102/121 [00:02<00:00, 46.55it/s]    0.011 rtbest='htns,htbs->hsbn':  89%|████████▉ | 108/121 [00:02<00:00, 45.68it/s]    0.011 rtbest='htns,htbs->hsbn':  93%|█████████▎| 113/121 [00:02<00:00, 45.20it/s]    0.011 rtbest='htns,htbs->hsbn':  98%|█████████▊| 119/121 [00:03<00:00, 46.73it/s]    0.011 rtbest='htns,htbs->hsbn': 100%|██████████| 121/121 [00:03<00:00, 38.53it/s]
      0%|          | 0/8 [00:00<?, ?it/s]     25%|██▌       | 2/8 [00:00<00:00, 17.24it/s]     50%|█████     | 4/8 [00:00<00:00,  6.12it/s]     62%|██████▎   | 5/8 [00:01<00:00,  3.98it/s]     75%|███████▌  | 6/8 [00:01<00:00,  3.15it/s]     88%|████████▊ | 7/8 [00:02<00:00,  2.23it/s]    100%|██████████| 8/8 [00:03<00:00,  1.64it/s]    100%|██████████| 8/8 [00:03<00:00,  2.45it/s]




.. GENERATED FROM PYTHON SOURCE LINES 279-285

Conclusion
++++++++++

pytorch seems quite efficient on these examples.
The custom implementation was a way to investigate
the implementation of einsum and find some ways to optimize it.

.. GENERATED FROM PYTHON SOURCE LINES 285-293

.. code-block:: Python


    merged = pandas.concat(dfs)
    name = "einsum"
    merged.to_csv(f"plot_{name}.csv", index=False)
    merged.to_excel(f"plot_{name}.xlsx", index=False)
    plt.savefig(f"plot_{name}.png")

    # plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_op_einsum_004.png
   :alt: plot op einsum
   :srcset: /auto_examples/images/sphx_glr_plot_op_einsum_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.764 seconds)


.. _sphx_glr_download_auto_examples_plot_op_einsum.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_op_einsum.ipynb <plot_op_einsum.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_op_einsum.py <plot_op_einsum.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
