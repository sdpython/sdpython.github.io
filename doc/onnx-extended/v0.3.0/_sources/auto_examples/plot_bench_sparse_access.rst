
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_sparse_access.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_bench_sparse_access.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_sparse_access.py:


Evaluating random access for sparse
===================================

Whenever computing the prediction of a tree with a sparse tensor,
is it faster to density first and then to compute the prediction or to
keep the tensor in its sparse representation and do look up?
The parameter *nrnd* can be seen as the depth of a tree.

.. GENERATED FROM PYTHON SOURCE LINES 11-45

.. code-block:: Python


    import itertools
    import numpy as np
    from tqdm import tqdm
    import matplotlib.pyplot as plt
    from pandas import DataFrame
    from onnx_extended.ext_test_case import unit_test_going
    from onnx_extended.args import get_parsed_args
    from onnx_extended.validation.cpu._validation import evaluate_sparse


    expose = "repeat,warmup,nrows,ncols,sparsity,nrnd,ntimes"
    script_args = get_parsed_args(
        "plot_bench_sparse_access",
        description=__doc__,
        nrows=(10 if unit_test_going() else 100, "number of rows"),
        ncols=(10 if unit_test_going() else 100000, "number of columns"),
        ntimes=(
            "1" if unit_test_going() else "2,4,8",
            "number of times to do nrnd random accesses per row",
        ),
        sparsity=(
            "0.1,0.2" if unit_test_going() else "0.75,0.8,0.9,0.95,0.99,0.999,0.9999",
            "sparsities to try",
        ),
        repeat=2 if unit_test_going() else 5,
        warmup=2 if unit_test_going() else 2,
        nrnd=(10, "number of random features to access"),
        expose=expose,
    )

    for att in sorted(expose.split(",")):
        print(f"{att}={getattr(script_args, att)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ncols=100000
    nrnd=10
    nrows=100
    ntimes=2,4,8
    repeat=5
    sparsity=0.75,0.8,0.9,0.95,0.99,0.999,0.9999
    warmup=2




.. GENERATED FROM PYTHON SOURCE LINES 46-48

Sparse tensor
+++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 48-67

.. code-block:: Python



    def make_sparse_random_tensor(n_rows: int, n_cols: int, sparsity: float):
        t = np.random.rand(n_rows, n_cols).astype(np.float32)
        m = np.random.rand(n_rows, n_cols).astype(np.float32)
        t[m <= sparsity] = 0
        return t


    sparsity = list(map(float, script_args.sparsity.split(",")))
    ntimes = list(map(int, script_args.ntimes.split(",")))
    t = make_sparse_random_tensor(script_args.nrows, script_args.ncols, sparsity[0])
    ev = evaluate_sparse(t, script_args.nrnd, ntimes[0], script_args.repeat, 3)
    print(f"dense:  initialization:{ev[0][0]:1.3g}")
    print(f"                access:{ev[0][1]:1.3g}")
    print(f"sparse: initialization:{ev[1][0]:1.3g}")
    print(f"                access:{ev[1][1]:1.3g}")
    print(f"Ratio sparse/dense: {ev[1][1] / ev[0][1]}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    dense:  initialization:0.0124
                    access:1.45e-05
    sparse: initialization:0.00861
                    access:0.000447
    Ratio sparse/dense: 30.932778923189755




.. GENERATED FROM PYTHON SOURCE LINES 68-69

If > 1, sparse is slower.

.. GENERATED FROM PYTHON SOURCE LINES 71-74

Try sparsity
++++++++++++


.. GENERATED FROM PYTHON SOURCE LINES 74-100

.. code-block:: Python


    tries = list(itertools.product(ntimes, sparsity))

    data = []
    for nt, sp in tqdm(tries):
        t = make_sparse_random_tensor(script_args.nrows, script_args.ncols, sp)
        ev = evaluate_sparse(t, script_args.nrnd, nt, script_args.repeat, 3)
        obs = dict(
            dense0=ev[0][0],
            dense1=ev[0][1],
            dense=ev[0][0] + ev[0][1],
            sparse0=ev[1][0],
            sparse1=ev[1][1],
            sparse=ev[1][0] + ev[1][1],
            sparsity=sp,
            rows=t.shape[0],
            cols=t.shape[1],
            repeat=script_args.repeat,
            random=script_args.nrnd,
            ntimes=nt,
        )
        data.append(obs)

    df = DataFrame(data)
    print(df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/21 [00:00<?, ?it/s]      5%|▍         | 1/21 [00:00<00:10,  1.94it/s]     10%|▉         | 2/21 [00:00<00:09,  2.01it/s]     14%|█▍        | 3/21 [00:01<00:08,  2.10it/s]     19%|█▉        | 4/21 [00:01<00:07,  2.26it/s]     24%|██▍       | 5/21 [00:02<00:06,  2.42it/s]     29%|██▊       | 6/21 [00:02<00:05,  2.56it/s]     33%|███▎      | 7/21 [00:02<00:05,  2.68it/s]     38%|███▊      | 8/21 [00:03<00:05,  2.40it/s]     43%|████▎     | 9/21 [00:03<00:05,  2.28it/s]     48%|████▊     | 10/21 [00:04<00:04,  2.30it/s]     52%|█████▏    | 11/21 [00:04<00:04,  2.36it/s]     57%|█████▋    | 12/21 [00:05<00:03,  2.47it/s]     62%|██████▏   | 13/21 [00:05<00:03,  2.60it/s]     67%|██████▋   | 14/21 [00:05<00:02,  2.69it/s]     71%|███████▏  | 15/21 [00:06<00:02,  2.41it/s]     76%|███████▌  | 16/21 [00:06<00:02,  2.27it/s]     81%|████████  | 17/21 [00:07<00:01,  2.52it/s]     86%|████████▌ | 18/21 [00:07<00:01,  2.82it/s]     90%|█████████ | 19/21 [00:07<00:00,  3.10it/s]     95%|█████████▌| 20/21 [00:07<00:00,  3.40it/s]    100%|██████████| 21/21 [00:08<00:00,  3.65it/s]    100%|██████████| 21/21 [00:08<00:00,  2.62it/s]
          dense0    dense1     dense   sparse0   sparse1    sparse  sparsity  rows    cols  repeat  random  ntimes
    0   0.012449  0.000014  0.012463  0.008644  0.000442  0.009085    0.7500   100  100000       5      10       2
    1   0.012742  0.000013  0.012755  0.006821  0.000415  0.007235    0.8000   100  100000       5      10       2
    2   0.011694  0.000014  0.011708  0.003510  0.000341  0.003851    0.9000   100  100000       5      10       2
    3   0.009805  0.000012  0.009818  0.001791  0.000285  0.002076    0.9500   100  100000       5      10       2
    4   0.007094  0.000013  0.007107  0.000370  0.000173  0.000544    0.9900   100  100000       5      10       2
    5   0.006446  0.000012  0.006458  0.000038  0.000103  0.000141    0.9990   100  100000       5      10       2
    6   0.005919  0.000013  0.005932  0.000007  0.000047  0.000054    0.9999   100  100000       5      10       2
    7   0.012933  0.000026  0.012959  0.008619  0.000797  0.009416    0.7500   100  100000       5      10       4
    8   0.011877  0.000040  0.011917  0.006766  0.000764  0.007530    0.8000   100  100000       5      10       4
    9   0.010772  0.000026  0.010797  0.003479  0.000640  0.004118    0.9000   100  100000       5      10       4
    10  0.010452  0.000026  0.010478  0.001846  0.000516  0.002362    0.9500   100  100000       5      10       4
    11  0.006991  0.000024  0.007015  0.000334  0.000336  0.000670    0.9900   100  100000       5      10       4
    12  0.006182  0.000027  0.006208  0.000037  0.000216  0.000253    0.9990   100  100000       5      10       4
    13  0.006434  0.000026  0.006460  0.000008  0.000112  0.000120    0.9999   100  100000       5      10       4
    14  0.013455  0.000053  0.013507  0.008538  0.001440  0.009979    0.7500   100  100000       5      10       8
    15  0.012039  0.000048  0.012087  0.006845  0.001347  0.008192    0.8000   100  100000       5      10       8
    16  0.006355  0.000034  0.006389  0.002951  0.000896  0.003846    0.9000   100  100000       5      10       8
    17  0.005532  0.000031  0.005563  0.001427  0.000721  0.002148    0.9500   100  100000       5      10       8
    18  0.003989  0.000032  0.004021  0.000258  0.000515  0.000772    0.9900   100  100000       5      10       8
    19  0.003471  0.000029  0.003500  0.000027  0.000326  0.000353    0.9990   100  100000       5      10       8
    20  0.003193  0.000028  0.003221  0.000005  0.000147  0.000153    0.9999   100  100000       5      10       8




.. GENERATED FROM PYTHON SOURCE LINES 101-102

Plots

.. GENERATED FROM PYTHON SOURCE LINES 102-120

.. code-block:: Python


    nts = list(sorted(set(df.ntimes)))

    fig, ax = plt.subplots(len(nts), 2, figsize=(3 * len(nts), 10))
    for i, nt in enumerate(nts):
        sub = df[df.ntimes == nt]
        sub[["sparsity", "dense", "sparse"]].set_index("sparsity").plot(
            title=f"Dense vs Sparsity, ntimes={nt}",
            logy=True,
            ax=ax[0] if len(ax.shape) == 1 else ax[i, 0],
        )
        sub[["sparsity", "dense1", "sparse1"]].set_index("sparsity").plot(
            title="Dense vs Sparsity (access only)",
            logy=True,
            ax=ax[1] if len(ax.shape) == 1 else ax[i, 0],
        )
    fig.tight_layout()
    fig.savefig("plot_bench_sparse_access.png")



.. image-sg:: /auto_examples/images/sphx_glr_plot_bench_sparse_access_001.png
   :alt: Dense vs Sparsity (access only), Dense vs Sparsity (access only), Dense vs Sparsity (access only)
   :srcset: /auto_examples/images/sphx_glr_plot_bench_sparse_access_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 9.517 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_sparse_access.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_sparse_access.ipynb <plot_bench_sparse_access.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_sparse_access.py <plot_bench_sparse_access.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
