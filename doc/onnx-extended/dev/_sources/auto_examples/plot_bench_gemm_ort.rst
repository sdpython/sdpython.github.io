
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_gemm_ort.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_bench_gemm_ort.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_gemm_ort.py:


.. _l-example-gemm-ort-f8:


Measuring performance about Gemm with onnxruntime
=================================================

The benchmark measures the performance of Gemm for different
types and configuration. That includes a custom operator
only available on CUDA calling function :epkg:`cublasLtMatmul`.
This function offers many options.

.. GENERATED FROM PYTHON SOURCE LINES 13-99

.. code-block:: Python


    import pprint
    import platform
    from itertools import product
    import numpy
    from tqdm import tqdm
    import matplotlib.pyplot as plt
    from pandas import DataFrame, pivot_table
    from onnx import TensorProto
    from onnx.helper import (
        make_model,
        make_node,
        make_graph,
        make_tensor_value_info,
        make_opsetid,
    )
    from onnx.checker import check_model
    from onnx.numpy_helper import from_array
    from onnx.reference import ReferenceEvaluator
    from onnxruntime import InferenceSession, SessionOptions, get_available_providers
    from onnxruntime.capi._pybind_state import (
        OrtValue as C_OrtValue,
        OrtDevice as C_OrtDevice,
    )
    from onnxruntime.capi.onnxruntime_pybind11_state import (
        Fail,
        NotImplemented,
        InvalidGraph,
        InvalidArgument,
    )

    try:
        from onnx_array_api.plotting.text_plot import onnx_simple_text_plot
    except ImportError:
        onnx_simple_text_plot = str
    try:
        from onnx_extended.reference import CReferenceEvaluator
    except ImportError:
        CReferenceEvaluator = ReferenceEvaluator
    from onnx_extended.args import get_parsed_args
    from onnx_extended.ext_test_case import unit_test_going, measure_time

    try:
        from onnx_extended.validation.cuda.cuda_example_py import get_device_prop
        from onnx_extended.ortops.tutorial.cuda import get_ort_ext_libs

        has_cuda = True
    except ImportError:

        def get_device_prop():
            return {"name": "CPU"}

        def get_ort_ext_libs():
            return None

        has_cuda = False

    default_dims = (
        "32,32,32;64,64,64;128,128,128;256,256,256;"
        "400,400,400;512,512,512;1024,1024,1024"
    )
    if has_cuda:
        prop = get_device_prop()
        if prop.get("major", 0) >= 7:
            default_dims += ";2048,2048,2048;4096,4096,4096"
        if prop.get("major", 0) >= 9:
            default_dims += ";16384,16384,16384"


    script_args = get_parsed_args(
        "plot_bench_gemm_ort",
        description=__doc__,
        dims=(
            "32,32,32;64,64,64" if unit_test_going() else default_dims,
            "square matrix dimensions to try, comma separated values",
        ),
        types=(
            "FLOAT" if unit_test_going() else "FLOAT8E4M3FN,FLOAT,FLOAT16,BFLOAT16",
            "element type to teest",
        ),
        number=2 if unit_test_going() else 4,
        repeat=2 if unit_test_going() else 10,
        warmup=2 if unit_test_going() else 5,
        expose="repeat,number,warmup",
    )








.. GENERATED FROM PYTHON SOURCE LINES 100-102

Device properties
+++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 102-111

.. code-block:: Python



    if has_cuda:
        properties = get_device_prop()
        pprint.pprint(properties)
    else:
        properties = {"major": 0}






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'clockRate': 1770000,
     'computeMode': 0,
     'concurrentKernels': 1,
     'isMultiGpuBoard': 0,
     'major': 8,
     'maxThreadsPerBlock': 1024,
     'minor': 6,
     'multiProcessorCount': 10,
     'name': 'NVIDIA A2',
     'sharedMemPerBlock': 49152,
     'totalConstMem': 65536,
     'totalGlobalMem': 15614476288}




.. GENERATED FROM PYTHON SOURCE LINES 112-119

Model to benchmark
++++++++++++++++++

It includes one Gemm. The operator changes.
It can the regular Gemm, a custom Gemm from domain `com.microsoft`
or a custom implementation from domain
`onnx_extended.ortops.tutorial.cuda`.

.. GENERATED FROM PYTHON SOURCE LINES 119-199

.. code-block:: Python



    def create_model(
        mat_type=TensorProto.FLOAT, provider="CUDAExecutionProvider", domain="com.microsoft"
    ):
        A = make_tensor_value_info("A", mat_type, [None, None])
        B = make_tensor_value_info("B", mat_type, [None, None])
        outputs = [make_tensor_value_info("C", mat_type, [None, None])]
        inits = []
        if domain != "":
            if provider != "CUDAExecutionProvider":
                return None
            f8 = False
            if domain == "com.microsoft":
                op_name = "GemmFloat8"
                computeType = "CUBLAS_COMPUTE_32F"
                node_output = ["C"]
            elif mat_type == TensorProto.FLOAT:
                op_name = "CustomGemmFloat"
                computeType = "CUBLAS_COMPUTE_32F_FAST_TF32"
                node_output = ["C"]
            elif mat_type == TensorProto.FLOAT16:
                op_name = "CustomGemmFloat16"
                computeType = "CUBLAS_COMPUTE_16F"
                node_output = ["C"]
            elif mat_type in (TensorProto.FLOAT8E4M3FN, TensorProto.FLOAT8E5M2):
                f8 = True
                op_name = "CustomGemmFloat8E4M3FN"
                computeType = "CUBLAS_COMPUTE_32F"
                node_output = ["C"]
                outputs = [
                    make_tensor_value_info("C", TensorProto.FLOAT16, [None, None]),
                ]
                inits.append(from_array(numpy.array([1], dtype=numpy.float32), name="I"))
            else:
                return None
            node_kw = dict(
                alpha=1.0,
                transB=1,
                domain=domain,
                computeType=computeType,
                fastAccumulationMode=1,
                rowMajor=0 if op_name.startswith("CustomGemmFloat") else 1,
            )
            node_kw["name"] = (
                f"{mat_type}.{len(node_output)}.{len(outputs)}."
                f"{domain}..{node_kw['rowMajor']}.."
                f"{node_kw['fastAccumulationMode']}..{node_kw['computeType']}.."
                f"{f8}"
            )
            node_inputs = ["A", "B"]
            if f8:
                node_inputs.append("")
                node_inputs.extend(["I"] * 3)
            nodes = [make_node(op_name, node_inputs, node_output, **node_kw)]
        else:
            nodes = [
                make_node("Gemm", ["A", "B"], ["C"], transA=1, beta=0.0),
            ]
        graph = make_graph(nodes, "a", [A, B], outputs, inits)
        if mat_type < 16:
            # regular type
            opset, ir = 18, 8
        else:
            opset, ir = 19, 9
        onnx_model = make_model(
            graph,
            opset_imports=[
                make_opsetid("", opset),
                make_opsetid("com.microsoft", 1),
                make_opsetid("onnx_extended.ortops.tutorial.cuda", 1),
            ],
            ir_version=ir,
        )
        check_model(onnx_model)
        return onnx_model


    print(onnx_simple_text_plot(create_model()))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    opset: domain='' version=18
    opset: domain='com.microsoft' version=1
    opset: domain='onnx_extended.ortops.tutorial.cuda' version=1
    input: name='A' type=dtype('float32') shape=['', '']
    input: name='B' type=dtype('float32') shape=['', '']
    GemmFloat8[com.microsoft](A, B, alpha=1.00, computeType=b'CUBLAS_COMPUTE_32F', fastAccumulationMode=1, rowMajor=1, transB=1) -> C
    output: name='C' type=dtype('float32') shape=['', '']




.. GENERATED FROM PYTHON SOURCE LINES 200-204

A model to cast into anytype.
numpy does not support float 8. onnxruntime is used
to cast a float array into any type.
It must be called with tensor of type `OrtValue`.

.. GENERATED FROM PYTHON SOURCE LINES 204-234

.. code-block:: Python



    def create_cast(to, cuda=False):
        A = make_tensor_value_info("A", TensorProto.FLOAT, [None, None])
        C = make_tensor_value_info("C", to, [None, None])
        if cuda:
            nodes = [
                make_node("Cast", ["A"], ["Cc"], to=to),
                make_node("MemcpyFromHost", ["Cc"], ["C"]),
            ]
        else:
            nodes = [make_node("Cast", ["A"], ["C"], to=to)]
        graph = make_graph(nodes, "a", [A], [C])
        if to < 16:
            # regular type
            opset, ir = 18, 8
        else:
            opset, ir = 19, 9
        onnx_model = make_model(
            graph, opset_imports=[make_opsetid("", opset)], ir_version=ir
        )
        if not cuda:
            # OpType: MemcpyFromHost
            check_model(onnx_model)
        return onnx_model


    print(onnx_simple_text_plot(create_cast(TensorProto.FLOAT16)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    opset: domain='' version=18
    input: name='A' type=dtype('float32') shape=['', '']
    Cast(A, to=10) -> C
    output: name='C' type=dtype('float16') shape=['', '']




.. GENERATED FROM PYTHON SOURCE LINES 235-239

Performance
+++++++++++

The benchmark will run the following configurations.

.. GENERATED FROM PYTHON SOURCE LINES 239-252

.. code-block:: Python


    types = list(getattr(TensorProto, a) for a in script_args.types.split(","))
    engine = [InferenceSession, CReferenceEvaluator]
    providers = [
        ["CUDAExecutionProvider", "CPUExecutionProvider"],
        ["CPUExecutionProvider"],
    ]
    # M, N, K
    # we use multiple of 8, otherwise, float8 does not work.
    dims = [list(int(i) for i in line.split(",")) for line in script_args.dims.split(";")]
    domains = ["onnx_extended.ortops.tutorial.cuda", "", "com.microsoft"]









.. GENERATED FROM PYTHON SOURCE LINES 253-254

Let's cache the matrices involved.

.. GENERATED FROM PYTHON SOURCE LINES 254-309

.. code-block:: Python



    def to_ort_value(m):
        device = C_OrtDevice(C_OrtDevice.cpu(), C_OrtDevice.default_memory(), 0)
        ort_value = C_OrtValue.ortvalue_from_numpy(m, device)
        return ort_value


    def cached_inputs(dims, types):
        matrices = {}
        matrices_cuda = {}
        pbar = tqdm(list(product(dims, types)))
        for dim, tt in pbar:
            m, n, k = dim
            pbar.set_description(f"t={tt} dim={dim}")
            for i, j in [(m, k), (k, n), (k, m)]:
                if (tt, i, j) in matrices:
                    continue
                # CPU
                try:
                    sess = InferenceSession(
                        create_cast(tt).SerializeToString(),
                        providers=["CPUExecutionProvider"],
                    )
                    cpu = True
                except (InvalidGraph, InvalidArgument, NotImplemented):
                    # not support by this version of onnxruntime
                    cpu = False

                if cpu:
                    vect = (numpy.random.randn(i, j) * 10).astype(numpy.float32)
                    ov = to_ort_value(vect)
                    ovtt = sess._sess.run_with_ort_values({"A": ov}, ["C"], None)[0]
                    matrices[tt, i, j] = ovtt
                else:
                    continue

                # CUDA
                if "CUDAExecutionProvider" not in get_available_providers():
                    # No CUDA
                    continue
                sess = InferenceSession(
                    create_cast(tt, cuda=True).SerializeToString(),
                    providers=["CUDAExecutionProvider", "CPUExecutionProvider"],
                )
                vect = (numpy.random.randn(i, j) * 10).astype(numpy.float32)
                ov = to_ort_value(vect)
                ovtt = sess._sess.run_with_ort_values({"A": ov}, ["C"], None)[0]
                matrices_cuda[tt, i, j] = ovtt
        return matrices, matrices_cuda


    matrices, matrices_cuda = cached_inputs(dims, types)
    print(f"{len(matrices)} matrices were created.")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/36 [00:00<?, ?it/s]    t=17 dim=[32, 32, 32]:   0%|          | 0/36 [00:00<?, ?it/s]    t=1 dim=[32, 32, 32]:   0%|          | 0/36 [00:00<?, ?it/s]     t=10 dim=[32, 32, 32]:   0%|          | 0/36 [00:00<?, ?it/s]    t=16 dim=[32, 32, 32]:   0%|          | 0/36 [00:00<?, ?it/s]    t=16 dim=[32, 32, 32]:  11%|█         | 4/36 [00:00<00:00, 34.65it/s]    t=17 dim=[64, 64, 64]:  11%|█         | 4/36 [00:00<00:00, 34.65it/s]    t=1 dim=[64, 64, 64]:  11%|█         | 4/36 [00:00<00:00, 34.65it/s]     t=10 dim=[64, 64, 64]:  11%|█         | 4/36 [00:00<00:00, 34.65it/s]    t=16 dim=[64, 64, 64]:  11%|█         | 4/36 [00:00<00:00, 34.65it/s]    t=16 dim=[64, 64, 64]:  22%|██▏       | 8/36 [00:00<00:00, 33.12it/s]    t=17 dim=[128, 128, 128]:  22%|██▏       | 8/36 [00:00<00:00, 33.12it/s]    t=1 dim=[128, 128, 128]:  22%|██▏       | 8/36 [00:00<00:00, 33.12it/s]     t=10 dim=[128, 128, 128]:  22%|██▏       | 8/36 [00:00<00:00, 33.12it/s]    t=16 dim=[128, 128, 128]:  22%|██▏       | 8/36 [00:00<00:00, 33.12it/s]    t=16 dim=[128, 128, 128]:  33%|███▎      | 12/36 [00:00<00:00, 26.13it/s]    t=17 dim=[256, 256, 256]:  33%|███▎      | 12/36 [00:00<00:00, 26.13it/s]    t=1 dim=[256, 256, 256]:  33%|███▎      | 12/36 [00:00<00:00, 26.13it/s]     t=10 dim=[256, 256, 256]:  33%|███▎      | 12/36 [00:00<00:00, 26.13it/s]    t=10 dim=[256, 256, 256]:  42%|████▏     | 15/36 [00:00<00:00, 27.08it/s]    t=16 dim=[256, 256, 256]:  42%|████▏     | 15/36 [00:00<00:00, 27.08it/s]    t=17 dim=[400, 400, 400]:  42%|████▏     | 15/36 [00:00<00:00, 27.08it/s]    t=1 dim=[400, 400, 400]:  42%|████▏     | 15/36 [00:00<00:00, 27.08it/s]     t=10 dim=[400, 400, 400]:  42%|████▏     | 15/36 [00:00<00:00, 27.08it/s]    t=10 dim=[400, 400, 400]:  53%|█████▎    | 19/36 [00:00<00:00, 29.57it/s]    t=16 dim=[400, 400, 400]:  53%|█████▎    | 19/36 [00:00<00:00, 29.57it/s]    t=17 dim=[512, 512, 512]:  53%|█████▎    | 19/36 [00:00<00:00, 29.57it/s]    t=1 dim=[512, 512, 512]:  53%|█████▎    | 19/36 [00:00<00:00, 29.57it/s]     t=10 dim=[512, 512, 512]:  53%|█████▎    | 19/36 [00:00<00:00, 29.57it/s]    t=10 dim=[512, 512, 512]:  64%|██████▍   | 23/36 [00:00<00:00, 21.54it/s]    t=16 dim=[512, 512, 512]:  64%|██████▍   | 23/36 [00:00<00:00, 21.54it/s]    t=17 dim=[1024, 1024, 1024]:  64%|██████▍   | 23/36 [00:00<00:00, 21.54it/s]    t=1 dim=[1024, 1024, 1024]:  64%|██████▍   | 23/36 [00:01<00:00, 21.54it/s]     t=1 dim=[1024, 1024, 1024]:  72%|███████▏  | 26/36 [00:01<00:00, 18.24it/s]    t=10 dim=[1024, 1024, 1024]:  72%|███████▏  | 26/36 [00:01<00:00, 18.24it/s]    t=16 dim=[1024, 1024, 1024]:  72%|███████▏  | 26/36 [00:01<00:00, 18.24it/s]    t=17 dim=[2048, 2048, 2048]:  72%|███████▏  | 26/36 [00:01<00:00, 18.24it/s]    t=17 dim=[2048, 2048, 2048]:  81%|████████  | 29/36 [00:01<00:00, 13.50it/s]    t=1 dim=[2048, 2048, 2048]:  81%|████████  | 29/36 [00:01<00:00, 13.50it/s]     t=10 dim=[2048, 2048, 2048]:  81%|████████  | 29/36 [00:01<00:00, 13.50it/s]    t=10 dim=[2048, 2048, 2048]:  86%|████████▌ | 31/36 [00:01<00:00, 10.21it/s]    t=16 dim=[2048, 2048, 2048]:  86%|████████▌ | 31/36 [00:01<00:00, 10.21it/s]    t=17 dim=[4096, 4096, 4096]:  86%|████████▌ | 31/36 [00:02<00:00, 10.21it/s]    t=17 dim=[4096, 4096, 4096]:  92%|█████████▏| 33/36 [00:02<00:00,  5.04it/s]    t=1 dim=[4096, 4096, 4096]:  92%|█████████▏| 33/36 [00:02<00:00,  5.04it/s]     t=1 dim=[4096, 4096, 4096]:  94%|█████████▍| 34/36 [00:03<00:00,  3.71it/s]    t=10 dim=[4096, 4096, 4096]:  94%|█████████▍| 34/36 [00:03<00:00,  3.71it/s]    t=10 dim=[4096, 4096, 4096]:  97%|█████████▋| 35/36 [00:04<00:00,  2.91it/s]    t=16 dim=[4096, 4096, 4096]:  97%|█████████▋| 35/36 [00:04<00:00,  2.91it/s]    t=16 dim=[4096, 4096, 4096]: 100%|██████████| 36/36 [00:05<00:00,  2.41it/s]    t=16 dim=[4096, 4096, 4096]: 100%|██████████| 36/36 [00:05<00:00,  7.10it/s]
    36 matrices were created.




.. GENERATED FROM PYTHON SOURCE LINES 310-311

Let's run the benchmark

.. GENERATED FROM PYTHON SOURCE LINES 311-471

.. code-block:: Python



    def rendering_obs(obs, dim, number, repeat, domain, provider, internal_time):
        stype = {
            TensorProto.FLOAT: "f32",
            TensorProto.FLOAT16: "f16",
            TensorProto.BFLOAT16: "bf16",
            TensorProto.INT8: "i8",
            TensorProto.INT16: "i16",
            TensorProto.INT32: "i32",
            TensorProto.UINT32: "u32",
            TensorProto.FLOAT8E4M3FN: "e4m3fn",
            TensorProto.FLOAT8E5M2: "e5m2",
        }[tt]
        obs.update(
            dict(
                engine={"InferenceSession": "ort", "CReferenceEvaluator": "np"}[
                    engine.__name__
                ],
                stype=stype,
                type=f"{stype}",
                M=dim[0],
                N=dim[1],
                K=dim[2],
                cost=numpy.prod(dim) * 4,
                cost_s=f"{numpy.prod(dim) * 4}-{dim[0]}x{dim[1]}x{dim[2]}",
                repeat=repeat,
                number=number,
                domain={
                    "": "ORT",
                    "com.microsoft": "COM",
                    "onnx_extended.ortops.tutorial.cuda": "EXT",
                }[domain],
                provider={
                    "CPUExecutionProvider": "cpu",
                    "CUDAExecutionProvider": "cuda",
                }[provider[0]],
                platform=platform.processor(),
                intime=internal_time,
            )
        )
        return obs


    opts = SessionOptions()
    r = get_ort_ext_libs()
    if r is not None:
        opts.register_custom_ops_library(r[0])


    data = []
    errors = []
    pbar = tqdm(list(product(types, engine, providers, dims, domains)))
    for tt, engine, provider, dim, domain in pbar:
        if (
            tt in {TensorProto.FLOAT8E4M3FN, TensorProto.FLOAT8E5M2}
            and properties.get("major", 0) < 9
        ):
            # f8 not available
            if provider[0] == "CPUExecutionProvider":
                continue
            errors.append(
                f"f8 not available, major={properties.get('major', 0)}, "
                f"tt={tt}, provider={provider!r}, domain={domain!r}."
            )
            continue
        elif provider[0] == "CPUExecutionProvider" and max(dim) > 2000:
            # too long
            continue
        if max(dim) <= 200:
            repeat, number = script_args.repeat * 4, script_args.number * 4
        elif max(dim) <= 256:
            repeat, number = script_args.repeat * 2, script_args.number * 2
        else:
            repeat, number = script_args.repeat, script_args.number

        onx = create_model(tt, provider=provider[0], domain=domain)
        if onx is None:
            if provider[0] == "CPUExecutionProvider":
                continue
            errors.append(
                f"No model for tt={tt}, provider={provider!r}, domain={domain!r}."
            )
            continue
        with open(f"plot_bench_gemm_ort_{tt}_{domain}.onnx", "wb") as f:
            f.write(onx.SerializeToString())
        k1 = (tt, dim[2], dim[0])
        k2 = (tt, dim[2], dim[1])
        if k1 not in matrices:
            errors.append(f"Key k1={k1!r} not in matrices.")
            continue
        if k2 not in matrices:
            errors.append(f"Key k2={k2!r} not in matrices.")
            continue

        pbar.set_description(f"t={tt} e={engine.__name__} p={provider[0][:4]} dim={dim}")

        if engine == CReferenceEvaluator:
            if (
                domain != ""
                or max(dim) > 256
                or provider != ["CPUExecutionProvider"]
                or tt not in [TensorProto.FLOAT, TensorProto.FLOAT16]
            ):
                # All impossible or slow cases.
                continue
            if tt == TensorProto.FLOAT16 and max(dim) > 50:
                repeat, number = 2, 2

            feeds = {"A": matrices[k1].numpy(), "B": matrices[k2].numpy()}
            sess = engine(onx)
            sess.run(None, feeds)
            obs = measure_time(lambda: sess.run(None, feeds), repeat=repeat, number=number)

        elif engine == InferenceSession:
            if provider[0] not in get_available_providers():
                errors.append(f"provider={provider[0]} is missing")
                continue
            try:
                sess = engine(onx.SerializeToString(), opts, providers=provider)
            except (NotImplemented, InvalidGraph, Fail) as e:
                # not implemented
                errors.append((tt, engine.__class__.__name__, provider, domain, e))
                continue

            the_feeds = (
                {"A": matrices[k1], "B": matrices[k2]}
                if provider == ["CPUExecutionProvider"]
                else {"A": matrices_cuda[k1], "B": matrices_cuda[k2]}
            )
            out_names = ["C"]

            # warmup
            for i in range(script_args.warmup):
                sess._sess.run_with_ort_values(the_feeds, out_names, None)[0]

            # benchamrk
            times = []

            def fct_benchmarked():
                got = sess._sess.run_with_ort_values(the_feeds, out_names, None)
                if len(got) > 1:
                    times.append(got[1])

            obs = measure_time(fct_benchmarked, repeat=repeat, number=number)
            internal_time = None
            if times:
                np_times = [t.numpy() for t in times]
                internal_time = (sum(np_times) / len(times))[0]

        else:
            errors.append(f"unknown engine={engine}")
            continue

        # improves the rendering
        obs = rendering_obs(obs, dim, number, repeat, domain, provider, internal_time)
        data.append(obs)
        if unit_test_going() and len(data) >= 2:
            break





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[32, 32, 32]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[32, 32, 32]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[32, 32, 32]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[64, 64, 64]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[64, 64, 64]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[64, 64, 64]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[128, 128, 128]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[128, 128, 128]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[128, 128, 128]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[256, 256, 256]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[256, 256, 256]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[256, 256, 256]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[400, 400, 400]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[400, 400, 400]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[400, 400, 400]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[512, 512, 512]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[512, 512, 512]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[512, 512, 512]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[2048, 2048, 2048]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[2048, 2048, 2048]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[2048, 2048, 2048]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[4096, 4096, 4096]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[4096, 4096, 4096]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=[4096, 4096, 4096]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CPUE dim=[32, 32, 32]:   0%|          | 0/432 [00:00<?, ?it/s]          t=1 e=InferenceSession p=CPUE dim=[64, 64, 64]:   0%|          | 0/432 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CPUE dim=[64, 64, 64]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=InferenceSession p=CPUE dim=[128, 128, 128]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=InferenceSession p=CPUE dim=[256, 256, 256]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=InferenceSession p=CPUE dim=[400, 400, 400]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=InferenceSession p=CPUE dim=[512, 512, 512]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=InferenceSession p=CPUE dim=[1024, 1024, 1024]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]       t=1 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[2048, 2048, 2048]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[2048, 2048, 2048]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[2048, 2048, 2048]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[4096, 4096, 4096]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[4096, 4096, 4096]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=[4096, 4096, 4096]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=[32, 32, 32]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]          t=1 e=CReferenceEvaluator p=CPUE dim=[64, 64, 64]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=[128, 128, 128]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=[256, 256, 256]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=[400, 400, 400]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=[512, 512, 512]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=[1024, 1024, 1024]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[32, 32, 32]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]            t=10 e=InferenceSession p=CUDA dim=[32, 32, 32]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[32, 32, 32]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[64, 64, 64]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[64, 64, 64]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[64, 64, 64]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[128, 128, 128]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[128, 128, 128]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[128, 128, 128]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[256, 256, 256]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[256, 256, 256]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[256, 256, 256]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[400, 400, 400]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[400, 400, 400]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[400, 400, 400]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[512, 512, 512]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[512, 512, 512]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[512, 512, 512]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[2048, 2048, 2048]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[2048, 2048, 2048]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[2048, 2048, 2048]:  32%|███▏      | 140/432 [00:00<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[4096, 4096, 4096]:  32%|███▏      | 140/432 [00:01<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[4096, 4096, 4096]:  32%|███▏      | 140/432 [00:01<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CUDA dim=[4096, 4096, 4096]:  32%|███▏      | 140/432 [00:01<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CPUE dim=[32, 32, 32]:  32%|███▏      | 140/432 [00:01<00:00, 1100.70it/s]          t=10 e=InferenceSession p=CPUE dim=[64, 64, 64]:  32%|███▏      | 140/432 [00:01<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CPUE dim=[128, 128, 128]:  32%|███▏      | 140/432 [00:01<00:00, 1100.70it/s]    t=10 e=InferenceSession p=CPUE dim=[128, 128, 128]:  58%|█████▊    | 251/432 [00:01<00:01, 160.57it/s]     t=10 e=InferenceSession p=CPUE dim=[256, 256, 256]:  58%|█████▊    | 251/432 [00:01<00:01, 160.57it/s]    t=10 e=InferenceSession p=CPUE dim=[400, 400, 400]:  58%|█████▊    | 251/432 [00:01<00:01, 160.57it/s]    t=10 e=InferenceSession p=CPUE dim=[512, 512, 512]:  58%|█████▊    | 251/432 [00:01<00:01, 160.57it/s]    t=10 e=InferenceSession p=CPUE dim=[1024, 1024, 1024]:  58%|█████▊    | 251/432 [00:01<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]       t=10 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[2048, 2048, 2048]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[2048, 2048, 2048]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[2048, 2048, 2048]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[4096, 4096, 4096]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[4096, 4096, 4096]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=[4096, 4096, 4096]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[32, 32, 32]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]          t=10 e=CReferenceEvaluator p=CPUE dim=[64, 64, 64]:  58%|█████▊    | 251/432 [00:02<00:01, 160.57it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[64, 64, 64]:  70%|██████▉   | 302/432 [00:02<00:01, 104.21it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[128, 128, 128]:  70%|██████▉   | 302/432 [00:02<00:01, 104.21it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[256, 256, 256]:  70%|██████▉   | 302/432 [00:02<00:01, 104.21it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[400, 400, 400]:  70%|██████▉   | 302/432 [00:02<00:01, 104.21it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[512, 512, 512]:  70%|██████▉   | 302/432 [00:02<00:01, 104.21it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=[1024, 1024, 1024]:  70%|██████▉   | 302/432 [00:02<00:01, 104.21it/s]    t=16 e=InferenceSession p=CUDA dim=[32, 32, 32]:  70%|██████▉   | 302/432 [00:02<00:01, 104.21it/s]             t=16 e=InferenceSession p=CUDA dim=[32, 32, 32]:  70%|██████▉   | 302/432 [00:02<00:01, 104.21it/s]    t=16 e=InferenceSession p=CUDA dim=[64, 64, 64]:  70%|██████▉   | 302/432 [00:02<00:01, 104.21it/s]    t=16 e=InferenceSession p=CUDA dim=[64, 64, 64]:  70%|██████▉   | 302/432 [00:02<00:01, 104.21it/s]    t=16 e=InferenceSession p=CUDA dim=[128, 128, 128]:  70%|██████▉   | 302/432 [00:02<00:01, 104.21it/s]    t=16 e=InferenceSession p=CUDA dim=[128, 128, 128]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]     t=16 e=InferenceSession p=CUDA dim=[128, 128, 128]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]    t=16 e=InferenceSession p=CUDA dim=[256, 256, 256]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]    t=16 e=InferenceSession p=CUDA dim=[256, 256, 256]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]    t=16 e=InferenceSession p=CUDA dim=[400, 400, 400]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]    t=16 e=InferenceSession p=CUDA dim=[400, 400, 400]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]    t=16 e=InferenceSession p=CUDA dim=[512, 512, 512]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]    t=16 e=InferenceSession p=CUDA dim=[512, 512, 512]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]    t=16 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]    t=16 e=InferenceSession p=CUDA dim=[1024, 1024, 1024]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]    t=16 e=InferenceSession p=CUDA dim=[2048, 2048, 2048]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]    t=16 e=InferenceSession p=CUDA dim=[2048, 2048, 2048]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]    t=16 e=InferenceSession p=CUDA dim=[4096, 4096, 4096]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]    t=16 e=InferenceSession p=CUDA dim=[4096, 4096, 4096]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]    t=16 e=InferenceSession p=CPUE dim=[32, 32, 32]:  77%|███████▋  | 332/432 [00:02<00:01, 86.45it/s]          t=16 e=InferenceSession p=CPUE dim=[64, 64, 64]:  77%|███████▋  | 332/432 [00:03<00:01, 86.45it/s]    t=16 e=InferenceSession p=CPUE dim=[128, 128, 128]:  77%|███████▋  | 332/432 [00:03<00:01, 86.45it/s]    t=16 e=InferenceSession p=CPUE dim=[256, 256, 256]:  77%|███████▋  | 332/432 [00:03<00:01, 86.45it/s]    t=16 e=InferenceSession p=CPUE dim=[400, 400, 400]:  77%|███████▋  | 332/432 [00:03<00:01, 86.45it/s]    t=16 e=InferenceSession p=CPUE dim=[400, 400, 400]:  84%|████████▍ | 365/432 [00:03<00:00, 91.54it/s]    t=16 e=InferenceSession p=CPUE dim=[512, 512, 512]:  84%|████████▍ | 365/432 [00:03<00:00, 91.54it/s]    t=16 e=InferenceSession p=CPUE dim=[1024, 1024, 1024]:  84%|████████▍ | 365/432 [00:03<00:00, 91.54it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  84%|████████▍ | 365/432 [00:03<00:00, 91.54it/s]       t=16 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  84%|████████▍ | 365/432 [00:03<00:00, 91.54it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[32, 32, 32]:  88%|████████▊ | 382/432 [00:03<00:00, 90.79it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  88%|████████▊ | 382/432 [00:03<00:00, 90.79it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[64, 64, 64]:  88%|████████▊ | 382/432 [00:03<00:00, 90.79it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  88%|████████▊ | 382/432 [00:03<00:00, 90.79it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[128, 128, 128]:  88%|████████▊ | 382/432 [00:03<00:00, 90.79it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  88%|████████▊ | 382/432 [00:03<00:00, 90.79it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[256, 256, 256]:  88%|████████▊ | 382/432 [00:03<00:00, 90.79it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  88%|████████▊ | 382/432 [00:03<00:00, 90.79it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[400, 400, 400]:  88%|████████▊ | 382/432 [00:03<00:00, 90.79it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  88%|████████▊ | 382/432 [00:03<00:00, 90.79it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  88%|████████▊ | 382/432 [00:03<00:00, 90.79it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[512, 512, 512]:  92%|█████████▏| 397/432 [00:03<00:00, 96.26it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  92%|█████████▏| 397/432 [00:03<00:00, 96.26it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[1024, 1024, 1024]:  92%|█████████▏| 397/432 [00:03<00:00, 96.26it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[2048, 2048, 2048]:  92%|█████████▏| 397/432 [00:03<00:00, 96.26it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[2048, 2048, 2048]:  92%|█████████▏| 397/432 [00:03<00:00, 96.26it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[4096, 4096, 4096]:  92%|█████████▏| 397/432 [00:03<00:00, 96.26it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=[4096, 4096, 4096]:  92%|█████████▏| 397/432 [00:03<00:00, 96.26it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=[32, 32, 32]:  92%|█████████▏| 397/432 [00:03<00:00, 96.26it/s]          t=16 e=CReferenceEvaluator p=CPUE dim=[64, 64, 64]:  92%|█████████▏| 397/432 [00:03<00:00, 96.26it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=[128, 128, 128]:  92%|█████████▏| 397/432 [00:03<00:00, 96.26it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=[256, 256, 256]:  92%|█████████▏| 397/432 [00:03<00:00, 96.26it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=[400, 400, 400]:  92%|█████████▏| 397/432 [00:03<00:00, 96.26it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=[512, 512, 512]:  92%|█████████▏| 397/432 [00:03<00:00, 96.26it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=[1024, 1024, 1024]:  92%|█████████▏| 397/432 [00:03<00:00, 96.26it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=[1024, 1024, 1024]: 100%|██████████| 432/432 [00:03<00:00, 121.15it/s]




.. GENERATED FROM PYTHON SOURCE LINES 472-474

Results
+++++++

.. GENERATED FROM PYTHON SOURCE LINES 474-484

.. code-block:: Python


    df = DataFrame(data)
    df.to_excel("plot_bench_gemm_ort.xlsx")
    df.to_csv("plot_bench_gemm_ort.csv")
    df.drop(["min_exec", "max_exec", "cost_s", "cost"], axis=1).to_csv(
        "plot_bench_gemm_ort.csv", index=False
    )
    print(df.head().T)
    df





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                                0                 1                    2                     3                      4
    average              0.000011          0.000019             0.000029              0.000073               0.000145
    deviation            0.000001          0.000008             0.000003              0.000021               0.000005
    min_exec             0.000011          0.000014             0.000026              0.000053               0.000138
    max_exec             0.000018          0.000041             0.000038               0.00013               0.000152
    repeat                     40                40                   40                    20                     10
    number                     16                16                   16                     8                      4
    ttime                0.000443          0.000779             0.001165              0.001464               0.001448
    context_size               64                64                   64                    64                     64
    warmup_time          0.000049          0.000125             0.000064              0.000189               0.000189
    engine                    ort               ort                  ort                   ort                    ort
    stype                     f32               f32                  f32                   f32                    f32
    type                      f32               f32                  f32                   f32                    f32
    M                          32                64                  128                   256                    400
    N                          32                64                  128                   256                    400
    K                          32                64                  128                   256                    400
    cost                   131072           1048576              8388608              67108864              256000000
    cost_s        131072-32x32x32  1048576-64x64x64  8388608-128x128x128  67108864-256x256x256  256000000-400x400x400
    domain                    ORT               ORT                  ORT                   ORT                    ORT
    provider                  cpu               cpu                  cpu                   cpu                    cpu
    platform               x86_64            x86_64               x86_64                x86_64                 x86_64
    intime                   None              None                 None                  None                   None


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>average</th>
          <th>deviation</th>
          <th>min_exec</th>
          <th>max_exec</th>
          <th>repeat</th>
          <th>number</th>
          <th>ttime</th>
          <th>context_size</th>
          <th>warmup_time</th>
          <th>engine</th>
          <th>stype</th>
          <th>type</th>
          <th>M</th>
          <th>N</th>
          <th>K</th>
          <th>cost</th>
          <th>cost_s</th>
          <th>domain</th>
          <th>provider</th>
          <th>platform</th>
          <th>intime</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.000011</td>
          <td>1.318731e-06</td>
          <td>0.000011</td>
          <td>0.000018</td>
          <td>40</td>
          <td>16</td>
          <td>0.000443</td>
          <td>64</td>
          <td>0.000049</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.000019</td>
          <td>7.599805e-06</td>
          <td>0.000014</td>
          <td>0.000041</td>
          <td>40</td>
          <td>16</td>
          <td>0.000779</td>
          <td>64</td>
          <td>0.000125</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>64</td>
          <td>64</td>
          <td>64</td>
          <td>1048576</td>
          <td>1048576-64x64x64</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.000029</td>
          <td>3.490552e-06</td>
          <td>0.000026</td>
          <td>0.000038</td>
          <td>40</td>
          <td>16</td>
          <td>0.001165</td>
          <td>64</td>
          <td>0.000064</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.000073</td>
          <td>2.063886e-05</td>
          <td>0.000053</td>
          <td>0.000130</td>
          <td>20</td>
          <td>8</td>
          <td>0.001464</td>
          <td>64</td>
          <td>0.000189</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.000145</td>
          <td>5.000921e-06</td>
          <td>0.000138</td>
          <td>0.000152</td>
          <td>10</td>
          <td>4</td>
          <td>0.001448</td>
          <td>64</td>
          <td>0.000189</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>5</th>
          <td>0.000498</td>
          <td>2.085198e-05</td>
          <td>0.000482</td>
          <td>0.000556</td>
          <td>10</td>
          <td>4</td>
          <td>0.004977</td>
          <td>64</td>
          <td>0.000521</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>6</th>
          <td>0.003442</td>
          <td>1.059837e-04</td>
          <td>0.003382</td>
          <td>0.003699</td>
          <td>10</td>
          <td>4</td>
          <td>0.034419</td>
          <td>64</td>
          <td>0.003425</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>7</th>
          <td>0.000025</td>
          <td>1.161152e-05</td>
          <td>0.000018</td>
          <td>0.000060</td>
          <td>40</td>
          <td>16</td>
          <td>0.001004</td>
          <td>64</td>
          <td>0.000138</td>
          <td>np</td>
          <td>f32</td>
          <td>f32</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>8</th>
          <td>0.000031</td>
          <td>1.351792e-05</td>
          <td>0.000024</td>
          <td>0.000090</td>
          <td>40</td>
          <td>16</td>
          <td>0.001223</td>
          <td>64</td>
          <td>0.000070</td>
          <td>np</td>
          <td>f32</td>
          <td>f32</td>
          <td>64</td>
          <td>64</td>
          <td>64</td>
          <td>1048576</td>
          <td>1048576-64x64x64</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>9</th>
          <td>0.000132</td>
          <td>8.156039e-06</td>
          <td>0.000125</td>
          <td>0.000165</td>
          <td>40</td>
          <td>16</td>
          <td>0.005288</td>
          <td>64</td>
          <td>0.000201</td>
          <td>np</td>
          <td>f32</td>
          <td>f32</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.000425</td>
          <td>7.010425e-05</td>
          <td>0.000395</td>
          <td>0.000716</td>
          <td>20</td>
          <td>8</td>
          <td>0.008491</td>
          <td>64</td>
          <td>0.000625</td>
          <td>np</td>
          <td>f32</td>
          <td>f32</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>11</th>
          <td>0.000027</td>
          <td>5.275874e-07</td>
          <td>0.000027</td>
          <td>0.000029</td>
          <td>40</td>
          <td>16</td>
          <td>0.001091</td>
          <td>64</td>
          <td>0.000048</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>12</th>
          <td>0.000043</td>
          <td>6.803883e-06</td>
          <td>0.000038</td>
          <td>0.000071</td>
          <td>40</td>
          <td>16</td>
          <td>0.001706</td>
          <td>64</td>
          <td>0.000059</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>64</td>
          <td>64</td>
          <td>64</td>
          <td>1048576</td>
          <td>1048576-64x64x64</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>13</th>
          <td>0.000187</td>
          <td>8.686394e-06</td>
          <td>0.000181</td>
          <td>0.000217</td>
          <td>40</td>
          <td>16</td>
          <td>0.007478</td>
          <td>64</td>
          <td>0.000334</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>14</th>
          <td>0.000455</td>
          <td>1.082936e-05</td>
          <td>0.000439</td>
          <td>0.000490</td>
          <td>20</td>
          <td>8</td>
          <td>0.009094</td>
          <td>64</td>
          <td>0.000588</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>15</th>
          <td>0.001844</td>
          <td>3.228713e-05</td>
          <td>0.001805</td>
          <td>0.001900</td>
          <td>10</td>
          <td>4</td>
          <td>0.018436</td>
          <td>64</td>
          <td>0.001852</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>16</th>
          <td>0.003112</td>
          <td>5.202908e-04</td>
          <td>0.002867</td>
          <td>0.004605</td>
          <td>10</td>
          <td>4</td>
          <td>0.031118</td>
          <td>64</td>
          <td>0.002916</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>17</th>
          <td>0.007631</td>
          <td>4.576857e-05</td>
          <td>0.007574</td>
          <td>0.007759</td>
          <td>10</td>
          <td>4</td>
          <td>0.076309</td>
          <td>64</td>
          <td>0.007728</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>18</th>
          <td>0.000199</td>
          <td>1.693145e-06</td>
          <td>0.000197</td>
          <td>0.000208</td>
          <td>40</td>
          <td>16</td>
          <td>0.007963</td>
          <td>64</td>
          <td>0.000241</td>
          <td>np</td>
          <td>f16</td>
          <td>f16</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>19</th>
          <td>0.001455</td>
          <td>7.908326e-06</td>
          <td>0.001447</td>
          <td>0.001463</td>
          <td>2</td>
          <td>2</td>
          <td>0.002910</td>
          <td>64</td>
          <td>0.001495</td>
          <td>np</td>
          <td>f16</td>
          <td>f16</td>
          <td>64</td>
          <td>64</td>
          <td>64</td>
          <td>1048576</td>
          <td>1048576-64x64x64</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>20</th>
          <td>0.011151</td>
          <td>8.119410e-05</td>
          <td>0.011070</td>
          <td>0.011233</td>
          <td>2</td>
          <td>2</td>
          <td>0.022303</td>
          <td>64</td>
          <td>0.011059</td>
          <td>np</td>
          <td>f16</td>
          <td>f16</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
        <tr>
          <th>21</th>
          <td>0.086860</td>
          <td>1.009954e-04</td>
          <td>0.086759</td>
          <td>0.086961</td>
          <td>2</td>
          <td>2</td>
          <td>0.173720</td>
          <td>64</td>
          <td>0.086763</td>
          <td>np</td>
          <td>f16</td>
          <td>f16</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>None</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 485-487

The errors
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 487-490

.. code-block:: Python

    for i, e in enumerate(errors):
        print(f"{i+1}/{len(errors)}-{e}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    2/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    3/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    4/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    5/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    6/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    7/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    8/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    9/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    10/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    11/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    12/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    13/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    14/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    15/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    16/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    17/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    18/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    19/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    20/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    21/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    22/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    23/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    24/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    25/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    26/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    27/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    28/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    29/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    30/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    31/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    32/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    33/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    34/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    35/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    36/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    37/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    38/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    39/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    40/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    41/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    42/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    43/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    44/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    45/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    46/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    47/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    48/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    49/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    50/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    51/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    52/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    53/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    54/151-f8 not available, major=8, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    55/151-provider=CUDAExecutionProvider is missing
    56/151-provider=CUDAExecutionProvider is missing
    57/151-provider=CUDAExecutionProvider is missing
    58/151-provider=CUDAExecutionProvider is missing
    59/151-provider=CUDAExecutionProvider is missing
    60/151-provider=CUDAExecutionProvider is missing
    61/151-provider=CUDAExecutionProvider is missing
    62/151-provider=CUDAExecutionProvider is missing
    63/151-provider=CUDAExecutionProvider is missing
    64/151-provider=CUDAExecutionProvider is missing
    65/151-provider=CUDAExecutionProvider is missing
    66/151-provider=CUDAExecutionProvider is missing
    67/151-provider=CUDAExecutionProvider is missing
    68/151-provider=CUDAExecutionProvider is missing
    69/151-provider=CUDAExecutionProvider is missing
    70/151-provider=CUDAExecutionProvider is missing
    71/151-provider=CUDAExecutionProvider is missing
    72/151-provider=CUDAExecutionProvider is missing
    73/151-provider=CUDAExecutionProvider is missing
    74/151-provider=CUDAExecutionProvider is missing
    75/151-provider=CUDAExecutionProvider is missing
    76/151-provider=CUDAExecutionProvider is missing
    77/151-provider=CUDAExecutionProvider is missing
    78/151-provider=CUDAExecutionProvider is missing
    79/151-provider=CUDAExecutionProvider is missing
    80/151-provider=CUDAExecutionProvider is missing
    81/151-provider=CUDAExecutionProvider is missing
    82/151-provider=CUDAExecutionProvider is missing
    83/151-provider=CUDAExecutionProvider is missing
    84/151-provider=CUDAExecutionProvider is missing
    85/151-provider=CUDAExecutionProvider is missing
    86/151-provider=CUDAExecutionProvider is missing
    87/151-provider=CUDAExecutionProvider is missing
    88/151-provider=CUDAExecutionProvider is missing
    89/151-provider=CUDAExecutionProvider is missing
    90/151-provider=CUDAExecutionProvider is missing
    91/151-provider=CUDAExecutionProvider is missing
    92/151-provider=CUDAExecutionProvider is missing
    93/151-provider=CUDAExecutionProvider is missing
    94/151-provider=CUDAExecutionProvider is missing
    95/151-provider=CUDAExecutionProvider is missing
    96/151-provider=CUDAExecutionProvider is missing
    97/151-provider=CUDAExecutionProvider is missing
    98/151-provider=CUDAExecutionProvider is missing
    99/151-provider=CUDAExecutionProvider is missing
    100/151-provider=CUDAExecutionProvider is missing
    101/151-provider=CUDAExecutionProvider is missing
    102/151-provider=CUDAExecutionProvider is missing
    103/151-provider=CUDAExecutionProvider is missing
    104/151-provider=CUDAExecutionProvider is missing
    105/151-provider=CUDAExecutionProvider is missing
    106/151-provider=CUDAExecutionProvider is missing
    107/151-provider=CUDAExecutionProvider is missing
    108/151-provider=CUDAExecutionProvider is missing
    109/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    110/151-provider=CUDAExecutionProvider is missing
    111/151-provider=CUDAExecutionProvider is missing
    112/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    113/151-provider=CUDAExecutionProvider is missing
    114/151-provider=CUDAExecutionProvider is missing
    115/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    116/151-provider=CUDAExecutionProvider is missing
    117/151-provider=CUDAExecutionProvider is missing
    118/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    119/151-provider=CUDAExecutionProvider is missing
    120/151-provider=CUDAExecutionProvider is missing
    121/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    122/151-provider=CUDAExecutionProvider is missing
    123/151-provider=CUDAExecutionProvider is missing
    124/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    125/151-provider=CUDAExecutionProvider is missing
    126/151-provider=CUDAExecutionProvider is missing
    127/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    128/151-provider=CUDAExecutionProvider is missing
    129/151-provider=CUDAExecutionProvider is missing
    130/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    131/151-provider=CUDAExecutionProvider is missing
    132/151-provider=CUDAExecutionProvider is missing
    133/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    134/151-provider=CUDAExecutionProvider is missing
    135/151-provider=CUDAExecutionProvider is missing
    136/151-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    137/151-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    138/151-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    139/151-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    140/151-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    141/151-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    142/151-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    143/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    144/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    145/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    146/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    147/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    148/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    149/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    150/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.
    151/151-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extended.ortops.tutorial.cuda'.




.. GENERATED FROM PYTHON SOURCE LINES 491-493

Summary
+++++++

.. GENERATED FROM PYTHON SOURCE LINES 493-508

.. code-block:: Python


    piv = pivot_table(
        df,
        index=["cost"],
        columns=["provider", "type", "domain", "engine"],
        values=["average", "intime"],
    )
    piv.reset_index(drop=False).to_excel("plot_bench_gemm_ort_summary.xlsx")
    piv.reset_index(drop=False).to_csv("plot_bench_gemm_ort_summary.csv")


    print("summary")
    print(piv)
    piv





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    summary
                 average                              
    provider         cpu                              
    type             f16                 f32          
    domain           ORT                 ORT          
    engine            np       ort        np       ort
    cost                                              
    131072      0.000199  0.000027  0.000025  0.000011
    1048576     0.001455  0.000043  0.000031  0.000019
    8388608     0.011151  0.000187  0.000132  0.000029
    67108864    0.086860  0.000455  0.000425  0.000073
    256000000        NaN  0.001844       NaN  0.000145
    536870912        NaN  0.003112       NaN  0.000498
    4294967296       NaN  0.007631       NaN  0.003442


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead tr th {
            text-align: left;
        }

        .dataframe thead tr:last-of-type th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th colspan="4" halign="left">average</th>
        </tr>
        <tr>
          <th>provider</th>
          <th colspan="4" halign="left">cpu</th>
        </tr>
        <tr>
          <th>type</th>
          <th colspan="2" halign="left">f16</th>
          <th colspan="2" halign="left">f32</th>
        </tr>
        <tr>
          <th>domain</th>
          <th colspan="2" halign="left">ORT</th>
          <th colspan="2" halign="left">ORT</th>
        </tr>
        <tr>
          <th>engine</th>
          <th>np</th>
          <th>ort</th>
          <th>np</th>
          <th>ort</th>
        </tr>
        <tr>
          <th>cost</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>131072</th>
          <td>0.000199</td>
          <td>0.000027</td>
          <td>0.000025</td>
          <td>0.000011</td>
        </tr>
        <tr>
          <th>1048576</th>
          <td>0.001455</td>
          <td>0.000043</td>
          <td>0.000031</td>
          <td>0.000019</td>
        </tr>
        <tr>
          <th>8388608</th>
          <td>0.011151</td>
          <td>0.000187</td>
          <td>0.000132</td>
          <td>0.000029</td>
        </tr>
        <tr>
          <th>67108864</th>
          <td>0.086860</td>
          <td>0.000455</td>
          <td>0.000425</td>
          <td>0.000073</td>
        </tr>
        <tr>
          <th>256000000</th>
          <td>NaN</td>
          <td>0.001844</td>
          <td>NaN</td>
          <td>0.000145</td>
        </tr>
        <tr>
          <th>536870912</th>
          <td>NaN</td>
          <td>0.003112</td>
          <td>NaN</td>
          <td>0.000498</td>
        </tr>
        <tr>
          <th>4294967296</th>
          <td>NaN</td>
          <td>0.007631</td>
          <td>NaN</td>
          <td>0.003442</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 509-510

With the dimensions.

.. GENERATED FROM PYTHON SOURCE LINES 510-519

.. code-block:: Python


    pivs = pivot_table(
        df,
        index=["cost_s"],
        columns=["provider", "type", "domain", "engine"],
        values=["average", "intime"],
    )
    print(pivs)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                                average                              
    provider                        cpu                              
    type                            f16                 f32          
    domain                          ORT                 ORT          
    engine                           np       ort        np       ort
    cost_s                                                           
    1048576-64x64x64           0.001455  0.000043  0.000031  0.000019
    131072-32x32x32            0.000199  0.000027  0.000025  0.000011
    256000000-400x400x400           NaN  0.001844       NaN  0.000145
    4294967296-1024x1024x1024       NaN  0.007631       NaN  0.003442
    536870912-512x512x512           NaN  0.003112       NaN  0.000498
    67108864-256x256x256       0.086860  0.000455  0.000425  0.000073
    8388608-128x128x128        0.011151  0.000187  0.000132  0.000029




.. GENERATED FROM PYTHON SOURCE LINES 520-521

plot

.. GENERATED FROM PYTHON SOURCE LINES 521-543

.. code-block:: Python


    dfi = df[
        df.type.isin({"f32", "f16", "bf16", "e4m3fn", "e5m2"}) & df.engine.isin({"ort"})
    ]
    pivi = pivot_table(
        dfi,
        index=["cost"],
        columns=["type", "domain", "provider", "engine"],
        values="average",
    )

    fig, ax = plt.subplots(1, 2, figsize=(12, 6))
    piv.plot(ax=ax[0], title="Gemm performance\nlower is better", logx=True, logy=True)
    if pivi.shape[0] > 0:
        pivi.plot(
            ax=ax[1],
            title=f"Gemm performance ORT\n{platform.processor()}",
            logx=True,
            logy=True,
        )
    fig.tight_layout()
    fig.savefig("plot_bench_gemm_ort.png")



.. image-sg:: /auto_examples/images/sphx_glr_plot_bench_gemm_ort_001.png
   :alt: Gemm performance lower is better, Gemm performance ORT x86_64
   :srcset: /auto_examples/images/sphx_glr_plot_bench_gemm_ort_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 10.057 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_gemm_ort.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_gemm_ort.ipynb <plot_bench_gemm_ort.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_gemm_ort.py <plot_bench_gemm_ort.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
