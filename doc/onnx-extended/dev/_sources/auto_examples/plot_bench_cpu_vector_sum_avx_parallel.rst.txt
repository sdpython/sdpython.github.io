
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_cpu_vector_sum_avx_parallel.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_bench_cpu_vector_sum_avx_parallel.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_cpu_vector_sum_avx_parallel.py:


Measuring CPU performance with a parallelized vector sum and AVX
================================================================

The example compares the time spend in computing the sum of all
coefficients of a matrix when the function walks through the coefficients
by rows or by columns when the computation is parallelized or uses
AVX instructions.

Vector Sum
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 13-93

.. code-block:: default

    from tqdm import tqdm
    import numpy
    import matplotlib.pyplot as plt
    from pandas import DataFrame
    from onnx_extended.ext_test_case import measure_time, unit_test_going
    from onnx_extended.validation.cpu._validation import (
        vector_sum_array as vector_sum,
        vector_sum_array_parallel as vector_sum_parallel,
        vector_sum_array_avx as vector_sum_avx,
        vector_sum_array_avx_parallel as vector_sum_avx_parallel,
    )

    obs = []
    dims = [500, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 2000]
    if unit_test_going():
        dims = dims[:2]
    for dim in tqdm(dims):
        values = numpy.ones((dim, dim), dtype=numpy.float32).ravel()
        diff = abs(vector_sum(dim, values, True) - dim**2)

        res = measure_time(lambda: vector_sum(dim, values, True), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="rows",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        res = measure_time(lambda: vector_sum_parallel(dim, values, True), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="rows//",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        diff = abs(vector_sum_avx(dim, values) - dim**2)
        res = measure_time(lambda: vector_sum_avx(dim, values), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="avx",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        diff = abs(vector_sum_avx_parallel(dim, values) - dim**2)
        res = measure_time(lambda: vector_sum_avx_parallel(dim, values), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="avx//",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )


    df = DataFrame(obs)
    piv = df.pivot(index="dim", columns="direction", values="time_per_element")
    print(piv)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/14 [00:00<?, ?it/s]      7%|7         | 1/14 [00:02<00:34,  2.67s/it]     14%|#4        | 2/14 [00:05<00:30,  2.58s/it]     21%|##1       | 3/14 [00:07<00:28,  2.62s/it]     29%|##8       | 4/14 [00:10<00:24,  2.47s/it]     36%|###5      | 5/14 [00:13<00:23,  2.64s/it]     43%|####2     | 6/14 [00:15<00:20,  2.52s/it]     50%|#####     | 7/14 [00:17<00:17,  2.43s/it]     57%|#####7    | 8/14 [00:20<00:15,  2.63s/it]     64%|######4   | 9/14 [00:23<00:12,  2.58s/it]     71%|#######1  | 10/14 [00:25<00:09,  2.49s/it]     79%|#######8  | 11/14 [00:27<00:07,  2.49s/it]     86%|########5 | 12/14 [00:30<00:04,  2.48s/it]     93%|#########2| 13/14 [00:32<00:02,  2.54s/it]    100%|##########| 14/14 [00:35<00:00,  2.61s/it]    100%|##########| 14/14 [00:35<00:00,  2.56s/it]
    direction           avx         avx//          rows        rows//
    dim                                                              
    500        1.828345e-10  5.871439e-11  2.002083e-09  6.612902e-09
    700        1.938547e-10  8.240578e-11  1.645864e-09  4.001618e-10
    800        1.580277e-10  5.992487e-11  2.041557e-09  4.500816e-10
    900        1.577737e-10  5.011772e-11  1.898854e-09  3.819574e-10
    1000       1.787516e-10  4.927516e-11  3.073893e-09  5.129580e-10
    1100       1.944028e-10  5.506331e-11  2.108616e-09  7.949876e-10
    1200       2.297055e-10  5.089577e-11  1.697757e-09  3.822347e-10
    1300       4.262567e-10  1.622198e-10  1.879248e-09  4.559198e-10
    1400       2.670781e-10  3.414248e-10  1.623041e-09  3.853200e-10
    1500       3.262189e-10  1.671993e-09  1.964882e-09  4.260008e-10
    1600       4.251052e-10  1.600139e-10  2.265078e-09  4.123665e-10
    1700       3.648038e-10  1.821697e-10  2.138664e-09  1.317776e-09
    1800       3.698371e-10  1.959858e-10  2.458522e-09  3.875946e-10
    2000       4.447715e-10  2.153641e-10  2.024694e-09  4.267549e-10




.. GENERATED FROM PYTHON SOURCE LINES 94-96

Plots
+++++

.. GENERATED FROM PYTHON SOURCE LINES 96-106

.. code-block:: default


    piv_diff = df.pivot(index="dim", columns="direction", values="diff")
    piv_time = df.pivot(index="dim", columns="direction", values="time")

    fig, ax = plt.subplots(1, 3, figsize=(12, 6))
    piv.plot(ax=ax[0], logx=True, title="Comparison between two summation")
    piv_diff.plot(ax=ax[1], logx=True, logy=True, title="Summation errors")
    piv_time.plot(ax=ax[2], logx=True, logy=True, title="Total time")
    fig.savefig("plot_bench_cpu_vector_sum_avx_parallel.png")




.. image-sg:: /auto_examples/images/sphx_glr_plot_bench_cpu_vector_sum_avx_parallel_001.png
   :alt: Comparison between two summation, Summation errors, Total time
   :srcset: /auto_examples/images/sphx_glr_plot_bench_cpu_vector_sum_avx_parallel_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 107-108

AVX is faster.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  37.106 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_cpu_vector_sum_avx_parallel.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_cpu_vector_sum_avx_parallel.py <plot_bench_cpu_vector_sum_avx_parallel.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_cpu_vector_sum_avx_parallel.ipynb <plot_bench_cpu_vector_sum_avx_parallel.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
