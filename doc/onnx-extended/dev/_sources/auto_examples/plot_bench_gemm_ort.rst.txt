
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_gemm_ort.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_bench_gemm_ort.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_gemm_ort.py:


Measuring performance about Gemm with onnxruntime
=================================================

The benchmark measures the performance of Gemm for different
types and configuration. That includes a custom operator
only available on CUDA calling function :epkg:`cublasLtMatmul`.
This function offers many options.

Device properties
+++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 13-69

.. code-block:: default

    import pprint
    import platform
    from itertools import product
    import numpy
    from tqdm import tqdm
    import matplotlib.pyplot as plt
    from pandas import DataFrame, pivot_table
    from onnx import TensorProto
    from onnx.helper import (
        make_model,
        make_node,
        make_graph,
        make_tensor_value_info,
        make_opsetid,
    )
    from onnx.checker import check_model
    from onnx.numpy_helper import from_array
    from onnx.reference import ReferenceEvaluator
    from onnxruntime import InferenceSession, SessionOptions, get_available_providers
    from onnxruntime.capi._pybind_state import (
        OrtValue as C_OrtValue,
        OrtDevice as C_OrtDevice,
    )
    from onnxruntime.capi.onnxruntime_pybind11_state import (
        Fail,
        NotImplemented,
        InvalidGraph,
        InvalidArgument,
    )

    try:
        from onnx_array_api.plotting.text_plot import onnx_simple_text_plot
    except ImportError:
        onnx_simple_text_plot = str
    try:
        from onnx_extended.reference import CReferenceEvaluator
    except ImportError:
        CReferenceEvaluator = ReferenceEvaluator
    from onnx_extended.ext_test_case import unit_test_going, measure_time

    try:
        from onnx_extended.validation.cuda.cuda_example_py import get_device_prop
        from onnx_extended.ortops.tutorial.cuda import get_ort_ext_libs
    except ImportError:

        def get_device_prop():
            return {"name": "CPU"}

        def get_ort_ext_libs():
            return None


    properties = get_device_prop()
    pprint.pprint(properties)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'clockRate': 1569000,
     'computeMode': 0,
     'concurrentKernels': 1,
     'isMultiGpuBoard': 0,
     'major': 6,
     'maxThreadsPerBlock': 1024,
     'minor': 1,
     'multiProcessorCount': 10,
     'name': 'NVIDIA GeForce GTX 1060',
     'sharedMemPerBlock': 49152,
     'totalConstMem': 65536,
     'totalGlobalMem': 6442319872}




.. GENERATED FROM PYTHON SOURCE LINES 70-77

Model to benchmark
++++++++++++++++++

It includes one Gemm. The operator changes.
It can the regular Gemm, a custom Gemm from domain `com.microsoft`
or a custom implementation from domain
`onnx_extented.ortops.tutorial.cuda`.

.. GENERATED FROM PYTHON SOURCE LINES 77-160

.. code-block:: default



    def create_model(
        mat_type=TensorProto.FLOAT, provider="CUDAExecutionProvider", domain="com.microsoft"
    ):
        A = make_tensor_value_info("A", mat_type, [None, None])
        B = make_tensor_value_info("B", mat_type, [None, None])
        outputs = [make_tensor_value_info("C", mat_type, [None, None])]
        inits = []
        if domain != "":
            if provider != "CUDAExecutionProvider":
                return None
            f8 = False
            if domain == "com.microsoft":
                op_name = "GemmFloat8"
                computeType = "CUBLAS_COMPUTE_32F"
                node_output = ["C"]
            elif mat_type == TensorProto.FLOAT:
                op_name = "CustomGemmFloat"
                computeType = "CUBLAS_COMPUTE_32F_FAST_TF32"
                node_output = ["C", "time"]
                outputs.append(make_tensor_value_info("time", TensorProto.DOUBLE, [None]))
            elif mat_type == TensorProto.FLOAT16:
                op_name = "CustomGemmFloat16"
                computeType = "CUBLAS_COMPUTE_16F"
                node_output = ["C", "time"]
                outputs.append(make_tensor_value_info("time", TensorProto.DOUBLE, [None]))
            elif mat_type in (TensorProto.FLOAT8E4M3FN, TensorProto.FLOAT8E5M2):
                f8 = True
                op_name = "CustomGemmFloat8E4M3FN"
                computeType = "CUBLAS_COMPUTE_32F"
                node_output = ["C", "time"]
                outputs = [
                    make_tensor_value_info("C", TensorProto.FLOAT16, [None, None]),
                    make_tensor_value_info("time", TensorProto.DOUBLE, [None]),
                ]
                inits.append(from_array(numpy.array([1], dtype=numpy.float32), name="I"))
            else:
                return None
            node_kw = dict(
                alpha=1.0,
                transB=1,
                domain=domain,
                computeType=computeType,
                fastAccumulationMode=1,
                rowMajor=0 if op_name.startswith("CustomGemmFloat") else 1,
            )
            node_kw["name"] = (
                f"{mat_type}.{len(node_output)}.{len(outputs)}."
                f"{domain}..{node_kw['rowMajor']}.."
                f"{node_kw['fastAccumulationMode']}..{node_kw['computeType']}.."
                f"{f8}"
            )
            node_inputs = ["A", "B"]
            if f8:
                node_inputs.append("")
                node_inputs.extend(["I"] * 3)
            nodes = [make_node(op_name, node_inputs, node_output, **node_kw)]
        else:
            nodes = [
                make_node("Gemm", ["A", "B"], ["C"], transA=1, beta=0.0),
            ]
        graph = make_graph(nodes, "a", [A, B], outputs, inits)
        if mat_type < 16:
            # regular type
            opset, ir = 18, 8
        else:
            opset, ir = 19, 9
        onnx_model = make_model(
            graph,
            opset_imports=[
                make_opsetid("", opset),
                make_opsetid("com.microsoft", 1),
                make_opsetid("onnx_extented.ortops.tutorial.cuda", 1),
            ],
            ir_version=ir,
        )
        check_model(onnx_model)
        return onnx_model


    print(onnx_simple_text_plot(create_model()))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    opset: domain='' version=18
    opset: domain='com.microsoft' version=1
    opset: domain='onnx_extented.ortops.tutorial.cuda' version=1
    input: name='A' type=dtype('float32') shape=['', '']
    input: name='B' type=dtype('float32') shape=['', '']
    GemmFloat8[com.microsoft](A, B, alpha=1.00, computeType=b'CUBLAS_COMPUTE_32F', fastAccumulationMode=1, rowMajor=1, transB=1) -> C
    output: name='C' type=dtype('float32') shape=['', '']




.. GENERATED FROM PYTHON SOURCE LINES 161-165

A model to cast into anytype.
numpy does not support float 8. onnxruntime is used
to cast a float array into any type.
It must be called with tensor of type `OrtValue`.

.. GENERATED FROM PYTHON SOURCE LINES 165-195

.. code-block:: default



    def create_cast(to, cuda=False):
        A = make_tensor_value_info("A", TensorProto.FLOAT, [None, None])
        C = make_tensor_value_info("C", to, [None, None])
        if cuda:
            nodes = [
                make_node("Cast", ["A"], ["Cc"], to=to),
                make_node("MemcpyFromHost", ["Cc"], ["C"]),
            ]
        else:
            nodes = [make_node("Cast", ["A"], ["C"], to=to)]
        graph = make_graph(nodes, "a", [A], [C])
        if to < 16:
            # regular type
            opset, ir = 18, 8
        else:
            opset, ir = 19, 9
        onnx_model = make_model(
            graph, opset_imports=[make_opsetid("", opset)], ir_version=ir
        )
        if not cuda:
            # OpType: MemcpyFromHost
            check_model(onnx_model)
        return onnx_model


    print(onnx_simple_text_plot(create_cast(TensorProto.FLOAT16)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    opset: domain='' version=18
    input: name='A' type=dtype('float32') shape=['', '']
    Cast(A, to=10) -> C
    output: name='C' type=dtype('float16') shape=['', '']




.. GENERATED FROM PYTHON SOURCE LINES 196-200

Performance
+++++++++++

The benchmark will run the following configurations.

.. GENERATED FROM PYTHON SOURCE LINES 200-247

.. code-block:: default


    types = [
        TensorProto.FLOAT8E4M3FN,
        TensorProto.FLOAT,
        TensorProto.FLOAT16,
        TensorProto.BFLOAT16,
        # TensorProto.UINT32,
        # TensorProto.INT32,
        # TensorProto.INT16,
        # TensorProto.INT8,
    ]
    engine = [InferenceSession, CReferenceEvaluator]
    providers = [
        ["CUDAExecutionProvider", "CPUExecutionProvider"],
        ["CPUExecutionProvider"],
    ]
    # M, N, K
    # we use multiple of 8, otherwise, float8 does not work.
    dims = [
        (32, 32, 32),
        # (56, 64, 72),
        # (64, 64, 64),
        # (64, 72, 80),
        (128, 128, 128),
        (256, 256, 256),
        (400, 400, 400),
        (512, 512, 512),
        (1024, 1024, 1024),
    ]
    if properties.get("major", 0) >= 7:
        dims.extend(
            [
                (2048, 2048, 2048),
                (4096, 4096, 4096),
            ]
        )

    if properties.get("major", 0) >= 9:
        dims.extend(
            [
                (16384, 16384, 16384),
            ]
        )

    domains = ["onnx_extented.ortops.tutorial.cuda", "", "com.microsoft"]









.. GENERATED FROM PYTHON SOURCE LINES 248-249

Let's cache the matrices involved.

.. GENERATED FROM PYTHON SOURCE LINES 249-304

.. code-block:: default



    def to_ort_value(m):
        device = C_OrtDevice(C_OrtDevice.cpu(), C_OrtDevice.default_memory(), 0)
        ort_value = C_OrtValue.ortvalue_from_numpy(m, device)
        return ort_value


    def cached_inputs(dims, types):
        matrices = {}
        matrices_cuda = {}
        pbar = tqdm(list(product(dims, types)))
        for dim, tt in pbar:
            m, n, k = dim
            pbar.set_description(f"t={tt} dim={dim}")
            for i, j in [(m, k), (k, n), (k, m)]:
                if (tt, i, j) in matrices:
                    continue
                # CPU
                try:
                    sess = InferenceSession(
                        create_cast(tt).SerializeToString(),
                        providers=["CPUExecutionProvider"],
                    )
                    cpu = True
                except (InvalidGraph, InvalidArgument, NotImplemented):
                    # not support by this version of onnxruntime
                    cpu = False

                if cpu:
                    vect = (numpy.random.randn(i, j) * 10).astype(numpy.float32)
                    ov = to_ort_value(vect)
                    ovtt = sess._sess.run_with_ort_values({"A": ov}, ["C"], None)[0]
                    matrices[tt, i, j] = ovtt
                else:
                    continue

                # CUDA
                if "CUDAExecutionProvider" not in get_available_providers():
                    # No CUDA
                    continue
                sess = InferenceSession(
                    create_cast(tt, cuda=True).SerializeToString(),
                    providers=["CUDAExecutionProvider", "CPUExecutionProvider"],
                )
                vect = (numpy.random.randn(i, j) * 10).astype(numpy.float32)
                ov = to_ort_value(vect)
                ovtt = sess._sess.run_with_ort_values({"A": ov}, ["C"], None)[0]
                matrices_cuda[tt, i, j] = ovtt
        return matrices, matrices_cuda


    matrices, matrices_cuda = cached_inputs(dims, types)
    print(f"{len(matrices)} matrices were created.")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/24 [00:00<?, ?it/s]    t=17 dim=(32, 32, 32):   0%|          | 0/24 [00:00<?, ?it/s]    t=1 dim=(32, 32, 32):   0%|          | 0/24 [00:00<?, ?it/s]     t=10 dim=(32, 32, 32):   0%|          | 0/24 [00:00<?, ?it/s]    t=16 dim=(32, 32, 32):   0%|          | 0/24 [00:00<?, ?it/s]    t=17 dim=(128, 128, 128):   0%|          | 0/24 [00:00<?, ?it/s]    t=1 dim=(128, 128, 128):   0%|          | 0/24 [00:00<?, ?it/s]     t=1 dim=(128, 128, 128):  25%|##5       | 6/24 [00:00<00:00, 55.38it/s]    t=10 dim=(128, 128, 128):  25%|##5       | 6/24 [00:00<00:00, 55.38it/s]    t=16 dim=(128, 128, 128):  25%|##5       | 6/24 [00:00<00:00, 55.38it/s]    t=17 dim=(256, 256, 256):  25%|##5       | 6/24 [00:00<00:00, 55.38it/s]    t=1 dim=(256, 256, 256):  25%|##5       | 6/24 [00:00<00:00, 55.38it/s]     t=10 dim=(256, 256, 256):  25%|##5       | 6/24 [00:00<00:00, 55.38it/s]    t=16 dim=(256, 256, 256):  25%|##5       | 6/24 [00:00<00:00, 55.38it/s]    t=16 dim=(256, 256, 256):  50%|#####     | 12/24 [00:00<00:00, 47.50it/s]    t=17 dim=(400, 400, 400):  50%|#####     | 12/24 [00:00<00:00, 47.50it/s]    t=1 dim=(400, 400, 400):  50%|#####     | 12/24 [00:00<00:00, 47.50it/s]     t=10 dim=(400, 400, 400):  50%|#####     | 12/24 [00:00<00:00, 47.50it/s]    t=16 dim=(400, 400, 400):  50%|#####     | 12/24 [00:00<00:00, 47.50it/s]    t=17 dim=(512, 512, 512):  50%|#####     | 12/24 [00:00<00:00, 47.50it/s]    t=17 dim=(512, 512, 512):  71%|#######   | 17/24 [00:00<00:00, 39.20it/s]    t=1 dim=(512, 512, 512):  71%|#######   | 17/24 [00:00<00:00, 39.20it/s]     t=10 dim=(512, 512, 512):  71%|#######   | 17/24 [00:00<00:00, 39.20it/s]    t=16 dim=(512, 512, 512):  71%|#######   | 17/24 [00:00<00:00, 39.20it/s]    t=17 dim=(1024, 1024, 1024):  71%|#######   | 17/24 [00:00<00:00, 39.20it/s]    t=1 dim=(1024, 1024, 1024):  71%|#######   | 17/24 [00:00<00:00, 39.20it/s]     t=1 dim=(1024, 1024, 1024):  92%|#########1| 22/24 [00:00<00:00, 22.40it/s]    t=10 dim=(1024, 1024, 1024):  92%|#########1| 22/24 [00:00<00:00, 22.40it/s]    t=16 dim=(1024, 1024, 1024):  92%|#########1| 22/24 [00:00<00:00, 22.40it/s]    t=16 dim=(1024, 1024, 1024): 100%|##########| 24/24 [00:01<00:00, 18.96it/s]
    24 matrices were created.




.. GENERATED FROM PYTHON SOURCE LINES 305-306

Let's run the benchmark

.. GENERATED FROM PYTHON SOURCE LINES 306-468

.. code-block:: default



    def rendering_obs(obs, dim, number, repeat, domain, provider, internal_time):
        stype = {
            TensorProto.FLOAT: "f32",
            TensorProto.FLOAT16: "f16",
            TensorProto.BFLOAT16: "bf16",
            TensorProto.INT8: "i8",
            TensorProto.INT16: "i16",
            TensorProto.INT32: "i32",
            TensorProto.UINT32: "u32",
            TensorProto.FLOAT8E4M3FN: "e4m3fn",
            TensorProto.FLOAT8E5M2: "e5m2",
        }[tt]
        obs.update(
            dict(
                engine={"InferenceSession": "ort", "CReferenceEvaluator": "np"}[
                    engine.__name__
                ],
                stype=stype,
                type=f"{stype}",
                M=dim[0],
                N=dim[1],
                K=dim[2],
                cost=numpy.prod(dim) * 4,
                cost_s=f"{numpy.prod(dim) * 4}-{dim[0]}x{dim[1]}x{dim[2]}",
                repeat=repeat,
                number=number,
                domain={
                    "": "ORT",
                    "com.microsoft": "COM",
                    "onnx_extented.ortops.tutorial.cuda": "EXT",
                }[domain],
                provider={
                    "CPUExecutionProvider": "cpu",
                    "CUDAExecutionProvider": "cuda",
                }[provider[0]],
                platform=platform.processor(),
                intime=internal_time,
            )
        )
        return obs


    opts = SessionOptions()
    r = get_ort_ext_libs()
    if r is not None:
        opts.register_custom_ops_library(r[0])


    data = []
    errors = []
    pbar = tqdm(list(product(types, engine, providers, dims, domains)))
    for tt, engine, provider, dim, domain in pbar:
        if (
            tt in {TensorProto.FLOAT8E4M3FN, TensorProto.FLOAT8E5M2}
            and properties.get("major", 0) < 9
        ):
            # f8 not available
            if provider[0] == "CPUExecutionProvider":
                continue
            errors.append(
                f"f8 not available, major={properties.get('major', 0)}, "
                f"tt={tt}, provider={provider!r}, domain={domain!r}."
            )
            continue
        elif provider[0] == "CPUExecutionProvider" and max(dim) > 2000:
            # too long
            continue
        if max(dim) <= 200:
            repeat, number = 50, 25
        elif max(dim) <= 256:
            repeat, number = 25, 10
        else:
            repeat, number = 10, 4

        onx = create_model(tt, provider=provider[0], domain=domain)
        if onx is None:
            if provider[0] == "CPUExecutionProvider":
                continue
            errors.append(
                f"No model for tt={tt}, provider={provider!r}, domain={domain!r}."
            )
            continue
        with open(f"plot_bench_gemm_ort_{tt}_{domain}.onnx", "wb") as f:
            f.write(onx.SerializeToString())
        k1 = (tt, dim[2], dim[0])
        k2 = (tt, dim[2], dim[1])
        if k1 not in matrices:
            errors.append(f"Key k1={k1!r} not in matrices.")
            continue
        if k2 not in matrices:
            errors.append(f"Key k2={k2!r} not in matrices.")
            continue

        pbar.set_description(f"t={tt} e={engine.__name__} p={provider[0][:4]} dim={dim}")

        if engine == CReferenceEvaluator:
            if (
                domain != ""
                or max(dim) > 256
                or provider != ["CPUExecutionProvider"]
                or tt not in [TensorProto.FLOAT, TensorProto.FLOAT16]
            ):
                # All impossible or slow cases.
                continue
            if tt == TensorProto.FLOAT16 and max(dim) > 50:
                repeat, number = 2, 2

            feeds = {"A": matrices[k1].numpy(), "B": matrices[k2].numpy()}
            sess = engine(onx)
            sess.run(None, feeds)
            obs = measure_time(lambda: sess.run(None, feeds), repeat=repeat, number=number)

        elif engine == InferenceSession:
            if provider[0] not in get_available_providers():
                errors.append(f"provider={provider[0]} is missing")
                continue
            try:
                sess = engine(onx.SerializeToString(), opts, providers=provider)
            except (NotImplemented, InvalidGraph, Fail) as e:
                # not implemented
                errors.append((tt, engine.__class__.__name__, provider, domain, e))
                continue

            the_feeds = (
                {"A": matrices[k1], "B": matrices[k2]}
                if provider == ["CPUExecutionProvider"]
                else {"A": matrices_cuda[k1], "B": matrices_cuda[k2]}
            )
            out_names = (
                ["C", "time"] if domain == "onnx_extented.ortops.tutorial.cuda" else ["C"]
            )

            # warmup
            for i in range(5):
                sess._sess.run_with_ort_values(the_feeds, out_names, None)[0]

            # benchamrk
            times = []

            def fct_benchmarked():
                got = sess._sess.run_with_ort_values(the_feeds, out_names, None)
                if len(got) > 1:
                    times.append(got[1])

            obs = measure_time(fct_benchmarked, repeat=repeat, number=number)
            internal_time = None
            if len(times) > 0:
                np_times = [t.numpy() for t in times]
                internal_time = (sum(np_times) / len(times))[0]

        else:
            errors.append(f"unknown engine={engine}")
            continue

        # improves the rendering
        obs = rendering_obs(obs, dim, number, repeat, domain, provider, internal_time)
        data.append(obs)
        if unit_test_going() and len(data) >= 2:
            break





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/288 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=(32, 32, 32):   0%|          | 0/288 [00:00<?, ?it/s]    t=1 e=InferenceSession p=CUDA dim=(32, 32, 32):  25%|##5       | 73/288 [00:10<00:32,  6.66it/s]    t=1 e=InferenceSession p=CUDA dim=(32, 32, 32):  25%|##5       | 73/288 [00:10<00:32,  6.66it/s]    t=1 e=InferenceSession p=CUDA dim=(32, 32, 32):  26%|##5       | 74/288 [00:12<00:36,  5.92it/s]    t=1 e=InferenceSession p=CUDA dim=(32, 32, 32):  26%|##5       | 74/288 [00:12<00:36,  5.92it/s]    t=1 e=InferenceSession p=CUDA dim=(128, 128, 128):  26%|##5       | 74/288 [00:12<00:36,  5.92it/s]    t=1 e=InferenceSession p=CUDA dim=(128, 128, 128):  26%|##6       | 76/288 [00:23<01:34,  2.25it/s]    t=1 e=InferenceSession p=CUDA dim=(128, 128, 128):  26%|##6       | 76/288 [00:23<01:34,  2.25it/s]    t=1 e=InferenceSession p=CUDA dim=(128, 128, 128):  27%|##6       | 77/288 [00:23<01:36,  2.18it/s]    t=1 e=InferenceSession p=CUDA dim=(128, 128, 128):  27%|##6       | 77/288 [00:23<01:36,  2.18it/s]    t=1 e=InferenceSession p=CUDA dim=(256, 256, 256):  27%|##6       | 77/288 [00:23<01:36,  2.18it/s]    t=1 e=InferenceSession p=CUDA dim=(256, 256, 256):  27%|##7       | 79/288 [00:26<01:50,  1.90it/s]    t=1 e=InferenceSession p=CUDA dim=(256, 256, 256):  27%|##7       | 79/288 [00:26<01:50,  1.90it/s]    t=1 e=InferenceSession p=CUDA dim=(256, 256, 256):  28%|##7       | 80/288 [00:26<01:50,  1.88it/s]    t=1 e=InferenceSession p=CUDA dim=(256, 256, 256):  28%|##7       | 80/288 [00:26<01:50,  1.88it/s]    t=1 e=InferenceSession p=CUDA dim=(400, 400, 400):  28%|##7       | 80/288 [00:26<01:50,  1.88it/s]    t=1 e=InferenceSession p=CUDA dim=(400, 400, 400):  28%|##8       | 82/288 [00:27<01:41,  2.03it/s]    t=1 e=InferenceSession p=CUDA dim=(400, 400, 400):  28%|##8       | 82/288 [00:27<01:41,  2.03it/s]    t=1 e=InferenceSession p=CUDA dim=(400, 400, 400):  29%|##8       | 83/288 [00:27<01:36,  2.13it/s]    t=1 e=InferenceSession p=CUDA dim=(400, 400, 400):  29%|##8       | 83/288 [00:27<01:36,  2.13it/s]    t=1 e=InferenceSession p=CUDA dim=(512, 512, 512):  29%|##8       | 83/288 [00:27<01:36,  2.13it/s]    t=1 e=InferenceSession p=CUDA dim=(512, 512, 512):  30%|##9       | 85/288 [00:28<01:29,  2.26it/s]    t=1 e=InferenceSession p=CUDA dim=(512, 512, 512):  30%|##9       | 85/288 [00:28<01:29,  2.26it/s]    t=1 e=InferenceSession p=CUDA dim=(512, 512, 512):  30%|##9       | 86/288 [00:28<01:26,  2.33it/s]    t=1 e=InferenceSession p=CUDA dim=(512, 512, 512):  30%|##9       | 86/288 [00:28<01:26,  2.33it/s]    t=1 e=InferenceSession p=CUDA dim=(1024, 1024, 1024):  30%|##9       | 86/288 [00:28<01:26,  2.33it/s]    t=1 e=InferenceSession p=CUDA dim=(1024, 1024, 1024):  31%|###       | 88/288 [00:30<01:51,  1.80it/s]    t=1 e=InferenceSession p=CUDA dim=(1024, 1024, 1024):  31%|###       | 88/288 [00:30<01:51,  1.80it/s]    t=1 e=InferenceSession p=CUDA dim=(1024, 1024, 1024):  31%|###       | 89/288 [00:31<02:17,  1.45it/s]    t=1 e=InferenceSession p=CUDA dim=(1024, 1024, 1024):  31%|###       | 89/288 [00:31<02:17,  1.45it/s]    t=1 e=InferenceSession p=CPUE dim=(32, 32, 32):  31%|###       | 89/288 [00:31<02:17,  1.45it/s]          t=1 e=InferenceSession p=CPUE dim=(128, 128, 128):  31%|###       | 89/288 [00:31<02:17,  1.45it/s]    t=1 e=InferenceSession p=CPUE dim=(128, 128, 128):  33%|###2      | 95/288 [00:31<00:57,  3.36it/s]    t=1 e=InferenceSession p=CPUE dim=(256, 256, 256):  33%|###2      | 95/288 [00:31<00:57,  3.36it/s]    t=1 e=InferenceSession p=CPUE dim=(400, 400, 400):  33%|###2      | 95/288 [00:32<00:57,  3.36it/s]    t=1 e=InferenceSession p=CPUE dim=(400, 400, 400):  35%|###5      | 101/288 [00:32<00:32,  5.77it/s]    t=1 e=InferenceSession p=CPUE dim=(512, 512, 512):  35%|###5      | 101/288 [00:32<00:32,  5.77it/s]    t=1 e=InferenceSession p=CPUE dim=(512, 512, 512):  36%|###6      | 104/288 [00:32<00:25,  7.15it/s]    t=1 e=InferenceSession p=CPUE dim=(1024, 1024, 1024):  36%|###6      | 104/288 [00:32<00:25,  7.15it/s]    t=1 e=InferenceSession p=CPUE dim=(1024, 1024, 1024):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(32, 32, 32):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]       t=1 e=CReferenceEvaluator p=CUDA dim=(32, 32, 32):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(32, 32, 32):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(128, 128, 128):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(128, 128, 128):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(128, 128, 128):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(256, 256, 256):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(256, 256, 256):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(256, 256, 256):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(400, 400, 400):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(400, 400, 400):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(400, 400, 400):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(512, 512, 512):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(512, 512, 512):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(512, 512, 512):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(1024, 1024, 1024):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(1024, 1024, 1024):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CUDA dim=(1024, 1024, 1024):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=(32, 32, 32):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]          t=1 e=CReferenceEvaluator p=CPUE dim=(128, 128, 128):  37%|###7      | 107/288 [00:33<00:34,  5.31it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=(128, 128, 128):  45%|####5     | 131/288 [00:33<00:09, 16.23it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=(256, 256, 256):  45%|####5     | 131/288 [00:33<00:09, 16.23it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=(256, 256, 256):  47%|####6     | 134/288 [00:33<00:09, 16.15it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=(400, 400, 400):  47%|####6     | 134/288 [00:33<00:09, 16.15it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=(512, 512, 512):  47%|####6     | 134/288 [00:33<00:09, 16.15it/s]    t=1 e=CReferenceEvaluator p=CPUE dim=(1024, 1024, 1024):  47%|####6     | 134/288 [00:33<00:09, 16.15it/s]    t=10 e=InferenceSession p=CUDA dim=(32, 32, 32):  47%|####6     | 134/288 [00:33<00:09, 16.15it/s]            t=10 e=InferenceSession p=CUDA dim=(32, 32, 32):  50%|#####     | 145/288 [00:49<01:22,  1.73it/s]    t=10 e=InferenceSession p=CUDA dim=(32, 32, 32):  50%|#####     | 145/288 [00:49<01:22,  1.73it/s]    t=10 e=InferenceSession p=CUDA dim=(32, 32, 32):  51%|#####     | 146/288 [00:49<01:21,  1.74it/s]    t=10 e=InferenceSession p=CUDA dim=(32, 32, 32):  51%|#####     | 146/288 [00:49<01:21,  1.74it/s]    t=10 e=InferenceSession p=CUDA dim=(128, 128, 128):  51%|#####     | 146/288 [00:49<01:21,  1.74it/s]    t=10 e=InferenceSession p=CUDA dim=(128, 128, 128):  51%|#####     | 146/288 [01:03<01:21,  1.74it/s]    t=10 e=InferenceSession p=CUDA dim=(128, 128, 128):  51%|#####1    | 148/288 [01:08<03:42,  1.59s/it]    t=10 e=InferenceSession p=CUDA dim=(128, 128, 128):  51%|#####1    | 148/288 [01:08<03:42,  1.59s/it]    t=10 e=InferenceSession p=CUDA dim=(128, 128, 128):  52%|#####1    | 149/288 [01:08<03:31,  1.52s/it]    t=10 e=InferenceSession p=CUDA dim=(128, 128, 128):  52%|#####1    | 149/288 [01:08<03:31,  1.52s/it]    t=10 e=InferenceSession p=CUDA dim=(256, 256, 256):  52%|#####1    | 149/288 [01:08<03:31,  1.52s/it]    t=10 e=InferenceSession p=CUDA dim=(256, 256, 256):  52%|#####2    | 151/288 [01:13<03:52,  1.70s/it]    t=10 e=InferenceSession p=CUDA dim=(256, 256, 256):  52%|#####2    | 151/288 [01:13<03:52,  1.70s/it]    t=10 e=InferenceSession p=CUDA dim=(256, 256, 256):  53%|#####2    | 152/288 [01:14<03:31,  1.56s/it]    t=10 e=InferenceSession p=CUDA dim=(256, 256, 256):  53%|#####2    | 152/288 [01:14<03:31,  1.56s/it]    t=10 e=InferenceSession p=CUDA dim=(400, 400, 400):  53%|#####2    | 152/288 [01:14<03:31,  1.56s/it]    t=10 e=InferenceSession p=CUDA dim=(400, 400, 400):  53%|#####3    | 154/288 [01:17<03:33,  1.59s/it]    t=10 e=InferenceSession p=CUDA dim=(400, 400, 400):  53%|#####3    | 154/288 [01:17<03:33,  1.59s/it]    t=10 e=InferenceSession p=CUDA dim=(400, 400, 400):  54%|#####3    | 155/288 [01:17<03:03,  1.38s/it]    t=10 e=InferenceSession p=CUDA dim=(400, 400, 400):  54%|#####3    | 155/288 [01:17<03:03,  1.38s/it]    t=10 e=InferenceSession p=CUDA dim=(512, 512, 512):  54%|#####3    | 155/288 [01:17<03:03,  1.38s/it]    t=10 e=InferenceSession p=CUDA dim=(512, 512, 512):  55%|#####4    | 157/288 [01:23<03:52,  1.77s/it]    t=10 e=InferenceSession p=CUDA dim=(512, 512, 512):  55%|#####4    | 157/288 [01:23<03:52,  1.77s/it]    t=10 e=InferenceSession p=CUDA dim=(512, 512, 512):  55%|#####4    | 158/288 [01:23<03:15,  1.50s/it]    t=10 e=InferenceSession p=CUDA dim=(512, 512, 512):  55%|#####4    | 158/288 [01:23<03:15,  1.50s/it]    t=10 e=InferenceSession p=CUDA dim=(1024, 1024, 1024):  55%|#####4    | 158/288 [01:23<03:15,  1.50s/it]    t=10 e=InferenceSession p=CUDA dim=(1024, 1024, 1024):  56%|#####5    | 160/288 [01:57<14:21,  6.73s/it]    t=10 e=InferenceSession p=CUDA dim=(1024, 1024, 1024):  56%|#####5    | 160/288 [01:57<14:21,  6.73s/it]    t=10 e=InferenceSession p=CUDA dim=(1024, 1024, 1024):  56%|#####5    | 161/288 [01:58<11:53,  5.62s/it]    t=10 e=InferenceSession p=CUDA dim=(1024, 1024, 1024):  56%|#####5    | 161/288 [01:58<11:53,  5.62s/it]    t=10 e=InferenceSession p=CPUE dim=(32, 32, 32):  56%|#####5    | 161/288 [01:58<11:53,  5.62s/it]          t=10 e=InferenceSession p=CPUE dim=(32, 32, 32):  57%|#####6    | 164/288 [01:58<06:23,  3.09s/it]    t=10 e=InferenceSession p=CPUE dim=(128, 128, 128):  57%|#####6    | 164/288 [01:58<06:23,  3.09s/it]    t=10 e=InferenceSession p=CPUE dim=(128, 128, 128):  58%|#####7    | 167/288 [01:59<03:53,  1.93s/it]    t=10 e=InferenceSession p=CPUE dim=(256, 256, 256):  58%|#####7    | 167/288 [01:59<03:53,  1.93s/it]    t=10 e=InferenceSession p=CPUE dim=(256, 256, 256):  59%|#####9    | 170/288 [01:59<02:30,  1.28s/it]    t=10 e=InferenceSession p=CPUE dim=(400, 400, 400):  59%|#####9    | 170/288 [01:59<02:30,  1.28s/it]    t=10 e=InferenceSession p=CPUE dim=(400, 400, 400):  60%|######    | 173/288 [01:59<01:39,  1.15it/s]    t=10 e=InferenceSession p=CPUE dim=(512, 512, 512):  60%|######    | 173/288 [01:59<01:39,  1.15it/s]    t=10 e=InferenceSession p=CPUE dim=(512, 512, 512):  61%|######1   | 176/288 [01:59<01:09,  1.62it/s]    t=10 e=InferenceSession p=CPUE dim=(1024, 1024, 1024):  61%|######1   | 176/288 [01:59<01:09,  1.62it/s]    t=10 e=InferenceSession p=CPUE dim=(1024, 1024, 1024):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(32, 32, 32):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]       t=10 e=CReferenceEvaluator p=CUDA dim=(32, 32, 32):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(32, 32, 32):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(128, 128, 128):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(128, 128, 128):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(128, 128, 128):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(256, 256, 256):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(256, 256, 256):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(256, 256, 256):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(400, 400, 400):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(400, 400, 400):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(400, 400, 400):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(512, 512, 512):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(512, 512, 512):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(512, 512, 512):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(1024, 1024, 1024):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(1024, 1024, 1024):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CUDA dim=(1024, 1024, 1024):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=(32, 32, 32):  62%|######2   | 179/288 [02:01<01:06,  1.65it/s]          t=10 e=CReferenceEvaluator p=CPUE dim=(32, 32, 32):  69%|######9   | 200/288 [02:02<00:13,  6.30it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=(128, 128, 128):  69%|######9   | 200/288 [02:02<00:13,  6.30it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=(256, 256, 256):  69%|######9   | 200/288 [02:02<00:13,  6.30it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=(256, 256, 256):  72%|#######1  | 206/288 [02:02<00:12,  6.44it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=(400, 400, 400):  72%|#######1  | 206/288 [02:02<00:12,  6.44it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=(512, 512, 512):  72%|#######1  | 206/288 [02:02<00:12,  6.44it/s]    t=10 e=CReferenceEvaluator p=CPUE dim=(1024, 1024, 1024):  72%|#######1  | 206/288 [02:02<00:12,  6.44it/s]    t=16 e=InferenceSession p=CUDA dim=(32, 32, 32):  72%|#######1  | 206/288 [02:02<00:12,  6.44it/s]             t=16 e=InferenceSession p=CUDA dim=(32, 32, 32):  76%|#######5  | 218/288 [02:04<00:09,  7.01it/s]    t=16 e=InferenceSession p=CUDA dim=(32, 32, 32):  76%|#######5  | 218/288 [02:04<00:09,  7.01it/s]    t=16 e=InferenceSession p=CUDA dim=(128, 128, 128):  76%|#######5  | 218/288 [02:04<00:09,  7.01it/s]    t=16 e=InferenceSession p=CUDA dim=(128, 128, 128):  77%|#######6  | 221/288 [02:05<00:11,  5.95it/s]    t=16 e=InferenceSession p=CUDA dim=(128, 128, 128):  77%|#######6  | 221/288 [02:05<00:11,  5.95it/s]    t=16 e=InferenceSession p=CUDA dim=(256, 256, 256):  77%|#######6  | 221/288 [02:05<00:11,  5.95it/s]    t=16 e=InferenceSession p=CUDA dim=(256, 256, 256):  78%|#######7  | 224/288 [02:05<00:10,  6.10it/s]    t=16 e=InferenceSession p=CUDA dim=(256, 256, 256):  78%|#######7  | 224/288 [02:05<00:10,  6.10it/s]    t=16 e=InferenceSession p=CUDA dim=(400, 400, 400):  78%|#######7  | 224/288 [02:05<00:10,  6.10it/s]    t=16 e=InferenceSession p=CUDA dim=(400, 400, 400):  79%|#######8  | 227/288 [02:06<00:08,  6.84it/s]    t=16 e=InferenceSession p=CUDA dim=(400, 400, 400):  79%|#######8  | 227/288 [02:06<00:08,  6.84it/s]    t=16 e=InferenceSession p=CUDA dim=(512, 512, 512):  79%|#######8  | 227/288 [02:06<00:08,  6.84it/s]    t=16 e=InferenceSession p=CUDA dim=(512, 512, 512):  80%|#######9  | 230/288 [02:06<00:08,  7.24it/s]    t=16 e=InferenceSession p=CUDA dim=(512, 512, 512):  80%|#######9  | 230/288 [02:06<00:08,  7.24it/s]    t=16 e=InferenceSession p=CUDA dim=(1024, 1024, 1024):  80%|#######9  | 230/288 [02:06<00:08,  7.24it/s]    t=16 e=InferenceSession p=CUDA dim=(1024, 1024, 1024):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=InferenceSession p=CUDA dim=(1024, 1024, 1024):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=InferenceSession p=CPUE dim=(32, 32, 32):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]          t=16 e=InferenceSession p=CPUE dim=(128, 128, 128):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=InferenceSession p=CPUE dim=(256, 256, 256):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=InferenceSession p=CPUE dim=(400, 400, 400):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=InferenceSession p=CPUE dim=(512, 512, 512):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=InferenceSession p=CPUE dim=(1024, 1024, 1024):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=(32, 32, 32):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]       t=16 e=CReferenceEvaluator p=CUDA dim=(32, 32, 32):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=(128, 128, 128):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=(128, 128, 128):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=(256, 256, 256):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=(256, 256, 256):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=(400, 400, 400):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=(400, 400, 400):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=(512, 512, 512):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=(512, 512, 512):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=(1024, 1024, 1024):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=CReferenceEvaluator p=CUDA dim=(1024, 1024, 1024):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=(32, 32, 32):  81%|########  | 233/288 [02:07<00:11,  4.88it/s]          t=16 e=CReferenceEvaluator p=CPUE dim=(32, 32, 32):  94%|#########4| 272/288 [02:07<00:00, 24.02it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=(128, 128, 128):  94%|#########4| 272/288 [02:07<00:00, 24.02it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=(256, 256, 256):  94%|#########4| 272/288 [02:07<00:00, 24.02it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=(400, 400, 400):  94%|#########4| 272/288 [02:07<00:00, 24.02it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=(512, 512, 512):  94%|#########4| 272/288 [02:07<00:00, 24.02it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=(1024, 1024, 1024):  94%|#########4| 272/288 [02:07<00:00, 24.02it/s]    t=16 e=CReferenceEvaluator p=CPUE dim=(1024, 1024, 1024): 100%|##########| 288/288 [02:07<00:00,  2.25it/s]




.. GENERATED FROM PYTHON SOURCE LINES 469-471

Results
+++++++

.. GENERATED FROM PYTHON SOURCE LINES 471-479

.. code-block:: default


    df = DataFrame(data)
    df.to_excel("plot_bench_gemm_ort.xlsx")
    df.to_csv("plot_bench_gemm_ort.csv")
    df.drop(["min_exec", "max_exec"], axis=1).to_csv("plot_bench_gemm_ort.csv")
    print(df.head().T)
    df





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                                0                1                    2                    3                     4
    average              0.008717         0.000876             0.008716             0.000657              0.009283
    deviation            0.001066         0.000278             0.000802             0.000187              0.000663
    min_exec              0.00614         0.000208             0.006237             0.000491              0.007439
    max_exec             0.011697         0.001284              0.01082             0.001266              0.010318
    repeat                     50               50                   50                   50                    25
    number                     25               25                   25                   25                    10
    ttime                0.435862         0.043784             0.435812              0.03286              0.232083
    context_size               64               64                   64                   64                    64
    warmup_time          0.007758          0.00122             0.006054             0.001631              0.007234
    engine                    ort              ort                  ort                  ort                   ort
    stype                     f32              f32                  f32                  f32                   f32
    type                      f32              f32                  f32                  f32                   f32
    M                          32               32                  128                  128                   256
    N                          32               32                  128                  128                   256
    K                          32               32                  128                  128                   256
    cost                   131072           131072              8388608              8388608              67108864
    cost_s        131072-32x32x32  131072-32x32x32  8388608-128x128x128  8388608-128x128x128  67108864-256x256x256
    domain                    EXT              ORT                  EXT                  ORT                   EXT
    provider                 cuda             cuda                 cuda                 cuda                  cuda
    platform               x86_64           x86_64               x86_64               x86_64                x86_64
    intime               0.007361              NaN             0.007197                  NaN              0.007078


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>average</th>
          <th>deviation</th>
          <th>min_exec</th>
          <th>max_exec</th>
          <th>repeat</th>
          <th>number</th>
          <th>ttime</th>
          <th>context_size</th>
          <th>warmup_time</th>
          <th>engine</th>
          <th>stype</th>
          <th>type</th>
          <th>M</th>
          <th>N</th>
          <th>K</th>
          <th>cost</th>
          <th>cost_s</th>
          <th>domain</th>
          <th>provider</th>
          <th>platform</th>
          <th>intime</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.008717</td>
          <td>0.001066</td>
          <td>0.006140</td>
          <td>0.011697</td>
          <td>50</td>
          <td>25</td>
          <td>0.435862</td>
          <td>64</td>
          <td>0.007758</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.007361</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.000876</td>
          <td>0.000278</td>
          <td>0.000208</td>
          <td>0.001284</td>
          <td>50</td>
          <td>25</td>
          <td>0.043784</td>
          <td>64</td>
          <td>0.001220</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.008716</td>
          <td>0.000802</td>
          <td>0.006237</td>
          <td>0.010820</td>
          <td>50</td>
          <td>25</td>
          <td>0.435812</td>
          <td>64</td>
          <td>0.006054</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.007197</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.000657</td>
          <td>0.000187</td>
          <td>0.000491</td>
          <td>0.001266</td>
          <td>50</td>
          <td>25</td>
          <td>0.032860</td>
          <td>64</td>
          <td>0.001631</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.009283</td>
          <td>0.000663</td>
          <td>0.007439</td>
          <td>0.010318</td>
          <td>25</td>
          <td>10</td>
          <td>0.232083</td>
          <td>64</td>
          <td>0.007234</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.007078</td>
        </tr>
        <tr>
          <th>5</th>
          <td>0.002289</td>
          <td>0.000196</td>
          <td>0.001861</td>
          <td>0.002671</td>
          <td>25</td>
          <td>10</td>
          <td>0.057220</td>
          <td>64</td>
          <td>0.002512</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>6</th>
          <td>0.011905</td>
          <td>0.000883</td>
          <td>0.010317</td>
          <td>0.013348</td>
          <td>10</td>
          <td>4</td>
          <td>0.119048</td>
          <td>64</td>
          <td>0.010046</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.008081</td>
        </tr>
        <tr>
          <th>7</th>
          <td>0.004924</td>
          <td>0.000098</td>
          <td>0.004731</td>
          <td>0.005062</td>
          <td>10</td>
          <td>4</td>
          <td>0.049240</td>
          <td>64</td>
          <td>0.004687</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>8</th>
          <td>0.014822</td>
          <td>0.000953</td>
          <td>0.013645</td>
          <td>0.016309</td>
          <td>10</td>
          <td>4</td>
          <td>0.148217</td>
          <td>64</td>
          <td>0.013027</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.009131</td>
        </tr>
        <tr>
          <th>9</th>
          <td>0.007027</td>
          <td>0.000332</td>
          <td>0.006525</td>
          <td>0.007450</td>
          <td>10</td>
          <td>4</td>
          <td>0.070275</td>
          <td>64</td>
          <td>0.007572</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.038518</td>
          <td>0.001280</td>
          <td>0.036366</td>
          <td>0.040888</td>
          <td>10</td>
          <td>4</td>
          <td>0.385178</td>
          <td>64</td>
          <td>0.039950</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.020969</td>
        </tr>
        <tr>
          <th>11</th>
          <td>0.028905</td>
          <td>0.000148</td>
          <td>0.028716</td>
          <td>0.029138</td>
          <td>10</td>
          <td>4</td>
          <td>0.289049</td>
          <td>64</td>
          <td>0.028809</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>12</th>
          <td>0.000025</td>
          <td>0.000004</td>
          <td>0.000018</td>
          <td>0.000032</td>
          <td>50</td>
          <td>25</td>
          <td>0.001238</td>
          <td>64</td>
          <td>0.000054</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>13</th>
          <td>0.000065</td>
          <td>0.000024</td>
          <td>0.000044</td>
          <td>0.000180</td>
          <td>50</td>
          <td>25</td>
          <td>0.003271</td>
          <td>64</td>
          <td>0.000107</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>14</th>
          <td>0.000314</td>
          <td>0.000046</td>
          <td>0.000202</td>
          <td>0.000458</td>
          <td>25</td>
          <td>10</td>
          <td>0.007854</td>
          <td>64</td>
          <td>0.000326</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>15</th>
          <td>0.001334</td>
          <td>0.000141</td>
          <td>0.000939</td>
          <td>0.001489</td>
          <td>10</td>
          <td>4</td>
          <td>0.013341</td>
          <td>64</td>
          <td>0.000798</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>16</th>
          <td>0.002350</td>
          <td>0.000566</td>
          <td>0.001319</td>
          <td>0.002845</td>
          <td>10</td>
          <td>4</td>
          <td>0.023502</td>
          <td>64</td>
          <td>0.002809</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>17</th>
          <td>0.021474</td>
          <td>0.002503</td>
          <td>0.017244</td>
          <td>0.026752</td>
          <td>10</td>
          <td>4</td>
          <td>0.214740</td>
          <td>64</td>
          <td>0.017371</td>
          <td>ort</td>
          <td>f32</td>
          <td>f32</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>18</th>
          <td>0.000029</td>
          <td>0.000003</td>
          <td>0.000026</td>
          <td>0.000044</td>
          <td>50</td>
          <td>25</td>
          <td>0.001464</td>
          <td>64</td>
          <td>0.000073</td>
          <td>np</td>
          <td>f32</td>
          <td>f32</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>19</th>
          <td>0.000313</td>
          <td>0.000467</td>
          <td>0.000118</td>
          <td>0.002541</td>
          <td>50</td>
          <td>25</td>
          <td>0.015669</td>
          <td>64</td>
          <td>0.000225</td>
          <td>np</td>
          <td>f32</td>
          <td>f32</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>20</th>
          <td>0.000746</td>
          <td>0.000564</td>
          <td>0.000395</td>
          <td>0.002294</td>
          <td>25</td>
          <td>10</td>
          <td>0.018639</td>
          <td>64</td>
          <td>0.000405</td>
          <td>np</td>
          <td>f32</td>
          <td>f32</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>21</th>
          <td>0.012332</td>
          <td>0.000969</td>
          <td>0.009274</td>
          <td>0.014452</td>
          <td>50</td>
          <td>25</td>
          <td>0.616623</td>
          <td>64</td>
          <td>0.012408</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.010861</td>
        </tr>
        <tr>
          <th>22</th>
          <td>0.000419</td>
          <td>0.000294</td>
          <td>0.000219</td>
          <td>0.001162</td>
          <td>50</td>
          <td>25</td>
          <td>0.020946</td>
          <td>64</td>
          <td>0.001227</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>23</th>
          <td>0.014445</td>
          <td>0.001467</td>
          <td>0.011979</td>
          <td>0.017045</td>
          <td>50</td>
          <td>25</td>
          <td>0.722271</td>
          <td>64</td>
          <td>0.014515</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.013102</td>
        </tr>
        <tr>
          <th>24</th>
          <td>0.000560</td>
          <td>0.000091</td>
          <td>0.000424</td>
          <td>0.000811</td>
          <td>50</td>
          <td>25</td>
          <td>0.028000</td>
          <td>64</td>
          <td>0.001084</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>25</th>
          <td>0.019589</td>
          <td>0.000677</td>
          <td>0.018533</td>
          <td>0.020940</td>
          <td>25</td>
          <td>10</td>
          <td>0.489737</td>
          <td>64</td>
          <td>0.018432</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.018149</td>
        </tr>
        <tr>
          <th>26</th>
          <td>0.001754</td>
          <td>0.000130</td>
          <td>0.001538</td>
          <td>0.002017</td>
          <td>25</td>
          <td>10</td>
          <td>0.043843</td>
          <td>64</td>
          <td>0.002644</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>27</th>
          <td>0.073523</td>
          <td>0.002609</td>
          <td>0.071439</td>
          <td>0.078724</td>
          <td>10</td>
          <td>4</td>
          <td>0.735231</td>
          <td>64</td>
          <td>0.066943</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.070809</td>
        </tr>
        <tr>
          <th>28</th>
          <td>0.003341</td>
          <td>0.000221</td>
          <td>0.003027</td>
          <td>0.003795</td>
          <td>10</td>
          <td>4</td>
          <td>0.033412</td>
          <td>64</td>
          <td>0.004526</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>29</th>
          <td>0.116226</td>
          <td>0.003192</td>
          <td>0.111315</td>
          <td>0.122747</td>
          <td>10</td>
          <td>4</td>
          <td>1.162255</td>
          <td>64</td>
          <td>0.114646</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.113001</td>
        </tr>
        <tr>
          <th>30</th>
          <td>0.004820</td>
          <td>0.000620</td>
          <td>0.004436</td>
          <td>0.006655</td>
          <td>10</td>
          <td>4</td>
          <td>0.048198</td>
          <td>64</td>
          <td>0.004819</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>31</th>
          <td>0.743274</td>
          <td>0.016283</td>
          <td>0.721065</td>
          <td>0.775899</td>
          <td>10</td>
          <td>4</td>
          <td>7.432738</td>
          <td>64</td>
          <td>0.767236</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>EXT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>0.733833</td>
        </tr>
        <tr>
          <th>32</th>
          <td>0.020831</td>
          <td>0.000138</td>
          <td>0.020641</td>
          <td>0.021124</td>
          <td>10</td>
          <td>4</td>
          <td>0.208315</td>
          <td>64</td>
          <td>0.020834</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>33</th>
          <td>0.000048</td>
          <td>0.000016</td>
          <td>0.000024</td>
          <td>0.000117</td>
          <td>50</td>
          <td>25</td>
          <td>0.002376</td>
          <td>64</td>
          <td>0.000060</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>34</th>
          <td>0.000319</td>
          <td>0.000086</td>
          <td>0.000250</td>
          <td>0.000811</td>
          <td>50</td>
          <td>25</td>
          <td>0.015952</td>
          <td>64</td>
          <td>0.000367</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>35</th>
          <td>0.001319</td>
          <td>0.000210</td>
          <td>0.000970</td>
          <td>0.001734</td>
          <td>25</td>
          <td>10</td>
          <td>0.032987</td>
          <td>64</td>
          <td>0.000994</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>36</th>
          <td>0.004346</td>
          <td>0.000619</td>
          <td>0.003584</td>
          <td>0.005515</td>
          <td>10</td>
          <td>4</td>
          <td>0.043460</td>
          <td>64</td>
          <td>0.003612</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>37</th>
          <td>0.006551</td>
          <td>0.000696</td>
          <td>0.005479</td>
          <td>0.007626</td>
          <td>10</td>
          <td>4</td>
          <td>0.065509</td>
          <td>64</td>
          <td>0.005639</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>38</th>
          <td>0.037936</td>
          <td>0.001849</td>
          <td>0.035727</td>
          <td>0.041534</td>
          <td>10</td>
          <td>4</td>
          <td>0.379361</td>
          <td>64</td>
          <td>0.035472</td>
          <td>ort</td>
          <td>f16</td>
          <td>f16</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>39</th>
          <td>0.000279</td>
          <td>0.000022</td>
          <td>0.000254</td>
          <td>0.000352</td>
          <td>50</td>
          <td>25</td>
          <td>0.013959</td>
          <td>64</td>
          <td>0.000415</td>
          <td>np</td>
          <td>f16</td>
          <td>f16</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>40</th>
          <td>0.013398</td>
          <td>0.000171</td>
          <td>0.013227</td>
          <td>0.013569</td>
          <td>2</td>
          <td>2</td>
          <td>0.026796</td>
          <td>64</td>
          <td>0.013578</td>
          <td>np</td>
          <td>f16</td>
          <td>f16</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>41</th>
          <td>0.129975</td>
          <td>0.017290</td>
          <td>0.112685</td>
          <td>0.147264</td>
          <td>2</td>
          <td>2</td>
          <td>0.259949</td>
          <td>64</td>
          <td>0.129978</td>
          <td>np</td>
          <td>f16</td>
          <td>f16</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cpu</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>42</th>
          <td>0.001158</td>
          <td>0.000486</td>
          <td>0.000445</td>
          <td>0.002131</td>
          <td>50</td>
          <td>25</td>
          <td>0.057886</td>
          <td>64</td>
          <td>0.000698</td>
          <td>ort</td>
          <td>bf16</td>
          <td>bf16</td>
          <td>32</td>
          <td>32</td>
          <td>32</td>
          <td>131072</td>
          <td>131072-32x32x32</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>43</th>
          <td>0.000813</td>
          <td>0.000087</td>
          <td>0.000686</td>
          <td>0.001010</td>
          <td>50</td>
          <td>25</td>
          <td>0.040651</td>
          <td>64</td>
          <td>0.000823</td>
          <td>ort</td>
          <td>bf16</td>
          <td>bf16</td>
          <td>128</td>
          <td>128</td>
          <td>128</td>
          <td>8388608</td>
          <td>8388608-128x128x128</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>44</th>
          <td>0.001589</td>
          <td>0.000094</td>
          <td>0.001417</td>
          <td>0.001887</td>
          <td>25</td>
          <td>10</td>
          <td>0.039726</td>
          <td>64</td>
          <td>0.002170</td>
          <td>ort</td>
          <td>bf16</td>
          <td>bf16</td>
          <td>256</td>
          <td>256</td>
          <td>256</td>
          <td>67108864</td>
          <td>67108864-256x256x256</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>45</th>
          <td>0.003998</td>
          <td>0.000442</td>
          <td>0.003495</td>
          <td>0.004951</td>
          <td>10</td>
          <td>4</td>
          <td>0.039985</td>
          <td>64</td>
          <td>0.003721</td>
          <td>ort</td>
          <td>bf16</td>
          <td>bf16</td>
          <td>400</td>
          <td>400</td>
          <td>400</td>
          <td>256000000</td>
          <td>256000000-400x400x400</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>46</th>
          <td>0.005825</td>
          <td>0.000075</td>
          <td>0.005728</td>
          <td>0.005936</td>
          <td>10</td>
          <td>4</td>
          <td>0.058254</td>
          <td>64</td>
          <td>0.005902</td>
          <td>ort</td>
          <td>bf16</td>
          <td>bf16</td>
          <td>512</td>
          <td>512</td>
          <td>512</td>
          <td>536870912</td>
          <td>536870912-512x512x512</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>47</th>
          <td>0.028001</td>
          <td>0.000532</td>
          <td>0.027448</td>
          <td>0.028936</td>
          <td>10</td>
          <td>4</td>
          <td>0.280008</td>
          <td>64</td>
          <td>0.027384</td>
          <td>ort</td>
          <td>bf16</td>
          <td>bf16</td>
          <td>1024</td>
          <td>1024</td>
          <td>1024</td>
          <td>4294967296</td>
          <td>4294967296-1024x1024x1024</td>
          <td>ORT</td>
          <td>cuda</td>
          <td>x86_64</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 480-482

The errors
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 482-485

.. code-block:: default

    for i, e in enumerate(errors):
        print(f"{i+1}/{len(errors)}-{e}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    2/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    3/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    4/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    5/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    6/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    7/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    8/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    9/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    10/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    11/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    12/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    13/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    14/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    15/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    16/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    17/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    18/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    19/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    20/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    21/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    22/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    23/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    24/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    25/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    26/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    27/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    28/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    29/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    30/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    31/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    32/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    33/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    34/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    35/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain=''.
    36/72-f8 not available, major=6, tt=17, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='com.microsoft'.
    37/72-(1, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    38/72-(1, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    39/72-(1, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    40/72-(1, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    41/72-(1, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    42/72-(1, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    43/72-(10, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    44/72-(10, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    45/72-(10, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    46/72-(10, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    47/72-(10, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    48/72-(10, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    49/72-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    50/72-(16, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    51/72-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    52/72-(16, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    53/72-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    54/72-(16, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    55/72-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    56/72-(16, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    57/72-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    58/72-(16, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    59/72-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    60/72-(16, 'type', ['CUDAExecutionProvider', 'CPUExecutionProvider'], 'com.microsoft', Fail('[ONNXRuntimeError] : 1 : FAIL : Fatal error: com.microsoft:GemmFloat8(-1) is not a registered function/op'))
    61/72-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    62/72-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    63/72-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    64/72-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    65/72-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    66/72-(16, 'type', ['CPUExecutionProvider'], '', NotImplemented("[ONNXRuntimeError] : 9 : NOT_IMPLEMENTED : Could not find an implementation for Gemm(13) node with name ''"))
    67/72-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    68/72-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    69/72-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    70/72-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    71/72-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.
    72/72-No model for tt=16, provider=['CUDAExecutionProvider', 'CPUExecutionProvider'], domain='onnx_extented.ortops.tutorial.cuda'.




.. GENERATED FROM PYTHON SOURCE LINES 486-488

Summary
+++++++

.. GENERATED FROM PYTHON SOURCE LINES 488-503

.. code-block:: default


    piv = pivot_table(
        df,
        index=["cost"],
        columns=["provider", "type", "domain", "engine"],
        values=["average", "intime"],
    )
    piv.reset_index(drop=False).to_excel("plot_bench_gemm_ort_summary.xlsx")
    piv.reset_index(drop=False).to_csv("plot_bench_gemm_ort_summary.csv")


    print("summary")
    print(piv)
    piv





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    summary
                 average                                                                                    intime          
    provider         cpu                                    cuda                                              cuda          
    type             f16                 f32                bf16       f16                 f32                 f16       f32
    domain           ORT                 ORT                 ORT       EXT       ORT       EXT       ORT       EXT       EXT
    engine            np       ort        np       ort       ort       ort       ort       ort       ort       ort       ort
    cost                                                                                                                    
    131072      0.000279  0.000048  0.000029  0.000025  0.001158  0.012332  0.000419  0.008717  0.000876  0.010861  0.007361
    8388608     0.013398  0.000319  0.000313  0.000065  0.000813  0.014445  0.000560  0.008716  0.000657  0.013102  0.007197
    67108864    0.129975  0.001319  0.000746  0.000314  0.001589  0.019589  0.001754  0.009283  0.002289  0.018149  0.007078
    256000000        NaN  0.004346       NaN  0.001334  0.003998  0.073523  0.003341  0.011905  0.004924  0.070809  0.008081
    536870912        NaN  0.006551       NaN  0.002350  0.005825  0.116226  0.004820  0.014822  0.007027  0.113001  0.009131
    4294967296       NaN  0.037936       NaN  0.021474  0.028001  0.743274  0.020831  0.038518  0.028905  0.733833  0.020969


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead tr th {
            text-align: left;
        }

        .dataframe thead tr:last-of-type th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th colspan="9" halign="left">average</th>
          <th colspan="2" halign="left">intime</th>
        </tr>
        <tr>
          <th>provider</th>
          <th colspan="4" halign="left">cpu</th>
          <th colspan="5" halign="left">cuda</th>
          <th colspan="2" halign="left">cuda</th>
        </tr>
        <tr>
          <th>type</th>
          <th colspan="2" halign="left">f16</th>
          <th colspan="2" halign="left">f32</th>
          <th>bf16</th>
          <th colspan="2" halign="left">f16</th>
          <th colspan="2" halign="left">f32</th>
          <th>f16</th>
          <th>f32</th>
        </tr>
        <tr>
          <th>domain</th>
          <th colspan="2" halign="left">ORT</th>
          <th colspan="2" halign="left">ORT</th>
          <th>ORT</th>
          <th>EXT</th>
          <th>ORT</th>
          <th>EXT</th>
          <th>ORT</th>
          <th>EXT</th>
          <th>EXT</th>
        </tr>
        <tr>
          <th>engine</th>
          <th>np</th>
          <th>ort</th>
          <th>np</th>
          <th>ort</th>
          <th>ort</th>
          <th>ort</th>
          <th>ort</th>
          <th>ort</th>
          <th>ort</th>
          <th>ort</th>
          <th>ort</th>
        </tr>
        <tr>
          <th>cost</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>131072</th>
          <td>0.000279</td>
          <td>0.000048</td>
          <td>0.000029</td>
          <td>0.000025</td>
          <td>0.001158</td>
          <td>0.012332</td>
          <td>0.000419</td>
          <td>0.008717</td>
          <td>0.000876</td>
          <td>0.010861</td>
          <td>0.007361</td>
        </tr>
        <tr>
          <th>8388608</th>
          <td>0.013398</td>
          <td>0.000319</td>
          <td>0.000313</td>
          <td>0.000065</td>
          <td>0.000813</td>
          <td>0.014445</td>
          <td>0.000560</td>
          <td>0.008716</td>
          <td>0.000657</td>
          <td>0.013102</td>
          <td>0.007197</td>
        </tr>
        <tr>
          <th>67108864</th>
          <td>0.129975</td>
          <td>0.001319</td>
          <td>0.000746</td>
          <td>0.000314</td>
          <td>0.001589</td>
          <td>0.019589</td>
          <td>0.001754</td>
          <td>0.009283</td>
          <td>0.002289</td>
          <td>0.018149</td>
          <td>0.007078</td>
        </tr>
        <tr>
          <th>256000000</th>
          <td>NaN</td>
          <td>0.004346</td>
          <td>NaN</td>
          <td>0.001334</td>
          <td>0.003998</td>
          <td>0.073523</td>
          <td>0.003341</td>
          <td>0.011905</td>
          <td>0.004924</td>
          <td>0.070809</td>
          <td>0.008081</td>
        </tr>
        <tr>
          <th>536870912</th>
          <td>NaN</td>
          <td>0.006551</td>
          <td>NaN</td>
          <td>0.002350</td>
          <td>0.005825</td>
          <td>0.116226</td>
          <td>0.004820</td>
          <td>0.014822</td>
          <td>0.007027</td>
          <td>0.113001</td>
          <td>0.009131</td>
        </tr>
        <tr>
          <th>4294967296</th>
          <td>NaN</td>
          <td>0.037936</td>
          <td>NaN</td>
          <td>0.021474</td>
          <td>0.028001</td>
          <td>0.743274</td>
          <td>0.020831</td>
          <td>0.038518</td>
          <td>0.028905</td>
          <td>0.733833</td>
          <td>0.020969</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 504-505

With the dimensions.

.. GENERATED FROM PYTHON SOURCE LINES 505-514

.. code-block:: default


    pivs = pivot_table(
        df,
        index=["cost_s"],
        columns=["provider", "type", "domain", "engine"],
        values=["average", "intime"],
    )
    print(pivs)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                                average                                                                                    intime          
    provider                        cpu                                    cuda                                              cuda          
    type                            f16                 f32                bf16       f16                 f32                 f16       f32
    domain                          ORT                 ORT                 ORT       EXT       ORT       EXT       ORT       EXT       EXT
    engine                           np       ort        np       ort       ort       ort       ort       ort       ort       ort       ort
    cost_s                                                                                                                                 
    131072-32x32x32            0.000279  0.000048  0.000029  0.000025  0.001158  0.012332  0.000419  0.008717  0.000876  0.010861  0.007361
    256000000-400x400x400           NaN  0.004346       NaN  0.001334  0.003998  0.073523  0.003341  0.011905  0.004924  0.070809  0.008081
    4294967296-1024x1024x1024       NaN  0.037936       NaN  0.021474  0.028001  0.743274  0.020831  0.038518  0.028905  0.733833  0.020969
    536870912-512x512x512           NaN  0.006551       NaN  0.002350  0.005825  0.116226  0.004820  0.014822  0.007027  0.113001  0.009131
    67108864-256x256x256       0.129975  0.001319  0.000746  0.000314  0.001589  0.019589  0.001754  0.009283  0.002289  0.018149  0.007078
    8388608-128x128x128        0.013398  0.000319  0.000313  0.000065  0.000813  0.014445  0.000560  0.008716  0.000657  0.013102  0.007197




.. GENERATED FROM PYTHON SOURCE LINES 515-516

plot

.. GENERATED FROM PYTHON SOURCE LINES 516-538

.. code-block:: default


    dfi = df[
        df.type.isin({"f32", "f16", "bf16", "e4m3fn", "e5m2"}) & df.engine.isin({"ort"})
    ]
    pivi = pivot_table(
        dfi,
        index=["cost"],
        columns=["type", "domain", "provider", "engine"],
        values="average",
    )

    fig, ax = plt.subplots(1, 2, figsize=(12, 6))
    piv.plot(ax=ax[0], title="Gemm performance\nlower is better", logx=True, logy=True)
    if pivi.shape[0] > 0:
        pivi.plot(
            ax=ax[1],
            title=f"Gemm performance ORT\n{platform.processor()}",
            logx=True,
            logy=True,
        )
    fig.tight_layout()
    fig.savefig("plot_bench_gemm_ort.png")



.. image-sg:: /auto_examples/images/sphx_glr_plot_bench_gemm_ort_001.png
   :alt: Gemm performance lower is better, Gemm performance ORT x86_64
   :srcset: /auto_examples/images/sphx_glr_plot_bench_gemm_ort_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  12.468 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_gemm_ort.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_gemm_ort.py <plot_bench_gemm_ort.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_gemm_ort.ipynb <plot_bench_gemm_ort.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
