
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_cpu_vector_sum_parallel.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_bench_cpu_vector_sum_parallel.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_cpu_vector_sum_parallel.py:


Measuring CPU performance with a parallelized vector sum
========================================================

The example compares the time spend in computing the sum of all
coefficients of a matrix when the function walks through the coefficients
by rows or by columns when the computation is parallelized.

Vector Sum
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 12-76

.. code-block:: Python

    from tqdm import tqdm
    import numpy
    import matplotlib.pyplot as plt
    from pandas import DataFrame
    from onnx_extended.ext_test_case import measure_time, unit_test_going
    from onnx_extended.validation.cpu._validation import (
        vector_sum_array as vector_sum,
        vector_sum_array_parallel as vector_sum_parallel,
    )

    obs = []
    dims = [500, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 2000]
    if unit_test_going():
        dims = dims[:2]
    for dim in tqdm(dims):
        values = numpy.ones((dim, dim), dtype=numpy.float32).ravel()
        diff = abs(vector_sum(dim, values, True) - dim**2)

        res = measure_time(lambda: vector_sum(dim, values, True), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="rows",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        res = measure_time(lambda: vector_sum_parallel(dim, values, True), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="rows//",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        diff = abs(vector_sum(dim, values, False) - dim**2)
        res = measure_time(lambda: vector_sum_parallel(dim, values, False), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="cols//",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )


    df = DataFrame(obs)
    piv = df.pivot(index="dim", columns="direction", values="time_per_element")
    print(piv)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/14 [00:00<?, ?it/s]      7%|▋         | 1/14 [00:01<00:23,  1.79s/it]     14%|█▍        | 2/14 [00:05<00:38,  3.20s/it]     21%|██▏       | 3/14 [00:08<00:32,  2.91s/it]     29%|██▊       | 4/14 [00:11<00:28,  2.82s/it]     36%|███▌      | 5/14 [00:13<00:24,  2.72s/it]     43%|████▎     | 6/14 [00:15<00:20,  2.54s/it]     50%|█████     | 7/14 [00:17<00:16,  2.29s/it]     57%|█████▋    | 8/14 [00:19<00:13,  2.23s/it]     64%|██████▍   | 9/14 [00:21<00:10,  2.13s/it]     71%|███████▏  | 10/14 [00:23<00:08,  2.01s/it]     79%|███████▊  | 11/14 [00:25<00:06,  2.05s/it]     86%|████████▌ | 12/14 [00:27<00:04,  2.02s/it]     93%|█████████▎| 13/14 [00:29<00:01,  1.98s/it]    100%|██████████| 14/14 [00:31<00:00,  1.89s/it]    100%|██████████| 14/14 [00:31<00:00,  2.23s/it]
    direction        cols//          rows        rows//
    dim                                                
    500        1.509324e-08  1.230796e-09  1.655797e-08
    700        1.159998e-09  1.122447e-09  1.176860e-09
    800        7.792476e-10  1.457489e-09  5.123994e-10
    900        1.839405e-09  1.423705e-09  6.004625e-10
    1000       1.933310e-09  1.470140e-09  1.324988e-09
    1100       6.976809e-09  1.546805e-09  6.641507e-09
    1200       1.240113e-08  1.872574e-09  5.532521e-09
    1300       2.227765e-08  1.974358e-09  1.135675e-08
    1400       8.820904e-09  1.096655e-08  1.539367e-08
    1500       5.059793e-09  2.394131e-09  3.042752e-09
    1600       8.660289e-09  1.980274e-09  1.735109e-09
    1700       3.812879e-09  2.174785e-09  2.059494e-09
    1800       5.070599e-09  1.501974e-09  6.496916e-10
    2000       5.260990e-09  1.400095e-09  1.590519e-09




.. GENERATED FROM PYTHON SOURCE LINES 77-79

Plots
+++++

.. GENERATED FROM PYTHON SOURCE LINES 79-90

.. code-block:: Python


    piv_diff = df.pivot(index="dim", columns="direction", values="diff")
    piv_time = df.pivot(index="dim", columns="direction", values="time")

    fig, ax = plt.subplots(1, 3, figsize=(12, 6))
    piv.plot(ax=ax[0], logx=True, title="Comparison between two summation")
    piv_diff.plot(ax=ax[1], logx=True, logy=True, title="Summation errors")
    piv_time.plot(ax=ax[2], logx=True, logy=True, title="Total time")
    fig.tight_layout()
    fig.savefig("plot_bench_cpu_vector_sum_parallel.png")




.. image-sg:: /auto_examples/images/sphx_glr_plot_bench_cpu_vector_sum_parallel_001.png
   :alt: Comparison between two summation, Summation errors, Total time
   :srcset: /auto_examples/images/sphx_glr_plot_bench_cpu_vector_sum_parallel_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/xadupre/.local/lib/python3.10/site-packages/pandas/plotting/_matplotlib/core.py:747: UserWarning: Data has no positive values, and therefore cannot be log-scaled.
      labels = axis.get_majorticklabels() + axis.get_minorticklabels()




.. GENERATED FROM PYTHON SOURCE LINES 91-95

The summation by rows is much faster as expected.
That explains why it is usually more efficient to
transpose the first matrix before a matrix multiplication.
Parallelization is faster.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 32.665 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_cpu_vector_sum_parallel.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_cpu_vector_sum_parallel.ipynb <plot_bench_cpu_vector_sum_parallel.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_cpu_vector_sum_parallel.py <plot_bench_cpu_vector_sum_parallel.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
