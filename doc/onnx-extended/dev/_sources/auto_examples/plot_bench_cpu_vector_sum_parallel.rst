
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_cpu_vector_sum_parallel.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_bench_cpu_vector_sum_parallel.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_cpu_vector_sum_parallel.py:


Measuring CPU performance with a parallelized vector sum
========================================================

The example compares the time spend in computing the sum of all
coefficients of a matrix when the function walks through the coefficients
by rows or by columns when the computation is parallelized.

Vector Sum
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 12-76

.. code-block:: default

    from tqdm import tqdm
    import numpy
    import matplotlib.pyplot as plt
    from pandas import DataFrame
    from onnx_extended.ext_test_case import measure_time, unit_test_going
    from onnx_extended.validation.cpu._validation import (
        vector_sum_array as vector_sum,
        vector_sum_array_parallel as vector_sum_parallel,
    )

    obs = []
    dims = [500, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 2000]
    if unit_test_going():
        dims = dims[:2]
    for dim in tqdm(dims):
        values = numpy.ones((dim, dim), dtype=numpy.float32).ravel()
        diff = abs(vector_sum(dim, values, True) - dim**2)

        res = measure_time(lambda: vector_sum(dim, values, True), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="rows",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        res = measure_time(lambda: vector_sum_parallel(dim, values, True), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="rows//",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )

        diff = abs(vector_sum(dim, values, False) - dim**2)
        res = measure_time(lambda: vector_sum_parallel(dim, values, False), max_time=0.5)

        obs.append(
            dict(
                dim=dim,
                size=values.size,
                time=res["average"],
                direction="cols//",
                time_per_element=res["average"] / dim**2,
                diff=diff,
            )
        )


    df = DataFrame(obs)
    piv = df.pivot(index="dim", columns="direction", values="time_per_element")
    print(piv)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/14 [00:00<?, ?it/s]      7%|▋         | 1/14 [00:01<00:24,  1.89s/it]     14%|█▍        | 2/14 [00:05<00:35,  2.95s/it]     21%|██▏       | 3/14 [00:09<00:38,  3.52s/it]     29%|██▊       | 4/14 [00:16<00:46,  4.64s/it]     36%|███▌      | 5/14 [00:18<00:33,  3.68s/it]     43%|████▎     | 6/14 [00:22<00:32,  4.02s/it]     50%|█████     | 7/14 [00:25<00:26,  3.75s/it]     57%|█████▋    | 8/14 [00:27<00:18,  3.12s/it]     64%|██████▍   | 9/14 [00:29<00:14,  2.80s/it]     71%|███████▏  | 10/14 [00:32<00:10,  2.72s/it]     79%|███████▊  | 11/14 [00:34<00:07,  2.45s/it]     86%|████████▌ | 12/14 [00:37<00:05,  2.62s/it]     93%|█████████▎| 13/14 [00:39<00:02,  2.42s/it]    100%|██████████| 14/14 [00:41<00:00,  2.38s/it]    100%|██████████| 14/14 [00:41<00:00,  2.96s/it]
    direction        cols//          rows        rows//
    dim                                                
    500        1.037369e-09  1.300040e-09  1.129432e-09
    700        1.476130e-09  1.169075e-09  5.886387e-10
    800        5.565624e-09  1.712218e-09  1.994842e-09
    900        6.913475e-09  6.336311e-09  6.311189e-09
    1000       9.452526e-09  2.694111e-09  3.518850e-09
    1100       1.139617e-08  3.026725e-09  4.407049e-09
    1200       7.324529e-09  3.892918e-09  4.542762e-09
    1300       8.466274e-09  2.565693e-09  4.714653e-09
    1400       8.790963e-09  3.610252e-09  3.793022e-09
    1500       8.061403e-09  3.546912e-09  2.803073e-09
    1600       5.992225e-09  2.636379e-09  3.167657e-09
    1700       6.062934e-09  1.788432e-09  2.113258e-09
    1800       5.413899e-09  1.828977e-09  1.777880e-09
    2000       6.471589e-09  1.730441e-09  1.546076e-09




.. GENERATED FROM PYTHON SOURCE LINES 77-79

Plots
+++++

.. GENERATED FROM PYTHON SOURCE LINES 79-90

.. code-block:: default


    piv_diff = df.pivot(index="dim", columns="direction", values="diff")
    piv_time = df.pivot(index="dim", columns="direction", values="time")

    fig, ax = plt.subplots(1, 3, figsize=(12, 6))
    piv.plot(ax=ax[0], logx=True, title="Comparison between two summation")
    piv_diff.plot(ax=ax[1], logx=True, logy=True, title="Summation errors")
    piv_time.plot(ax=ax[2], logx=True, logy=True, title="Total time")
    fig.tight_layout()
    fig.savefig("plot_bench_cpu_vector_sum_parallel.png")




.. image-sg:: /auto_examples/images/sphx_glr_plot_bench_cpu_vector_sum_parallel_001.png
   :alt: Comparison between two summation, Summation errors, Total time
   :srcset: /auto_examples/images/sphx_glr_plot_bench_cpu_vector_sum_parallel_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/xadupre/.local/lib/python3.10/site-packages/pandas/plotting/_matplotlib/core.py:747: UserWarning: Data has no positive values, and therefore cannot be log-scaled.
      labels = axis.get_majorticklabels() + axis.get_minorticklabels()




.. GENERATED FROM PYTHON SOURCE LINES 91-95

The summation by rows is much faster as expected.
That explains why it is usually more efficient to
transpose the first matrix before a matrix multiplication.
Parallelization is faster.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 43.693 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_cpu_vector_sum_parallel.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_cpu_vector_sum_parallel.py <plot_bench_cpu_vector_sum_parallel.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_cpu_vector_sum_parallel.ipynb <plot_bench_cpu_vector_sum_parallel.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
