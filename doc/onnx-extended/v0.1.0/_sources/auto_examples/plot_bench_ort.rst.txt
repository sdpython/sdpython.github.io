
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_ort.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_bench_ort.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_ort.py:


.. _l-example-bench-ort:

Measuring onnxruntime performance
=================================

The following code measures the performance of the python bindings.
The time spent in it is not significant when the computation is huge
but it may be for small matrices.

A simple onnx model
+++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 14-39

.. code-block:: default

    import numpy
    from pandas import DataFrame
    import matplotlib.pyplot as plt
    from tqdm import tqdm
    from onnx import numpy_helper, TensorProto
    from onnx.helper import (
        make_model,
        make_node,
        make_graph,
        make_tensor_value_info,
        make_opsetid,
    )
    from onnx.checker import check_model
    from onnxruntime import InferenceSession
    from onnx_extended.ortcy.wrap.ortinf import OrtSession
    from onnx_extended.ext_test_case import measure_time, unit_test_going

    A = numpy_helper.from_array(numpy.array([1], dtype=numpy.float32), name="A")
    X = make_tensor_value_info("X", TensorProto.FLOAT, [None, None])
    Y = make_tensor_value_info("Y", TensorProto.FLOAT, [None, None])
    node1 = make_node("Add", ["X", "A"], ["Y"])
    graph = make_graph([node1], "+1", [X], [Y], [A])
    onnx_model = make_model(graph, opset_imports=[make_opsetid("", 18)], ir_version=8)
    check_model(onnx_model)








.. GENERATED FROM PYTHON SOURCE LINES 40-42

Two python bindings on CPU
++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 42-58

.. code-block:: default


    sess_ort = InferenceSession(
        onnx_model.SerializeToString(), providers=["CPUExecutionProvider"]
    )
    sess_ext = OrtSession(onnx_model.SerializeToString())

    x = numpy.random.randn(10, 10).astype(numpy.float32)
    y = x + 1

    y_ort = sess_ort.run(None, {"X": x})[0]
    y_ext = sess_ext.run([x])[0]

    d_ort = numpy.abs(y_ort - y).sum()
    d_ext = numpy.abs(y_ext - y).sum()
    print(f"Discrepancies: d_ort={d_ort}, d_ext={d_ext}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Discrepancies: d_ort=0.0, d_ext=0.0




.. GENERATED FROM PYTHON SOURCE LINES 59-63

Time measurement
++++++++++++++++

*run_1_1* is a specific implementation when there is only 1 input and output.

.. GENERATED FROM PYTHON SOURCE LINES 63-73

.. code-block:: default


    t_ort = measure_time(lambda: sess_ort.run(None, {"X": x})[0], number=200, repeat=100)
    print(f"t_ort={t_ort}")

    t_ext = measure_time(lambda: sess_ext.run([x])[0], number=200, repeat=100)
    print(f"t_ext={t_ext}")

    t_ext2 = measure_time(lambda: sess_ext.run_1_1(x), number=200, repeat=100)
    print(f"t_ext2={t_ext2}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    t_ort={'average': 1.467072404921055e-05, 'deviation': 5.178767749236388e-06, 'min_exec': 9.706670007290085e-06, 'max_exec': 3.80450450029457e-05, 'repeat': 100, 'number': 200, 'ttime': 0.001467072404921055, 'context_size': 64}
    t_ext={'average': 2.2105248499974554e-05, 'deviation': 9.045250873399251e-06, 'min_exec': 1.0917295003309847e-05, 'max_exec': 7.093342501320876e-05, 'repeat': 100, 'number': 200, 'ttime': 0.0022105248499974554, 'context_size': 64}
    t_ext2={'average': 1.5214418450523225e-05, 'deviation': 4.461332318917484e-06, 'min_exec': 9.289045010518748e-06, 'max_exec': 3.208563499356387e-05, 'repeat': 100, 'number': 200, 'ttime': 0.0015214418450523225, 'context_size': 64}




.. GENERATED FROM PYTHON SOURCE LINES 74-76

Benchmark
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 76-108

.. code-block:: default


    data = []
    for dim in tqdm([1, 10, 100, 1000]):
        if dim < 1000:
            number, repeat = 100, 50
        else:
            number, repeat = 20, 10
        x = numpy.random.randn(dim, dim).astype(numpy.float32)
        t_ort = measure_time(
            lambda: sess_ort.run(None, {"X": x})[0], number=number, repeat=50
        )
        t_ort["name"] = "ort"
        t_ort["dim"] = dim
        data.append(t_ort)

        t_ext = measure_time(lambda: sess_ext.run([x])[0], number=number, repeat=repeat)
        t_ext["name"] = "ext"
        t_ext["dim"] = dim
        data.append(t_ext)

        t_ext2 = measure_time(lambda: sess_ext.run_1_1(x), number=number, repeat=repeat)
        t_ext2["name"] = "ext_1_1"
        t_ext2["dim"] = dim
        data.append(t_ext2)

        if unit_test_going() and dim >= 10:
            break


    df = DataFrame(data)
    df





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/4 [00:00<?, ?it/s]     25%|##5       | 1/4 [00:00<00:00,  3.55it/s]     50%|#####     | 2/4 [00:00<00:00,  3.60it/s]     75%|#######5  | 3/4 [00:00<00:00,  2.88it/s]    100%|##########| 4/4 [00:02<00:00,  1.10it/s]    100%|##########| 4/4 [00:02<00:00,  1.45it/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>average</th>
          <th>deviation</th>
          <th>min_exec</th>
          <th>max_exec</th>
          <th>repeat</th>
          <th>number</th>
          <th>ttime</th>
          <th>context_size</th>
          <th>name</th>
          <th>dim</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.000019</td>
          <td>0.000009</td>
          <td>0.000010</td>
          <td>0.000054</td>
          <td>50</td>
          <td>100</td>
          <td>0.000972</td>
          <td>64</td>
          <td>ort</td>
          <td>1</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.000022</td>
          <td>0.000010</td>
          <td>0.000012</td>
          <td>0.000056</td>
          <td>50</td>
          <td>100</td>
          <td>0.001093</td>
          <td>64</td>
          <td>ext</td>
          <td>1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.000014</td>
          <td>0.000005</td>
          <td>0.000009</td>
          <td>0.000033</td>
          <td>50</td>
          <td>100</td>
          <td>0.000718</td>
          <td>64</td>
          <td>ext_1_1</td>
          <td>1</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.000021</td>
          <td>0.000014</td>
          <td>0.000011</td>
          <td>0.000073</td>
          <td>50</td>
          <td>100</td>
          <td>0.001029</td>
          <td>64</td>
          <td>ort</td>
          <td>10</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.000018</td>
          <td>0.000006</td>
          <td>0.000011</td>
          <td>0.000034</td>
          <td>50</td>
          <td>100</td>
          <td>0.000878</td>
          <td>64</td>
          <td>ext</td>
          <td>10</td>
        </tr>
        <tr>
          <th>5</th>
          <td>0.000016</td>
          <td>0.000005</td>
          <td>0.000009</td>
          <td>0.000032</td>
          <td>50</td>
          <td>100</td>
          <td>0.000800</td>
          <td>64</td>
          <td>ext_1_1</td>
          <td>10</td>
        </tr>
        <tr>
          <th>6</th>
          <td>0.000024</td>
          <td>0.000006</td>
          <td>0.000015</td>
          <td>0.000044</td>
          <td>50</td>
          <td>100</td>
          <td>0.001216</td>
          <td>64</td>
          <td>ort</td>
          <td>100</td>
        </tr>
        <tr>
          <th>7</th>
          <td>0.000033</td>
          <td>0.000009</td>
          <td>0.000020</td>
          <td>0.000085</td>
          <td>50</td>
          <td>100</td>
          <td>0.001658</td>
          <td>64</td>
          <td>ext</td>
          <td>100</td>
        </tr>
        <tr>
          <th>8</th>
          <td>0.000027</td>
          <td>0.000005</td>
          <td>0.000021</td>
          <td>0.000049</td>
          <td>50</td>
          <td>100</td>
          <td>0.001374</td>
          <td>64</td>
          <td>ext_1_1</td>
          <td>100</td>
        </tr>
        <tr>
          <th>9</th>
          <td>0.001309</td>
          <td>0.000540</td>
          <td>0.000778</td>
          <td>0.003738</td>
          <td>50</td>
          <td>20</td>
          <td>0.065452</td>
          <td>64</td>
          <td>ort</td>
          <td>1000</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.001098</td>
          <td>0.000161</td>
          <td>0.000730</td>
          <td>0.001283</td>
          <td>10</td>
          <td>20</td>
          <td>0.010984</td>
          <td>64</td>
          <td>ext</td>
          <td>1000</td>
        </tr>
        <tr>
          <th>11</th>
          <td>0.000973</td>
          <td>0.000243</td>
          <td>0.000677</td>
          <td>0.001543</td>
          <td>10</td>
          <td>20</td>
          <td>0.009727</td>
          <td>64</td>
          <td>ext_1_1</td>
          <td>1000</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 109-111

Plots
+++++

.. GENERATED FROM PYTHON SOURCE LINES 111-117

.. code-block:: default


    piv = df.pivot(index="dim", columns="name", values="average")

    fig, ax = plt.subplots(1, 1)
    piv.plot(ax=ax, title="Binding Comparison", logy=True, logx=True)
    fig.savefig("plot_bench_ort.png")



.. image-sg:: /auto_examples/images/sphx_glr_plot_bench_ort_001.png
   :alt: Binding Comparison
   :srcset: /auto_examples/images/sphx_glr_plot_bench_ort_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.489 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_ort.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_ort.py <plot_bench_ort.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_ort.ipynb <plot_bench_ort.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
