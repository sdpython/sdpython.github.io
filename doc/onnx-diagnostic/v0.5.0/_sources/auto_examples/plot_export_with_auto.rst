
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_export_with_auto.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_export_with_auto.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_export_with_auto.py:


.. _l-plot-sxport-with-auto:

Use DYNAMIC or AUTO when exporting if dynamic shapes has constraints
====================================================================

Setting the dynamic shapes is not always easy.
Here are a few tricks to make it work.

dx + dy not allowed?
++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 13-32

.. code-block:: Python


    import torch
    from onnx_diagnostic import doc


    class Model(torch.nn.Module):
        def forward(self, x, y, z):
            return torch.cat((x, y), axis=1) + z[:, ::2]


    model = Model()
    x = torch.randn(2, 3)
    y = torch.randn(2, 5)
    z = torch.randn(2, 16)
    model(x, y, z)


    print(torch.export.export(model, (x, y, z)).graph)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    graph():
        %x : [num_users=1] = placeholder[target=x]
        %y : [num_users=1] = placeholder[target=y]
        %z : [num_users=1] = placeholder[target=z]
        %cat : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%x, %y], 1), kwargs = {})
        %slice_1 : [num_users=1] = call_function[target=torch.ops.aten.slice.Tensor](args = (%z,), kwargs = {})
        %slice_2 : [num_users=1] = call_function[target=torch.ops.aten.slice.Tensor](args = (%slice_1, 1, None, None, 2), kwargs = {})
        %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%cat, %slice_2), kwargs = {})
        return (add,)




.. GENERATED FROM PYTHON SOURCE LINES 33-35

Everything is fine so far. With dynamic shapes now.
dx + dy is not allowed...

.. GENERATED FROM PYTHON SOURCE LINES 35-46

.. code-block:: Python


    batch = torch.export.Dim("batch")
    dx = torch.export.Dim("dx")
    dy = torch.export.Dim("dy")

    try:
        dz = dx + dy
        raise AssertionError("able to add dynamic dimensions, please update the tutorial")
    except NotImplementedError as e:
        print(f"unable to add dynamic dimensions because {type(e)}, {e}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    unable to add dynamic dimensions because <class 'NotImplementedError'>, Attempted to add Dim('dy', min=0) to dx, where an integer was expected. (Only increasing linear operations with integer coefficients are supported.)




.. GENERATED FROM PYTHON SOURCE LINES 47-48

Then we could make it a different one.

.. GENERATED FROM PYTHON SOURCE LINES 48-65

.. code-block:: Python


    dz = torch.export.Dim("dz")
    try:
        ep = torch.export.export(
            model,
            (x, y, z),
            dynamic_shapes={
                "x": {0: batch, 1: dx},
                "y": {0: batch, 1: dy},
                "z": {0: batch, 1: dz},
            },
        )
        print(ep)
        raise AssertionError("able to export this model, please update the tutorial")
    except torch._dynamo.exc.UserError as e:
        print(f"unable to use Dim('dz') because {type(e)}, {e}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    unable to use Dim('dz') because <class 'torch._dynamo.exc.UserError'>, Constraints violated (dz)! For more information, run with TORCH_LOGS="+dynamic".
      - Not all values of dz = L['args'][0][2].size()[1] in the specified range satisfy the generated guard ((1 + L['args'][0][2].size()[1]) // 2) != 1.

    The error above occurred when calling torch.export.export. If you would like to view some more information about this error, and get a list of all other errors that may occur in your export call, you can replace your `export()` call with `draft_export()`.




.. GENERATED FROM PYTHON SOURCE LINES 66-69

That works. We could also use
``torch.export.Dim.DYNAMIC`` or ``torch.export.Dim.AUTO``
for the dimension we cannot set.

.. GENERATED FROM PYTHON SOURCE LINES 69-83

.. code-block:: Python


    DYNAMIC = torch.export.Dim.DYNAMIC
    ep = torch.export.export(
        model,
        (x, y, z),
        dynamic_shapes={
            "x": {0: DYNAMIC, 1: dx},
            "y": {0: DYNAMIC, 1: dy},
            "z": {0: DYNAMIC, 1: DYNAMIC},
        },
    )

    print(ep)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[s35, s16]", y: "f32[s35, s43]", z: "f32[s35, s23]"):
                 # 
                sym_size_int_1: "Sym(s16)" = torch.ops.aten.sym_size.int(x, 1)
                sym_size_int_2: "Sym(s43)" = torch.ops.aten.sym_size.int(y, 1)
                sym_size_int_3: "Sym(s23)" = torch.ops.aten.sym_size.int(z, 1)
            
                 # File: /home/xadupre/github/onnx-diagnostic/_doc/examples/plot_export_with_auto.py:20 in forward, code: return torch.cat((x, y), axis=1) + z[:, ::2]
                cat: "f32[s35, s16 + s43]" = torch.ops.aten.cat.default([x, y], 1);  x = y = None
            
                 # 
                add_1: "Sym(s16 + s43)" = sym_size_int_1 + sym_size_int_2;  sym_size_int_1 = sym_size_int_2 = None
                add_2: "Sym(s23 + 1)" = 1 + sym_size_int_3;  sym_size_int_3 = None
                floordiv: "Sym(((s23 + 1)//2))" = add_2 // 2;  add_2 = None
                eq: "Sym(Eq(s16 + s43, ((s23 + 1)//2)))" = add_1 == floordiv;  add_1 = floordiv = None
                _assert_scalar_default = torch.ops.aten._assert_scalar.default(eq, "Runtime assertion failed for expression Eq(s16 + s43, ((s23 + 1)//2)) on node 'eq'");  eq = _assert_scalar_default = None
            
                 # File: /home/xadupre/github/onnx-diagnostic/_doc/examples/plot_export_with_auto.py:20 in forward, code: return torch.cat((x, y), axis=1) + z[:, ::2]
                slice_1: "f32[s35, s23]" = torch.ops.aten.slice.Tensor(z);  z = None
                slice_2: "f32[s35, ((s23 + 1)//2)]" = torch.ops.aten.slice.Tensor(slice_1, 1, None, None, 2);  slice_1 = None
                add: "f32[s35, s16 + s43]" = torch.ops.aten.add.Tensor(cat, slice_2);  cat = slice_2 = None
                return (add,)
            
    Graph signature: 
        # inputs
        x: USER_INPUT
        y: USER_INPUT
        z: USER_INPUT
    
        # outputs
        add: USER_OUTPUT
    
    Range constraints: {s35: VR[2, int_oo], s16: VR[0, int_oo], s43: VR[0, int_oo], s23: VR[2, int_oo]}





.. GENERATED FROM PYTHON SOURCE LINES 84-85

The same result can be obtained with ``torch.export.Dim.AUTO``.

.. GENERATED FROM PYTHON SOURCE LINES 85-94

.. code-block:: Python


    AUTO = torch.export.Dim.AUTO
    ep = torch.export.export(
        model,
        (x, y, z),
        dynamic_shapes=({0: AUTO, 1: AUTO}, {0: AUTO, 1: AUTO}, {0: AUTO, 1: AUTO}),
    )
    print(ep)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[s35, s16]", y: "f32[s35, s43]", z: "f32[s35, s23]"):
                 # 
                sym_size_int_1: "Sym(s16)" = torch.ops.aten.sym_size.int(x, 1)
                sym_size_int_2: "Sym(s43)" = torch.ops.aten.sym_size.int(y, 1)
                sym_size_int_3: "Sym(s23)" = torch.ops.aten.sym_size.int(z, 1)
            
                 # File: /home/xadupre/github/onnx-diagnostic/_doc/examples/plot_export_with_auto.py:20 in forward, code: return torch.cat((x, y), axis=1) + z[:, ::2]
                cat: "f32[s35, s16 + s43]" = torch.ops.aten.cat.default([x, y], 1);  x = y = None
            
                 # 
                add_1: "Sym(s16 + s43)" = sym_size_int_1 + sym_size_int_2;  sym_size_int_1 = sym_size_int_2 = None
                add_2: "Sym(s23 + 1)" = 1 + sym_size_int_3;  sym_size_int_3 = None
                floordiv: "Sym(((s23 + 1)//2))" = add_2 // 2;  add_2 = None
                eq: "Sym(Eq(s16 + s43, ((s23 + 1)//2)))" = add_1 == floordiv;  add_1 = floordiv = None
                _assert_scalar_default = torch.ops.aten._assert_scalar.default(eq, "Runtime assertion failed for expression Eq(s16 + s43, ((s23 + 1)//2)) on node 'eq'");  eq = _assert_scalar_default = None
            
                 # File: /home/xadupre/github/onnx-diagnostic/_doc/examples/plot_export_with_auto.py:20 in forward, code: return torch.cat((x, y), axis=1) + z[:, ::2]
                slice_1: "f32[s35, s23]" = torch.ops.aten.slice.Tensor(z);  z = None
                slice_2: "f32[s35, ((s23 + 1)//2)]" = torch.ops.aten.slice.Tensor(slice_1, 1, None, None, 2);  slice_1 = None
                add: "f32[s35, s16 + s43]" = torch.ops.aten.add.Tensor(cat, slice_2);  cat = slice_2 = None
                return (add,)
            
    Graph signature: 
        # inputs
        x: USER_INPUT
        y: USER_INPUT
        z: USER_INPUT
    
        # outputs
        add: USER_OUTPUT
    
    Range constraints: {s35: VR[2, int_oo], s16: VR[2, int_oo], s43: VR[2, int_oo], s23: VR[2, int_oo]}





.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: Python


    doc.plot_legend("torch.export.Dim\nor DYNAMIC\nor AUTO", "torch.export.export", "tomato")



.. image-sg:: /auto_examples/images/sphx_glr_plot_export_with_auto_001.png
   :alt: plot export with auto
   :srcset: /auto_examples/images/sphx_glr_plot_export_with_auto_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.438 seconds)


.. _sphx_glr_download_auto_examples_plot_export_with_auto.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_export_with_auto.ipynb <plot_export_with_auto.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_export_with_auto.py <plot_export_with_auto.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_export_with_auto.zip <plot_export_with_auto.zip>`


.. include:: plot_export_with_auto.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
