
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_technical/plot_layer_norm_discrepancies.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_technical_plot_layer_norm_discrepancies.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_technical_plot_layer_norm_discrepancies.py:


LayerNormalization implementation cannot be exchanged
=====================================================

This example applies what was illustrated
:ref:`l-plot-parallelized-reduction`, reduction operations
are sensitive to parallelization.

Methodology
+++++++++++

We consider a simple model with a LayerNormalization followed by a MatMul.
Each operator can be run with :epkg:`onnxruntime` or :epkg:`pytorch`.
We compare the four combinations.

The model
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 19-66

.. code-block:: Python


    import itertools
    import numpy as np
    import pandas
    import onnx
    import onnx.helper as oh
    import onnxruntime
    import torch
    from onnx_array_api.plotting.graphviz_helper import plot_dot
    from onnx_diagnostic.doc import rotate_align, save_fig, plot_histogram, title
    from onnx_diagnostic.ext_test_case import unit_test_going
    from onnx_diagnostic.helpers import max_diff, string_diff, string_type
    from onnx_diagnostic.helpers.onnx_helper import onnx_dtype_name, onnx_dtype_to_np_dtype
    from onnx_diagnostic.helpers.torch_helper import onnx_dtype_to_torch_dtype
    from onnx_diagnostic.helpers.doc_helper import LayerNormalizationOrt, MatMulOrt
    from onnx_diagnostic.reference import TorchOnnxEvaluator

    TFLOAT = onnx.TensorProto.FLOAT
    TFLOAT16 = onnx.TensorProto.FLOAT16


    def get_model(itype: int = TFLOAT16):
        return oh.make_model(
            oh.make_graph(
                [
                    oh.make_node("LayerNormalization", ["X", "scale", "bias"], ["norm"], axis=-1),
                    oh.make_node("MatMul", ["norm", "weights"], ["mm"]),
                    oh.make_node("Add", ["mm", "bias2"], ["Z"]),
                ],
                "layer_norm_matmul_add",
                [
                    oh.make_tensor_value_info("X", itype, ["a", "b", "c"]),
                    oh.make_tensor_value_info("scale", itype, ["c"]),
                    oh.make_tensor_value_info("bias", itype, ["c"]),
                    oh.make_tensor_value_info("weights", itype, ["c", "c"]),
                    oh.make_tensor_value_info("bias2", itype, ["c"]),
                ],
                [oh.make_tensor_value_info("Z", itype, ["a", "b", "c"])],
            ),
            ir_version=9,
            opset_imports=[oh.make_opsetid("", 18)],
        )


    model = get_model()
    plot_dot(model)




.. image-sg:: /auto_technical/images/sphx_glr_plot_layer_norm_discrepancies_001.png
   :alt: plot layer norm discrepancies
   :srcset: /auto_technical/images/sphx_glr_plot_layer_norm_discrepancies_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-72

Let's compare two runtimes
++++++++++++++++++++++++++

That will be :epkg:`onnxruntime` and
:class:`onnx_diagnostic.reference.TorchOnnxEvaluator`.

.. GENERATED FROM PYTHON SOURCE LINES 72-144

.. code-block:: Python


    last_dim = 64 if unit_test_going() else 1152


    def make_feeds(last_dim: int):
        return {
            "X": (torch.rand((32, 1024, last_dim), dtype=torch.float16) - 0.5) * 120,
            "scale": torch.rand((last_dim,), dtype=torch.float16),
            "bias": torch.rand((last_dim,), dtype=torch.float16),
            "weights": torch.rand((last_dim, last_dim), dtype=torch.float16),
            "bias2": torch.rand((last_dim,), dtype=torch.float16),
        }


    def cast_feeds(itype, provider, feeds):
        ttype = onnx_dtype_to_torch_dtype(itype)
        np_dtype = onnx_dtype_to_np_dtype(itype)
        np_feeds = {k: v.detach().numpy() for k, v in feeds.items()}
        if provider == "CUDA":
            if not torch.cuda.is_available():
                return None, None
            tch_feeds = {k: v.to("cuda") for k, v in feeds.items()}
            ort_feeds = np_feeds
        else:
            tch_feeds = feeds.copy()
            tch_feeds["X"] = tch_feeds["X"][:2]  # too long otherwise
            ort_feeds = np_feeds.copy()
            ort_feeds["X"] = ort_feeds["X"][:2]
        tch_feeds = {k: v.to(ttype) for k, v in tch_feeds.items()}
        ort_feeds = {k: v.astype(np_dtype) for k, v in ort_feeds.items()}
        return tch_feeds, ort_feeds


    feeds = make_feeds(last_dim)
    kws = dict(with_shape=True, with_min_max=True, with_device=True)
    data = []
    baseline = {}

    for provider, itype in itertools.product(["CPU", "CUDA"], [TFLOAT, TFLOAT16]):
        tch_feeds, ort_feeds = cast_feeds(itype, provider, feeds)
        if tch_feeds is None:
            continue

        model = get_model(itype)
        print()
        print(f"-- running on {provider} with {onnx_dtype_name(itype)}")
        print("-- running with torch")
        torch_sess = TorchOnnxEvaluator(model, providers=[f"{provider}ExecutionProvider"])
        expected = torch_sess.run(None, tch_feeds)
        baseline[itype, provider, "torch"] = expected
        print(f"-- torch: {string_type(expected, **kws)}")

        print("-- running with ort")
        ort_sess = onnxruntime.InferenceSession(
            model.SerializeToString(), providers=[f"{provider}ExecutionProvider"]
        )
        got = ort_sess.run(None, ort_feeds)
        baseline[itype, provider, "ort"] = got
        print(f"-- ort: {string_type(got, **kws)}")
        diff = max_diff(expected, got, hist=True)
        print(f"-- diff {string_diff(diff)}")

        # memorize the data
        diff["dtype"] = onnx_dtype_name(itype)
        diff["provider"] = provider
        diff.update(diff["rep"])
        del diff["rep"]
        del diff["dnan"]
        del diff[">100.0"]
        del diff[">10.0"]
        data.append(diff)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    -- running on CPU with FLOAT
    -- running with torch
    -- torch: #1[CT1s2x1024x1152[240.45877075195312,329.2989501953125:A282.99188075649886]]
    -- running with ort
    -- ort: #1[A1s2x1024x1152[240.45880126953125,329.2989501953125:A282.9918809026842]]
    -- diff abs=0.00018310546875, rel=6.329284996345273e-07, n=2359296.0/#1472001>0.0-#1776>0.0001

    -- running on CPU with FLOAT16
    -- running with torch
    -- torch: #1[CT10s2x1024x1152[240.375,329.25:A282.9927898512946]]
    -- running with ort
    -- ort: #1[A10s2x1024x1152[240.5,329.25:A282.9918477270338]]
    -- diff abs=0.25, rel=0.0009765586853176355, n=2359296.0/#589620>0.0-#589620>0.0001-#589620>0.001-#589620>0.01-#589620>0.1

    -- running on CUDA with FLOAT
    -- running with torch
    -- torch: #1[GT1s32x1024x1152[233.13014221191406,334.056640625:A283.15430666283686]]
    -- running with ort
    -- ort: #1[A1s32x1024x1152[233.1267547607422,334.057373046875:A283.1517443703451]]
    -- diff abs=0.020721435546875, rel=7.281675334306958e-05, n=37748736.0/#37646171>0.0-#37031542>0.0001-#31119284>0.001-#487748>0.01

    -- running on CUDA with FLOAT16
    -- running with torch
    -- torch: #1[GT10s32x1024x1152[233.125,334.0:A283.15313945876227]]
    -- running with ort
    -- ort: #1[A10s32x1024x1152[233.125,334.0:A283.15313988924026]]
    -- diff abs=0.5, rel=0.0017793530983875503, n=37748736.0/#1621>0.0-#1621>0.0001-#1621>0.001-#1621>0.01-#1621>0.1




.. GENERATED FROM PYTHON SOURCE LINES 145-148

.. code-block:: Python

    df = pandas.DataFrame(data).set_index(["provider", "dtype"])
    print(df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                           abs           rel            sum           n      >0.0   >0.0001    >0.001   >0.01    >0.1  >1.0
    provider dtype                                                                                                         
    CPU      FLOAT    0.000183  6.329285e-07      56.722366   2359296.0   1472001      1776         0       0       0     0
             FLOAT16  0.250000  9.765587e-04  147268.250000   2359296.0    589620    589620    589620  589620  589620     0
    CUDA     FLOAT    0.020721  7.281675e-05  128600.810791  37748736.0  37646171  37031542  31119284  487748       0     0
             FLOAT16  0.500000  1.779353e-03     404.750000  37748736.0      1621      1621      1621    1621    1621     0




.. GENERATED FROM PYTHON SOURCE LINES 149-150

Visually.

.. GENERATED FROM PYTHON SOURCE LINES 150-158

.. code-block:: Python


    save_fig(
        rotate_align(
            df[["abs"]].plot.bar(title="Discrepancies ORT / torch for LayerNorm(X) @ W + B")
        ),
        "plot_layer_norm_discrepancies_1.png",
    )




.. image-sg:: /auto_technical/images/sphx_glr_plot_layer_norm_discrepancies_002.png
   :alt: Discrepancies ORT / torch for LayerNorm(X) @ W + B
   :srcset: /auto_technical/images/sphx_glr_plot_layer_norm_discrepancies_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-162

The discrepancies are significant on CUDA, higher for float16.
Let's see which operator is responsible for them,
*LayerNormalization* or *MatMul*.

.. GENERATED FROM PYTHON SOURCE LINES 164-166

Distribution of the results
+++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 166-170

.. code-block:: Python


    tensor = baseline[TFLOAT16, "CPU", "ort"][0].ravel().astype(np.float32)
    print(pandas.DataFrame({"expected": tensor}).describe())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

               expected
    count  2.359296e+06
    mean   2.829919e+02
    std    9.393806e+00
    min    2.405000e+02
    25%    2.767500e+02
    50%    2.830000e+02
    75%    2.892500e+02
    max    3.292500e+02




.. GENERATED FROM PYTHON SOURCE LINES 171-172

Histogram.

.. GENERATED FROM PYTHON SOURCE LINES 172-179

.. code-block:: Python


    save_fig(
        title(plot_histogram(tensor), "Distribution of the computed results"),
        "plot_layer_norm_discrepancies_hist.png",
    )





.. image-sg:: /auto_technical/images/sphx_glr_plot_layer_norm_discrepancies_003.png
   :alt: Distribution of the computed results
   :srcset: /auto_technical/images/sphx_glr_plot_layer_norm_discrepancies_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 180-184

The discrepancies come from?
++++++++++++++++++++++++++++

We mix torch and onnxruntime to execute the kernels.

.. GENERATED FROM PYTHON SOURCE LINES 184-227

.. code-block:: Python


    data = []

    for mod, provider, itype in itertools.product(
        ["ORT-ORT", "ORT-TORCH", "TORCH-ORT", "TORCH-TORCH"], ["CPU", "CUDA"], [TFLOAT, TFLOAT16]
    ):
        ttype = onnx_dtype_to_torch_dtype(itype)
        np_dtype = onnx_dtype_to_np_dtype(itype)
        tch_feeds, _ = cast_feeds(itype, provider, feeds)
        if tch_feeds is None:
            continue

        ker1, ker2 = mod.split("-")
        custom_kernels = (
            {("", "LayerNormalization"): LayerNormalizationOrt} if ker1 == "ORT" else {}
        ) | ({("", "MatMul"): MatMulOrt} if ker2 == "ORT" else {})

        model = get_model(itype)
        print()
        print(f"-- {mod} running on {provider} with {onnx_dtype_name(itype)}")
        sess = TorchOnnxEvaluator(
            model,
            custom_kernels=custom_kernels,
            providers=[f"{provider}ExecutionProvider"],
        )
        got = sess.run(None, tch_feeds)
        print(f"-- {mod}: {string_type(got, **kws)}")

        difft = max_diff(baseline[itype, provider, "torch"], got)
        print(f"-- diff with torch {string_diff(difft)}")
        diffo = max_diff(baseline[itype, provider, "ort"], got)
        print(f"-- diff with ort {string_diff(diffo)}")

        data.append(
            dict(
                model=mod,
                dtype=onnx_dtype_name(itype),
                provider=provider,
                diff_ort=diffo["abs"],
                diff_torch=difft["abs"],
            )
        )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    -- ORT-ORT running on CPU with FLOAT
    -- ORT-ORT: #1[CT1s2x1024x1152[240.45880126953125,329.2989501953125:A282.9918809026842]]
    -- diff with torch abs=0.00018310546875, rel=6.329284996345273e-07, n=2359296.0
    -- diff with ort abs=0, rel=0

    -- ORT-ORT running on CPU with FLOAT16
    -- ORT-ORT: #1[CT10s2x1024x1152[240.375,329.25:A282.9927921295166]]
    -- diff with torch abs=0.25, rel=0.0009708700160387727, n=2359296.0
    -- diff with ort abs=0.25, rel=0.0009765586853176355, n=2359296.0

    -- ORT-ORT running on CUDA with FLOAT
    -- ORT-ORT: #1[GT1s32x1024x1152[233.1267547607422,334.057373046875:A283.1517443703451]]
    -- diff with torch abs=0.020721435546875, rel=7.281675334306958e-05, n=37748736.0
    -- diff with ort abs=0, rel=0

    -- ORT-ORT running on CUDA with FLOAT16
    -- ORT-ORT: #1[GT10s32x1024x1152[233.125,334.0:A283.15313988924026]]
    -- diff with torch abs=0.5, rel=0.0017793530983875503, n=37748736.0
    -- diff with ort abs=0, rel=0

    -- ORT-TORCH running on CPU with FLOAT
    -- ORT-TORCH: #1[CT1s2x1024x1152[240.45880126953125,329.2989501953125:A282.9918808673457]]
    -- diff with torch abs=0.0001220703125, rel=4.669934424014949e-07, n=2359296.0
    -- diff with ort abs=0.00018310546875, rel=6.602526229006425e-07, n=2359296.0

    -- ORT-TORCH running on CPU with FLOAT16
    -- ORT-TORCH: #1[CT10s2x1024x1152[240.375,329.25:A282.99279175864325]]
    -- diff with torch abs=0.25, rel=0.0009671142471402433, n=2359296.0
    -- diff with ort abs=0.25, rel=0.0009765586853176355, n=2359296.0

    -- ORT-TORCH running on CUDA with FLOAT
    -- ORT-TORCH: #1[GT1s32x1024x1152[233.13015747070312,334.056640625:A283.154306662893]]
    -- diff with torch abs=0.000152587890625, rel=5.248206159775737e-07, n=37748736.0
    -- diff with ort abs=0.020751953125, rel=7.28220560087599e-05, n=37748736.0

    -- ORT-TORCH running on CUDA with FLOAT16
    -- ORT-TORCH: #1[GT10s32x1024x1152[233.125,334.0:A283.15313988924026]]
    -- diff with torch abs=0.5, rel=0.0017793530983875503, n=37748736.0
    -- diff with ort abs=0, rel=0

    -- TORCH-ORT running on CPU with FLOAT
    -- TORCH-ORT: #1[CT1s2x1024x1152[240.4587860107422,329.2989807128906:A282.9918808030456]]
    -- diff with torch abs=0.000152587890625, rel=5.509374892917036e-07, n=2359296.0
    -- diff with ort abs=0.0001220703125, rel=4.206247557836895e-07, n=2359296.0

    -- TORCH-ORT running on CPU with FLOAT16
    -- TORCH-ORT: #1[CT10s2x1024x1152[240.375,329.25:A282.99279075198706]]
    -- diff with torch abs=0.25, rel=0.0009587690938865048, n=2359296.0
    -- diff with ort abs=0.25, rel=0.0009765586853176355, n=2359296.0

    -- TORCH-ORT running on CUDA with FLOAT
    -- TORCH-ORT: #1[GT1s32x1024x1152[233.1267547607422,334.057373046875:A283.15174449640267]]
    -- diff with torch abs=0.020721435546875, rel=7.281675334306958e-05, n=37748736.0
    -- diff with ort abs=0.001953125, rel=7.472587375436453e-06, n=37748736.0

    -- TORCH-ORT running on CUDA with FLOAT16
    -- TORCH-ORT: #1[GT10s32x1024x1152[233.125,334.0:A283.15313945876227]]
    -- diff with torch abs=0, rel=0
    -- diff with ort abs=0.5, rel=0.0017825248394836384, n=37748736.0

    -- TORCH-TORCH running on CPU with FLOAT
    -- TORCH-TORCH: #1[CT1s2x1024x1152[240.45877075195312,329.2989501953125:A282.99188075649886]]
    -- diff with torch abs=0, rel=0
    -- diff with ort abs=0.00018310546875, rel=6.329280990362952e-07, n=2359296.0

    -- TORCH-TORCH running on CPU with FLOAT16
    -- TORCH-TORCH: #1[CT10s2x1024x1152[240.375,329.25:A282.9927898512946]]
    -- diff with torch abs=0, rel=0
    -- diff with ort abs=0.25, rel=0.0009765586853176355, n=2359296.0

    -- TORCH-TORCH running on CUDA with FLOAT
    -- TORCH-TORCH: #1[GT1s32x1024x1152[233.13014221191406,334.056640625:A283.15430666283686]]
    -- diff with torch abs=0, rel=0
    -- diff with ort abs=0.020721435546875, rel=7.28220560087599e-05, n=37748736.0

    -- TORCH-TORCH running on CUDA with FLOAT16
    -- TORCH-TORCH: #1[GT10s32x1024x1152[233.125,334.0:A283.15313945876227]]
    -- diff with torch abs=0, rel=0
    -- diff with ort abs=0.5, rel=0.0017825248394836384, n=37748736.0




.. GENERATED FROM PYTHON SOURCE LINES 228-232

.. code-block:: Python

    df = pandas.DataFrame(data).set_index(["dtype", "provider", "model"])
    df = df.sort_index()
    print(df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                                  diff_ort  diff_torch
    dtype   provider model                            
    FLOAT   CPU      ORT-ORT      0.000000    0.000183
                     ORT-TORCH    0.000183    0.000122
                     TORCH-ORT    0.000122    0.000153
                     TORCH-TORCH  0.000183    0.000000
            CUDA     ORT-ORT      0.000000    0.020721
                     ORT-TORCH    0.020752    0.000153
                     TORCH-ORT    0.001953    0.020721
                     TORCH-TORCH  0.020721    0.000000
    FLOAT16 CPU      ORT-ORT      0.250000    0.250000
                     ORT-TORCH    0.250000    0.250000
                     TORCH-ORT    0.250000    0.250000
                     TORCH-TORCH  0.250000    0.000000
            CUDA     ORT-ORT      0.000000    0.500000
                     ORT-TORCH    0.000000    0.500000
                     TORCH-ORT    0.500000    0.000000
                     TORCH-TORCH  0.500000    0.000000




.. GENERATED FROM PYTHON SOURCE LINES 233-234

Visually.

.. GENERATED FROM PYTHON SOURCE LINES 234-245

.. code-block:: Python


    save_fig(
        rotate_align(
            df[["diff_ort", "diff_torch"]].plot.bar(
                title="ORT/Torch or Torch/ORT for LayerNorm(X) @ W + B",
                figsize=(10, 4),
            )
        ),
        "plot_layer_norm_discrepancies_2.png",
    )




.. image-sg:: /auto_technical/images/sphx_glr_plot_layer_norm_discrepancies_004.png
   :alt: ORT/Torch or Torch/ORT for LayerNorm(X) @ W + B
   :srcset: /auto_technical/images/sphx_glr_plot_layer_norm_discrepancies_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 246-252

Conclusion
++++++++++

:epkg:`torch` seems able to replicate the same results if the same computation
is run multiple times. :epkg:`onnxruntime` is only able to do that on CUDA.
With float16 and CUDA, LayerNormalization seems to introduce some discrepancies.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 47.550 seconds)


.. _sphx_glr_download_auto_technical_plot_layer_norm_discrepancies.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_layer_norm_discrepancies.ipynb <plot_layer_norm_discrepancies.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_layer_norm_discrepancies.py <plot_layer_norm_discrepancies.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_layer_norm_discrepancies.zip <plot_layer_norm_discrepancies.zip>`


.. include:: plot_layer_norm_discrepancies.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
