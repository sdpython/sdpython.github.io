
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_recipes/plot_export_dim1.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_recipes_plot_export_dim1.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_recipes_plot_export_dim1.py:


.. _l-plot-export-dim1:

0, 1, 2 for a Dynamic Dimension in the dummy example to export a model
======================================================================

:func:`torch.export.export` does not work if a tensor given to the function
has 0 or 1 for dimension declared as dynamic dimension.

Simple model, no dimension with 0 or 1
++++++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 13-40

.. code-block:: Python


    import torch
    from onnx_diagnostic import doc
    from onnx_diagnostic.helpers import string_type
    from onnx_diagnostic.torch_export_patches import torch_export_patches


    class Model(torch.nn.Module):
        def forward(self, x, y, z):
            return torch.cat((x, y), axis=1) + z


    model = Model()
    x = torch.randn(2, 3)
    y = torch.randn(2, 5)
    z = torch.randn(2, 8)
    model(x, y, z)

    DYN = torch.export.Dim.DYNAMIC
    ds = {0: DYN, 1: DYN}

    print("-- export shape:", string_type((x, y, z), with_shape=True))
    print("-- dynamic shapes:", string_type((ds, ds, ds)))

    ep = torch.export.export(model, (x, y, z), dynamic_shapes=(ds, ds, ds))
    print(ep)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    -- export shape: (T1s2x3,T1s2x5,T1s2x8)
    -- dynamic shapes: ({0:DYNAMIC,1:DYNAMIC},{0:DYNAMIC,1:DYNAMIC},{0:DYNAMIC,1:DYNAMIC})
    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[s17, s27]", y: "f32[s17, s94]", z: "f32[s17, s27 + s94]"):
                 # File: /home/xadupre/github/onnx-diagnostic/_doc/recipes/plot_export_dim1.py:22 in forward, code: return torch.cat((x, y), axis=1) + z
                cat: "f32[s17, s27 + s94]" = torch.ops.aten.cat.default([x, y], 1);  x = y = None
                add: "f32[s17, s27 + s94]" = torch.ops.aten.add.Tensor(cat, z);  cat = z = None
                return (add,)
            
    Graph signature: 
        # inputs
        x: USER_INPUT
        y: USER_INPUT
        z: USER_INPUT
    
        # outputs
        add: USER_OUTPUT
    
    Range constraints: {s17: VR[2, int_oo], s27: VR[2, int_oo], s94: VR[2, int_oo], s27 + s94: VR[4, int_oo]}





.. GENERATED FROM PYTHON SOURCE LINES 41-43

Same model, a dynamic dimension = 1
+++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 43-59

.. code-block:: Python



    z = z[:1]

    DYN = torch.export.Dim.DYNAMIC
    ds = {0: DYN, 1: DYN}

    print("-- export shape:", string_type((x, y, z), with_shape=True))
    print("-- dynamic shapes:", string_type((ds, ds, ds)))

    try:
        ep = torch.export.export(model, (x, y, z), dynamic_shapes=(ds, ds, ds))
        print(ep)
    except Exception as e:
        print("ERROR", e)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    -- export shape: (T1s2x3,T1s2x5,T1s1x8)
    -- dynamic shapes: ({0:DYNAMIC,1:DYNAMIC},{0:DYNAMIC,1:DYNAMIC},{0:DYNAMIC,1:DYNAMIC})
    ERROR Found the following conflicts between user-specified ranges and inferred ranges from model tracing:
    - Received user-specified dim hint Dim.DYNAMIC(min=None, max=None), but export 0/1 specialized due to hint of 1 for dimension inputs['z'].shape[0].




.. GENERATED FROM PYTHON SOURCE LINES 60-61

It failed. Let's try a little trick.

.. GENERATED FROM PYTHON SOURCE LINES 63-65

Same model, a dynamic dimension = 1 and backed_size_oblivious=True
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 65-77

.. code-block:: Python


    print("-- export shape:", string_type((x, y, z), with_shape=True))
    print("-- dynamic shapes:", string_type((ds, ds, ds)))

    try:
        with torch.fx.experimental._config.patch(backed_size_oblivious=True):
            ep = torch.export.export(model, (x, y, z), dynamic_shapes=(ds, ds, ds))
            print(ep)
    except RuntimeError as e:
        print("ERROR", e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    -- export shape: (T1s2x3,T1s2x5,T1s1x8)
    -- dynamic shapes: ({0:DYNAMIC,1:DYNAMIC},{0:DYNAMIC,1:DYNAMIC},{0:DYNAMIC,1:DYNAMIC})
    ERROR The size of tensor a (s17) must match the size of tensor b (s68) at non-singleton dimension 0)




.. GENERATED FROM PYTHON SOURCE LINES 78-80

Final try with patches...
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 80-91

.. code-block:: Python


    print("-- export shape:", string_type((x, y, z), with_shape=True))
    print("-- dynamic shapes:", string_type((ds, ds, ds)))

    with torch_export_patches(patch_torch=1):
        try:
            ep = torch.export.export(model, (x, y, z), dynamic_shapes=(ds, ds, ds))
            print(ep)
        except RuntimeError as e:
            print("ERROR", e)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    -- export shape: (T1s2x3,T1s2x5,T1s1x8)
    -- dynamic shapes: ({0:DYNAMIC,1:DYNAMIC},{0:DYNAMIC,1:DYNAMIC},{0:DYNAMIC,1:DYNAMIC})
    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[s17, s27]", y: "f32[s17, s94]", z: "f32[1, s27 + s94]"):
                 # File: /home/xadupre/github/onnx-diagnostic/_doc/recipes/plot_export_dim1.py:22 in forward, code: return torch.cat((x, y), axis=1) + z
                cat: "f32[s17, s27 + s94]" = torch.ops.aten.cat.default([x, y], 1);  x = y = None
                add: "f32[s17, s27 + s94]" = torch.ops.aten.add.Tensor(cat, z);  cat = z = None
                return (add,)
            
    Graph signature: 
        # inputs
        x: USER_INPUT
        y: USER_INPUT
        z: USER_INPUT
    
        # outputs
        add: USER_OUTPUT
    
    Range constraints: {s17: VR[2, int_oo], s27: VR[2, int_oo], s94: VR[2, int_oo], s27 + s94: VR[4, int_oo]}





.. GENERATED FROM PYTHON SOURCE LINES 92-94

It is difficult to find the good option. It is possible on a simple model
but sometimes impossible on a bigger model mixing different shapes.

.. GENERATED FROM PYTHON SOURCE LINES 94-96

.. code-block:: Python


    doc.plot_legend("dynamic dimension\nworking with\n0 or 1", "torch.export.export", "green")



.. image-sg:: /auto_recipes/images/sphx_glr_plot_export_dim1_001.png
   :alt: plot export dim1
   :srcset: /auto_recipes/images/sphx_glr_plot_export_dim1_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.053 seconds)


.. _sphx_glr_download_auto_recipes_plot_export_dim1.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_export_dim1.ipynb <plot_export_dim1.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_export_dim1.py <plot_export_dim1.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_export_dim1.zip <plot_export_dim1.zip>`


.. include:: plot_export_dim1.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
