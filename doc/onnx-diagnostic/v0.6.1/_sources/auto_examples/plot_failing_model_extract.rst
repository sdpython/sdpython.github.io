
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_failing_model_extract.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_failing_model_extract.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_failing_model_extract.py:


.. _l-plot-failing-model-extract:

Find where a model is failing by running submodels
==================================================

Let's assume :epkg:`onnxruntime` crashes without telling why or where.
The first thing is do is to locate where. For that, we extract every submodel
starting from the inputs and running the first *n* nodes of the model.
The model is likely to fail for some *n*. Then the failing is known.

This method only works if the model only contains operator coming
from the main domain *ai.onnx* otherwise shape inference stops
at the first non standard operator and the algorithm fails at
producing :class:`onnx.ModelProto` including the non standard operators.

A failing model
+++++++++++++++

The issue here is a an operator ``Cast`` trying to convert a result
into a non-existing type.

.. GENERATED FROM PYTHON SOURCE LINES 23-55

.. code-block:: Python


    import numpy as np
    import onnx
    import onnx.helper as oh
    import onnxruntime
    from onnx_diagnostic import doc
    from onnx_diagnostic.helpers.onnx_helper import from_array_extended
    from onnx_diagnostic.helpers.ort_session import investigate_onnxruntime_issue

    TFLOAT = onnx.TensorProto.FLOAT

    model = oh.make_model(
        oh.make_graph(
            [
                oh.make_node("Mul", ["X", "Y"], ["xy"], name="n0"),
                oh.make_node("Sigmoid", ["xy"], ["sy"], name="n1"),
                oh.make_node("Add", ["sy", "one"], ["C"], name="n2"),
                oh.make_node("Cast", ["C"], ["X999"], to=999, name="failing"),
                oh.make_node("CastLike", ["X999", "Y"], ["Z"], name="n4"),
            ],
            "-nd-",
            [
                oh.make_tensor_value_info("X", TFLOAT, ["a", "b", "c"]),
                oh.make_tensor_value_info("Y", TFLOAT, ["a", "b", "c"]),
            ],
            [oh.make_tensor_value_info("Z", TFLOAT, ["a", "b", "c"])],
            [from_array_extended(np.array([1], dtype=np.float32), name="one")],
        ),
        opset_imports=[oh.make_opsetid("", 18)],
        ir_version=9,
    )








.. GENERATED FROM PYTHON SOURCE LINES 56-57

We check it is failing.

.. GENERATED FROM PYTHON SOURCE LINES 57-64

.. code-block:: Python


    try:
        onnxruntime.InferenceSession(model.SerializeToString(), providers=["CPUExecutionProvider"])
    except onnxruntime.capi.onnxruntime_pybind11_state.Fail as e:
        print(e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ONNXRuntimeError] : 1 : FAIL : Node (failing) Op (Cast) [TypeInferenceError] Attribute to does not specify a valid type in .




.. GENERATED FROM PYTHON SOURCE LINES 65-70

Shape Inference
+++++++++++++++

Building submodels requires to known the output type.
We run shape inference on the model.

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: Python

    shaped_model = onnx.shape_inference.infer_shapes(model)









.. GENERATED FROM PYTHON SOURCE LINES 74-78

Looping over the nodes
++++++++++++++++++++++



.. GENERATED FROM PYTHON SOURCE LINES 78-81

.. code-block:: Python


    failing = investigate_onnxruntime_issue(shaped_model, providers="cpu", verbose=1, quiet=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [investigate_onnxruntime_issue] found 5 nodes and 2 inputs
    [investigate_onnxruntime_issue] run shape inference
    [investigate_onnxruntime_issue] cls=<class 'onnx_diagnostic.helpers.ort_session.InferenceSessionForNumpy'>
    [investigate_onnxruntime_issue] + node 0: Mul(X, Y) -> xy
    [investigate_onnxruntime_issue] + node 1: Sigmoid(xy) -> sy
    [investigate_onnxruntime_issue] + node 2: Add(sy, one) -> C
    [investigate_onnxruntime_issue] + node 3: Cast(C) -> X999
    [investigate_onnxruntime_issue] cannot extract model at node 3 due to The following names were not found in value_infos: X999




.. GENERATED FROM PYTHON SOURCE LINES 82-83

Let's print the failing node.

.. GENERATED FROM PYTHON SOURCE LINES 83-86

.. code-block:: Python

    print(failing)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    input: "C"
    output: "X999"
    name: "failing"
    op_type: "Cast"
    attribute {
      name: "to"
      i: 999
      type: INT
    }





.. GENERATED FROM PYTHON SOURCE LINES 87-95

Detect an issue with shape Inference
++++++++++++++++++++++++++++++++++++

We could have caught the error sooner by asking shape inference
to raise an exception if one node could not be processed.
It means either the node is a custom node
and shape inference has no way to guess the output type and shape
for this node or shape inference failed.

.. GENERATED FROM PYTHON SOURCE LINES 95-101

.. code-block:: Python


    try:
        onnx.shape_inference.infer_shapes(model, strict_mode=True)
    except onnx.onnx_cpp2py_export.shape_inference.InferenceError as e:
        print(e)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ShapeInferenceError] Inference error(s): (op_type:Cast, node name: failing): [TypeInferenceError] Attribute to does not specify a valid type in node Cast (failing).





.. GENERATED FROM PYTHON SOURCE LINES 102-104

.. code-block:: Python


    doc.plot_legend("run onnx model\nuntil it fails", "onnxruntime.InferenceSession", "lightgrey")



.. image-sg:: /auto_examples/images/sphx_glr_plot_failing_model_extract_001.png
   :alt: plot failing model extract
   :srcset: /auto_examples/images/sphx_glr_plot_failing_model_extract_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.853 seconds)


.. _sphx_glr_download_auto_examples_plot_failing_model_extract.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_failing_model_extract.ipynb <plot_failing_model_extract.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_failing_model_extract.py <plot_failing_model_extract.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_failing_model_extract.zip <plot_failing_model_extract.zip>`


.. include:: plot_failing_model_extract.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
