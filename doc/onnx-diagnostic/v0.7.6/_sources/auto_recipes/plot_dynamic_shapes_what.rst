
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_recipes/plot_dynamic_shapes_what.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_recipes_plot_dynamic_shapes_what.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_recipes_plot_dynamic_shapes_what.py:


Builds dynamic shapes from any input
====================================

Getting dynamic shapes right for :func:`torch.export.export` when the inputs
includes a custom class such as a :class:`transformers.cache_utils.DynamicCache`.
:func:`torch.export.export` cannot use a DynamicCache filled with dynamic shapes
but instead it uses a kind of unserialized serialized form of it.

Standard inputs for a LLM with a dynamic cache
++++++++++++++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 13-36

.. code-block:: Python


    import pprint
    import torch
    from onnx_diagnostic import doc
    from onnx_diagnostic.helpers import string_type
    from onnx_diagnostic.helpers.cache_helper import make_dynamic_cache
    from onnx_diagnostic.export.shape_helper import all_dynamic_shape_from_inputs
    from onnx_diagnostic.torch_models.hghub import get_untrained_model_with_inputs
    from onnx_diagnostic.torch_export_patches import torch_export_patches

    bsize, nheads, slen, dim = 2, 1, 30, 96

    inputs = dict(
        input_ids=torch.randint(15, size=(2, 3), dtype=torch.int64),
        attention_mask=torch.randint(1, size=(2, 33), dtype=torch.int64),
        position_ids=torch.arange(3, dtype=torch.int64),
        past_key_values=make_dynamic_cache(
            [(torch.randn(bsize, nheads, slen, dim), torch.randn(bsize, nheads, slen, dim))]
        ),
    )

    print(string_type(inputs, with_shape=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    dict(input_ids:T7s2x3,attention_mask:T7s2x33,position_ids:T7s3,past_key_values:DynamicCache(key_cache=#1[T1s2x1x30x96], value_cache=#1[T1s2x1x30x96]))




.. GENERATED FROM PYTHON SOURCE LINES 37-39

Function :func:`onnx_diagnostic.export.shape_helper.all_dynamic_shape_from_inputs`
produces the corresponding dynamic shapes assuming they are all dynamic.

.. GENERATED FROM PYTHON SOURCE LINES 39-42

.. code-block:: Python

    ds = all_dynamic_shape_from_inputs(inputs)
    pprint.pprint(ds)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'attention_mask': {0: 'd_1_0', 1: 'd_1_1'},
     'input_ids': {0: 'd_0_0', 1: 'd_0_1'},
     'past_key_values': [[{0: 'd_3_0', 1: 'd_3_1', 2: 'd_3_2', 3: 'd_3_3'}],
                         [{0: 'd_4_0', 1: 'd_4_1', 2: 'd_4_2', 3: 'd_4_3'}]],
     'position_ids': {0: 'd_2_0'}}




.. GENERATED FROM PYTHON SOURCE LINES 43-48

What about a StaticCache?
+++++++++++++++++++++++++

We use :func:`onnx_diagnostic.torch_models.hghub.get_untrained_model_with_inputs` to get
a consistent configuration with a static cache.

.. GENERATED FROM PYTHON SOURCE LINES 48-57

.. code-block:: Python


    data = get_untrained_model_with_inputs(
        "arnir0/Tiny-LLM",
        model_kwargs=dict(cache_implementation="static"),
        inputs_kwargs=dict(cls_cache="StaticCache"),
    )
    inputs = data["inputs"]
    print(string_type(inputs, with_shape=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    dict(input_ids:T7s2x3,attention_mask:T9s2x1x3x96,cache_position:T7s3,past_key_values:StaticCache(key_cache=#1[T1s2x1x96x96], value_cache=#1[T1s2x1x96x96]))




.. GENERATED FROM PYTHON SOURCE LINES 58-59

And the input shapes.

.. GENERATED FROM PYTHON SOURCE LINES 59-67

.. code-block:: Python

    ds = all_dynamic_shape_from_inputs(inputs)
    if ds["past_key_values"]:
        print("transformers implemented serialization function for StaticCache.")
    else:
        print("We need to use serialization function implemented in this package.")
        with torch_export_patches(patch_transformers=True):
            ds = all_dynamic_shape_from_inputs(inputs)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    transformers implemented serialization function for StaticCache.




.. GENERATED FROM PYTHON SOURCE LINES 68-69

That gives.

.. GENERATED FROM PYTHON SOURCE LINES 69-71

.. code-block:: Python

    pprint.pprint(ds)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'attention_mask': {0: 'd_1_0', 1: 'd_1_1', 2: 'd_1_2', 3: 'd_1_3'},
     'cache_position': {0: 'd_2_0'},
     'input_ids': {0: 'd_0_0', 1: 'd_0_1'},
     'past_key_values': [[{0: 'd_3_0', 1: 'd_3_1', 2: 'd_3_2', 3: 'd_3_3'}],
                         [{0: 'd_4_0', 1: 'd_4_1', 2: 'd_4_2', 3: 'd_4_3'}]]}




.. GENERATED FROM PYTHON SOURCE LINES 72-73

We can compare with the ones returned by the function.

.. GENERATED FROM PYTHON SOURCE LINES 73-76

.. code-block:: Python

    pprint.pprint(data["dynamic_shapes"])






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'attention_mask': {0: Dim('batch', min=1, max=1024), 2: 'seq'},
     'cache_position': {0: 'seq'},
     'input_ids': {0: Dim('batch', min=1, max=1024), 1: 'seq_length'},
     'past_key_values': [[{0: Dim('batch', min=1, max=1024)}],
                         [{0: Dim('batch', min=1, max=1024)}]]}




.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: Python


    doc.plot_legend("dynamic shapes\nfrom inputs", "dynamic shapes", "green")



.. image-sg:: /auto_recipes/images/sphx_glr_plot_dynamic_shapes_what_001.png
   :alt: plot dynamic shapes what
   :srcset: /auto_recipes/images/sphx_glr_plot_dynamic_shapes_what_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.196 seconds)


.. _sphx_glr_download_auto_recipes_plot_dynamic_shapes_what.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_dynamic_shapes_what.ipynb <plot_dynamic_shapes_what.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_dynamic_shapes_what.py <plot_dynamic_shapes_what.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_dynamic_shapes_what.zip <plot_dynamic_shapes_what.zip>`


.. include:: plot_dynamic_shapes_what.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
