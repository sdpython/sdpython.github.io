
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_recipes/plot_dynamic_shapes_json.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_recipes_plot_dynamic_shapes_json.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_recipes_plot_dynamic_shapes_json.py:


JSON returns list when the original dynamic shapes are list or tuple
====================================================================

Dynamic shapes given to :func:`torch.export.export` must follow the
same semantic. What if we confuse tuple and list when defining the dynamic shapes,
how to restore the expected type assuming we know the inputs?
Not often useful but maybe we will learn more about
:epkg:`optree`.

Dynamic Shapes After JSON
+++++++++++++++++++++++++

JSON format does not make the difference between a list and a tuple.
So after serializing to json and restoring, both of them become lists.

.. GENERATED FROM PYTHON SOURCE LINES 17-41

.. code-block:: Python


    import json
    import pprint
    import torch
    from onnx_diagnostic import doc
    from onnx_diagnostic.helpers import string_type
    from onnx_diagnostic.helpers.cache_helper import make_dynamic_cache
    from onnx_diagnostic.export.shape_helper import all_dynamic_shape_from_inputs

    bsize, nheads, slen, dim = 2, 1, 30, 96

    inputs = dict(
        input_mask_position=(
            torch.randint(15, size=(2, 3), dtype=torch.int64),
            torch.randint(1, size=(2, 33), dtype=torch.int64),
            torch.arange(3, dtype=torch.int64),
        ),
        past_key_values=make_dynamic_cache(
            [(torch.randn(bsize, nheads, slen, dim), torch.randn(bsize, nheads, slen, dim))]
        ),
    )

    print(string_type(inputs, with_shape=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    dict(input_mask_position:(T7s2x3,T7s2x33,T7s3),past_key_values:DynamicCache(key_cache=#1[T1s2x1x30x96], value_cache=#1[T1s2x1x30x96]))




.. GENERATED FROM PYTHON SOURCE LINES 42-44

Function :func:`onnx_diagnostic.export.shape_helper.all_dynamic_shape_from_inputs`
produces the corresponding dynamic shapes assuming they are all dynamic.

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: Python

    ds = all_dynamic_shape_from_inputs(inputs)
    pprint.pprint(ds)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'input_mask_position': ({0: 'd_0_0', 1: 'd_0_1'},
                             {0: 'd_1_0', 1: 'd_1_1'},
                             {0: 'd_2_0'}),
     'past_key_values': [[{0: 'd_3_0', 1: 'd_3_1', 2: 'd_3_2', 3: 'd_3_3'}],
                         [{0: 'd_4_0', 1: 'd_4_1', 2: 'd_4_2', 3: 'd_4_3'}]]}




.. GENERATED FROM PYTHON SOURCE LINES 48-49

Converted into JSON.

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: Python


    json_str = json.dumps(ds, indent=2, ensure_ascii=False)
    print(json_str)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {
      "input_mask_position": [
        {
          "0": "d_0_0",
          "1": "d_0_1"
        },
        {
          "0": "d_1_0",
          "1": "d_1_1"
        },
        {
          "0": "d_2_0"
        }
      ],
      "past_key_values": [
        [
          {
            "0": "d_3_0",
            "1": "d_3_1",
            "2": "d_3_2",
            "3": "d_3_3"
          }
        ],
        [
          {
            "0": "d_4_0",
            "1": "d_4_1",
            "2": "d_4_2",
            "3": "d_4_3"
          }
        ]
      ]
    }




.. GENERATED FROM PYTHON SOURCE LINES 54-55

Restoration.

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: Python

    ds2 = json.loads(json_str)
    pprint.pprint(ds2)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'input_mask_position': [{'0': 'd_0_0', '1': 'd_0_1'},
                             {'0': 'd_1_0', '1': 'd_1_1'},
                             {'0': 'd_2_0'}],
     'past_key_values': [[{'0': 'd_3_0', '1': 'd_3_1', '2': 'd_3_2', '3': 'd_3_3'}],
                         [{'0': 'd_4_0',
                           '1': 'd_4_1',
                           '2': 'd_4_2',
                           '3': 'd_4_3'}]]}




.. GENERATED FROM PYTHON SOURCE LINES 59-60

tuple are replaced by list.

.. GENERATED FROM PYTHON SOURCE LINES 60-115

.. code-block:: Python


    # The trick to restore tuple when expected
    # ++++++++++++++++++++++++++++++++++++++++


    def flatten_unflatten_like_dynamic_shapes(obj):
        if isinstance(obj, torch.Tensor):
            return obj
        flat, spec = torch.utils._pytree.tree_flatten(obj)
        start = 0
        end = 0
        subtrees = []
        for subspec in spec.children_specs:
            end += subspec.num_leaves
            value = subspec.unflatten(flat[start:end])
            value = flatten_unflatten_like_dynamic_shapes(value)
            subtrees.append(value)
            start = end
        if spec.type is dict:
            # This a dictionary.
            return dict(zip(spec.context, subtrees))
        if spec.type is tuple:
            return tuple(subtrees)
        if spec.type is list:
            return list(subtrees)
        if spec.context:
            # This is a custom class with attributes.
            # It is returned as a list.
            return list(subtrees)
        raise ValueError(
            f"Unable to interpret spec type {spec.type} "
            f"(type is {type(spec.type)}, context is {spec.context})."
        )


    def _align(inputs, ds):
        if isinstance(inputs, torch.Tensor):
            return ds
        if isinstance(inputs, tuple):
            return tuple(_align(o, d) for o, d in zip(inputs, ds))
        if isinstance(inputs, list):
            return [_align(o, d) for o, d in zip(inputs, ds)]
        if isinstance(inputs, dict):
            return {k: _align(inputs[k], d) for k, d in ds.items()}
        raise TypeError(f"Unexpected types inputs is {type(inputs)}, ds is {type(ds)}")


    def fix_dynamic_shapes(inputs, dynamic_shapes):
        flat_unflat_inputs = flatten_unflatten_like_dynamic_shapes(inputs)
        return _align(flat_unflat_inputs, dynamic_shapes)


    fixed_ds = fix_dynamic_shapes(inputs, ds2)
    pprint.pprint(fixed_ds)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'input_mask_position': ({'0': 'd_0_0', '1': 'd_0_1'},
                             {'0': 'd_1_0', '1': 'd_1_1'},
                             {'0': 'd_2_0'}),
     'past_key_values': [[{'0': 'd_3_0', '1': 'd_3_1', '2': 'd_3_2', '3': 'd_3_3'}],
                         [{'0': 'd_4_0',
                           '1': 'd_4_1',
                           '2': 'd_4_2',
                           '3': 'd_4_3'}]]}




.. GENERATED FROM PYTHON SOURCE LINES 116-117

The code changed tuple into list as expected.

.. GENERATED FROM PYTHON SOURCE LINES 117-121

.. code-block:: Python

    assert isinstance(ds2["input_mask_position"], list)
    assert isinstance(fixed_ds["input_mask_position"], tuple)









.. GENERATED FROM PYTHON SOURCE LINES 122-124

.. code-block:: Python


    doc.plot_legend("dynamic shapes\nto json\nfrom json", "torch.export.export", "green")



.. image-sg:: /auto_recipes/images/sphx_glr_plot_dynamic_shapes_json_001.png
   :alt: plot dynamic shapes json
   :srcset: /auto_recipes/images/sphx_glr_plot_dynamic_shapes_json_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.034 seconds)


.. _sphx_glr_download_auto_recipes_plot_dynamic_shapes_json.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_dynamic_shapes_json.ipynb <plot_dynamic_shapes_json.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_dynamic_shapes_json.py <plot_dynamic_shapes_json.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_dynamic_shapes_json.zip <plot_dynamic_shapes_json.zip>`


.. include:: plot_dynamic_shapes_json.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
