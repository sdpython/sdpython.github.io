
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_export_with_dynamic_cache.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_export_with_dynamic_cache.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_export_with_dynamic_cache.py:


.. _l-plot-export-with-dynamic-shape:

===========================================
Export with DynamicCache and dynamic shapes
===========================================

Every LLMs implemented in :epkg:`transformers` use cache.
One of the most used is :class:`transformers.cache_utils.DynamicCache`.
The cache size is dynamic to cope with the growing context.
The example shows a tool which determines the dynamic shapes
for :func:`torch.export.export` based on a set of valid inputs.

Simple Examples
===============

We first look at examples playing positional and names parameters
to understand how :func:`torch.export.export` works.

args
++++

.. GENERATED FROM PYTHON SOURCE LINES 23-31

.. code-block:: Python


    import pprint
    import torch
    from onnx_diagnostic import doc
    from onnx_diagnostic.cache_helpers import make_dynamic_cache
    from onnx_diagnostic.helpers import string_type
    from onnx_diagnostic.export import ModelInputs








.. GENERATED FROM PYTHON SOURCE LINES 32-34

We need addition import in case ``transformers<4.50``.
Exporting DynamicCache is not supported before that.

.. GENERATED FROM PYTHON SOURCE LINES 34-51

.. code-block:: Python

    from onnx_diagnostic.ext_test_case import has_transformers
    from onnx_diagnostic.torch_export_patches import bypass_export_some_errors


    class Model(torch.nn.Module):
        def forward(self, x, y):
            return x + y


    model = Model()
    x = torch.randn((5, 6))
    y = torch.randn((1, 6))
    model(x, y)  # to check it works

    ep = torch.export.export(model, (x, y))
    print(ep)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/backends/mkldnn/__init__.py:78: UserWarning: TF32 acceleration on top of oneDNN is available for Intel GPUs. The current Torch version does not have Intel GPU Support. (Triggered internally at /pytorch/aten/src/ATen/Context.cpp:148.)
      torch._C._set_onednn_allow_tf32(_allow_tf32)
    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[5, 6]", y: "f32[1, 6]"):
                 # File: /home/xadupre/github/onnx-diagnostic/_doc/examples/plot_export_with_dynamic_cache.py:40 in forward, code: return x + y
                add: "f32[5, 6]" = torch.ops.aten.add.Tensor(x, y);  x = y = None
                return (add,)
            
    Graph signature: 
        # inputs
        x: USER_INPUT
        y: USER_INPUT
    
        # outputs
        add: USER_OUTPUT
    
    Range constraints: {}





.. GENERATED FROM PYTHON SOURCE LINES 52-57

As expected there is no dynamic shapes.
We use :class:`onnx_diagnostic.export.ModelInputs`
to define them from two set of valid inputs.
These inputs must have different value for the dynamic
dimensions.

.. GENERATED FROM PYTHON SOURCE LINES 57-63

.. code-block:: Python


    inputs = [(x, y), (torch.randn((7, 8)), torch.randn((1, 8)))]
    mi = ModelInputs(Model(), inputs)
    ds = mi.guess_dynamic_shapes()
    pprint.pprint(ds)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (({0: _DimHint(type=<_DimHintType.DYNAMIC: 3>),
       1: _DimHint(type=<_DimHintType.DYNAMIC: 3>)},
      {1: _DimHint(type=<_DimHintType.DYNAMIC: 3>)}),
     {})




.. GENERATED FROM PYTHON SOURCE LINES 64-68

The function returns a tuple with two objects.
The first one for the positional arguments, the other one
for the named arguments. There is no named arguments. We
we used the first result to export.

.. GENERATED FROM PYTHON SOURCE LINES 68-72

.. code-block:: Python


    ep = torch.export.export(model, (x, y), dynamic_shapes=ds[0])
    print(ep)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/backends/mkldnn/__init__.py:78: UserWarning: TF32 acceleration on top of oneDNN is available for Intel GPUs. The current Torch version does not have Intel GPU Support. (Triggered internally at /pytorch/aten/src/ATen/Context.cpp:148.)
      torch._C._set_onednn_allow_tf32(_allow_tf32)
    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[s0, s1]", y: "f32[1, s1]"):
                 # File: /home/xadupre/github/onnx-diagnostic/_doc/examples/plot_export_with_dynamic_cache.py:40 in forward, code: return x + y
                add: "f32[s0, s1]" = torch.ops.aten.add.Tensor(x, y);  x = y = None
                return (add,)
            
    Graph signature: 
        # inputs
        x: USER_INPUT
        y: USER_INPUT
    
        # outputs
        add: USER_OUTPUT
    
    Range constraints: {s0: VR[2, int_oo], s1: VR[2, int_oo]}





.. GENERATED FROM PYTHON SOURCE LINES 73-77

kwargs
++++++

We do the same with named arguments.

.. GENERATED FROM PYTHON SOURCE LINES 77-89

.. code-block:: Python



    class Model(torch.nn.Module):
        def forward(self, x, y):
            return x + y


    model = Model()
    x = torch.randn((5, 6))
    y = torch.randn((1, 6))
    model(x=x, y=y)  # to check it works





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    tensor([[-0.7238, -0.3193,  1.7236,  2.2693,  2.5246, -0.8459],
            [-1.1968,  0.8089,  2.6765,  0.5666, -0.5359, -0.7651],
            [ 0.9667, -2.3858,  0.8850, -0.6589, -0.4289, -2.1725],
            [-0.9079,  0.1458,  1.3213, -1.8322,  0.5487, -1.6009],
            [ 0.6826, -1.4308,  3.2925, -1.4585,  1.6238, -3.3121]])



.. GENERATED FROM PYTHON SOURCE LINES 90-91

Two sets of valid inputs.

.. GENERATED FROM PYTHON SOURCE LINES 91-96

.. code-block:: Python

    inputs = [dict(x=x, y=y), dict(x=torch.randn((7, 8)), y=torch.randn((1, 8)))]
    mi = ModelInputs(Model(), inputs)
    ds = mi.guess_dynamic_shapes()
    pprint.pprint(ds)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ((),
     {'x': {0: _DimHint(type=<_DimHintType.DYNAMIC: 3>),
            1: _DimHint(type=<_DimHintType.DYNAMIC: 3>)},
      'y': {1: _DimHint(type=<_DimHintType.DYNAMIC: 3>)}})




.. GENERATED FROM PYTHON SOURCE LINES 97-98

And we export.

.. GENERATED FROM PYTHON SOURCE LINES 98-101

.. code-block:: Python

    ep = torch.export.export(model, (), kwargs=dict(x=x, y=y), dynamic_shapes=ds[1])
    print(ep)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/backends/mkldnn/__init__.py:78: UserWarning: TF32 acceleration on top of oneDNN is available for Intel GPUs. The current Torch version does not have Intel GPU Support. (Triggered internally at /pytorch/aten/src/ATen/Context.cpp:148.)
      torch._C._set_onednn_allow_tf32(_allow_tf32)
    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[s0, s1]", y: "f32[1, s1]"):
                 # File: /home/xadupre/github/onnx-diagnostic/_doc/examples/plot_export_with_dynamic_cache.py:81 in forward, code: return x + y
                add: "f32[s0, s1]" = torch.ops.aten.add.Tensor(x, y);  x = y = None
                return (add,)
            
    Graph signature: 
        # inputs
        x: USER_INPUT
        y: USER_INPUT
    
        # outputs
        add: USER_OUTPUT
    
    Range constraints: {s0: VR[2, int_oo], s1: VR[2, int_oo]}





.. GENERATED FROM PYTHON SOURCE LINES 102-107

args and kwargs
+++++++++++++++

:func:`torch.export.export` does not like having dynami shapes
for both args and kwargs. We need to define them using one mechanism.

.. GENERATED FROM PYTHON SOURCE LINES 107-119

.. code-block:: Python



    class Model(torch.nn.Module):
        def forward(self, x, y):
            return x + y


    model = Model()
    x = torch.randn((5, 6))
    y = torch.randn((1, 6))
    model(x, y=y)  # to check it works





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    tensor([[ 0.4990,  0.8008, -1.6592, -1.7718, -2.1361, -0.3320],
            [ 0.0268,  2.4710, -0.7607, -0.7025, -0.7051,  0.3675],
            [ 0.4825,  0.1918, -1.4674, -1.6117, -0.9426, -0.2165],
            [ 0.5695,  0.7951, -0.3090, -0.6104, -1.5391, -0.2678],
            [ 2.0162,  0.8223, -0.6993, -1.9011, -0.2755, -1.0687]])



.. GENERATED FROM PYTHON SOURCE LINES 120-121

Two sets of valid inputs with positional and names arguments.

.. GENERATED FROM PYTHON SOURCE LINES 121-127

.. code-block:: Python


    inputs = [((x,), dict(y=y)), ((torch.randn((7, 8)),), dict(y=torch.randn((1, 8))))]
    mi = ModelInputs(Model(), inputs)
    ds = mi.guess_dynamic_shapes()
    pprint.pprint(ds)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (({0: _DimHint(type=<_DimHintType.DYNAMIC: 3>),
       1: _DimHint(type=<_DimHintType.DYNAMIC: 3>)},),
     {'y': {1: _DimHint(type=<_DimHintType.DYNAMIC: 3>)}})




.. GENERATED FROM PYTHON SOURCE LINES 128-132

This does not work with :func:`torch.export.export` so
we use a method to move the positional dynamic shapes to
named one. The method relies on the signature of the
forward method.

.. GENERATED FROM PYTHON SOURCE LINES 132-136

.. code-block:: Python


    new_args, new_kwargs, new_ds = mi.move_to_kwargs(*mi.inputs[0], ds)
    pprint.pprint(new_ds)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ((),
     {'x': {0: _DimHint(type=<_DimHintType.DYNAMIC: 3>),
            1: _DimHint(type=<_DimHintType.DYNAMIC: 3>)},
      'y': {1: _DimHint(type=<_DimHintType.DYNAMIC: 3>)}})




.. GENERATED FROM PYTHON SOURCE LINES 137-138

And we export.

.. GENERATED FROM PYTHON SOURCE LINES 138-142

.. code-block:: Python


    ep = torch.export.export(model, new_args, kwargs=new_kwargs, dynamic_shapes=new_ds[1])
    print(ep)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/backends/mkldnn/__init__.py:78: UserWarning: TF32 acceleration on top of oneDNN is available for Intel GPUs. The current Torch version does not have Intel GPU Support. (Triggered internally at /pytorch/aten/src/ATen/Context.cpp:148.)
      torch._C._set_onednn_allow_tf32(_allow_tf32)
    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[s0, s1]", y: "f32[1, s1]"):
                 # File: /home/xadupre/github/onnx-diagnostic/_doc/examples/plot_export_with_dynamic_cache.py:111 in forward, code: return x + y
                add: "f32[s0, s1]" = torch.ops.aten.add.Tensor(x, y);  x = y = None
                return (add,)
            
    Graph signature: 
        # inputs
        x: USER_INPUT
        y: USER_INPUT
    
        # outputs
        add: USER_OUTPUT
    
    Range constraints: {s0: VR[2, int_oo], s1: VR[2, int_oo]}





.. GENERATED FROM PYTHON SOURCE LINES 143-150

DynamicCache
============

:func:`torch.export.export` serializes caches and any custom class
if these serialization functions are provided with is the case for
:class:`transformers.cache_utils.DynamicCache` and ``transformers>=4.50``.
The dynamic shapes must be provided following the serialized form.

.. GENERATED FROM PYTHON SOURCE LINES 150-176

.. code-block:: Python



    class Model(torch.nn.Module):
        def forward(self, cache, z):
            return (
                z
                + cache.key_cache[0]
                + cache.key_cache[1]
                + cache.value_cache[0]
                + cache.value_cache[1]
            )


    model = Model()

    n_layers = 2
    bsize, nheads, slen, dim = 2, 4, 3, 7
    cache = make_dynamic_cache(
        [
            (torch.randn(bsize, nheads, slen, dim), torch.randn(bsize, nheads, slen, dim))
            for i in range(n_layers)
        ]
    )
    z = torch.randn((1, 1, 1, 7))
    model(cache, z)  # to check it works.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    tensor([[[[-7.4462e-01, -2.1276e+00,  2.3254e+00,  2.6029e+00,  3.4638e+00,
               -2.0745e-01, -1.2748e+00],
              [-5.1904e+00, -6.2512e-01,  1.5546e+00,  2.3707e-01,  1.9784e-01,
               -1.6546e+00, -2.8158e-01],
              [-2.7496e+00,  4.6450e-01, -6.8702e-01,  1.4396e+00,  1.4835e+00,
                2.4472e+00,  3.1561e-01]],

             [[-3.4598e+00, -6.8563e-01,  3.1835e+00, -1.1811e+00,  1.2217e+00,
                7.3878e-01, -1.9440e+00],
              [-1.4925e+00,  1.1083e+00, -7.3900e-01, -7.1456e-01, -8.9577e-01,
               -1.9726e+00, -1.5794e+00],
              [-2.8263e+00, -3.6811e-01, -7.3348e-01,  1.2413e+00,  4.5339e+00,
                6.1367e-01, -1.8086e+00]],

             [[-2.9981e+00,  2.3177e+00, -1.7417e-01,  2.2289e+00,  4.7395e-01,
               -2.5079e+00, -4.2295e+00],
              [-2.6291e+00, -1.2724e+00,  1.9130e+00, -5.1902e+00, -6.0745e-01,
                7.2676e-01, -1.8769e+00],
              [ 6.8925e-01,  2.2783e+00, -1.0089e+00,  1.4153e+00, -4.6772e+00,
                3.0128e-01, -8.1748e-01]],

             [[ 5.7458e-03,  2.2876e-01, -3.2770e+00, -1.1449e+00,  1.4174e+00,
               -1.9032e-01, -3.7446e+00],
              [ 3.6625e-01, -2.0798e+00, -1.5159e+00,  1.0335e+00,  2.1344e+00,
                6.9337e-01,  6.3450e-01],
              [ 3.8673e-01, -3.5156e+00, -1.3762e+00, -7.4410e-01, -3.8980e-01,
               -8.0164e-01, -3.6253e+00]]],


            [[[ 2.2577e+00, -1.9448e+00,  5.3734e+00, -2.6492e+00, -1.2531e+00,
                1.9000e-01, -2.9267e+00],
              [-4.1271e+00, -9.7320e-01, -2.2672e+00,  2.5517e-01, -4.7037e+00,
               -1.2439e-01,  2.4903e+00],
              [-2.2217e+00,  1.7069e+00, -2.1347e+00, -1.1992e+00,  7.9010e-01,
               -3.7449e+00, -1.2960e+00]],

             [[ 5.0801e-01,  7.4664e-01, -1.0912e-01,  3.5304e+00,  1.5170e+00,
                5.6678e-01, -1.3504e+00],
              [-2.5469e+00, -2.1345e+00,  1.5293e+00,  2.1186e+00, -1.4869e+00,
               -1.8197e+00, -1.1639e+00],
              [-5.6468e-01, -1.4213e+00,  9.5260e-01,  3.0939e+00, -1.1876e-01,
               -2.2124e+00, -1.2986e+00]],

             [[-2.9520e+00, -1.8939e-01,  2.0590e+00,  3.4694e+00, -1.2302e+00,
                7.2748e-01,  1.6364e+00],
              [-4.7535e+00,  2.4221e+00,  1.0085e+00,  3.0148e+00, -3.9646e+00,
               -4.1331e+00, -5.8300e-01],
              [-3.0370e+00,  9.5518e-01,  8.0305e-01,  2.0116e+00, -1.9461e-01,
                1.3705e+00,  2.0276e-01]],

             [[-8.0558e-01,  1.4898e+00,  2.9239e-01, -8.6265e-01,  3.0765e+00,
               -8.5888e-02,  1.6595e+00],
              [-3.3627e+00, -7.5004e-02, -1.5017e+00,  4.8085e-01,  3.1392e-01,
                2.8155e+00, -2.8684e+00],
              [ 1.5434e+00, -1.0191e+00,  6.5590e+00,  3.1328e-01, -2.9358e-01,
               -4.7871e+00, -1.4718e+00]]]])



.. GENERATED FROM PYTHON SOURCE LINES 177-178

The cache looks like this:

.. GENERATED FROM PYTHON SOURCE LINES 178-182

.. code-block:: Python


    print(string_type(cache, with_shape=True))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    DynamicCache(key_cache=#2[T1s2x4x3x7,T1s2x4x3x7], value_cache=#2[T1s2x4x3x7,T1s2x4x3x7])




.. GENERATED FROM PYTHON SOURCE LINES 183-198

.. code-block:: Python


    cache2 = make_dynamic_cache(
        [
            (
                torch.randn(bsize + 1, nheads, slen + 1, dim + 1),
                torch.randn(bsize + 1, nheads, slen + 1, dim + 1),
            )
            for i in range(n_layers)
        ]
    )
    inputs = [
        (cache, z),
        (cache2, torch.randn((1, 1, 1, 8))),
    ]








.. GENERATED FROM PYTHON SOURCE LINES 199-200

And the first set of inputs looks like:

.. GENERATED FROM PYTHON SOURCE LINES 200-202

.. code-block:: Python

    print(string_type(inputs[0], with_shape=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (DynamicCache(key_cache=#2[T1s2x4x3x7,T1s2x4x3x7], value_cache=#2[T1s2x4x3x7,T1s2x4x3x7]),T1s1x1x1x7)




.. GENERATED FROM PYTHON SOURCE LINES 203-204

We can now compute the dynamic shapes.

.. GENERATED FROM PYTHON SOURCE LINES 204-209

.. code-block:: Python


    mi = ModelInputs(Model(), inputs)
    ds = mi.guess_dynamic_shapes()
    pprint.pprint(ds)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (([[{0: _DimHint(type=<_DimHintType.DYNAMIC: 3>),
         2: _DimHint(type=<_DimHintType.DYNAMIC: 3>),
         3: _DimHint(type=<_DimHintType.DYNAMIC: 3>)},
        {0: _DimHint(type=<_DimHintType.DYNAMIC: 3>),
         2: _DimHint(type=<_DimHintType.DYNAMIC: 3>),
         3: _DimHint(type=<_DimHintType.DYNAMIC: 3>)}],
       [{0: _DimHint(type=<_DimHintType.DYNAMIC: 3>),
         2: _DimHint(type=<_DimHintType.DYNAMIC: 3>),
         3: _DimHint(type=<_DimHintType.DYNAMIC: 3>)},
        {0: _DimHint(type=<_DimHintType.DYNAMIC: 3>),
         2: _DimHint(type=<_DimHintType.DYNAMIC: 3>),
         3: _DimHint(type=<_DimHintType.DYNAMIC: 3>)}]],
      {3: _DimHint(type=<_DimHintType.DYNAMIC: 3>)}),
     {})




.. GENERATED FROM PYTHON SOURCE LINES 210-216

And finally the export.
The export is simple if ``transformers>=4.50``, otherwise,
transformers needs to be patched.
:func:`onnx_diagnostic.torch_export_patches.bypass_export_some_errors`
registers functions to serialize ``DynamicCache``. This one is modified to make
the shape inference implemented in :epkg:`torch` happy.

.. GENERATED FROM PYTHON SOURCE LINES 216-226

.. code-block:: Python


    if has_transformers("4.50"):
        ep = torch.export.export(model, inputs[0], dynamic_shapes=ds[0], strict=False)
    else:
        with bypass_export_some_errors(patch_transformers=True) as modificator:
            ep = torch.export.export(
                model, modificator(inputs[0]), dynamic_shapes=ds[0], strict=False
            )
    print(ep)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/backends/mkldnn/__init__.py:78: UserWarning: TF32 acceleration on top of oneDNN is available for Intel GPUs. The current Torch version does not have Intel GPU Support. (Triggered internally at /pytorch/aten/src/ATen/Context.cpp:148.)
      torch._C._set_onednn_allow_tf32(_allow_tf32)
    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, cache_key_cache_0: "f32[s0, 4, s1, s11]", cache_key_cache_1: "f32[s0, 4, s1, s11]", cache_value_cache_0: "f32[s0, 4, s1, s11]", cache_value_cache_1: "f32[s0, 4, s1, s11]", z: "f32[1, 1, 1, s11]"):
                 # File: /home/xadupre/github/onnx-diagnostic/_doc/examples/plot_export_with_dynamic_cache.py:155 in forward, code: z
                add: "f32[s0, 4, s1, s11]" = torch.ops.aten.add.Tensor(z, cache_key_cache_0);  z = cache_key_cache_0 = None
                add_1: "f32[s0, 4, s1, s11]" = torch.ops.aten.add.Tensor(add, cache_key_cache_1);  add = cache_key_cache_1 = None
                add_2: "f32[s0, 4, s1, s11]" = torch.ops.aten.add.Tensor(add_1, cache_value_cache_0);  add_1 = cache_value_cache_0 = None
                add_3: "f32[s0, 4, s1, s11]" = torch.ops.aten.add.Tensor(add_2, cache_value_cache_1);  add_2 = cache_value_cache_1 = None
                return (add_3,)
            
    Graph signature: 
        # inputs
        cache_key_cache_0: USER_INPUT
        cache_key_cache_1: USER_INPUT
        cache_value_cache_0: USER_INPUT
        cache_value_cache_1: USER_INPUT
        z: USER_INPUT
    
        # outputs
        add_3: USER_OUTPUT
    
    Range constraints: {s0: VR[2, int_oo], s1: VR[2, int_oo], s11: VR[2, int_oo]}





.. GENERATED FROM PYTHON SOURCE LINES 227-229

.. code-block:: Python


    doc.plot_legend("dynamic shapes", "torch.export.export", "tomato")



.. image-sg:: /auto_examples/images/sphx_glr_plot_export_with_dynamic_cache_001.png
   :alt: plot export with dynamic cache
   :srcset: /auto_examples/images/sphx_glr_plot_export_with_dynamic_cache_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.315 seconds)


.. _sphx_glr_download_auto_examples_plot_export_with_dynamic_cache.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_export_with_dynamic_cache.ipynb <plot_export_with_dynamic_cache.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_export_with_dynamic_cache.py <plot_export_with_dynamic_cache.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_export_with_dynamic_cache.zip <plot_export_with_dynamic_cache.zip>`


.. include:: plot_export_with_dynamic_cache.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
