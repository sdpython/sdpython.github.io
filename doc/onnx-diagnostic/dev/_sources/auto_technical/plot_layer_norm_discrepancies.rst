
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_technical/plot_layer_norm_discrepancies.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_technical_plot_layer_norm_discrepancies.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_technical_plot_layer_norm_discrepancies.py:


LayerNormalization implementation cannot be exchanged
=====================================================

This example applies what was illustrated
:ref:`l-plot-parallelized-reduction`, reduction operations
are sensitive to parallelization.

We consider a small model including a layer normalization
followed by a matrix multiplication and we show that replacing
a kernel by another one may significantly impact the output.

The model
+++++++++

.. GENERATED FROM PYTHON SOURCE LINES 16-61

.. code-block:: Python


    import itertools
    import pandas
    import onnx
    import onnx.helper as oh
    import onnxruntime
    import torch
    from onnx_array_api.plotting.graphviz_helper import plot_dot
    from onnx_diagnostic.ext_test_case import unit_test_going
    from onnx_diagnostic.helpers import max_diff, string_diff, string_type
    from onnx_diagnostic.helpers.onnx_helper import onnx_dtype_name, onnx_dtype_to_np_dtype
    from onnx_diagnostic.helpers.torch_helper import onnx_dtype_to_torch_dtype
    from onnx_diagnostic.helpers.doc_helper import LayerNormalizationOrt, MatMulOrt
    from onnx_diagnostic.reference import TorchOnnxEvaluator

    TFLOAT = onnx.TensorProto.FLOAT
    TFLOAT16 = onnx.TensorProto.FLOAT16


    def get_model(itype: int = TFLOAT16):
        return oh.make_model(
            oh.make_graph(
                [
                    oh.make_node("LayerNormalization", ["X", "scale", "bias"], ["norm"], axis=-1),
                    oh.make_node("MatMul", ["norm", "weights"], ["mm"]),
                    oh.make_node("Add", ["mm", "bias2"], ["Z"]),
                ],
                "layer_norm_matmul_add",
                [
                    oh.make_tensor_value_info("X", itype, ["a", "b", "c"]),
                    oh.make_tensor_value_info("scale", itype, ["c"]),
                    oh.make_tensor_value_info("bias", itype, ["c"]),
                    oh.make_tensor_value_info("weights", itype, ["c", "c"]),
                    oh.make_tensor_value_info("bias2", itype, ["c"]),
                ],
                [oh.make_tensor_value_info("Z", itype, ["a", "b", "c"])],
            ),
            ir_version=9,
            opset_imports=[oh.make_opsetid("", 18)],
        )


    model = get_model()
    plot_dot(model)




.. image-sg:: /auto_technical/images/sphx_glr_plot_layer_norm_discrepancies_001.png
   :alt: plot layer norm discrepancies
   :srcset: /auto_technical/images/sphx_glr_plot_layer_norm_discrepancies_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 62-67

Let's compare two runtimes
++++++++++++++++++++++++++

That will be :epkg:`onnxruntime` and
:class:`onnx_diagnostic.reference.TorchOnnxEvaluator`.

.. GENERATED FROM PYTHON SOURCE LINES 67-139

.. code-block:: Python


    last_dim = 64 if unit_test_going() else 1152


    def make_feeds(last_dim: int):
        return {
            "X": (torch.rand((32, 1024, last_dim), dtype=torch.float16) - 0.5) * 120,
            "scale": torch.rand((last_dim,), dtype=torch.float16),
            "bias": torch.rand((last_dim,), dtype=torch.float16),
            "weights": torch.rand((last_dim, last_dim), dtype=torch.float16),
            "bias2": torch.rand((last_dim,), dtype=torch.float16),
        }


    def cast_feeds(itype, provider, feeds):
        np_feeds = {k: v.detach().numpy() for k, v in feeds.items()}
        if provider == "CUDA":
            if not torch.cuda.is_available():
                return None, None
            tch_feeds = {k: v.to("cuda") for k, v in feeds.items()}
            ort_feeds = np_feeds
        else:
            tch_feeds = feeds.copy()
            tch_feeds["X"] = tch_feeds["X"][:2]  # too long otherwise
            ort_feeds = np_feeds.copy()
            ort_feeds["X"] = ort_feeds["X"][:2]
        tch_feeds = {k: v.to(ttype) for k, v in tch_feeds.items()}
        ort_feeds = {k: v.astype(np_dtype) for k, v in ort_feeds.items()}
        return tch_feeds, ort_feeds


    feeds = make_feeds(last_dim)
    kws = dict(with_shape=True, with_min_max=True, with_device=True)
    data = []
    baseline = {}

    for provider, itype in itertools.product(["CPU", "CUDA"], [TFLOAT, TFLOAT16]):
        ttype = onnx_dtype_to_torch_dtype(itype)
        np_dtype = onnx_dtype_to_np_dtype(itype)
        tch_feeds, ort_feeds = cast_feeds(itype, provider, feeds)
        if tch_feeds is None:
            continue

        model = get_model(itype)
        print()
        print(f"-- running on {provider} with {onnx_dtype_name(itype)}")
        print("-- running with torch")
        torch_sess = TorchOnnxEvaluator(model, providers=[f"{provider}ExecutionProvider"])
        expected = torch_sess.run(None, tch_feeds)
        baseline[itype, provider, "torch"] = expected
        print(f"-- torch: {string_type(expected, **kws)}")

        print("-- running with ort")
        ort_sess = onnxruntime.InferenceSession(
            model.SerializeToString(), providers=[f"{provider}ExecutionProvider"]
        )
        got = ort_sess.run(None, ort_feeds)
        baseline[itype, provider, "ort"] = got
        print(f"-- ort: {string_type(got, **kws)}")
        diff = max_diff(expected, got, hist=True)
        print(f"-- diff {string_diff(diff)}")

        # memorize the data
        diff["dtype"] = onnx_dtype_name(itype)
        diff["provider"] = provider
        diff.update(diff["rep"])
        del diff["rep"]
        del diff["dnan"]
        del diff[">100.0"]
        del diff[">10.0"]
        data.append(diff)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    -- running on CPU with FLOAT
    -- running with torch
    -- torch: #1[CT1s2x1024x1152[248.91334533691406,342.6495666503906:A293.47585376841664]]
    -- running with ort
    -- ort: #1[A1s2x1024x1152[248.91336059570312,342.6495666503906:A293.47585369208053]]
    -- diff abs=0.000152587890625, rel=5.375654055506395e-07, n=2359296.0/#1500052>0.0-#2609>0.0001

    -- running on CPU with FLOAT16
    -- running with torch
    -- torch: #1[CT10s2x1024x1152[248.875,342.5:A293.4774925443861]]
    -- running with ort
    -- ort: #1[A10s2x1024x1152[248.875,342.75:A293.4759013387892]]
    -- diff abs=0.25, rel=0.0009765586853176355, n=2359296.0/#585348>0.0-#585348>0.0001-#585348>0.001-#585348>0.01-#585348>0.1

    -- running on CUDA with FLOAT
    -- running with torch
    -- torch: #1[GT1s32x1024x1152[241.55111694335938,344.2181091308594:A293.3795202517556]]
    -- running with ort
    -- ort: #1[A1s32x1024x1152[241.54922485351562,344.21795654296875:A293.37674252890713]]
    -- diff abs=0.020782470703125, rel=6.967948218278697e-05, n=37748736.0/#37651458>0.0-#37065905>0.0001-#31432713>0.001-#637985>0.01

    -- running on CUDA with FLOAT16
    -- running with torch
    -- torch: #1[GT10s32x1024x1152[241.5,344.25:A293.3788362344106]]
    -- running with ort
    -- ort: #1[A10s32x1024x1152[241.5,344.25:A293.3788364330928]]
    -- diff abs=0.25, rel=0.0009425035155381131, n=37748736.0/#1670>0.0-#1670>0.0001-#1670>0.001-#1670>0.01-#1670>0.1




.. GENERATED FROM PYTHON SOURCE LINES 140-143

.. code-block:: Python

    df = pandas.DataFrame(data).set_index(["provider", "dtype"])
    print(df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                           abs           rel            sum           n      >0.0   >0.0001    >0.001   >0.01    >0.1  >1.0
    provider dtype                                                                                                         
    CPU      FLOAT    0.000153  5.375654e-07      58.982132   2359296.0   1500052      2609         0       0       0     0
             FLOAT16  0.250000  9.765587e-04  146335.875000   2359296.0    585348    585348    585348  585348  585348     0
    CUDA     FLOAT    0.020782  6.967948e-05  134018.442352  37748736.0  37651458  37065905  31432713  637985       0     0
             FLOAT16  0.250000  9.425035e-04     417.500000  37748736.0      1670      1670      1670    1670    1670     0




.. GENERATED FROM PYTHON SOURCE LINES 144-145

Visually.

.. GENERATED FROM PYTHON SOURCE LINES 145-148

.. code-block:: Python


    df["abs"].plot(title="Discrepancies ORT / torch for LayerNorm(X) @ W + B")




.. image-sg:: /auto_technical/images/sphx_glr_plot_layer_norm_discrepancies_002.png
   :alt: Discrepancies ORT / torch for LayerNorm(X) @ W + B
   :srcset: /auto_technical/images/sphx_glr_plot_layer_norm_discrepancies_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 149-152

The discrepancies are significant on CUDA, higher for float16.
Let's see which operator is responsible for them,
*LayerNormalization* or *MatMul*.

.. GENERATED FROM PYTHON SOURCE LINES 154-158

The discrepancies come from?
++++++++++++++++++++++++++++

We mix torch and onnxruntime to execute the kernels.

.. GENERATED FROM PYTHON SOURCE LINES 158-202

.. code-block:: Python


    data = []

    for mod, provider, itype in itertools.product(
        ["ORT-TORCH", "TORCH-ORT"], ["CPU", "CUDA"], [TFLOAT, TFLOAT16]
    ):
        ttype = onnx_dtype_to_torch_dtype(itype)
        np_dtype = onnx_dtype_to_np_dtype(itype)
        tch_feeds, _ = cast_feeds(itype, provider, feeds)
        if tch_feeds is None:
            continue

        custom_kernels = (
            {("", "LayerNormalization"): LayerNormalizationOrt}
            if mod == "ORT-TORCH"
            else {("", "MatMul"): MatMulOrt}
        )

        model = get_model(itype)
        print()
        print(f"-- {mod} running on {provider} with {onnx_dtype_name(itype)}")
        sess = TorchOnnxEvaluator(
            model,
            custom_kernels=custom_kernels,
            providers=[f"{provider}ExecutionProvider"],
        )
        got = sess.run(None, tch_feeds)
        print(f"-- {mod}: {string_type(got, **kws)}")

        difft = max_diff(baseline[itype, provider, "torch"], got)
        print(f"-- diff with torch {string_diff(difft)}")
        diffo = max_diff(baseline[itype, provider, "ort"], got)
        print(f"-- diff with ort {string_diff(diffo)}")

        data.append(
            dict(
                model=mod,
                dtype=onnx_dtype_name(itype),
                provider=provider,
                diff_ort=diffo["abs"],
                diff_torch=difft["abs"],
            )
        )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    -- ORT-TORCH running on CPU with FLOAT
    -- ORT-TORCH: #1[CT1s2x1024x1152[248.91334533691406,342.6495666503906:A293.47585377937907]]
    -- diff with torch abs=9.1552734375e-05, rel=3.360282135954935e-07, n=2359296.0
    -- diff with ort abs=0.00018310546875, rel=5.854694235994041e-07, n=2359296.0

    -- ORT-TORCH running on CPU with FLOAT16
    -- ORT-TORCH: #1[CT10s2x1024x1152[248.875,342.5:A293.4774929682414]]
    -- diff with torch abs=0.25, rel=0.000936326081175726, n=2359296.0
    -- diff with ort abs=0.25, rel=0.0009756059488548338, n=2359296.0

    -- ORT-TORCH running on CUDA with FLOAT
    -- ORT-TORCH: #1[GT1s32x1024x1152[241.55113220214844,344.21807861328125:A293.37952024923527]]
    -- diff with torch abs=0.000152587890625, rel=5.384998433969219e-07, n=37748736.0
    -- diff with ort abs=0.020782470703125, rel=6.968433775135773e-05, n=37748736.0

    -- ORT-TORCH running on CUDA with FLOAT16
    -- ORT-TORCH: #1[GT10s32x1024x1152[241.5,344.25:A293.3788364330927]]
    -- diff with torch abs=0.25, rel=0.0009425035155381131, n=37748736.0
    -- diff with ort abs=0, rel=0

    -- TORCH-ORT running on CPU with FLOAT
    -- TORCH-ORT: #1[CT1s2x1024x1152[248.90866088867188,342.6494445800781:A293.4730477682703]]
    -- diff with torch abs=0.018768310546875, rel=6.353966933762668e-05, n=2359296.0
    -- diff with ort abs=0.01873779296875, rel=6.343635935614322e-05, n=2359296.0

    -- TORCH-ORT running on CPU with FLOAT16
    -- TORCH-ORT: #1[CT10s2x1024x1152[248.875,342.5:A293.47518783145483]]
    -- diff with torch abs=0.5, rel=0.0017093958653132812, n=2359296.0
    -- diff with ort abs=0.25, rel=0.0009756059488548338, n=2359296.0

    -- TORCH-ORT running on CUDA with FLOAT
    -- TORCH-ORT: #1[GT1s32x1024x1152[241.54922485351562,344.21795654296875:A293.37674214654055]]
    -- diff with torch abs=0.020782470703125, rel=6.967948218278697e-05, n=37748736.0
    -- diff with ort abs=0.001953125, rel=7.090316636083033e-06, n=37748736.0

    -- TORCH-ORT running on CUDA with FLOAT16
    -- TORCH-ORT: #1[GT10s32x1024x1152[241.5,344.25:A293.3788362344106]]
    -- diff with torch abs=0, rel=0
    -- diff with ort abs=0.25, rel=0.0009433926664427682, n=37748736.0




.. GENERATED FROM PYTHON SOURCE LINES 203-207

.. code-block:: Python

    df = pandas.DataFrame(data).set_index(["model", "provider", "dtype"])
    df = df.sort_index()
    print(df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                                diff_ort  diff_torch
    model     provider dtype                        
    ORT-TORCH CPU      FLOAT    0.000183    0.000092
                       FLOAT16  0.250000    0.250000
              CUDA     FLOAT    0.020782    0.000153
                       FLOAT16  0.000000    0.250000
    TORCH-ORT CPU      FLOAT    0.018738    0.018768
                       FLOAT16  0.250000    0.500000
              CUDA     FLOAT    0.001953    0.020782
                       FLOAT16  0.250000    0.000000




.. GENERATED FROM PYTHON SOURCE LINES 208-209

Visually.

.. GENERATED FROM PYTHON SOURCE LINES 209-211

.. code-block:: Python


    df[["diff_ort", "diff_torch"]].plot(title="ORT/Torch or Torch/ORT for LayerNorm(X) @ W + B")



.. image-sg:: /auto_technical/images/sphx_glr_plot_layer_norm_discrepancies_003.png
   :alt: ORT/Torch or Torch/ORT for LayerNorm(X) @ W + B
   :srcset: /auto_technical/images/sphx_glr_plot_layer_norm_discrepancies_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 58.552 seconds)


.. _sphx_glr_download_auto_technical_plot_layer_norm_discrepancies.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_layer_norm_discrepancies.ipynb <plot_layer_norm_discrepancies.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_layer_norm_discrepancies.py <plot_layer_norm_discrepancies.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_layer_norm_discrepancies.zip <plot_layer_norm_discrepancies.zip>`


.. include:: plot_layer_norm_discrepancies.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
