
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_export_tiny_llm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_export_tiny_llm.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_export_tiny_llm.py:


.. _l-plot-tiny-llm-export:

Steel method forward to guess the dynamic shapes (with Tiny-LLM)
================================================================

Inputs are always dynamic with LLMs that is why dynamic shapes
needs to be specified when a LLM is exported with:func:`torch.export.export`.
Most of the examples on :epkg:`HuggingFace` use method
:meth:`transformers.GenerationMixin.generate` but we only want to
export the model and its method ``forward``.

That example shows to guess the inputs of this method even though the model
is executed through meth ``generate``.

We focus on the model :epkg:`arnir0/Tiny-LLM`.
To avoid downloading any weights, we write a function creating a
random model based on the same architecture.

Steel the forward method
++++++++++++++++++++++++

The first step is to guess the dummy inputs.
Let's use the true model for that.
We use the dummy example from the model page.

.. GENERATED FROM PYTHON SOURCE LINES 27-42

.. code-block:: Python


    import copy
    import pprint
    import torch
    import transformers
    from onnx_diagnostic import doc
    from onnx_diagnostic.helpers import string_type
    from onnx_diagnostic.helpers.torch_test_helper import steel_forward
    from onnx_diagnostic.torch_models.llms import get_tiny_llm


    MODEL_NAME = "arnir0/Tiny-LLM"
    tokenizer = transformers.AutoTokenizer.from_pretrained(MODEL_NAME)
    model = transformers.AutoModelForCausalLM.from_pretrained(MODEL_NAME)








.. GENERATED FROM PYTHON SOURCE LINES 43-44

We rewrite the forward method to print the cache dimension.

.. GENERATED FROM PYTHON SOURCE LINES 44-62

.. code-block:: Python



    def _forward_(*args, _f=None, **kwargs):
        assert _f is not None
        if not hasattr(torch.compiler, "is_exporting") or not torch.compiler.is_exporting():
            # torch.compiler.is_exporting requires torch>=2.7
            print("<-", string_type((args, kwargs), with_shape=True, with_min_max=True))
        res = _f(*args, **kwargs)
        if not hasattr(torch.compiler, "is_exporting") or not torch.compiler.is_exporting():
            print("->", string_type(res, with_shape=True, with_min_max=True))
        return res


    keep_model_forward = model.forward
    model.forward = lambda *args, _f=keep_model_forward, **kwargs: _forward_(
        *args, _f=_f, **kwargs
    )








.. GENERATED FROM PYTHON SOURCE LINES 63-64

Let's run the model.

.. GENERATED FROM PYTHON SOURCE LINES 64-75

.. code-block:: Python

    prompt = "Continue: it rains..."
    inputs = tokenizer.encode(prompt, return_tensors="pt")

    outputs = model.generate(
        inputs, max_length=50, temperature=1, top_k=50, top_p=0.95, do_sample=True
    )

    generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)
    print("-- prompt", prompt)
    print("-- answer", generated_text)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <- ((),dict(cache_position:T7s8[0,7:A3.5],past_key_values:DynamicCache[serialized](#2[#0[],#0[]]),input_ids:T7s1x8[1,29901:A6305.375],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x8x32000[-15.516718864440918,15.75765609741211:A-3.381915190983544],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x8x96[-5.490959167480469,6.226877689361572:A-0.11321351693110653]],#1[T1s1x1x8x96[-0.6787744760513306,0.49568021297454834:A0.007227749521139988]]]))
    <- ((),dict(cache_position:T7s1[8,8:A8.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x8x96[-5.490959167480469,6.226877689361572:A-0.11321351693110653]],#1[T1s1x1x8x96[-0.6787744760513306,0.49568021297454834:A0.007227749521139988]]]),input_ids:T7s1x1[13,13:A13.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-10.432564735412598,8.368535995483398:A-4.234468644971028],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x9x96[-5.509540557861328,6.348220348358154:A-0.12195695057461206]],#1[T1s1x1x9x96[-0.6787744760513306,0.7704185843467712:A0.009565710057611594]]]))
    <- ((),dict(cache_position:T7s1[9,9:A9.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x9x96[-5.509540557861328,6.348220348358154:A-0.12195695057461206]],#1[T1s1x1x9x96[-0.6787744760513306,0.7704185843467712:A0.009565710057611594]]]),input_ids:T7s1x1[3112,3112:A3112.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-15.801546096801758,9.950498580932617:A-6.4666844126652],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x10x96[-5.509540557861328,6.348220348358154:A-0.13962116193664162]],#1[T1s1x1x10x96[-0.6787744760513306,0.7704185843467712:A0.0072120334078590535]]]))
    <- ((),dict(cache_position:T7s1[10,10:A10.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x10x96[-5.509540557861328,6.348220348358154:A-0.13962116193664162]],#1[T1s1x1x10x96[-0.6787744760513306,0.7704185843467712:A0.0072120334078590535]]]),input_ids:T7s1x1[471,471:A471.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-19.286500930786133,6.964541435241699:A-8.171564785795635],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x11x96[-5.509540557861328,6.348220348358154:A-0.14506798955622027]],#1[T1s1x1x11x96[-0.6787744760513306,0.7704185843467712:A0.00736443510189047]]]))
    <- ((),dict(cache_position:T7s1[11,11:A11.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x11x96[-5.509540557861328,6.348220348358154:A-0.14506798955622027]],#1[T1s1x1x11x96[-0.6787744760513306,0.7704185843467712:A0.00736443510189047]]]),input_ids:T7s1x1[278,278:A278.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-18.826133728027344,5.930154323577881:A-7.345287751398515],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x12x96[-5.509540557861328,6.348220348358154:A-0.1527417454230494]],#1[T1s1x1x12x96[-0.6787744760513306,0.7704185843467712:A0.007889281518436696]]]))
    <- ((),dict(cache_position:T7s1[12,12:A12.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x12x96[-5.509540557861328,6.348220348358154:A-0.1527417454230494]],#1[T1s1x1x12x96[-0.6787744760513306,0.7704185843467712:A0.007889281518436696]]]),input_ids:T7s1x1[1833,1833:A1833.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-20.171358108520508,9.203018188476562:A-7.78908254127251],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x13x96[-5.509540557861328,6.348220348358154:A-0.14717222428841453]],#1[T1s1x1x13x96[-0.6787744760513306,0.7704185843467712:A0.007065091680522948]]]))
    <- ((),dict(cache_position:T7s1[13,13:A13.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x13x96[-5.509540557861328,6.348220348358154:A-0.14717222428841453]],#1[T1s1x1x13x96[-0.6787744760513306,0.7704185843467712:A0.007065091680522948]]]),input_ids:T7s1x1[310,310:A310.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-15.129871368408203,8.837909698486328:A-6.361443364663515],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x14x96[-5.509540557861328,6.348220348358154:A-0.13477496815409853]],#1[T1s1x1x14x96[-0.6787744760513306,0.7704185843467712:A0.007072468134310839]]]))
    <- ((),dict(cache_position:T7s1[14,14:A14.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x14x96[-5.509540557861328,6.348220348358154:A-0.13477496815409853]],#1[T1s1x1x14x96[-0.6787744760513306,0.7704185843467712:A0.007072468134310839]]]),input_ids:T7s1x1[278,278:A278.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-16.48991584777832,3.820629596710205:A-8.514456785946619],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x15x96[-5.509540557861328,6.348220348358154:A-0.12910320374770284]],#1[T1s1x1x15x96[-0.6787744760513306,0.7704185843467712:A0.0075118097320531286]]]))
    <- ((),dict(cache_position:T7s1[15,15:A15.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x15x96[-5.509540557861328,6.348220348358154:A-0.12910320374770284]],#1[T1s1x1x15x96[-0.6787744760513306,0.7704185843467712:A0.0075118097320531286]]]),input_ids:T7s1x1[937,937:A937.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-17.814903259277344,5.775240898132324:A-9.154742403260897],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x16x96[-5.509540557861328,6.348220348358154:A-0.1324728711708758]],#1[T1s1x1x16x96[-0.6787744760513306,0.7704185843467712:A0.007435579083211981]]]))
    <- ((),dict(cache_position:T7s1[16,16:A16.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x16x96[-5.509540557861328,6.348220348358154:A-0.1324728711708758]],#1[T1s1x1x16x96[-0.6787744760513306,0.7704185843467712:A0.007435579083211981]]]),input_ids:T7s1x1[2211,2211:A2211.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-20.981536865234375,5.375881195068359:A-8.965695807254873],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x17x96[-5.509540557861328,6.348220348358154:A-0.13291970647375873]],#1[T1s1x1x17x96[-0.6787744760513306,0.7704185843467712:A0.006298902270979549]]]))
    <- ((),dict(cache_position:T7s1[17,17:A17.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x17x96[-5.509540557861328,6.348220348358154:A-0.13291970647375873]],#1[T1s1x1x17x96[-0.6787744760513306,0.7704185843467712:A0.006298902270979549]]]),input_ids:T7s1x1[3064,3064:A3064.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-16.166728973388672,9.487751007080078:A-7.495344128720462],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x18x96[-5.509540557861328,6.348220348358154:A-0.12991640532864376]],#1[T1s1x1x18x96[-0.6787744760513306,0.7704185843467712:A0.007811267364314955]]]))
    <- ((),dict(cache_position:T7s1[18,18:A18.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x18x96[-5.509540557861328,6.348220348358154:A-0.12991640532864376]],#1[T1s1x1x18x96[-0.6787744760513306,0.7704185843467712:A0.007811267364314955]]]),input_ids:T7s1x1[297,297:A297.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-17.668142318725586,6.795965194702148:A-8.826972996983677],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x19x96[-5.509540557861328,7.693107604980469:A-0.12875871387433635]],#1[T1s1x1x19x96[-0.6787744760513306,0.7704185843467712:A0.00787170972308447]]]))
    <- ((),dict(cache_position:T7s1[19,19:A19.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x19x96[-5.509540557861328,7.693107604980469:A-0.12875871387433635]],#1[T1s1x1x19x96[-0.6787744760513306,0.7704185843467712:A0.00787170972308447]]]),input_ids:T7s1x1[278,278:A278.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-19.28282928466797,3.615934371948242:A-9.830184341959654],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x20x96[-5.509540557861328,7.693107604980469:A-0.12716069182855183]],#1[T1s1x1x20x96[-0.6787744760513306,0.7704185843467712:A0.008161253841952506]]]))
    <- ((),dict(cache_position:T7s1[20,20:A20.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x20x96[-5.509540557861328,7.693107604980469:A-0.12716069182855183]],#1[T1s1x1x20x96[-0.6787744760513306,0.7704185843467712:A0.008161253841952506]]]),input_ids:T7s1x1[25963,25963:A25963.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-17.643550872802734,6.164255142211914:A-8.786385558068053],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x21x96[-5.509540557861328,7.693107604980469:A-0.11984372260167941]],#1[T1s1x1x21x96[-0.6787744760513306,0.7704185843467712:A0.007688384226805774]]]))
    <- ((),dict(cache_position:T7s1[21,21:A21.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x21x96[-5.509540557861328,7.693107604980469:A-0.11984372260167941]],#1[T1s1x1x21x96[-0.6787744760513306,0.7704185843467712:A0.007688384226805774]]]),input_ids:T7s1x1[29889,29889:A29889.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-14.255645751953125,7.926939010620117:A-7.896293622706086],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x22x96[-5.987019062042236,7.693107604980469:A-0.11909574120203836]],#1[T1s1x1x22x96[-0.6787744760513306,0.7704185843467712:A0.007864767629026766]]]))
    <- ((),dict(cache_position:T7s1[22,22:A22.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x22x96[-5.987019062042236,7.693107604980469:A-0.11909574120203836]],#1[T1s1x1x22x96[-0.6787744760513306,0.7704185843467712:A0.007864767629026766]]]),input_ids:T7s1x1[13,13:A13.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-8.008821487426758,10.541921615600586:A-2.745266179916449],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x23x96[-5.987019062042236,7.693107604980469:A-0.1203865866913132]],#1[T1s1x1x23x96[-0.6787744760513306,0.7704185843467712:A0.008751925312520578]]]))
    <- ((),dict(cache_position:T7s1[23,23:A23.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x23x96[-5.987019062042236,7.693107604980469:A-0.1203865866913132]],#1[T1s1x1x23x96[-0.6787744760513306,0.7704185843467712:A0.008751925312520578]]]),input_ids:T7s1x1[3492,3492:A3492.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-16.191024780273438,9.499390602111816:A-5.864637234960217],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x24x96[-5.987019062042236,7.693107604980469:A-0.12080627055037338]],#1[T1s1x1x24x96[-0.6787744760513306,0.7704185843467712:A0.008935451721343825]]]))
    <- ((),dict(cache_position:T7s1[24,24:A24.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x24x96[-5.987019062042236,7.693107604980469:A-0.12080627055037338]],#1[T1s1x1x24x96[-0.6787744760513306,0.7704185843467712:A0.008935451721343825]]]),input_ids:T7s1x1[674,674:A674.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-16.663740158081055,9.625528335571289:A-6.569129421486053],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x25x96[-5.987019062042236,7.693107604980469:A-0.11726646279891914]],#1[T1s1x1x25x96[-0.6787744760513306,0.7704185843467712:A0.009409271212007297]]]))
    <- ((),dict(cache_position:T7s1[25,25:A25.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x25x96[-5.987019062042236,7.693107604980469:A-0.11726646279891914]],#1[T1s1x1x25x96[-0.6787744760513306,0.7704185843467712:A0.009409271212007297]]]),input_ids:T7s1x1[748,748:A748.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-19.916133880615234,6.930554389953613:A-9.758149972834625],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x26x96[-5.987019062042236,7.693107604980469:A-0.11556891045951581]],#1[T1s1x1x26x96[-0.6787744760513306,0.7704185843467712:A0.009660339510114331]]]))
    <- ((),dict(cache_position:T7s1[26,26:A26.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x26x96[-5.987019062042236,7.693107604980469:A-0.11556891045951581]],#1[T1s1x1x26x96[-0.6787744760513306,0.7704185843467712:A0.009660339510114331]]]),input_ids:T7s1x1[964,964:A964.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-20.35089111328125,6.057260036468506:A-9.874954451017082],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x27x96[-5.987019062042236,7.693107604980469:A-0.11108787408195411]],#1[T1s1x1x27x96[-0.6787744760513306,0.7704185843467712:A0.009390887548811911]]]))
    <- ((),dict(cache_position:T7s1[27,27:A27.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x27x96[-5.987019062042236,7.693107604980469:A-0.11108787408195411]],#1[T1s1x1x27x96[-0.6787744760513306,0.7704185843467712:A0.009390887548811911]]]),input_ids:T7s1x1[697,697:A697.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-17.14153289794922,7.043888568878174:A-8.605550607407],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x28x96[-5.987019062042236,7.693107604980469:A-0.11001113096855468]],#1[T1s1x1x28x96[-0.6787744760513306,0.7704185843467712:A0.009548817436547367]]]))
    <- ((),dict(cache_position:T7s1[28,28:A28.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x28x96[-5.987019062042236,7.693107604980469:A-0.11001113096855468]],#1[T1s1x1x28x96[-0.6787744760513306,0.7704185843467712:A0.009548817436547367]]]),input_ids:T7s1x1[297,297:A297.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-20.8441104888916,6.884699821472168:A-9.159340587275569],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x29x96[-5.987019062042236,7.70276403427124:A-0.10577449580899877]],#1[T1s1x1x29x96[-0.6787744760513306,0.7704185843467712:A0.009528502082905588]]]))
    <- ((),dict(cache_position:T7s1[29,29:A29.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x29x96[-5.987019062042236,7.70276403427124:A-0.10577449580899877]],#1[T1s1x1x29x96[-0.6787744760513306,0.7704185843467712:A0.009528502082905588]]]),input_ids:T7s1x1[278,278:A278.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-19.315391540527344,4.614831924438477:A-9.002723350008484],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x30x96[-5.987019062042236,7.70276403427124:A-0.1008578367267344]],#1[T1s1x1x30x96[-0.6787744760513306,0.7704185843467712:A0.00966630508349024]]]))
    <- ((),dict(cache_position:T7s1[30,30:A30.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x30x96[-5.987019062042236,7.70276403427124:A-0.1008578367267344]],#1[T1s1x1x30x96[-0.6787744760513306,0.7704185843467712:A0.00966630508349024]]]),input_ids:T7s1x1[29871,29871:A29871.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-11.507885932922363,15.988384246826172:A-2.5741930042644965],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x31x96[-5.987019062042236,7.70276403427124:A-0.09899786915278821]],#1[T1s1x1x31x96[-0.6787744760513306,0.7704185843467712:A0.008349076121806232]]]))
    <- ((),dict(cache_position:T7s1[31,31:A31.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x31x96[-5.987019062042236,7.70276403427124:A-0.09899786915278821]],#1[T1s1x1x31x96[-0.6787744760513306,0.7704185843467712:A0.008349076121806232]]]),input_ids:T7s1x1[29896,29896:A29896.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-19.334497451782227,8.830238342285156:A-9.694990545970388],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x32x96[-5.987019062042236,7.70276403427124:A-0.09737615970952145]],#1[T1s1x1x32x96[-0.6787744760513306,0.7704185843467712:A0.008011651119844032]]]))
    <- ((),dict(cache_position:T7s1[32,32:A32.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x32x96[-5.987019062042236,7.70276403427124:A-0.09737615970952145]],#1[T1s1x1x32x96[-0.6787744760513306,0.7704185843467712:A0.008011651119844032]]]),input_ids:T7s1x1[29946,29946:A29946.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-19.741653442382812,7.135903358459473:A-9.79210955552943],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x33x96[-5.987019062042236,7.70276403427124:A-0.09667280920841607]],#1[T1s1x1x33x96[-0.6787744760513306,0.7704185843467712:A0.007499413813465336]]]))
    <- ((),dict(cache_position:T7s1[33,33:A33.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x33x96[-5.987019062042236,7.70276403427124:A-0.09667280920841607]],#1[T1s1x1x33x96[-0.6787744760513306,0.7704185843467712:A0.007499413813465336]]]),input_ids:T7s1x1[386,386:A386.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-22.21338653564453,4.775697231292725:A-10.594457698166371],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x34x96[-5.987019062042236,7.70276403427124:A-0.09190061861002452]],#1[T1s1x1x34x96[-0.6787744760513306,0.7704185843467712:A0.007487988068029225]]]))
    <- ((),dict(cache_position:T7s1[34,34:A34.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x34x96[-5.987019062042236,7.70276403427124:A-0.09190061861002452]],#1[T1s1x1x34x96[-0.6787744760513306,0.7704185843467712:A0.007487988068029225]]]),input_ids:T7s1x1[322,322:A322.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-16.256813049316406,7.791941165924072:A-7.819804543957114],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x35x96[-5.987019062042236,7.70276403427124:A-0.09161416696439292]],#1[T1s1x1x35x96[-0.6787744760513306,0.7704185843467712:A0.00699816262567332]]]))
    <- ((),dict(cache_position:T7s1[35,35:A35.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x35x96[-5.987019062042236,7.70276403427124:A-0.09161416696439292]],#1[T1s1x1x35x96[-0.6787744760513306,0.7704185843467712:A0.00699816262567332]]]),input_ids:T7s1x1[769,769:A769.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-15.366680145263672,6.7819390296936035:A-8.183435506382956],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x36x96[-5.987019062042236,7.70276403427124:A-0.09020163751157034]],#1[T1s1x1x36x96[-0.6787744760513306,0.7704185843467712:A0.0076035632615685245]]]))
    <- ((),dict(cache_position:T7s1[36,36:A36.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x36x96[-5.987019062042236,7.70276403427124:A-0.09020163751157034]],#1[T1s1x1x36x96[-0.6787744760513306,0.7704185843467712:A0.0076035632615685245]]]),input_ids:T7s1x1[366,366:A366.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-16.212535858154297,10.488546371459961:A-6.096679806140484],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x37x96[-6.020578861236572,7.70276403427124:A-0.08767639670970295]],#1[T1s1x1x37x96[-0.6787744760513306,0.7704185843467712:A0.008052934940682922]]]))
    <- ((),dict(cache_position:T7s1[37,37:A37.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x37x96[-6.020578861236572,7.70276403427124:A-0.08767639670970295]],#1[T1s1x1x37x96[-0.6787744760513306,0.7704185843467712:A0.008052934940682922]]]),input_ids:T7s1x1[925,925:A925.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-14.716682434082031,10.297311782836914:A-5.215678396251984],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x38x96[-6.020578861236572,7.70276403427124:A-0.08759201532765266]],#1[T1s1x1x38x96[-0.6787744760513306,0.7704185843467712:A0.007851843246255572]]]))
    <- ((),dict(cache_position:T7s1[38,38:A38.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x38x96[-6.020578861236572,7.70276403427124:A-0.08759201532765266]],#1[T1s1x1x38x96[-0.6787744760513306,0.7704185843467712:A0.007851843246255572]]]),input_ids:T7s1x1[2125,2125:A2125.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-19.35562515258789,6.750692367553711:A-10.36610761905415],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x39x96[-6.020578861236572,7.70276403427124:A-0.08397989235922239]],#1[T1s1x1x39x96[-0.6787744760513306,0.7704185843467712:A0.007908436715961916]]]))
    <- ((),dict(cache_position:T7s1[39,39:A39.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x39x96[-6.020578861236572,7.70276403427124:A-0.08397989235922239]],#1[T1s1x1x39x96[-0.6787744760513306,0.7704185843467712:A0.007908436715961916]]]),input_ids:T7s1x1[263,263:A263.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-18.591672897338867,7.181346893310547:A-7.389501655889908],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x40x96[-6.020578861236572,7.70276403427124:A-0.08059514915206213]],#1[T1s1x1x40x96[-0.6787744760513306,0.7704185843467712:A0.008126784816912884]]]))
    <- ((),dict(cache_position:T7s1[40,40:A40.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x40x96[-6.020578861236572,7.70276403427124:A-0.08059514915206213]],#1[T1s1x1x40x96[-0.6787744760513306,0.7704185843467712:A0.008126784816912884]]]),input_ids:T7s1x1[29871,29871:A29871.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-7.655264377593994,18.418691635131836:A-0.8347461489182897],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x41x96[-6.020578861236572,7.70276403427124:A-0.07553431066684779]],#1[T1s1x1x41x96[-0.6787744760513306,0.7704185843467712:A0.00716838048653174]]]))
    <- ((),dict(cache_position:T7s1[41,41:A41.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x41x96[-6.020578861236572,7.70276403427124:A-0.07553431066684779]],#1[T1s1x1x41x96[-0.6787744760513306,0.7704185843467712:A0.00716838048653174]]]),input_ids:T7s1x1[29945,29945:A29945.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-17.618488311767578,7.5059404373168945:A-9.185259233211168],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x42x96[-6.949457168579102,7.70276403427124:A-0.07523944943811027]],#1[T1s1x1x42x96[-0.6787744760513306,0.7704185843467712:A0.006704898665410448]]]))
    <- ((),dict(cache_position:T7s1[42,42:A42.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x42x96[-6.949457168579102,7.70276403427124:A-0.07523944943811027]],#1[T1s1x1x42x96[-0.6787744760513306,0.7704185843467712:A0.006704898665410448]]]),input_ids:T7s1x1[29899,29899:A29899.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-12.02718448638916,11.478802680969238:A-4.218412199046463],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x43x96[-6.949457168579102,7.70276403427124:A-0.07125541826158148]],#1[T1s1x1x43x96[-0.6787744760513306,0.7704185843467712:A0.006634421506007566]]]))
    <- ((),dict(cache_position:T7s1[43,43:A43.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x43x96[-6.949457168579102,7.70276403427124:A-0.07125541826158148]],#1[T1s1x1x43x96[-0.6787744760513306,0.7704185843467712:A0.006634421506007566]]]),input_ids:T7s1x1[29947,29947:A29947.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-19.648494720458984,4.7706780433654785:A-9.644542609302793],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x44x96[-6.949457168579102,7.70276403427124:A-0.0694073898192514]],#1[T1s1x1x44x96[-0.6787744760513306,0.7704185843467712:A0.0060485980257515785]]]))
    <- ((),dict(cache_position:T7s1[44,44:A44.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x44x96[-6.949457168579102,7.70276403427124:A-0.0694073898192514]],#1[T1s1x1x44x96[-0.6787744760513306,0.7704185843467712:A0.0060485980257515785]]]),input_ids:T7s1x1[3275,3275:A3275.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-16.49040985107422,8.647275924682617:A-8.34354119547177],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x45x96[-6.949457168579102,7.70276403427124:A-0.06737759871636323]],#1[T1s1x1x45x96[-0.6787744760513306,0.7704185843467712:A0.005413111220989069]]]))
    <- ((),dict(cache_position:T7s1[45,45:A45.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x45x96[-6.949457168579102,7.70276403427124:A-0.06737759871636323]],#1[T1s1x1x45x96[-0.6787744760513306,0.7704185843467712:A0.005413111220989069]]]),input_ids:T7s1x1[373,373:A373.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-17.80068016052246,6.506999969482422:A-10.12396313319495],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x46x96[-6.949457168579102,7.70276403427124:A-0.06422996340960958]],#1[T1s1x1x46x96[-0.6787744760513306,0.7704185843467712:A0.004871142359355002]]]))
    <- ((),dict(cache_position:T7s1[46,46:A46.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x46x96[-6.949457168579102,7.70276403427124:A-0.06422996340960958]],#1[T1s1x1x46x96[-0.6787744760513306,0.7704185843467712:A0.004871142359355002]]]),input_ids:T7s1x1[278,278:A278.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-18.61307144165039,5.520223617553711:A-9.258860857699998],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x47x96[-6.949457168579102,7.70276403427124:A-0.06245628588304814]],#1[T1s1x1x47x96[-0.6787744760513306,0.7704185843467712:A0.005058194481505857]]]))
    <- ((),dict(cache_position:T7s1[47,47:A47.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x47x96[-6.949457168579102,7.70276403427124:A-0.06245628588304814]],#1[T1s1x1x47x96[-0.6787744760513306,0.7704185843467712:A0.005058194481505857]]]),input_ids:T7s1x1[1473,1473:A1473.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-20.592666625976562,5.243607044219971:A-10.369299335102317],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x48x96[-6.949457168579102,7.70276403427124:A-0.06039970430060748]],#1[T1s1x1x48x96[-0.6787744760513306,0.7704185843467712:A0.004975992970151487]]]))
    <- ((),dict(cache_position:T7s1[48,48:A48.0],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x48x96[-6.949457168579102,7.70276403427124:A-0.06039970430060748]],#1[T1s1x1x48x96[-0.6787744760513306,0.7704185843467712:A0.004975992970151487]]]),input_ids:T7s1x1[2814,2814:A2814.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-12.931621551513672,11.199272155761719:A-5.162818993296707],past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x49x96[-6.949457168579102,7.70276403427124:A-0.05724061712005225]],#1[T1s1x1x49x96[-0.6787744760513306,0.7704185843467712:A0.004617188286386959]]]))
    -- prompt Continue: it rains...
    -- answer Continue: it rains...
    It was the last of the first three times in the sixth.
    You will go into one in the 14th and then you just take a 5-8 lead on the second leg,




.. GENERATED FROM PYTHON SOURCE LINES 76-77

Let's restore the forward as it was.

.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: Python

    model.forward = keep_model_forward








.. GENERATED FROM PYTHON SOURCE LINES 80-81

Another syntax with :func:`onnx_diagnostic.helpers.torch_test_helper.steel_forward`.

.. GENERATED FROM PYTHON SOURCE LINES 81-85

.. code-block:: Python


    with steel_forward(model):
        model.generate(inputs, max_length=50, temperature=1, top_k=50, top_p=0.95, do_sample=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ---- stolen forward for class LlamaForCausalLM -- iteration 0
      <- args=() --- kwargs=dict(cache_position:T7s8,past_key_values:DynamicCache[serialized](#2[#0[],#0[]]),input_ids:T7s1x8,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x8x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x8x96],#1[T1s1x1x8x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 1
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x8x96],#1[T1s1x1x8x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x9x96],#1[T1s1x1x9x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 2
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x9x96],#1[T1s1x1x9x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x10x96],#1[T1s1x1x10x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 3
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x10x96],#1[T1s1x1x10x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x11x96],#1[T1s1x1x11x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 4
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x11x96],#1[T1s1x1x11x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x12x96],#1[T1s1x1x12x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 5
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x12x96],#1[T1s1x1x12x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x13x96],#1[T1s1x1x13x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 6
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x13x96],#1[T1s1x1x13x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x14x96],#1[T1s1x1x14x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 7
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x14x96],#1[T1s1x1x14x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x15x96],#1[T1s1x1x15x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 8
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x15x96],#1[T1s1x1x15x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x16x96],#1[T1s1x1x16x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 9
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x16x96],#1[T1s1x1x16x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x17x96],#1[T1s1x1x17x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 10
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x17x96],#1[T1s1x1x17x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x18x96],#1[T1s1x1x18x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 11
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x18x96],#1[T1s1x1x18x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x19x96],#1[T1s1x1x19x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 12
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x19x96],#1[T1s1x1x19x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x20x96],#1[T1s1x1x20x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 13
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x20x96],#1[T1s1x1x20x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x21x96],#1[T1s1x1x21x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 14
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x21x96],#1[T1s1x1x21x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x22x96],#1[T1s1x1x22x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 15
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x22x96],#1[T1s1x1x22x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x23x96],#1[T1s1x1x23x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 16
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x23x96],#1[T1s1x1x23x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x24x96],#1[T1s1x1x24x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 17
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x24x96],#1[T1s1x1x24x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x25x96],#1[T1s1x1x25x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 18
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x25x96],#1[T1s1x1x25x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x26x96],#1[T1s1x1x26x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 19
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x26x96],#1[T1s1x1x26x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x27x96],#1[T1s1x1x27x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 20
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x27x96],#1[T1s1x1x27x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x28x96],#1[T1s1x1x28x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 21
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x28x96],#1[T1s1x1x28x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x29x96],#1[T1s1x1x29x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 22
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x29x96],#1[T1s1x1x29x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x30x96],#1[T1s1x1x30x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 23
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x30x96],#1[T1s1x1x30x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x31x96],#1[T1s1x1x31x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 24
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x31x96],#1[T1s1x1x31x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x32x96],#1[T1s1x1x32x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 25
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x32x96],#1[T1s1x1x32x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x33x96],#1[T1s1x1x33x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 26
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x33x96],#1[T1s1x1x33x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x34x96],#1[T1s1x1x34x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 27
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x34x96],#1[T1s1x1x34x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x35x96],#1[T1s1x1x35x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 28
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x35x96],#1[T1s1x1x35x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x36x96],#1[T1s1x1x36x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 29
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x36x96],#1[T1s1x1x36x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x37x96],#1[T1s1x1x37x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 30
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x37x96],#1[T1s1x1x37x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x38x96],#1[T1s1x1x38x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 31
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x38x96],#1[T1s1x1x38x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x39x96],#1[T1s1x1x39x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 32
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x39x96],#1[T1s1x1x39x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x40x96],#1[T1s1x1x40x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 33
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x40x96],#1[T1s1x1x40x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x41x96],#1[T1s1x1x41x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 34
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x41x96],#1[T1s1x1x41x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x42x96],#1[T1s1x1x42x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 35
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x42x96],#1[T1s1x1x42x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x43x96],#1[T1s1x1x43x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 36
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x43x96],#1[T1s1x1x43x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x44x96],#1[T1s1x1x44x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 37
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x44x96],#1[T1s1x1x44x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x45x96],#1[T1s1x1x45x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 38
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x45x96],#1[T1s1x1x45x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x46x96],#1[T1s1x1x46x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 39
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x46x96],#1[T1s1x1x46x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x47x96],#1[T1s1x1x47x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 40
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x47x96],#1[T1s1x1x47x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x48x96],#1[T1s1x1x48x96]]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 41
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x48x96],#1[T1s1x1x48x96]]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s1x1x49x96],#1[T1s1x1x49x96]]))
    .




.. GENERATED FROM PYTHON SOURCE LINES 86-99

Untrained model
+++++++++++++++

This part can skipped if you are only interested in exporting
the original model. It is useful to create a unit test to ensure
a specific architecture can be exported despite the many changes
brought to :epkg:`torch` or :epkg:`transformers`.

Let's create an untrained model using the config file provided
`config.json <https://huggingface.co/arnir0/Tiny-LLM/blob/main/config.json>`_
to create an untrained model:
:func:`onnx_diagnostic.torch_models.llms.get_tiny_llm`.
Then let's use it.

.. GENERATED FROM PYTHON SOURCE LINES 99-107

.. code-block:: Python


    experiment = get_tiny_llm()
    untrained_model, inputs, dynamic_shapes = (
        experiment["model"],
        experiment["inputs"],
        experiment["dynamic_shapes"],
    )








.. GENERATED FROM PYTHON SOURCE LINES 108-111

Before we run it, we make a copy of the inputs as the cache
get modified by the execution. Then it is no longer valid
associated with the previous input_ids and mask.

.. GENERATED FROM PYTHON SOURCE LINES 111-114

.. code-block:: Python

    cloned_inputs = copy.deepcopy(inputs)









.. GENERATED FROM PYTHON SOURCE LINES 115-121

.. code-block:: Python

    print("input type before", string_type(inputs, with_shape=True))

    expected_output = untrained_model(**inputs)

    print("input type after-", string_type(inputs, with_shape=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    input type before dict(input_ids:T7s2x3,attention_mask:T7s2x33,position_ids:T7s2x3,past_key_values:DynamicCache[serialized](#2[#1[T1s2x1x30x96],#1[T1s2x1x30x96]]))
    input type after- dict(input_ids:T7s2x3,attention_mask:T7s2x33,position_ids:T7s2x3,past_key_values:DynamicCache[serialized](#2[#1[T1s2x1x33x96],#1[T1s2x1x33x96]]))




.. GENERATED FROM PYTHON SOURCE LINES 122-123

The outputs

.. GENERATED FROM PYTHON SOURCE LINES 123-126

.. code-block:: Python


    print("result type", string_type(expected_output, with_shape=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    result type dict(logits:T1s2x3x32000,past_key_values:DynamicCache[serialized](#2[#1[T1s2x1x33x96],#1[T1s2x1x33x96]]))




.. GENERATED FROM PYTHON SOURCE LINES 127-131

It works.

ExportedProgram
+++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 131-145

.. code-block:: Python


    try:
        ep = torch.export.export(
            untrained_model, (), kwargs=cloned_inputs, dynamic_shapes=dynamic_shapes, strict=False
        )
        print("It worked:")
        print(ep)
    except Exception as e:
        # To work, it needs at least PRs:
        # * https://github.com/huggingface/transformers/pull/36311
        # * https://github.com/huggingface/transformers/pull/36652
        print("It failed:", e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    It worked:
    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, p_model_embed_tokens_weight: "f32[32000, 192]", p_model_layers_0_self_attn_q_proj_weight: "f32[192, 192]", p_model_layers_0_self_attn_k_proj_weight: "f32[96, 192]", p_model_layers_0_self_attn_v_proj_weight: "f32[96, 192]", p_model_layers_0_self_attn_o_proj_weight: "f32[192, 192]", p_model_layers_0_mlp_gate_proj_weight: "f32[1024, 192]", p_model_layers_0_mlp_up_proj_weight: "f32[1024, 192]", p_model_layers_0_mlp_down_proj_weight: "f32[192, 1024]", p_model_layers_0_input_layernorm_weight: "f32[192]", p_model_layers_0_post_attention_layernorm_weight: "f32[192]", p_model_norm_weight: "f32[192]", p_lm_head_weight: "f32[32000, 192]", b_model_rotary_emb_inv_freq: "f32[48]", input_ids: "i64[s41, s2]", attention_mask: "i64[s41, s2 + s67]", position_ids: "i64[s41, s2]", past_key_values_key_cache_0: "f32[s41, 1, s67, 96]", past_key_values_value_cache_0: "f32[s41, 1, s67, 96]"):
                 # 
                sym_size_int_22: "Sym(s41)" = torch.ops.aten.sym_size.int(input_ids, 0)
                sym_size_int_23: "Sym(s2)" = torch.ops.aten.sym_size.int(input_ids, 1)
                sym_size_int_24: "Sym(s67)" = torch.ops.aten.sym_size.int(past_key_values_key_cache_0, 2)
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/sparse.py:190 in forward, code: return F.embedding(
                embedding: "f32[s41, s2, 192]" = torch.ops.aten.embedding.default(p_model_embed_tokens_weight, input_ids);  p_model_embed_tokens_weight = input_ids = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:564 in forward, code: past_seen_tokens, past_seen_tokens + inputs_embeds.shape[1], device=inputs_embeds.device
                add: "Sym(s2 + s67)" = sym_size_int_24 + sym_size_int_23
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:563 in forward, code: cache_position = torch.arange(
                arange: "i64[s2]" = torch.ops.aten.arange.start(sym_size_int_24, add, device = device(type='cpu'), pin_memory = False);  sym_size_int_24 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:570 in forward, code: causal_mask = self._update_causal_mask(
                full: "f32[s2, s2 + s67]" = torch.ops.aten.full.default([sym_size_int_23, add], -3.4028234663852886e+38, dtype = torch.float32, device = device(type='cpu'), pin_memory = False)
                triu: "f32[s2, s2 + s67]" = torch.ops.aten.triu.default(full, 1);  full = None
                arange_1: "i64[s2 + s67]" = torch.ops.aten.arange.default(add, device = device(type='cpu'), pin_memory = False)
                reshape: "i64[s2, 1]" = torch.ops.aten.reshape.default(arange, [-1, 1]);  arange = None
                gt: "b8[s2, s2 + s67]" = torch.ops.aten.gt.Tensor(arange_1, reshape);  arange_1 = reshape = None
                mul_: "f32[s2, s2 + s67]" = torch.ops.aten.mul_.Tensor(triu, gt);  triu = gt = None
                unsqueeze: "f32[1, s2, s2 + s67]" = torch.ops.aten.unsqueeze.default(mul_, 0);  mul_ = None
                unsqueeze_1: "f32[1, 1, s2, s2 + s67]" = torch.ops.aten.unsqueeze.default(unsqueeze, 1);  unsqueeze = None
                slice_1: "f32[1, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(unsqueeze_1, 2, 0, 9223372036854775807);  unsqueeze_1 = None
                slice_2: "f32[1, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_1, 3, 0, 9223372036854775807);  slice_1 = None
                expand: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.expand.default(slice_2, [sym_size_int_22, 1, -1, -1]);  slice_2 = None
                clone: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.clone.default(expand);  expand = None
                slice_3: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(clone)
                slice_4: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_3, 1);  slice_3 = None
                slice_5: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_4, 2);  slice_4 = None
                slice_6: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_5, 3, None, add);  slice_5 = None
                slice_7: "i64[s41, s2 + s67]" = torch.ops.aten.slice.Tensor(attention_mask, 0, 0, 9223372036854775807);  attention_mask = None
                unsqueeze_2: "i64[s41, 1, s2 + s67]" = torch.ops.aten.unsqueeze.default(slice_7, 1);  slice_7 = None
                unsqueeze_3: "i64[s41, 1, 1, s2 + s67]" = torch.ops.aten.unsqueeze.default(unsqueeze_2, 2);  unsqueeze_2 = None
                slice_8: "i64[s41, 1, 1, s2 + s67]" = torch.ops.aten.slice.Tensor(unsqueeze_3, 3, 0, 9223372036854775807);  unsqueeze_3 = None
                _assert_tensor_metadata_default = torch.ops.aten._assert_tensor_metadata.default(slice_8, dtype = torch.int64, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default = None
                to: "i64[s41, 1, 1, s2 + s67]" = torch.ops.aten.to.dtype_layout(slice_8, dtype = torch.int64, layout = torch.strided, device = device(type='cpu'));  slice_8 = None
                add_2: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.add.Tensor(slice_6, to);  slice_6 = to = None
                eq_4: "b8[s41, 1, s2, s2 + s67]" = torch.ops.aten.eq.Scalar(add_2, 0);  add_2 = None
                slice_9: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(clone)
                slice_10: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_9, 1);  slice_9 = None
                slice_11: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_10, 2);  slice_10 = None
                slice_12: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_11, 3, None, add);  slice_11 = None
                masked_fill: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.masked_fill.Scalar(slice_12, eq_4, -3.4028234663852886e+38);  slice_12 = eq_4 = None
                slice_13: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(clone, 0, 0, 9223372036854775807)
                slice_14: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_13, 1, 0, 9223372036854775807);  slice_13 = None
                slice_15: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_14, 2, 0, 9223372036854775807);  slice_14 = None
                copy_: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.copy_.default(slice_15, masked_fill);  slice_15 = masked_fill = copy_ = None
            
                # No stacktrace found for following nodes
                submod_3 = self.submod_1
                wrap_with_set_grad_enabled = torch.ops.higher_order.wrap_with_set_grad_enabled(False, submod_3, b_model_rotary_emb_inv_freq, sym_size_int_22, position_ids);  submod_3 = b_model_rotary_emb_inv_freq = position_ids = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:152 in forward, code: return cos.to(dtype=x.dtype), sin.to(dtype=x.dtype)
                to_5: "f32[s41, s2, 96]" = wrap_with_set_grad_enabled[0]
                to_6: "f32[s41, s2, 96]" = wrap_with_set_grad_enabled[1];  wrap_with_set_grad_enabled = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:80 in forward, code: hidden_states = hidden_states.to(torch.float32)
                _assert_tensor_metadata_default_7 = torch.ops.aten._assert_tensor_metadata.default(embedding, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_7 = None
                to_7: "f32[s41, s2, 192]" = torch.ops.aten.to.dtype(embedding, torch.float32);  embedding = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:81 in forward, code: variance = hidden_states.pow(2).mean(-1, keepdim=True)
                pow_1: "f32[s41, s2, 192]" = torch.ops.aten.pow.Tensor_Scalar(to_7, 2)
                mean: "f32[s41, s2, 1]" = torch.ops.aten.mean.dim(pow_1, [-1], True);  pow_1 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:82 in forward, code: hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)
                add_3: "f32[s41, s2, 1]" = torch.ops.aten.add.Tensor(mean, 1e-05);  mean = None
                rsqrt: "f32[s41, s2, 1]" = torch.ops.aten.rsqrt.default(add_3);  add_3 = None
                mul_2: "f32[s41, s2, 192]" = torch.ops.aten.mul.Tensor(to_7, rsqrt);  rsqrt = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:83 in forward, code: return self.weight * hidden_states.to(input_dtype)
                _assert_tensor_metadata_default_8 = torch.ops.aten._assert_tensor_metadata.default(mul_2, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_8 = None
                to_8: "f32[s41, s2, 192]" = torch.ops.aten.to.dtype(mul_2, torch.float32);  mul_2 = None
                mul_3: "f32[s41, s2, 192]" = torch.ops.aten.mul.Tensor(p_model_layers_0_input_layernorm_weight, to_8);  p_model_layers_0_input_layernorm_weight = to_8 = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear: "f32[s41, s2, 192]" = torch.ops.aten.linear.default(mul_3, p_model_layers_0_self_attn_q_proj_weight);  p_model_layers_0_self_attn_q_proj_weight = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:281 in forward, code: query_states = self.q_proj(hidden_states).view(hidden_shape).transpose(1, 2)
                view: "f32[s41, s2, 2, 96]" = torch.ops.aten.view.default(linear, [sym_size_int_22, sym_size_int_23, -1, 96]);  linear = None
                transpose_1: "f32[s41, 2, s2, 96]" = torch.ops.aten.transpose.int(view, 1, 2);  view = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear_1: "f32[s41, s2, 96]" = torch.ops.aten.linear.default(mul_3, p_model_layers_0_self_attn_k_proj_weight);  p_model_layers_0_self_attn_k_proj_weight = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:282 in forward, code: key_states = self.k_proj(hidden_states).view(hidden_shape).transpose(1, 2)
                view_1: "f32[s41, s2, 1, 96]" = torch.ops.aten.view.default(linear_1, [sym_size_int_22, sym_size_int_23, -1, 96]);  linear_1 = None
                transpose_2: "f32[s41, 1, s2, 96]" = torch.ops.aten.transpose.int(view_1, 1, 2);  view_1 = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear_2: "f32[s41, s2, 96]" = torch.ops.aten.linear.default(mul_3, p_model_layers_0_self_attn_v_proj_weight);  mul_3 = p_model_layers_0_self_attn_v_proj_weight = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:283 in forward, code: value_states = self.v_proj(hidden_states).view(hidden_shape).transpose(1, 2)
                view_2: "f32[s41, s2, 1, 96]" = torch.ops.aten.view.default(linear_2, [sym_size_int_22, sym_size_int_23, -1, 96]);  linear_2 = None
                transpose_3: "f32[s41, 1, s2, 96]" = torch.ops.aten.transpose.int(view_2, 1, 2);  view_2 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:286 in forward, code: query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin)
                unsqueeze_7: "f32[s41, 1, s2, 96]" = torch.ops.aten.unsqueeze.default(to_5, 1);  to_5 = None
                unsqueeze_8: "f32[s41, 1, s2, 96]" = torch.ops.aten.unsqueeze.default(to_6, 1);  to_6 = None
                mul_4: "f32[s41, 2, s2, 96]" = torch.ops.aten.mul.Tensor(transpose_1, unsqueeze_7)
                slice_19: "f32[s41, 2, s2, 48]" = torch.ops.aten.slice.Tensor(transpose_1, 3, 0, 48)
                slice_20: "f32[s41, 2, s2, 48]" = torch.ops.aten.slice.Tensor(transpose_1, 3, 48, 9223372036854775807);  transpose_1 = None
                neg: "f32[s41, 2, s2, 48]" = torch.ops.aten.neg.default(slice_20);  slice_20 = None
                cat_1: "f32[s41, 2, s2, 96]" = torch.ops.aten.cat.default([neg, slice_19], -1);  neg = slice_19 = None
                mul_5: "f32[s41, 2, s2, 96]" = torch.ops.aten.mul.Tensor(cat_1, unsqueeze_8);  cat_1 = None
                add_4: "f32[s41, 2, s2, 96]" = torch.ops.aten.add.Tensor(mul_4, mul_5);  mul_4 = mul_5 = None
                mul_6: "f32[s41, 1, s2, 96]" = torch.ops.aten.mul.Tensor(transpose_2, unsqueeze_7);  unsqueeze_7 = None
                slice_21: "f32[s41, 1, s2, 48]" = torch.ops.aten.slice.Tensor(transpose_2, 3, 0, 48)
                slice_22: "f32[s41, 1, s2, 48]" = torch.ops.aten.slice.Tensor(transpose_2, 3, 48, 9223372036854775807);  transpose_2 = None
                neg_1: "f32[s41, 1, s2, 48]" = torch.ops.aten.neg.default(slice_22);  slice_22 = None
                cat_2: "f32[s41, 1, s2, 96]" = torch.ops.aten.cat.default([neg_1, slice_21], -1);  neg_1 = slice_21 = None
                mul_7: "f32[s41, 1, s2, 96]" = torch.ops.aten.mul.Tensor(cat_2, unsqueeze_8);  cat_2 = unsqueeze_8 = None
                add_5: "f32[s41, 1, s2, 96]" = torch.ops.aten.add.Tensor(mul_6, mul_7);  mul_6 = mul_7 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:291 in forward, code: key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx, cache_kwargs)
                cat_3: "f32[s41, 1, s2 + s67, 96]" = torch.ops.aten.cat.default([past_key_values_key_cache_0, add_5], -2);  past_key_values_key_cache_0 = add_5 = None
                cat_4: "f32[s41, 1, s2 + s67, 96]" = torch.ops.aten.cat.default([past_key_values_value_cache_0, transpose_3], -2);  past_key_values_value_cache_0 = transpose_3 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:303 in forward, code: attn_output, attn_weights = attention_interface(
                slice_23: "f32[s41, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(cat_3, 0, 0, 9223372036854775807)
                slice_24: "f32[s41, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(slice_23, 1, 0, 9223372036854775807);  slice_23 = None
                unsqueeze_9: "f32[s41, 1, 1, s2 + s67, 96]" = torch.ops.aten.unsqueeze.default(slice_24, 2);  slice_24 = None
                slice_25: "f32[s41, 1, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(unsqueeze_9, 3, 0, 9223372036854775807);  unsqueeze_9 = None
                slice_26: "f32[s41, 1, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(slice_25, 4, 0, 9223372036854775807);  slice_25 = None
                expand_2: "f32[s41, 1, 2, s2 + s67, 96]" = torch.ops.aten.expand.default(slice_26, [sym_size_int_22, 1, 2, add, 96]);  slice_26 = None
                reshape_1: "f32[s41, 2, s2 + s67, 96]" = torch.ops.aten.reshape.default(expand_2, [sym_size_int_22, 2, add, 96]);  expand_2 = None
                slice_27: "f32[s41, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(cat_4, 0, 0, 9223372036854775807)
                slice_28: "f32[s41, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(slice_27, 1, 0, 9223372036854775807);  slice_27 = None
                unsqueeze_10: "f32[s41, 1, 1, s2 + s67, 96]" = torch.ops.aten.unsqueeze.default(slice_28, 2);  slice_28 = None
                slice_29: "f32[s41, 1, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(unsqueeze_10, 3, 0, 9223372036854775807);  unsqueeze_10 = None
                slice_30: "f32[s41, 1, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(slice_29, 4, 0, 9223372036854775807);  slice_29 = None
                expand_3: "f32[s41, 1, 2, s2 + s67, 96]" = torch.ops.aten.expand.default(slice_30, [sym_size_int_22, 1, 2, add, 96]);  slice_30 = None
                reshape_2: "f32[s41, 2, s2 + s67, 96]" = torch.ops.aten.reshape.default(expand_3, [sym_size_int_22, 2, add, 96]);  expand_3 = None
                slice_31: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(clone);  clone = None
                slice_32: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_31, 1);  slice_31 = None
                slice_33: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_32, 2);  slice_32 = None
                slice_34: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_33, 3, None, add);  slice_33 = add = None
                contiguous: "f32[s41, 2, s2, 96]" = torch.ops.aten.contiguous.default(add_4);  add_4 = None
                contiguous_1: "f32[s41, 2, s2 + s67, 96]" = torch.ops.aten.contiguous.default(reshape_1);  reshape_1 = None
                contiguous_2: "f32[s41, 2, s2 + s67, 96]" = torch.ops.aten.contiguous.default(reshape_2);  reshape_2 = None
                scaled_dot_product_attention: "f32[s41, 2, s2, 96]" = torch.ops.aten.scaled_dot_product_attention.default(contiguous, contiguous_1, contiguous_2, slice_34, scale = 0.10206207261596575);  contiguous = contiguous_1 = contiguous_2 = slice_34 = None
                transpose_4: "f32[s41, s2, 2, 96]" = torch.ops.aten.transpose.int(scaled_dot_product_attention, 1, 2);  scaled_dot_product_attention = None
                contiguous_3: "f32[s41, s2, 2, 96]" = torch.ops.aten.contiguous.default(transpose_4);  transpose_4 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:314 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
                reshape_3: "f32[s41, s2, 192]" = torch.ops.aten.reshape.default(contiguous_3, [sym_size_int_22, sym_size_int_23, -1]);  contiguous_3 = sym_size_int_22 = sym_size_int_23 = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear_3: "f32[s41, s2, 192]" = torch.ops.aten.linear.default(reshape_3, p_model_layers_0_self_attn_o_proj_weight);  reshape_3 = p_model_layers_0_self_attn_o_proj_weight = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:358 in forward, code: hidden_states = residual + hidden_states
                add_7: "f32[s41, s2, 192]" = torch.ops.aten.add.Tensor(to_7, linear_3);  to_7 = linear_3 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:80 in forward, code: hidden_states = hidden_states.to(torch.float32)
                _assert_tensor_metadata_default_9 = torch.ops.aten._assert_tensor_metadata.default(add_7, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_9 = None
                to_9: "f32[s41, s2, 192]" = torch.ops.aten.to.dtype(add_7, torch.float32);  add_7 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:81 in forward, code: variance = hidden_states.pow(2).mean(-1, keepdim=True)
                pow_2: "f32[s41, s2, 192]" = torch.ops.aten.pow.Tensor_Scalar(to_9, 2)
                mean_1: "f32[s41, s2, 1]" = torch.ops.aten.mean.dim(pow_2, [-1], True);  pow_2 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:82 in forward, code: hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)
                add_8: "f32[s41, s2, 1]" = torch.ops.aten.add.Tensor(mean_1, 1e-05);  mean_1 = None
                rsqrt_1: "f32[s41, s2, 1]" = torch.ops.aten.rsqrt.default(add_8);  add_8 = None
                mul_8: "f32[s41, s2, 192]" = torch.ops.aten.mul.Tensor(to_9, rsqrt_1);  rsqrt_1 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:83 in forward, code: return self.weight * hidden_states.to(input_dtype)
                _assert_tensor_metadata_default_10 = torch.ops.aten._assert_tensor_metadata.default(mul_8, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_10 = None
                to_10: "f32[s41, s2, 192]" = torch.ops.aten.to.dtype(mul_8, torch.float32);  mul_8 = None
                mul_9: "f32[s41, s2, 192]" = torch.ops.aten.mul.Tensor(p_model_layers_0_post_attention_layernorm_weight, to_10);  p_model_layers_0_post_attention_layernorm_weight = to_10 = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear_4: "f32[s41, s2, 1024]" = torch.ops.aten.linear.default(mul_9, p_model_layers_0_mlp_gate_proj_weight);  p_model_layers_0_mlp_gate_proj_weight = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/activation.py:432 in forward, code: return F.silu(input, inplace=self.inplace)
                silu: "f32[s41, s2, 1024]" = torch.ops.aten.silu.default(linear_4);  linear_4 = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear_5: "f32[s41, s2, 1024]" = torch.ops.aten.linear.default(mul_9, p_model_layers_0_mlp_up_proj_weight);  mul_9 = p_model_layers_0_mlp_up_proj_weight = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:201 in forward, code: down_proj = self.down_proj(self.act_fn(self.gate_proj(x)) * self.up_proj(x))
                mul_10: "f32[s41, s2, 1024]" = torch.ops.aten.mul.Tensor(silu, linear_5);  silu = linear_5 = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear_6: "f32[s41, s2, 192]" = torch.ops.aten.linear.default(mul_10, p_model_layers_0_mlp_down_proj_weight);  mul_10 = p_model_layers_0_mlp_down_proj_weight = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:364 in forward, code: hidden_states = residual + hidden_states
                add_9: "f32[s41, s2, 192]" = torch.ops.aten.add.Tensor(to_9, linear_6);  to_9 = linear_6 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:80 in forward, code: hidden_states = hidden_states.to(torch.float32)
                _assert_tensor_metadata_default_11 = torch.ops.aten._assert_tensor_metadata.default(add_9, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_11 = None
                to_11: "f32[s41, s2, 192]" = torch.ops.aten.to.dtype(add_9, torch.float32);  add_9 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:81 in forward, code: variance = hidden_states.pow(2).mean(-1, keepdim=True)
                pow_3: "f32[s41, s2, 192]" = torch.ops.aten.pow.Tensor_Scalar(to_11, 2)
                mean_2: "f32[s41, s2, 1]" = torch.ops.aten.mean.dim(pow_3, [-1], True);  pow_3 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:82 in forward, code: hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)
                add_10: "f32[s41, s2, 1]" = torch.ops.aten.add.Tensor(mean_2, 1e-05);  mean_2 = None
                rsqrt_2: "f32[s41, s2, 1]" = torch.ops.aten.rsqrt.default(add_10);  add_10 = None
                mul_11: "f32[s41, s2, 192]" = torch.ops.aten.mul.Tensor(to_11, rsqrt_2);  to_11 = rsqrt_2 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:83 in forward, code: return self.weight * hidden_states.to(input_dtype)
                _assert_tensor_metadata_default_12 = torch.ops.aten._assert_tensor_metadata.default(mul_11, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_12 = None
                to_12: "f32[s41, s2, 192]" = torch.ops.aten.to.dtype(mul_11, torch.float32);  mul_11 = None
                mul_12: "f32[s41, s2, 192]" = torch.ops.aten.mul.Tensor(p_model_norm_weight, to_12);  p_model_norm_weight = to_12 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:866 in forward, code: logits = self.lm_head(hidden_states[:, slice_indices, :])
                slice_35: "f32[s41, s2, 192]" = torch.ops.aten.slice.Tensor(mul_12);  mul_12 = None
                slice_36: "f32[s41, s2, 192]" = torch.ops.aten.slice.Tensor(slice_35, 1, 0);  slice_35 = None
                slice_37: "f32[s41, s2, 192]" = torch.ops.aten.slice.Tensor(slice_36, 2);  slice_36 = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear_7: "f32[s41, s2, 32000]" = torch.ops.aten.linear.default(slice_37, p_lm_head_weight);  slice_37 = p_lm_head_weight = None
                return (linear_7, cat_3, cat_4)
            
            class submod_1(torch.nn.Module):
                def forward(self, b_model_rotary_emb_inv_freq: "f32[48]", sym_size_int_22: "Sym(s41)", position_ids: "i64[s41, s2]"):
                     # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:135 in forward, code: inv_freq_expanded = self.inv_freq[None, :, None].float().expand(position_ids.shape[0], -1, 1)
                    unsqueeze_4: "f32[1, 48]" = torch.ops.aten.unsqueeze.default(b_model_rotary_emb_inv_freq, 0);  b_model_rotary_emb_inv_freq = None
                    slice_16: "f32[1, 48]" = torch.ops.aten.slice.Tensor(unsqueeze_4, 1, 0, 9223372036854775807);  unsqueeze_4 = None
                    unsqueeze_5: "f32[1, 48, 1]" = torch.ops.aten.unsqueeze.default(slice_16, 2);  slice_16 = None
                    _assert_tensor_metadata_default_1 = torch.ops.aten._assert_tensor_metadata.default(unsqueeze_5, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_1 = None
                    to_1: "f32[1, 48, 1]" = torch.ops.aten.to.dtype(unsqueeze_5, torch.float32);  unsqueeze_5 = None
                    expand_1: "f32[s41, 48, 1]" = torch.ops.aten.expand.default(to_1, [sym_size_int_22, -1, 1]);  to_1 = sym_size_int_22 = None
                
                     # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:136 in forward, code: position_ids_expanded = position_ids[:, None, :].float()
                    slice_17: "i64[s41, s2]" = torch.ops.aten.slice.Tensor(position_ids, 0, 0, 9223372036854775807);  position_ids = None
                    unsqueeze_6: "i64[s41, 1, s2]" = torch.ops.aten.unsqueeze.default(slice_17, 1);  slice_17 = None
                    slice_18: "i64[s41, 1, s2]" = torch.ops.aten.slice.Tensor(unsqueeze_6, 2, 0, 9223372036854775807);  unsqueeze_6 = None
                    _assert_tensor_metadata_default_2 = torch.ops.aten._assert_tensor_metadata.default(slice_18, dtype = torch.int64, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_2 = None
                    to_2: "f32[s41, 1, s2]" = torch.ops.aten.to.dtype(slice_18, torch.float32);  slice_18 = None
                
                    # No stacktrace found for following nodes
                    submod_3 = self.submod_1
                    wrap_with_autocast = torch.ops.higher_order.wrap_with_autocast('cpu', torch.bfloat16, False, False, submod_3, expand_1, to_2);  submod_3 = expand_1 = to_2 = None
                
                     # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:145 in forward, code: cos = emb.cos()
                    cos: "f32[s41, s2, 96]" = wrap_with_autocast[0]
                
                     # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:146 in forward, code: sin = emb.sin()
                    sin: "f32[s41, s2, 96]" = wrap_with_autocast[1];  wrap_with_autocast = None
                
                     # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:149 in forward, code: cos = cos * self.attention_scaling
                    mul: "f32[s41, s2, 96]" = torch.ops.aten.mul.Tensor(cos, 1.0);  cos = None
                
                     # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:150 in forward, code: sin = sin * self.attention_scaling
                    mul_1: "f32[s41, s2, 96]" = torch.ops.aten.mul.Tensor(sin, 1.0);  sin = None
                
                     # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:152 in forward, code: return cos.to(dtype=x.dtype), sin.to(dtype=x.dtype)
                    _assert_tensor_metadata_default_5 = torch.ops.aten._assert_tensor_metadata.default(mul, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_5 = None
                    to_5: "f32[s41, s2, 96]" = torch.ops.aten.to.dtype(mul, torch.float32);  mul = None
                    _assert_tensor_metadata_default_6 = torch.ops.aten._assert_tensor_metadata.default(mul_1, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_6 = None
                    to_6: "f32[s41, s2, 96]" = torch.ops.aten.to.dtype(mul_1, torch.float32);  mul_1 = None
                    return (to_5, to_6)
                
                class submod_1(torch.nn.Module):
                    def forward(self, expand_1: "f32[s41, 48, 1]", to_2: "f32[s41, 1, s2]"):
                         # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:142 in forward, code: inv_freq_expanded.to(device=x.device, dtype=torch.float) @ position_ids_expanded.float()
                        _assert_tensor_metadata_default_3 = torch.ops.aten._assert_tensor_metadata.default(expand_1, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_3 = None
                        to_3: "f32[s41, 48, 1]" = torch.ops.aten.to.device(expand_1, device(type='cpu'), torch.float32);  expand_1 = None
                        _assert_tensor_metadata_default_4 = torch.ops.aten._assert_tensor_metadata.default(to_2, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_4 = None
                        to_4: "f32[s41, 1, s2]" = torch.ops.aten.to.dtype(to_2, torch.float32);  to_2 = None
                        matmul: "f32[s41, 48, s2]" = torch.ops.aten.matmul.default(to_3, to_4);  to_3 = to_4 = None
                    
                         # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:143 in forward, code: ).transpose(1, 2)
                        transpose: "f32[s41, s2, 48]" = torch.ops.aten.transpose.int(matmul, 1, 2);  matmul = None
                    
                         # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:144 in forward, code: emb = torch.cat((freqs, freqs), dim=-1)
                        cat: "f32[s41, s2, 96]" = torch.ops.aten.cat.default([transpose, transpose], -1);  transpose = None
                    
                         # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:145 in forward, code: cos = emb.cos()
                        cos: "f32[s41, s2, 96]" = torch.ops.aten.cos.default(cat)
                    
                         # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:146 in forward, code: sin = emb.sin()
                        sin: "f32[s41, s2, 96]" = torch.ops.aten.sin.default(cat);  cat = None
                        return (cos, sin)
                    
    Graph signature: 
        # inputs
        p_model_embed_tokens_weight: PARAMETER target='model.embed_tokens.weight'
        p_model_layers_0_self_attn_q_proj_weight: PARAMETER target='model.layers.0.self_attn.q_proj.weight'
        p_model_layers_0_self_attn_k_proj_weight: PARAMETER target='model.layers.0.self_attn.k_proj.weight'
        p_model_layers_0_self_attn_v_proj_weight: PARAMETER target='model.layers.0.self_attn.v_proj.weight'
        p_model_layers_0_self_attn_o_proj_weight: PARAMETER target='model.layers.0.self_attn.o_proj.weight'
        p_model_layers_0_mlp_gate_proj_weight: PARAMETER target='model.layers.0.mlp.gate_proj.weight'
        p_model_layers_0_mlp_up_proj_weight: PARAMETER target='model.layers.0.mlp.up_proj.weight'
        p_model_layers_0_mlp_down_proj_weight: PARAMETER target='model.layers.0.mlp.down_proj.weight'
        p_model_layers_0_input_layernorm_weight: PARAMETER target='model.layers.0.input_layernorm.weight'
        p_model_layers_0_post_attention_layernorm_weight: PARAMETER target='model.layers.0.post_attention_layernorm.weight'
        p_model_norm_weight: PARAMETER target='model.norm.weight'
        p_lm_head_weight: PARAMETER target='lm_head.weight'
        b_model_rotary_emb_inv_freq: BUFFER target='model.rotary_emb.inv_freq' persistent=False
        input_ids: USER_INPUT
        attention_mask: USER_INPUT
        position_ids: USER_INPUT
        past_key_values_key_cache_0: USER_INPUT
        past_key_values_value_cache_0: USER_INPUT
    
        # outputs
        linear_7: USER_OUTPUT
        cat_3: USER_OUTPUT
        cat_4: USER_OUTPUT
    
    Range constraints: {s41: VR[1, 1024], s2: VR[2, 4096], s2 + s67: VR[4, 8192], s67: VR[1, 4096]}





.. GENERATED FROM PYTHON SOURCE LINES 146-152

Back to the original model
++++++++++++++++++++++++++

Let's use the same dummy inputs but we use the downloaded model.
Dummy inputs and dynamic shapes are created by function
:func:`onnx_diagnostic.torch_models.llms.get_tiny_llm`.

.. GENERATED FROM PYTHON SOURCE LINES 152-156

.. code-block:: Python


    data = get_tiny_llm()
    inputs, dynamic_shapes = data["inputs"], data["dynamic_shapes"]








.. GENERATED FROM PYTHON SOURCE LINES 157-158

Let's print the inputs.

.. GENERATED FROM PYTHON SOURCE LINES 158-161

.. code-block:: Python


    print(string_type(inputs, with_shape=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    dict(input_ids:T7s2x3,attention_mask:T7s2x33,position_ids:T7s2x3,past_key_values:DynamicCache[serialized](#2[#1[T1s2x1x30x96],#1[T1s2x1x30x96]]))




.. GENERATED FROM PYTHON SOURCE LINES 162-164

.. code-block:: Python

    pprint.pprint(dynamic_shapes)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'attention_mask': {0: Dim('batch', min=1, max=1024),
                        1: _DimHint(type=<_DimHintType.DYNAMIC: 3>,
                                    min=None,
                                    max=None,
                                    _factory=True)},
     'input_ids': {0: Dim('batch', min=1, max=1024),
                   1: Dim('seq_length', min=1, max=4096)},
     'past_key_values': [[{0: Dim('batch', min=1, max=1024),
                           2: Dim('cache_length', min=1, max=4096)}],
                         [{0: Dim('batch', min=1, max=1024),
                           2: Dim('cache_length', min=1, max=4096)}]],
     'position_ids': {0: Dim('batch', min=1, max=1024),
                      1: _DimHint(type=<_DimHintType.DYNAMIC: 3>,
                                  min=None,
                                  max=None,
                                  _factory=True)}}




.. GENERATED FROM PYTHON SOURCE LINES 165-166

And Let's finally export.

.. GENERATED FROM PYTHON SOURCE LINES 166-179

.. code-block:: Python


    try:
        ep = torch.export.export(
            model, (), kwargs=cloned_inputs, dynamic_shapes=dynamic_shapes, strict=False
        )
        print("It worked:")
        print(ep)
    except Exception as e:
        # To work, it needs at least PRs:
        # * https://github.com/huggingface/transformers/pull/36311
        # * https://github.com/huggingface/transformers/pull/36652
        print("It failed:", e)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    It worked:
    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, p_model_embed_tokens_weight: "f32[32000, 192]", p_model_layers_0_self_attn_q_proj_weight: "f32[192, 192]", p_model_layers_0_self_attn_k_proj_weight: "f32[96, 192]", p_model_layers_0_self_attn_v_proj_weight: "f32[96, 192]", p_model_layers_0_self_attn_o_proj_weight: "f32[192, 192]", p_model_layers_0_mlp_gate_proj_weight: "f32[1024, 192]", p_model_layers_0_mlp_up_proj_weight: "f32[1024, 192]", p_model_layers_0_mlp_down_proj_weight: "f32[192, 1024]", p_model_layers_0_input_layernorm_weight: "f32[192]", p_model_layers_0_post_attention_layernorm_weight: "f32[192]", p_model_norm_weight: "f32[192]", p_lm_head_weight: "f32[32000, 192]", b_model_rotary_emb_inv_freq: "f32[48]", input_ids: "i64[s41, s2]", attention_mask: "i64[s41, s2 + s67]", position_ids: "i64[s41, s2]", past_key_values_key_cache_0: "f32[s41, 1, s67, 96]", past_key_values_value_cache_0: "f32[s41, 1, s67, 96]"):
                 # 
                sym_size_int_22: "Sym(s41)" = torch.ops.aten.sym_size.int(input_ids, 0)
                sym_size_int_23: "Sym(s2)" = torch.ops.aten.sym_size.int(input_ids, 1)
                sym_size_int_24: "Sym(s67)" = torch.ops.aten.sym_size.int(past_key_values_key_cache_0, 2)
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/sparse.py:190 in forward, code: return F.embedding(
                embedding: "f32[s41, s2, 192]" = torch.ops.aten.embedding.default(p_model_embed_tokens_weight, input_ids);  p_model_embed_tokens_weight = input_ids = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:564 in forward, code: past_seen_tokens, past_seen_tokens + inputs_embeds.shape[1], device=inputs_embeds.device
                add: "Sym(s2 + s67)" = sym_size_int_24 + sym_size_int_23
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:563 in forward, code: cache_position = torch.arange(
                arange: "i64[s2]" = torch.ops.aten.arange.start(sym_size_int_24, add, device = device(type='cpu'), pin_memory = False);  sym_size_int_24 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:570 in forward, code: causal_mask = self._update_causal_mask(
                full: "f32[s2, s2 + s67]" = torch.ops.aten.full.default([sym_size_int_23, add], -3.4028234663852886e+38, dtype = torch.float32, device = device(type='cpu'), pin_memory = False)
                triu: "f32[s2, s2 + s67]" = torch.ops.aten.triu.default(full, 1);  full = None
                arange_1: "i64[s2 + s67]" = torch.ops.aten.arange.default(add, device = device(type='cpu'), pin_memory = False)
                reshape: "i64[s2, 1]" = torch.ops.aten.reshape.default(arange, [-1, 1]);  arange = None
                gt: "b8[s2, s2 + s67]" = torch.ops.aten.gt.Tensor(arange_1, reshape);  arange_1 = reshape = None
                mul_: "f32[s2, s2 + s67]" = torch.ops.aten.mul_.Tensor(triu, gt);  triu = gt = None
                unsqueeze: "f32[1, s2, s2 + s67]" = torch.ops.aten.unsqueeze.default(mul_, 0);  mul_ = None
                unsqueeze_1: "f32[1, 1, s2, s2 + s67]" = torch.ops.aten.unsqueeze.default(unsqueeze, 1);  unsqueeze = None
                slice_1: "f32[1, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(unsqueeze_1, 2, 0, 9223372036854775807);  unsqueeze_1 = None
                slice_2: "f32[1, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_1, 3, 0, 9223372036854775807);  slice_1 = None
                expand: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.expand.default(slice_2, [sym_size_int_22, 1, -1, -1]);  slice_2 = None
                clone: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.clone.default(expand);  expand = None
                slice_3: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(clone)
                slice_4: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_3, 1);  slice_3 = None
                slice_5: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_4, 2);  slice_4 = None
                slice_6: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_5, 3, None, add);  slice_5 = None
                slice_7: "i64[s41, s2 + s67]" = torch.ops.aten.slice.Tensor(attention_mask, 0, 0, 9223372036854775807);  attention_mask = None
                unsqueeze_2: "i64[s41, 1, s2 + s67]" = torch.ops.aten.unsqueeze.default(slice_7, 1);  slice_7 = None
                unsqueeze_3: "i64[s41, 1, 1, s2 + s67]" = torch.ops.aten.unsqueeze.default(unsqueeze_2, 2);  unsqueeze_2 = None
                slice_8: "i64[s41, 1, 1, s2 + s67]" = torch.ops.aten.slice.Tensor(unsqueeze_3, 3, 0, 9223372036854775807);  unsqueeze_3 = None
                _assert_tensor_metadata_default = torch.ops.aten._assert_tensor_metadata.default(slice_8, dtype = torch.int64, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default = None
                to: "i64[s41, 1, 1, s2 + s67]" = torch.ops.aten.to.dtype_layout(slice_8, dtype = torch.int64, layout = torch.strided, device = device(type='cpu'));  slice_8 = None
                add_2: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.add.Tensor(slice_6, to);  slice_6 = to = None
                eq_4: "b8[s41, 1, s2, s2 + s67]" = torch.ops.aten.eq.Scalar(add_2, 0);  add_2 = None
                slice_9: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(clone)
                slice_10: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_9, 1);  slice_9 = None
                slice_11: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_10, 2);  slice_10 = None
                slice_12: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_11, 3, None, add);  slice_11 = None
                masked_fill: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.masked_fill.Scalar(slice_12, eq_4, -3.4028234663852886e+38);  slice_12 = eq_4 = None
                slice_13: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(clone, 0, 0, 9223372036854775807)
                slice_14: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_13, 1, 0, 9223372036854775807);  slice_13 = None
                slice_15: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_14, 2, 0, 9223372036854775807);  slice_14 = None
                copy_: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.copy_.default(slice_15, masked_fill);  slice_15 = masked_fill = copy_ = None
            
                # No stacktrace found for following nodes
                submod_3 = self.submod_1
                wrap_with_set_grad_enabled = torch.ops.higher_order.wrap_with_set_grad_enabled(False, submod_3, b_model_rotary_emb_inv_freq, sym_size_int_22, position_ids);  submod_3 = b_model_rotary_emb_inv_freq = position_ids = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:152 in forward, code: return cos.to(dtype=x.dtype), sin.to(dtype=x.dtype)
                to_5: "f32[s41, s2, 96]" = wrap_with_set_grad_enabled[0]
                to_6: "f32[s41, s2, 96]" = wrap_with_set_grad_enabled[1];  wrap_with_set_grad_enabled = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:80 in forward, code: hidden_states = hidden_states.to(torch.float32)
                _assert_tensor_metadata_default_7 = torch.ops.aten._assert_tensor_metadata.default(embedding, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_7 = None
                to_7: "f32[s41, s2, 192]" = torch.ops.aten.to.dtype(embedding, torch.float32);  embedding = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:81 in forward, code: variance = hidden_states.pow(2).mean(-1, keepdim=True)
                pow_1: "f32[s41, s2, 192]" = torch.ops.aten.pow.Tensor_Scalar(to_7, 2)
                mean: "f32[s41, s2, 1]" = torch.ops.aten.mean.dim(pow_1, [-1], True);  pow_1 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:82 in forward, code: hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)
                add_3: "f32[s41, s2, 1]" = torch.ops.aten.add.Tensor(mean, 1e-05);  mean = None
                rsqrt: "f32[s41, s2, 1]" = torch.ops.aten.rsqrt.default(add_3);  add_3 = None
                mul_2: "f32[s41, s2, 192]" = torch.ops.aten.mul.Tensor(to_7, rsqrt);  rsqrt = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:83 in forward, code: return self.weight * hidden_states.to(input_dtype)
                _assert_tensor_metadata_default_8 = torch.ops.aten._assert_tensor_metadata.default(mul_2, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_8 = None
                to_8: "f32[s41, s2, 192]" = torch.ops.aten.to.dtype(mul_2, torch.float32);  mul_2 = None
                mul_3: "f32[s41, s2, 192]" = torch.ops.aten.mul.Tensor(p_model_layers_0_input_layernorm_weight, to_8);  p_model_layers_0_input_layernorm_weight = to_8 = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear: "f32[s41, s2, 192]" = torch.ops.aten.linear.default(mul_3, p_model_layers_0_self_attn_q_proj_weight);  p_model_layers_0_self_attn_q_proj_weight = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:281 in forward, code: query_states = self.q_proj(hidden_states).view(hidden_shape).transpose(1, 2)
                view: "f32[s41, s2, 2, 96]" = torch.ops.aten.view.default(linear, [sym_size_int_22, sym_size_int_23, -1, 96]);  linear = None
                transpose_1: "f32[s41, 2, s2, 96]" = torch.ops.aten.transpose.int(view, 1, 2);  view = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear_1: "f32[s41, s2, 96]" = torch.ops.aten.linear.default(mul_3, p_model_layers_0_self_attn_k_proj_weight);  p_model_layers_0_self_attn_k_proj_weight = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:282 in forward, code: key_states = self.k_proj(hidden_states).view(hidden_shape).transpose(1, 2)
                view_1: "f32[s41, s2, 1, 96]" = torch.ops.aten.view.default(linear_1, [sym_size_int_22, sym_size_int_23, -1, 96]);  linear_1 = None
                transpose_2: "f32[s41, 1, s2, 96]" = torch.ops.aten.transpose.int(view_1, 1, 2);  view_1 = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear_2: "f32[s41, s2, 96]" = torch.ops.aten.linear.default(mul_3, p_model_layers_0_self_attn_v_proj_weight);  mul_3 = p_model_layers_0_self_attn_v_proj_weight = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:283 in forward, code: value_states = self.v_proj(hidden_states).view(hidden_shape).transpose(1, 2)
                view_2: "f32[s41, s2, 1, 96]" = torch.ops.aten.view.default(linear_2, [sym_size_int_22, sym_size_int_23, -1, 96]);  linear_2 = None
                transpose_3: "f32[s41, 1, s2, 96]" = torch.ops.aten.transpose.int(view_2, 1, 2);  view_2 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:286 in forward, code: query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin)
                unsqueeze_7: "f32[s41, 1, s2, 96]" = torch.ops.aten.unsqueeze.default(to_5, 1);  to_5 = None
                unsqueeze_8: "f32[s41, 1, s2, 96]" = torch.ops.aten.unsqueeze.default(to_6, 1);  to_6 = None
                mul_4: "f32[s41, 2, s2, 96]" = torch.ops.aten.mul.Tensor(transpose_1, unsqueeze_7)
                slice_19: "f32[s41, 2, s2, 48]" = torch.ops.aten.slice.Tensor(transpose_1, 3, 0, 48)
                slice_20: "f32[s41, 2, s2, 48]" = torch.ops.aten.slice.Tensor(transpose_1, 3, 48, 9223372036854775807);  transpose_1 = None
                neg: "f32[s41, 2, s2, 48]" = torch.ops.aten.neg.default(slice_20);  slice_20 = None
                cat_1: "f32[s41, 2, s2, 96]" = torch.ops.aten.cat.default([neg, slice_19], -1);  neg = slice_19 = None
                mul_5: "f32[s41, 2, s2, 96]" = torch.ops.aten.mul.Tensor(cat_1, unsqueeze_8);  cat_1 = None
                add_4: "f32[s41, 2, s2, 96]" = torch.ops.aten.add.Tensor(mul_4, mul_5);  mul_4 = mul_5 = None
                mul_6: "f32[s41, 1, s2, 96]" = torch.ops.aten.mul.Tensor(transpose_2, unsqueeze_7);  unsqueeze_7 = None
                slice_21: "f32[s41, 1, s2, 48]" = torch.ops.aten.slice.Tensor(transpose_2, 3, 0, 48)
                slice_22: "f32[s41, 1, s2, 48]" = torch.ops.aten.slice.Tensor(transpose_2, 3, 48, 9223372036854775807);  transpose_2 = None
                neg_1: "f32[s41, 1, s2, 48]" = torch.ops.aten.neg.default(slice_22);  slice_22 = None
                cat_2: "f32[s41, 1, s2, 96]" = torch.ops.aten.cat.default([neg_1, slice_21], -1);  neg_1 = slice_21 = None
                mul_7: "f32[s41, 1, s2, 96]" = torch.ops.aten.mul.Tensor(cat_2, unsqueeze_8);  cat_2 = unsqueeze_8 = None
                add_5: "f32[s41, 1, s2, 96]" = torch.ops.aten.add.Tensor(mul_6, mul_7);  mul_6 = mul_7 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:291 in forward, code: key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx, cache_kwargs)
                cat_3: "f32[s41, 1, s2 + s67, 96]" = torch.ops.aten.cat.default([past_key_values_key_cache_0, add_5], -2);  past_key_values_key_cache_0 = add_5 = None
                cat_4: "f32[s41, 1, s2 + s67, 96]" = torch.ops.aten.cat.default([past_key_values_value_cache_0, transpose_3], -2);  past_key_values_value_cache_0 = transpose_3 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:303 in forward, code: attn_output, attn_weights = attention_interface(
                slice_23: "f32[s41, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(cat_3, 0, 0, 9223372036854775807)
                slice_24: "f32[s41, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(slice_23, 1, 0, 9223372036854775807);  slice_23 = None
                unsqueeze_9: "f32[s41, 1, 1, s2 + s67, 96]" = torch.ops.aten.unsqueeze.default(slice_24, 2);  slice_24 = None
                slice_25: "f32[s41, 1, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(unsqueeze_9, 3, 0, 9223372036854775807);  unsqueeze_9 = None
                slice_26: "f32[s41, 1, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(slice_25, 4, 0, 9223372036854775807);  slice_25 = None
                expand_2: "f32[s41, 1, 2, s2 + s67, 96]" = torch.ops.aten.expand.default(slice_26, [sym_size_int_22, 1, 2, add, 96]);  slice_26 = None
                reshape_1: "f32[s41, 2, s2 + s67, 96]" = torch.ops.aten.reshape.default(expand_2, [sym_size_int_22, 2, add, 96]);  expand_2 = None
                slice_27: "f32[s41, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(cat_4, 0, 0, 9223372036854775807)
                slice_28: "f32[s41, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(slice_27, 1, 0, 9223372036854775807);  slice_27 = None
                unsqueeze_10: "f32[s41, 1, 1, s2 + s67, 96]" = torch.ops.aten.unsqueeze.default(slice_28, 2);  slice_28 = None
                slice_29: "f32[s41, 1, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(unsqueeze_10, 3, 0, 9223372036854775807);  unsqueeze_10 = None
                slice_30: "f32[s41, 1, 1, s2 + s67, 96]" = torch.ops.aten.slice.Tensor(slice_29, 4, 0, 9223372036854775807);  slice_29 = None
                expand_3: "f32[s41, 1, 2, s2 + s67, 96]" = torch.ops.aten.expand.default(slice_30, [sym_size_int_22, 1, 2, add, 96]);  slice_30 = None
                reshape_2: "f32[s41, 2, s2 + s67, 96]" = torch.ops.aten.reshape.default(expand_3, [sym_size_int_22, 2, add, 96]);  expand_3 = None
                slice_31: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(clone);  clone = None
                slice_32: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_31, 1);  slice_31 = None
                slice_33: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_32, 2);  slice_32 = None
                slice_34: "f32[s41, 1, s2, s2 + s67]" = torch.ops.aten.slice.Tensor(slice_33, 3, None, add);  slice_33 = add = None
                contiguous: "f32[s41, 2, s2, 96]" = torch.ops.aten.contiguous.default(add_4);  add_4 = None
                contiguous_1: "f32[s41, 2, s2 + s67, 96]" = torch.ops.aten.contiguous.default(reshape_1);  reshape_1 = None
                contiguous_2: "f32[s41, 2, s2 + s67, 96]" = torch.ops.aten.contiguous.default(reshape_2);  reshape_2 = None
                scaled_dot_product_attention: "f32[s41, 2, s2, 96]" = torch.ops.aten.scaled_dot_product_attention.default(contiguous, contiguous_1, contiguous_2, slice_34, scale = 0.10206207261596575);  contiguous = contiguous_1 = contiguous_2 = slice_34 = None
                transpose_4: "f32[s41, s2, 2, 96]" = torch.ops.aten.transpose.int(scaled_dot_product_attention, 1, 2);  scaled_dot_product_attention = None
                contiguous_3: "f32[s41, s2, 2, 96]" = torch.ops.aten.contiguous.default(transpose_4);  transpose_4 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:314 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
                reshape_3: "f32[s41, s2, 192]" = torch.ops.aten.reshape.default(contiguous_3, [sym_size_int_22, sym_size_int_23, -1]);  contiguous_3 = sym_size_int_22 = sym_size_int_23 = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear_3: "f32[s41, s2, 192]" = torch.ops.aten.linear.default(reshape_3, p_model_layers_0_self_attn_o_proj_weight);  reshape_3 = p_model_layers_0_self_attn_o_proj_weight = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:358 in forward, code: hidden_states = residual + hidden_states
                add_7: "f32[s41, s2, 192]" = torch.ops.aten.add.Tensor(to_7, linear_3);  to_7 = linear_3 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:80 in forward, code: hidden_states = hidden_states.to(torch.float32)
                _assert_tensor_metadata_default_9 = torch.ops.aten._assert_tensor_metadata.default(add_7, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_9 = None
                to_9: "f32[s41, s2, 192]" = torch.ops.aten.to.dtype(add_7, torch.float32);  add_7 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:81 in forward, code: variance = hidden_states.pow(2).mean(-1, keepdim=True)
                pow_2: "f32[s41, s2, 192]" = torch.ops.aten.pow.Tensor_Scalar(to_9, 2)
                mean_1: "f32[s41, s2, 1]" = torch.ops.aten.mean.dim(pow_2, [-1], True);  pow_2 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:82 in forward, code: hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)
                add_8: "f32[s41, s2, 1]" = torch.ops.aten.add.Tensor(mean_1, 1e-05);  mean_1 = None
                rsqrt_1: "f32[s41, s2, 1]" = torch.ops.aten.rsqrt.default(add_8);  add_8 = None
                mul_8: "f32[s41, s2, 192]" = torch.ops.aten.mul.Tensor(to_9, rsqrt_1);  rsqrt_1 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:83 in forward, code: return self.weight * hidden_states.to(input_dtype)
                _assert_tensor_metadata_default_10 = torch.ops.aten._assert_tensor_metadata.default(mul_8, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_10 = None
                to_10: "f32[s41, s2, 192]" = torch.ops.aten.to.dtype(mul_8, torch.float32);  mul_8 = None
                mul_9: "f32[s41, s2, 192]" = torch.ops.aten.mul.Tensor(p_model_layers_0_post_attention_layernorm_weight, to_10);  p_model_layers_0_post_attention_layernorm_weight = to_10 = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear_4: "f32[s41, s2, 1024]" = torch.ops.aten.linear.default(mul_9, p_model_layers_0_mlp_gate_proj_weight);  p_model_layers_0_mlp_gate_proj_weight = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/activation.py:432 in forward, code: return F.silu(input, inplace=self.inplace)
                silu: "f32[s41, s2, 1024]" = torch.ops.aten.silu.default(linear_4);  linear_4 = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear_5: "f32[s41, s2, 1024]" = torch.ops.aten.linear.default(mul_9, p_model_layers_0_mlp_up_proj_weight);  mul_9 = p_model_layers_0_mlp_up_proj_weight = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:201 in forward, code: down_proj = self.down_proj(self.act_fn(self.gate_proj(x)) * self.up_proj(x))
                mul_10: "f32[s41, s2, 1024]" = torch.ops.aten.mul.Tensor(silu, linear_5);  silu = linear_5 = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear_6: "f32[s41, s2, 192]" = torch.ops.aten.linear.default(mul_10, p_model_layers_0_mlp_down_proj_weight);  mul_10 = p_model_layers_0_mlp_down_proj_weight = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:364 in forward, code: hidden_states = residual + hidden_states
                add_9: "f32[s41, s2, 192]" = torch.ops.aten.add.Tensor(to_9, linear_6);  to_9 = linear_6 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:80 in forward, code: hidden_states = hidden_states.to(torch.float32)
                _assert_tensor_metadata_default_11 = torch.ops.aten._assert_tensor_metadata.default(add_9, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_11 = None
                to_11: "f32[s41, s2, 192]" = torch.ops.aten.to.dtype(add_9, torch.float32);  add_9 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:81 in forward, code: variance = hidden_states.pow(2).mean(-1, keepdim=True)
                pow_3: "f32[s41, s2, 192]" = torch.ops.aten.pow.Tensor_Scalar(to_11, 2)
                mean_2: "f32[s41, s2, 1]" = torch.ops.aten.mean.dim(pow_3, [-1], True);  pow_3 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:82 in forward, code: hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)
                add_10: "f32[s41, s2, 1]" = torch.ops.aten.add.Tensor(mean_2, 1e-05);  mean_2 = None
                rsqrt_2: "f32[s41, s2, 1]" = torch.ops.aten.rsqrt.default(add_10);  add_10 = None
                mul_11: "f32[s41, s2, 192]" = torch.ops.aten.mul.Tensor(to_11, rsqrt_2);  to_11 = rsqrt_2 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:83 in forward, code: return self.weight * hidden_states.to(input_dtype)
                _assert_tensor_metadata_default_12 = torch.ops.aten._assert_tensor_metadata.default(mul_11, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_12 = None
                to_12: "f32[s41, s2, 192]" = torch.ops.aten.to.dtype(mul_11, torch.float32);  mul_11 = None
                mul_12: "f32[s41, s2, 192]" = torch.ops.aten.mul.Tensor(p_model_norm_weight, to_12);  p_model_norm_weight = to_12 = None
            
                 # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:866 in forward, code: logits = self.lm_head(hidden_states[:, slice_indices, :])
                slice_35: "f32[s41, s2, 192]" = torch.ops.aten.slice.Tensor(mul_12);  mul_12 = None
                slice_36: "f32[s41, s2, 192]" = torch.ops.aten.slice.Tensor(slice_35, 1, 0);  slice_35 = None
                slice_37: "f32[s41, s2, 192]" = torch.ops.aten.slice.Tensor(slice_36, 2);  slice_36 = None
            
                 # File: /home/xadupre/vv/this312/lib/python3.12/site-packages/torch/nn/modules/linear.py:125 in forward, code: return F.linear(input, self.weight, self.bias)
                linear_7: "f32[s41, s2, 32000]" = torch.ops.aten.linear.default(slice_37, p_lm_head_weight);  slice_37 = p_lm_head_weight = None
                return (linear_7, cat_3, cat_4)
            
            class submod_1(torch.nn.Module):
                def forward(self, b_model_rotary_emb_inv_freq: "f32[48]", sym_size_int_22: "Sym(s41)", position_ids: "i64[s41, s2]"):
                     # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:135 in forward, code: inv_freq_expanded = self.inv_freq[None, :, None].float().expand(position_ids.shape[0], -1, 1)
                    unsqueeze_4: "f32[1, 48]" = torch.ops.aten.unsqueeze.default(b_model_rotary_emb_inv_freq, 0);  b_model_rotary_emb_inv_freq = None
                    slice_16: "f32[1, 48]" = torch.ops.aten.slice.Tensor(unsqueeze_4, 1, 0, 9223372036854775807);  unsqueeze_4 = None
                    unsqueeze_5: "f32[1, 48, 1]" = torch.ops.aten.unsqueeze.default(slice_16, 2);  slice_16 = None
                    _assert_tensor_metadata_default_1 = torch.ops.aten._assert_tensor_metadata.default(unsqueeze_5, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_1 = None
                    to_1: "f32[1, 48, 1]" = torch.ops.aten.to.dtype(unsqueeze_5, torch.float32);  unsqueeze_5 = None
                    expand_1: "f32[s41, 48, 1]" = torch.ops.aten.expand.default(to_1, [sym_size_int_22, -1, 1]);  to_1 = sym_size_int_22 = None
                
                     # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:136 in forward, code: position_ids_expanded = position_ids[:, None, :].float()
                    slice_17: "i64[s41, s2]" = torch.ops.aten.slice.Tensor(position_ids, 0, 0, 9223372036854775807);  position_ids = None
                    unsqueeze_6: "i64[s41, 1, s2]" = torch.ops.aten.unsqueeze.default(slice_17, 1);  slice_17 = None
                    slice_18: "i64[s41, 1, s2]" = torch.ops.aten.slice.Tensor(unsqueeze_6, 2, 0, 9223372036854775807);  unsqueeze_6 = None
                    _assert_tensor_metadata_default_2 = torch.ops.aten._assert_tensor_metadata.default(slice_18, dtype = torch.int64, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_2 = None
                    to_2: "f32[s41, 1, s2]" = torch.ops.aten.to.dtype(slice_18, torch.float32);  slice_18 = None
                
                    # No stacktrace found for following nodes
                    submod_3 = self.submod_1
                    wrap_with_autocast = torch.ops.higher_order.wrap_with_autocast('cpu', torch.bfloat16, False, False, submod_3, expand_1, to_2);  submod_3 = expand_1 = to_2 = None
                
                     # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:145 in forward, code: cos = emb.cos()
                    cos: "f32[s41, s2, 96]" = wrap_with_autocast[0]
                
                     # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:146 in forward, code: sin = emb.sin()
                    sin: "f32[s41, s2, 96]" = wrap_with_autocast[1];  wrap_with_autocast = None
                
                     # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:149 in forward, code: cos = cos * self.attention_scaling
                    mul: "f32[s41, s2, 96]" = torch.ops.aten.mul.Tensor(cos, 1.0);  cos = None
                
                     # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:150 in forward, code: sin = sin * self.attention_scaling
                    mul_1: "f32[s41, s2, 96]" = torch.ops.aten.mul.Tensor(sin, 1.0);  sin = None
                
                     # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:152 in forward, code: return cos.to(dtype=x.dtype), sin.to(dtype=x.dtype)
                    _assert_tensor_metadata_default_5 = torch.ops.aten._assert_tensor_metadata.default(mul, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_5 = None
                    to_5: "f32[s41, s2, 96]" = torch.ops.aten.to.dtype(mul, torch.float32);  mul = None
                    _assert_tensor_metadata_default_6 = torch.ops.aten._assert_tensor_metadata.default(mul_1, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_6 = None
                    to_6: "f32[s41, s2, 96]" = torch.ops.aten.to.dtype(mul_1, torch.float32);  mul_1 = None
                    return (to_5, to_6)
                
                class submod_1(torch.nn.Module):
                    def forward(self, expand_1: "f32[s41, 48, 1]", to_2: "f32[s41, 1, s2]"):
                         # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:142 in forward, code: inv_freq_expanded.to(device=x.device, dtype=torch.float) @ position_ids_expanded.float()
                        _assert_tensor_metadata_default_3 = torch.ops.aten._assert_tensor_metadata.default(expand_1, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_3 = None
                        to_3: "f32[s41, 48, 1]" = torch.ops.aten.to.device(expand_1, device(type='cpu'), torch.float32);  expand_1 = None
                        _assert_tensor_metadata_default_4 = torch.ops.aten._assert_tensor_metadata.default(to_2, dtype = torch.float32, device = device(type='cpu'), layout = torch.strided);  _assert_tensor_metadata_default_4 = None
                        to_4: "f32[s41, 1, s2]" = torch.ops.aten.to.dtype(to_2, torch.float32);  to_2 = None
                        matmul: "f32[s41, 48, s2]" = torch.ops.aten.matmul.default(to_3, to_4);  to_3 = to_4 = None
                    
                         # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:143 in forward, code: ).transpose(1, 2)
                        transpose: "f32[s41, s2, 48]" = torch.ops.aten.transpose.int(matmul, 1, 2);  matmul = None
                    
                         # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:144 in forward, code: emb = torch.cat((freqs, freqs), dim=-1)
                        cat: "f32[s41, s2, 96]" = torch.ops.aten.cat.default([transpose, transpose], -1);  transpose = None
                    
                         # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:145 in forward, code: cos = emb.cos()
                        cos: "f32[s41, s2, 96]" = torch.ops.aten.cos.default(cat)
                    
                         # File: /home/xadupre/github/transformers/src/transformers/models/llama/modeling_llama.py:146 in forward, code: sin = emb.sin()
                        sin: "f32[s41, s2, 96]" = torch.ops.aten.sin.default(cat);  cat = None
                        return (cos, sin)
                    
    Graph signature: 
        # inputs
        p_model_embed_tokens_weight: PARAMETER target='model.embed_tokens.weight'
        p_model_layers_0_self_attn_q_proj_weight: PARAMETER target='model.layers.0.self_attn.q_proj.weight'
        p_model_layers_0_self_attn_k_proj_weight: PARAMETER target='model.layers.0.self_attn.k_proj.weight'
        p_model_layers_0_self_attn_v_proj_weight: PARAMETER target='model.layers.0.self_attn.v_proj.weight'
        p_model_layers_0_self_attn_o_proj_weight: PARAMETER target='model.layers.0.self_attn.o_proj.weight'
        p_model_layers_0_mlp_gate_proj_weight: PARAMETER target='model.layers.0.mlp.gate_proj.weight'
        p_model_layers_0_mlp_up_proj_weight: PARAMETER target='model.layers.0.mlp.up_proj.weight'
        p_model_layers_0_mlp_down_proj_weight: PARAMETER target='model.layers.0.mlp.down_proj.weight'
        p_model_layers_0_input_layernorm_weight: PARAMETER target='model.layers.0.input_layernorm.weight'
        p_model_layers_0_post_attention_layernorm_weight: PARAMETER target='model.layers.0.post_attention_layernorm.weight'
        p_model_norm_weight: PARAMETER target='model.norm.weight'
        p_lm_head_weight: PARAMETER target='lm_head.weight'
        b_model_rotary_emb_inv_freq: BUFFER target='model.rotary_emb.inv_freq' persistent=False
        input_ids: USER_INPUT
        attention_mask: USER_INPUT
        position_ids: USER_INPUT
        past_key_values_key_cache_0: USER_INPUT
        past_key_values_value_cache_0: USER_INPUT
    
        # outputs
        linear_7: USER_OUTPUT
        cat_3: USER_OUTPUT
        cat_4: USER_OUTPUT
    
    Range constraints: {s41: VR[1, 1024], s2: VR[2, 4096], s2 + s67: VR[4, 8192], s67: VR[1, 4096]}





.. GENERATED FROM PYTHON SOURCE LINES 180-182

If you have any error, then look at example
:ref:`l-plot-tiny-llm-export-patched`.

.. GENERATED FROM PYTHON SOURCE LINES 182-184

.. code-block:: Python


    doc.plot_legend("Tiny-LLM\nforward inputs\nbehind generate", "torch.export.export", "tomato")



.. image-sg:: /auto_examples/images/sphx_glr_plot_export_tiny_llm_001.png
   :alt: plot export tiny llm
   :srcset: /auto_examples/images/sphx_glr_plot_export_tiny_llm_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.838 seconds)


.. _sphx_glr_download_auto_examples_plot_export_tiny_llm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_export_tiny_llm.ipynb <plot_export_tiny_llm.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_export_tiny_llm.py <plot_export_tiny_llm.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_export_tiny_llm.zip <plot_export_tiny_llm.zip>`


.. include:: plot_export_tiny_llm.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
