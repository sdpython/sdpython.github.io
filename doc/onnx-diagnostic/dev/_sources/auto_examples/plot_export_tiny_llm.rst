
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_export_tiny_llm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_export_tiny_llm.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_export_tiny_llm.py:


.. _l-plot-tiny-llm-export:

Steel method forward to guess the dynamic shapes (with Tiny-LLM)
================================================================

Inputs are always dynamic with LLMs that is why dynamic shapes
needs to be specified when a LLM is exported with:func:`torch.export.export`.
Most of the examples on :epkg:`HuggingFace` use method
:meth:`transformers.GenerationMixin.generate` but we only want to
export the model and its method ``forward``.

That example shows to guess the inputs of this method even though the model
is executed through meth ``generate``.

We focus on the model :epkg:`arnir0/Tiny-LLM`.
To avoid downloading any weights, we write a function creating a
random model based on the same architecture.

Steel the forward method
++++++++++++++++++++++++

The first step is to guess the dummy inputs.
Let's use the true model for that.
We use the dummy example from the model page.

.. GENERATED FROM PYTHON SOURCE LINES 27-42

.. code-block:: Python


    import copy
    import pprint
    import torch
    import transformers
    from onnx_diagnostic import doc
    from onnx_diagnostic.helpers import string_type
    from onnx_diagnostic.helpers.torch_test_helper import steel_forward
    from onnx_diagnostic.torch_models.llms import get_tiny_llm


    MODEL_NAME = "arnir0/Tiny-LLM"
    tokenizer = transformers.AutoTokenizer.from_pretrained(MODEL_NAME)
    model = transformers.AutoModelForCausalLM.from_pretrained(MODEL_NAME)








.. GENERATED FROM PYTHON SOURCE LINES 43-44

We rewrite the forward method to print the cache dimension.

.. GENERATED FROM PYTHON SOURCE LINES 44-62

.. code-block:: Python



    def _forward_(*args, _f=None, **kwargs):
        assert _f is not None
        if not hasattr(torch.compiler, "is_exporting") or not torch.compiler.is_exporting():
            # torch.compiler.is_exporting requires torch>=2.7
            print("<-", string_type((args, kwargs), with_shape=True, with_min_max=True))
        res = _f(*args, **kwargs)
        if not hasattr(torch.compiler, "is_exporting") or not torch.compiler.is_exporting():
            print("->", string_type(res, with_shape=True, with_min_max=True))
        return res


    keep_model_forward = model.forward
    model.forward = lambda *args, _f=keep_model_forward, **kwargs: _forward_(
        *args, _f=_f, **kwargs
    )








.. GENERATED FROM PYTHON SOURCE LINES 63-64

Let's run the model.

.. GENERATED FROM PYTHON SOURCE LINES 64-75

.. code-block:: Python

    prompt = "Continue: it rains..."
    inputs = tokenizer.encode(prompt, return_tensors="pt")

    outputs = model.generate(
        inputs, max_length=50, temperature=1, top_k=50, top_p=0.95, do_sample=True
    )

    generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)
    print("-- prompt", prompt)
    print("-- answer", generated_text)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <- ((),dict(cache_position:T7s8[0,7:A3.5],past_key_values:DynamicCache(key_cache=#0[], value_cache=#0[]),input_ids:T7s1x8[1,29901:A6305.375],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x8x32000[-15.516718864440918,15.75765609741211:A-3.381915190983544],past_key_values:DynamicCache(key_cache=#1[T1s1x1x8x96[-5.490959167480469,6.226877689361572:A-0.11321351693110653]], value_cache=#1[T1s1x1x8x96[-0.6787744760513306,0.49568021297454834:A0.007227749521139988]]))
    <- ((),dict(cache_position:T7s1[8,8:A8.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x8x96[-5.490959167480469,6.226877689361572:A-0.11321351693110653]], value_cache=#1[T1s1x1x8x96[-0.6787744760513306,0.49568021297454834:A0.007227749521139988]]),input_ids:T7s1x1[13,13:A13.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-10.432564735412598,8.368535995483398:A-4.234468644971028],past_key_values:DynamicCache(key_cache=#1[T1s1x1x9x96[-5.509540557861328,6.348220348358154:A-0.12195695057461206]], value_cache=#1[T1s1x1x9x96[-0.6787744760513306,0.7704185843467712:A0.009565710057611594]]))
    <- ((),dict(cache_position:T7s1[9,9:A9.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x9x96[-5.509540557861328,6.348220348358154:A-0.12195695057461206]], value_cache=#1[T1s1x1x9x96[-0.6787744760513306,0.7704185843467712:A0.009565710057611594]]),input_ids:T7s1x1[29933,29933:A29933.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-8.90406608581543,10.248048782348633:A-1.293840367605444],past_key_values:DynamicCache(key_cache=#1[T1s1x1x10x96[-5.509540557861328,6.348220348358154:A-0.11464174161895548]], value_cache=#1[T1s1x1x10x96[-0.6787744760513306,0.7704185843467712:A0.0061155412014917]]))
    <- ((),dict(cache_position:T7s1[10,10:A10.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x10x96[-5.509540557861328,6.348220348358154:A-0.11464174161895548]], value_cache=#1[T1s1x1x10x96[-0.6787744760513306,0.7704185843467712:A0.0061155412014917]]),input_ids:T7s1x1[1266,1266:A1266.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-13.444478034973145,5.343301296234131:A-6.884769414457958],past_key_values:DynamicCache(key_cache=#1[T1s1x1x11x96[-5.509540557861328,6.348220348358154:A-0.11176624642118413]], value_cache=#1[T1s1x1x11x96[-0.6787744760513306,0.7704185843467712:A0.004745348591134671]]))
    <- ((),dict(cache_position:T7s1[11,11:A11.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x11x96[-5.509540557861328,6.348220348358154:A-0.11176624642118413]], value_cache=#1[T1s1x1x11x96[-0.6787744760513306,0.7704185843467712:A0.004745348591134671]]),input_ids:T7s1x1[265,265:A265.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-12.607843399047852,5.938937664031982:A-5.638989625931019],past_key_values:DynamicCache(key_cache=#1[T1s1x1x12x96[-5.509540557861328,6.348220348358154:A-0.0874502694456775]], value_cache=#1[T1s1x1x12x96[-0.6787744760513306,0.7704185843467712:A0.0038309433599831915]]))
    <- ((),dict(cache_position:T7s1[12,12:A12.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x12x96[-5.509540557861328,6.348220348358154:A-0.0874502694456775]], value_cache=#1[T1s1x1x12x96[-0.6787744760513306,0.7704185843467712:A0.0038309433599831915]]),input_ids:T7s1x1[29901,29901:A29901.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-16.717153549194336,3.0127553939819336:A-9.337737445591483],past_key_values:DynamicCache(key_cache=#1[T1s1x1x13x96[-5.509540557861328,6.348220348358154:A-0.07825433195037663]], value_cache=#1[T1s1x1x13x96[-0.6787744760513306,0.7704185843467712:A0.0047391487406830725]]))
    <- ((),dict(cache_position:T7s1[13,13:A13.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x13x96[-5.509540557861328,6.348220348358154:A-0.07825433195037663]], value_cache=#1[T1s1x1x13x96[-0.6787744760513306,0.7704185843467712:A0.0047391487406830725]]),input_ids:T7s1x1[910,910:A910.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-15.939476013183594,6.1795806884765625:A-7.866820823365822],past_key_values:DynamicCache(key_cache=#1[T1s1x1x14x96[-5.509540557861328,6.348220348358154:A-0.08908382433383806]], value_cache=#1[T1s1x1x14x96[-0.6787744760513306,0.7704185843467712:A0.004952574890824378]]))
    <- ((),dict(cache_position:T7s1[14,14:A14.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x14x96[-5.509540557861328,6.348220348358154:A-0.08908382433383806]], value_cache=#1[T1s1x1x14x96[-0.6787744760513306,0.7704185843467712:A0.004952574890824378]]),input_ids:T7s1x1[471,471:A471.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-14.549653053283691,8.24505615234375:A-6.580892507792917],past_key_values:DynamicCache(key_cache=#1[T1s1x1x15x96[-5.509540557861328,6.348220348358154:A-0.08392560377388791]], value_cache=#1[T1s1x1x15x96[-0.6787744760513306,0.7704185843467712:A0.005214966700916395]]))
    <- ((),dict(cache_position:T7s1[15,15:A15.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x15x96[-5.509540557861328,6.348220348358154:A-0.08392560377388791]], value_cache=#1[T1s1x1x15x96[-0.6787744760513306,0.7704185843467712:A0.005214966700916395]]),input_ids:T7s1x1[599,599:A599.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-16.248565673828125,7.98789119720459:A-6.349999967252603],past_key_values:DynamicCache(key_cache=#1[T1s1x1x16x96[-5.509540557861328,6.348220348358154:A-0.08467126427065826]], value_cache=#1[T1s1x1x16x96[-0.6787744760513306,0.7704185843467712:A0.004858336111198014]]))
    <- ((),dict(cache_position:T7s1[16,16:A16.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x16x96[-5.509540557861328,6.348220348358154:A-0.08467126427065826]], value_cache=#1[T1s1x1x16x96[-0.6787744760513306,0.7704185843467712:A0.004858336111198014]]),input_ids:T7s1x1[29889,29889:A29889.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-14.941545486450195,7.39791202545166:A-8.441906831551343],past_key_values:DynamicCache(key_cache=#1[T1s1x1x17x96[-5.983488082885742,7.040541648864746:A-0.09140591675310919]], value_cache=#1[T1s1x1x17x96[-0.6787744760513306,0.7704185843467712:A0.005253070403225637]]))
    <- ((),dict(cache_position:T7s1[17,17:A17.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x17x96[-5.983488082885742,7.040541648864746:A-0.09140591675310919]], value_cache=#1[T1s1x1x17x96[-0.6787744760513306,0.7704185843467712:A0.005253070403225637]]),input_ids:T7s1x1[13,13:A13.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-8.161628723144531,9.48836612701416:A-2.8471359123962467],past_key_values:DynamicCache(key_cache=#1[T1s1x1x18x96[-5.983488082885742,7.040541648864746:A-0.09522612964583796]], value_cache=#1[T1s1x1x18x96[-0.6787744760513306,0.7704185843467712:A0.0065317550669011255]]))
    <- ((),dict(cache_position:T7s1[18,18:A18.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x18x96[-5.983488082885742,7.040541648864746:A-0.09522612964583796]], value_cache=#1[T1s1x1x18x96[-0.6787744760513306,0.7704185843467712:A0.0065317550669011255]]),input_ids:T7s1x1[1576,1576:A1576.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-15.952171325683594,3.006239652633667:A-7.650787526994012],past_key_values:DynamicCache(key_cache=#1[T1s1x1x19x96[-5.983488082885742,7.040541648864746:A-0.09709061322415405]], value_cache=#1[T1s1x1x19x96[-0.6787744760513306,0.7704185843467712:A0.006309773384832066]]))
    <- ((),dict(cache_position:T7s1[19,19:A19.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x19x96[-5.983488082885742,7.040541648864746:A-0.09709061322415405]], value_cache=#1[T1s1x1x19x96[-0.6787744760513306,0.7704185843467712:A0.006309773384832066]]),input_ids:T7s1x1[29871,29871:A29871.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-10.93598747253418,16.014371871948242:A-2.2518018970484843],past_key_values:DynamicCache(key_cache=#1[T1s1x1x20x96[-5.983488082885742,7.040541648864746:A-0.09740514157704941]], value_cache=#1[T1s1x1x20x96[-0.6787744760513306,0.7704185843467712:A0.004435895079154761]]))
    <- ((),dict(cache_position:T7s1[20,20:A20.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x20x96[-5.983488082885742,7.040541648864746:A-0.09740514157704941]], value_cache=#1[T1s1x1x20x96[-0.6787744760513306,0.7704185843467712:A0.004435895079154761]]),input_ids:T7s1x1[29906,29906:A29906.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-18.82000160217285,7.889700412750244:A-8.982747567618732],past_key_values:DynamicCache(key_cache=#1[T1s1x1x21x96[-6.149064064025879,7.040541648864746:A-0.09272712211560925]], value_cache=#1[T1s1x1x21x96[-0.6787744760513306,0.7704185843467712:A0.003956638051534803]]))
    <- ((),dict(cache_position:T7s1[21,21:A21.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x21x96[-6.149064064025879,7.040541648864746:A-0.09272712211560925]], value_cache=#1[T1s1x1x21x96[-0.6787744760513306,0.7704185843467712:A0.003956638051534803]]),input_ids:T7s1x1[29945,29945:A29945.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-20.85294532775879,5.670607566833496:A-10.04362968376605],past_key_values:DynamicCache(key_cache=#1[T1s1x1x22x96[-6.458846569061279,7.040541648864746:A-0.09349905740815632]], value_cache=#1[T1s1x1x22x96[-0.6787744760513306,0.7704185843467712:A0.003217797412803107]]))
    <- ((),dict(cache_position:T7s1[22,22:A22.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x22x96[-6.458846569061279,7.040541648864746:A-0.09349905740815632]], value_cache=#1[T1s1x1x22x96[-0.6787744760513306,0.7704185843467712:A0.003217797412803107]]),input_ids:T7s1x1[29899,29899:A29899.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-10.507705688476562,12.245784759521484:A-3.311824697896838],past_key_values:DynamicCache(key_cache=#1[T1s1x1x23x96[-6.458846569061279,7.040541648864746:A-0.09128244678230249]], value_cache=#1[T1s1x1x23x96[-0.6787744760513306,0.7704185843467712:A0.0032376488649023868]]))
    <- ((),dict(cache_position:T7s1[23,23:A23.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x23x96[-6.458846569061279,7.040541648864746:A-0.09128244678230249]], value_cache=#1[T1s1x1x23x96[-0.6787744760513306,0.7704185843467712:A0.0032376488649023868]]),input_ids:T7s1x1[3250,3250:A3250.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-19.847057342529297,3.5545568466186523:A-9.311705124537461],past_key_values:DynamicCache(key_cache=#1[T1s1x1x24x96[-6.458846569061279,7.040541648864746:A-0.08453809439263044]], value_cache=#1[T1s1x1x24x96[-0.6787744760513306,0.7704185843467712:A0.0025238269367883325]]))
    <- ((),dict(cache_position:T7s1[24,24:A24.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x24x96[-6.458846569061279,7.040541648864746:A-0.08453809439263044]], value_cache=#1[T1s1x1x24x96[-0.6787744760513306,0.7704185843467712:A0.0025238269367883325]]),input_ids:T7s1x1[4646,4646:A4646.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-19.15038299560547,6.1792707443237305:A-9.33778078572033],past_key_values:DynamicCache(key_cache=#1[T1s1x1x25x96[-6.458846569061279,7.040541648864746:A-0.07809233676957471]], value_cache=#1[T1s1x1x25x96[-0.6787744760513306,0.7704185843467712:A0.0024747419981516333]]))
    <- ((),dict(cache_position:T7s1[25,25:A25.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x25x96[-6.458846569061279,7.040541648864746:A-0.07809233676957471]], value_cache=#1[T1s1x1x25x96[-0.6787744760513306,0.7704185843467712:A0.0024747419981516333]]),input_ids:T7s1x1[29889,29889:A29889.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-15.490755081176758,8.84174633026123:A-7.574799899551785],past_key_values:DynamicCache(key_cache=#1[T1s1x1x26x96[-6.458846569061279,7.058352947235107:A-0.07500573511960959]], value_cache=#1[T1s1x1x26x96[-0.6787744760513306,0.7704185843467712:A0.0028245141934407094]]))
    <- ((),dict(cache_position:T7s1[26,26:A26.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x26x96[-6.458846569061279,7.058352947235107:A-0.07500573511960959]], value_cache=#1[T1s1x1x26x96[-0.6787744760513306,0.7704185843467712:A0.0028245141934407094]]),input_ids:T7s1x1[450,450:A450.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-15.856245040893555,3.296724796295166:A-7.665380755503196],past_key_values:DynamicCache(key_cache=#1[T1s1x1x27x96[-6.458846569061279,7.058352947235107:A-0.07603064742637977]], value_cache=#1[T1s1x1x27x96[-0.6787744760513306,0.7704185843467712:A0.003138769092778221]]))
    <- ((),dict(cache_position:T7s1[27,27:A27.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x27x96[-6.458846569061279,7.058352947235107:A-0.07603064742637977]], value_cache=#1[T1s1x1x27x96[-0.6787744760513306,0.7704185843467712:A0.003138769092778221]]),input_ids:T7s1x1[376,376:A376.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-7.243348121643066,9.335552215576172:A-1.4550440701339393],past_key_values:DynamicCache(key_cache=#1[T1s1x1x28x96[-6.458846569061279,7.058352947235107:A-0.0782700559991662]], value_cache=#1[T1s1x1x28x96[-0.6787744760513306,0.7704185843467712:A0.003150793648528417]]))
    <- ((),dict(cache_position:T7s1[28,28:A28.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x28x96[-6.458846569061279,7.058352947235107:A-0.0782700559991662]], value_cache=#1[T1s1x1x28x96[-0.6787744760513306,0.7704185843467712:A0.003150793648528417]]),input_ids:T7s1x1[29943,29943:A29943.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-7.430201053619385,13.72374153137207:A1.4608773601120337],past_key_values:DynamicCache(key_cache=#1[T1s1x1x29x96[-6.458846569061279,7.058352947235107:A-0.07484797309337608]], value_cache=#1[T1s1x1x29x96[-0.6787744760513306,0.7704185843467712:A0.003138600830838207]]))
    <- ((),dict(cache_position:T7s1[29,29:A29.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x29x96[-6.458846569061279,7.058352947235107:A-0.07484797309337608]], value_cache=#1[T1s1x1x29x96[-0.6787744760513306,0.7704185843467712:A0.003138600830838207]]),input_ids:T7s1x1[1466,1466:A1466.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-14.344949722290039,7.301680564880371:A-6.675821519346908],past_key_values:DynamicCache(key_cache=#1[T1s1x1x30x96[-6.458846569061279,7.058352947235107:A-0.06683819514748596]], value_cache=#1[T1s1x1x30x96[-0.6787744760513306,0.7704185843467712:A0.003868335388723507]]))
    <- ((),dict(cache_position:T7s1[30,30:A30.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x30x96[-6.458846569061279,7.058352947235107:A-0.06683819514748596]], value_cache=#1[T1s1x1x30x96[-0.6787744760513306,0.7704185843467712:A0.003868335388723507]]),input_ids:T7s1x1[29891,29891:A29891.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-13.623956680297852,6.272018909454346:A-6.8572348272867965],past_key_values:DynamicCache(key_cache=#1[T1s1x1x31x96[-6.458846569061279,7.058352947235107:A-0.059520540614739145]], value_cache=#1[T1s1x1x31x96[-0.6787744760513306,0.7704185843467712:A0.004139265763687065]]))
    <- ((),dict(cache_position:T7s1[31,31:A31.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x31x96[-6.458846569061279,7.058352947235107:A-0.059520540614739145]], value_cache=#1[T1s1x1x31x96[-0.6787744760513306,0.7704185843467712:A0.004139265763687065]]),input_ids:T7s1x1[29908,29908:A29908.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-14.937078475952148,4.415217399597168:A-8.215268829951993],past_key_values:DynamicCache(key_cache=#1[T1s1x1x32x96[-6.458846569061279,7.058352947235107:A-0.05842009170832322]], value_cache=#1[T1s1x1x32x96[-0.7138619422912598,0.7704185843467712:A0.0032844693053325122]]))
    <- ((),dict(cache_position:T7s1[32,32:A32.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x32x96[-6.458846569061279,7.058352947235107:A-0.05842009170832322]], value_cache=#1[T1s1x1x32x96[-0.7138619422912598,0.7704185843467712:A0.0032844693053325122]]),input_ids:T7s1x1[13,13:A13.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-7.009280204772949,11.28907299041748:A-2.122908598779235],past_key_values:DynamicCache(key_cache=#1[T1s1x1x33x96[-6.458846569061279,7.058352947235107:A-0.05531748246041866]], value_cache=#1[T1s1x1x33x96[-0.7138619422912598,0.7704185843467712:A0.004041588246061358]]))
    <- ((),dict(cache_position:T7s1[33,33:A33.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x33x96[-6.458846569061279,7.058352947235107:A-0.05531748246041866]], value_cache=#1[T1s1x1x33x96[-0.7138619422912598,0.7704185843467712:A0.004041588246061358]]),input_ids:T7s1x1[29899,29899:A29899.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-17.210376739501953,4.315885543823242:A-9.359974146686495],past_key_values:DynamicCache(key_cache=#1[T1s1x1x34x96[-6.458846569061279,7.058352947235107:A-0.056527266605888714]], value_cache=#1[T1s1x1x34x96[-0.7138619422912598,0.7704185843467712:A0.004030788027385628]]))
    <- ((),dict(cache_position:T7s1[34,34:A34.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x34x96[-6.458846569061279,7.058352947235107:A-0.056527266605888714]], value_cache=#1[T1s1x1x34x96[-0.7138619422912598,0.7704185843467712:A0.004030788027385628]]),input_ids:T7s1x1[450,450:A450.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-16.387500762939453,2.1254005432128906:A-7.378969818401616],past_key_values:DynamicCache(key_cache=#1[T1s1x1x35x96[-6.458846569061279,7.058352947235107:A-0.05518922344729487]], value_cache=#1[T1s1x1x35x96[-0.7138619422912598,0.7704185843467712:A0.0042387482687618536]]))
    <- ((),dict(cache_position:T7s1[35,35:A35.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x35x96[-6.458846569061279,7.058352947235107:A-0.05518922344729487]], value_cache=#1[T1s1x1x35x96[-0.7138619422912598,0.7704185843467712:A0.0042387482687618536]]),input_ids:T7s1x1[2462,2462:A2462.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-17.502216339111328,6.211599826812744:A-8.46645100533869],past_key_values:DynamicCache(key_cache=#1[T1s1x1x36x96[-6.458846569061279,7.058352947235107:A-0.051422959030316163]], value_cache=#1[T1s1x1x36x96[-0.7138619422912598,0.7704185843467712:A0.004641482453427704]]))
    <- ((),dict(cache_position:T7s1[36,36:A36.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x36x96[-6.458846569061279,7.058352947235107:A-0.051422959030316163]], value_cache=#1[T1s1x1x36x96[-0.7138619422912598,0.7704185843467712:A0.004641482453427704]]),input_ids:T7s1x1[1434,1434:A1434.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-18.204090118408203,6.6246232986450195:A-9.47791540044872],past_key_values:DynamicCache(key_cache=#1[T1s1x1x37x96[-6.458846569061279,7.058352947235107:A-0.048581424639655986]], value_cache=#1[T1s1x1x37x96[-0.7138619422912598,0.7704185843467712:A0.004715409995070159]]))
    <- ((),dict(cache_position:T7s1[37,37:A37.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x37x96[-6.458846569061279,7.058352947235107:A-0.048581424639655986]], value_cache=#1[T1s1x1x37x96[-0.7138619422912598,0.7704185843467712:A0.004715409995070159]]),input_ids:T7s1x1[278,278:A278.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-18.46323013305664,3.162752151489258:A-9.326593494837986],past_key_values:DynamicCache(key_cache=#1[T1s1x1x38x96[-6.458846569061279,7.058352947235107:A-0.04709942878090308]], value_cache=#1[T1s1x1x38x96[-0.7138619422912598,0.7704185843467712:A0.004950862155737923]]))
    <- ((),dict(cache_position:T7s1[38,38:A38.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x38x96[-6.458846569061279,7.058352947235107:A-0.04709942878090308]], value_cache=#1[T1s1x1x38x96[-0.7138619422912598,0.7704185843467712:A0.004950862155737923]]),input_ids:T7s1x1[14837,14837:A14837.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-14.691099166870117,12.09998893737793:A-5.3446735084408425],past_key_values:DynamicCache(key_cache=#1[T1s1x1x39x96[-6.458846569061279,7.058352947235107:A-0.042290361053028004]], value_cache=#1[T1s1x1x39x96[-0.7138619422912598,0.7704185843467712:A0.004760078884303836]]))
    <- ((),dict(cache_position:T7s1[39,39:A39.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x39x96[-6.458846569061279,7.058352947235107:A-0.042290361053028004]], value_cache=#1[T1s1x1x39x96[-0.7138619422912598,0.7704185843467712:A0.004760078884303836]]),input_ids:T7s1x1[8497,8497:A8497.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-15.377595901489258,9.488157272338867:A-6.743186542733107],past_key_values:DynamicCache(key_cache=#1[T1s1x1x40x96[-6.458846569061279,7.058352947235107:A-0.03892619682995549]], value_cache=#1[T1s1x1x40x96[-0.7138619422912598,0.7704185843467712:A0.004759582631682709]]))
    <- ((),dict(cache_position:T7s1[40,40:A40.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x40x96[-6.458846569061279,7.058352947235107:A-0.03892619682995549]], value_cache=#1[T1s1x1x40x96[-0.7138619422912598,0.7704185843467712:A0.004759582631682709]]),input_ids:T7s1x1[471,471:A471.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-14.427350044250488,8.676372528076172:A-5.216603825079277],past_key_values:DynamicCache(key_cache=#1[T1s1x1x41x96[-6.458846569061279,7.058352947235107:A-0.03813607813542585]], value_cache=#1[T1s1x1x41x96[-0.7138619422912598,0.7704185843467712:A0.004860286763646658]]))
    <- ((),dict(cache_position:T7s1[41,41:A41.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x41x96[-6.458846569061279,7.058352947235107:A-0.03813607813542585]], value_cache=#1[T1s1x1x41x96[-0.7138619422912598,0.7704185843467712:A0.004860286763646658]]),input_ids:T7s1x1[5051,5051:A5051.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-17.725000381469727,9.010416984558105:A-6.159581520375796],past_key_values:DynamicCache(key_cache=#1[T1s1x1x42x96[-6.458846569061279,7.058352947235107:A-0.03686189882082256]], value_cache=#1[T1s1x1x42x96[-0.7138619422912598,0.7704185843467712:A0.004165198812820058]]))
    <- ((),dict(cache_position:T7s1[42,42:A42.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x42x96[-6.458846569061279,7.058352947235107:A-0.03686189882082256]], value_cache=#1[T1s1x1x42x96[-0.7138619422912598,0.7704185843467712:A0.004165198812820058]]),input_ids:T7s1x1[19587,19587:A19587.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-18.142972946166992,8.690482139587402:A-7.993947127009742],past_key_values:DynamicCache(key_cache=#1[T1s1x1x43x96[-6.458846569061279,7.058352947235107:A-0.03546701296115436]], value_cache=#1[T1s1x1x43x96[-0.7138619422912598,0.7704185843467712:A0.0042895673685425986]]))
    <- ((),dict(cache_position:T7s1[43,43:A43.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x43x96[-6.458846569061279,7.058352947235107:A-0.03546701296115436]], value_cache=#1[T1s1x1x43x96[-0.7138619422912598,0.7704185843467712:A0.0042895673685425986]]),input_ids:T7s1x1[2675,2675:A2675.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-17.89887809753418,8.934009552001953:A-8.08901460207766],past_key_values:DynamicCache(key_cache=#1[T1s1x1x44x96[-6.458846569061279,7.058352947235107:A-0.03412919174057937]], value_cache=#1[T1s1x1x44x96[-0.7138619422912598,0.7704185843467712:A0.004498219339738666]]))
    <- ((),dict(cache_position:T7s1[44,44:A44.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x44x96[-6.458846569061279,7.058352947235107:A-0.03412919174057937]], value_cache=#1[T1s1x1x44x96[-0.7138619422912598,0.7704185843467712:A0.004498219339738666]]),input_ids:T7s1x1[29908,29908:A29908.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-12.779122352600098,9.166101455688477:A-5.89525738410512],past_key_values:DynamicCache(key_cache=#1[T1s1x1x45x96[-6.458846569061279,7.058352947235107:A-0.03245216144523174]], value_cache=#1[T1s1x1x45x96[-0.7138619422912598,0.7704185843467712:A0.0038823873343298383]]))
    <- ((),dict(cache_position:T7s1[45,45:A45.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x45x96[-6.458846569061279,7.058352947235107:A-0.03245216144523174]], value_cache=#1[T1s1x1x45x96[-0.7138619422912598,0.7704185843467712:A0.0038823873343298383]]),input_ids:T7s1x1[472,472:A472.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-19.023128509521484,7.639420509338379:A-8.963794688608031],past_key_values:DynamicCache(key_cache=#1[T1s1x1x46x96[-6.458846569061279,7.058352947235107:A-0.030910538442660018]], value_cache=#1[T1s1x1x46x96[-0.7138619422912598,0.7704185843467712:A0.003483945583942235]]))
    <- ((),dict(cache_position:T7s1[46,46:A46.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x46x96[-6.458846569061279,7.058352947235107:A-0.030910538442660018]], value_cache=#1[T1s1x1x46x96[-0.7138619422912598,0.7704185843467712:A0.003483945583942235]]),input_ids:T7s1x1[4646,4646:A4646.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-16.60296630859375,8.577702522277832:A-8.534437841131817],past_key_values:DynamicCache(key_cache=#1[T1s1x1x47x96[-6.458846569061279,7.058352947235107:A-0.02836088079248381]], value_cache=#1[T1s1x1x47x96[-0.7138619422912598,0.7704185843467712:A0.0034374085177066734]]))
    <- ((),dict(cache_position:T7s1[47,47:A47.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x47x96[-6.458846569061279,7.058352947235107:A-0.02836088079248381]], value_cache=#1[T1s1x1x47x96[-0.7138619422912598,0.7704185843467712:A0.0034374085177066734]]),input_ids:T7s1x1[29889,29889:A29889.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-14.944525718688965,8.608175277709961:A-7.1328919585188855],past_key_values:DynamicCache(key_cache=#1[T1s1x1x48x96[-6.458846569061279,7.08547830581665:A-0.0289985916097319]], value_cache=#1[T1s1x1x48x96[-0.7138619422912598,0.7704185843467712:A0.0036068129043308594]]))
    <- ((),dict(cache_position:T7s1[48,48:A48.0],past_key_values:DynamicCache(key_cache=#1[T1s1x1x48x96[-6.458846569061279,7.08547830581665:A-0.0289985916097319]], value_cache=#1[T1s1x1x48x96[-0.7138619422912598,0.7704185843467712:A0.0036068129043308594]]),input_ids:T7s1x1[13,13:A13.0],inputs_embeds:None,use_cache:bool=True,return_dict:bool=True))
    -> dict(logits:T1s1x1x32000[-8.233562469482422,11.335274696350098:A-3.261997288622893],past_key_values:DynamicCache(key_cache=#1[T1s1x1x49x96[-6.458846569061279,7.08547830581665:A-0.027815158530416603]], value_cache=#1[T1s1x1x49x96[-0.7138619422912598,0.7704185843467712:A0.004110130893005422]]))
    -- prompt Continue: it rains...
    -- answer Continue: it rains...
    Brighton: This was all.
    The 25-day night. The "Fairy"
    - The day before the wedding was pretty busy going" at night.
    2




.. GENERATED FROM PYTHON SOURCE LINES 76-77

Let's restore the forward as it was.

.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: Python

    model.forward = keep_model_forward








.. GENERATED FROM PYTHON SOURCE LINES 80-81

Another syntax with :func:`onnx_diagnostic.helpers.torch_test_helper.steel_forward`.

.. GENERATED FROM PYTHON SOURCE LINES 81-85

.. code-block:: Python


    with steel_forward(model):
        model.generate(inputs, max_length=50, temperature=1, top_k=50, top_p=0.95, do_sample=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ---- stolen forward for class LlamaForCausalLM -- iteration 0
      <- args=() --- kwargs=dict(cache_position:T7s8,past_key_values:DynamicCache(key_cache=#0[], value_cache=#0[]),input_ids:T7s1x8,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x8x32000,past_key_values:DynamicCache(key_cache=#1[T1s1x1x8x96], value_cache=#1[T1s1x1x8x96]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 1
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache(key_cache=#1[T1s1x1x8x96], value_cache=#1[T1s1x1x8x96]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache(key_cache=#1[T1s1x1x9x96], value_cache=#1[T1s1x1x9x96]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 2
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache(key_cache=#1[T1s1x1x9x96], value_cache=#1[T1s1x1x9x96]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache(key_cache=#1[T1s1x1x10x96], value_cache=#1[T1s1x1x10x96]))
    .
    ---- stolen forward for class LlamaForCausalLM -- iteration 3
      <- args=() --- kwargs=dict(cache_position:T7s1,past_key_values:DynamicCache(key_cache=#1[T1s1x1x10x96], value_cache=#1[T1s1x1x10x96]),input_ids:T7s1x1,inputs_embeds:None,use_cache:bool,return_dict:bool)
      --
      -> dict(logits:T1s1x1x32000,past_key_values:DynamicCache(key_cache=#1[T1s1x1x11x96], value_cache=#1[T1s1x1x11x96]))
    .




.. GENERATED FROM PYTHON SOURCE LINES 86-99

Untrained model
+++++++++++++++

This part can skipped if you are only interested in exporting
the original model. It is useful to create a unit test to ensure
a specific architecture can be exported despite the many changes
brought to :epkg:`torch` or :epkg:`transformers`.

Let's create an untrained model using the config file provided
`config.json <https://huggingface.co/arnir0/Tiny-LLM/blob/main/config.json>`_
to create an untrained model:
:func:`onnx_diagnostic.torch_models.llms.get_tiny_llm`.
Then let's use it.

.. GENERATED FROM PYTHON SOURCE LINES 99-107

.. code-block:: Python


    experiment = get_tiny_llm()
    untrained_model, inputs, dynamic_shapes = (
        experiment["model"],
        experiment["inputs"],
        experiment["dynamic_shapes"],
    )








.. GENERATED FROM PYTHON SOURCE LINES 108-111

Before we run it, we make a copy of the inputs as the cache
get modified by the execution. Then it is no longer valid
associated with the previous input_ids and mask.

.. GENERATED FROM PYTHON SOURCE LINES 111-114

.. code-block:: Python

    cloned_inputs = copy.deepcopy(inputs)









.. GENERATED FROM PYTHON SOURCE LINES 115-121

.. code-block:: Python

    print("input type before", string_type(inputs, with_shape=True))

    expected_output = untrained_model(**inputs)

    print("input type after-", string_type(inputs, with_shape=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    input type before dict(input_ids:T7s2x3,attention_mask:T7s2x33,position_ids:T7s2x3,past_key_values:DynamicCache(key_cache=#1[T1s2x1x30x96], value_cache=#1[T1s2x1x30x96]))
    input type after- dict(input_ids:T7s2x3,attention_mask:T7s2x33,position_ids:T7s2x3,past_key_values:DynamicCache(key_cache=#1[T1s2x1x33x96], value_cache=#1[T1s2x1x33x96]))




.. GENERATED FROM PYTHON SOURCE LINES 122-123

The outputs

.. GENERATED FROM PYTHON SOURCE LINES 123-126

.. code-block:: Python


    print("result type", string_type(expected_output, with_shape=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    result type dict(logits:T1s2x3x32000,past_key_values:DynamicCache(key_cache=#1[T1s2x1x33x96], value_cache=#1[T1s2x1x33x96]))




.. GENERATED FROM PYTHON SOURCE LINES 127-131

It works.

ExportedProgram
+++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 131-145

.. code-block:: Python


    try:
        ep = torch.export.export(
            untrained_model, (), kwargs=cloned_inputs, dynamic_shapes=dynamic_shapes, strict=False
        )
        print("It worked:")
        print(ep)
    except Exception as e:
        # To work, it needs at least PRs:
        # * https://github.com/huggingface/transformers/pull/36311
        # * https://github.com/huggingface/transformers/pull/36652
        print("It failed:", e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    It failed: Cannot associate shape [[{0: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.batch'>, 2: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.cache_length'>}], [{0: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.batch'>, 2: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.cache_length'>}]] specified at `dynamic_shapes['past_key_values']` to non-tensor type <class 'transformers.cache_utils.DynamicCache'> at `inputs['past_key_values']` (expected None)
    For more information about this error, see: https://pytorch.org/docs/main/generated/exportdb/index.html#dynamic-shapes-validation




.. GENERATED FROM PYTHON SOURCE LINES 146-152

Back to the original model
++++++++++++++++++++++++++

Let's use the same dummy inputs but we use the downloaded model.
Dummy inputs and dynamic shapes are created by function
:func:`onnx_diagnostic.torch_models.llms.get_tiny_llm`.

.. GENERATED FROM PYTHON SOURCE LINES 152-156

.. code-block:: Python


    data = get_tiny_llm()
    inputs, dynamic_shapes = data["inputs"], data["dynamic_shapes"]








.. GENERATED FROM PYTHON SOURCE LINES 157-158

Let's print the inputs.

.. GENERATED FROM PYTHON SOURCE LINES 158-161

.. code-block:: Python


    print(string_type(inputs, with_shape=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    dict(input_ids:T7s2x3,attention_mask:T7s2x33,position_ids:T7s2x3,past_key_values:DynamicCache(key_cache=#1[T1s2x1x30x96], value_cache=#1[T1s2x1x30x96]))




.. GENERATED FROM PYTHON SOURCE LINES 162-164

.. code-block:: Python

    pprint.pprint(dynamic_shapes)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'attention_mask': {0: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.batch'>,
                        1: _DimHint(type=<_DimHintType.DYNAMIC: 3>)},
     'input_ids': {0: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.batch'>,
                   1: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.seq_length'>},
     'past_key_values': [[{0: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.batch'>,
                           2: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.cache_length'>}],
                         [{0: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.batch'>,
                           2: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.cache_length'>}]],
     'position_ids': {0: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.batch'>,
                      1: _DimHint(type=<_DimHintType.DYNAMIC: 3>)}}




.. GENERATED FROM PYTHON SOURCE LINES 165-166

And Let's finally export.

.. GENERATED FROM PYTHON SOURCE LINES 166-179

.. code-block:: Python


    try:
        ep = torch.export.export(
            model, (), kwargs=cloned_inputs, dynamic_shapes=dynamic_shapes, strict=False
        )
        print("It worked:")
        print(ep)
    except Exception as e:
        # To work, it needs at least PRs:
        # * https://github.com/huggingface/transformers/pull/36311
        # * https://github.com/huggingface/transformers/pull/36652
        print("It failed:", e)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    It failed: Cannot associate shape [[{0: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.batch'>, 2: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.cache_length'>}], [{0: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.batch'>, 2: <class 'onnx_diagnostic.torch_models.untrained.llm_tiny_llm.cache_length'>}]] specified at `dynamic_shapes['past_key_values']` to non-tensor type <class 'transformers.cache_utils.DynamicCache'> at `inputs['past_key_values']` (expected None)
    For more information about this error, see: https://pytorch.org/docs/main/generated/exportdb/index.html#dynamic-shapes-validation




.. GENERATED FROM PYTHON SOURCE LINES 180-182

If you have any error, then look at example
:ref:`l-plot-tiny-llm-export-patched`.

.. GENERATED FROM PYTHON SOURCE LINES 182-184

.. code-block:: Python


    doc.plot_legend("Tiny-LLM\nforward inputs\nbehind generate", "torch.export.export", "tomato")



.. image-sg:: /auto_examples/images/sphx_glr_plot_export_tiny_llm_001.png
   :alt: plot export tiny llm
   :srcset: /auto_examples/images/sphx_glr_plot_export_tiny_llm_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.491 seconds)


.. _sphx_glr_download_auto_examples_plot_export_tiny_llm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_export_tiny_llm.ipynb <plot_export_tiny_llm.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_export_tiny_llm.py <plot_export_tiny_llm.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_export_tiny_llm.zip <plot_export_tiny_llm.zip>`


.. include:: plot_export_tiny_llm.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
