
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_failing_reference_evaluator.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_failing_reference_evaluator.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_failing_reference_evaluator.py:


.. _l-plot-failing-reference-evaluator:

Intermediate results with (ONNX) ReferenceEvaluator
===================================================

Let's assume :epkg:`onnxruntime` crashes without telling why or where.
The first thing is do is to locate where. For that, we run a python runtime
which is going to run until it fails.

A failing model
+++++++++++++++

The issue here is a an operator ``Cast`` trying to convert a result
into a non-existing type.

.. GENERATED FROM PYTHON SOURCE LINES 17-49

.. code-block:: Python


    import numpy as np
    import onnx
    import onnx.helper as oh
    import onnxruntime
    from onnx_diagnostic import doc
    from onnx_diagnostic.helpers import from_array_extended
    from onnx_diagnostic.reference import ExtendedReferenceEvaluator

    TFLOAT = onnx.TensorProto.FLOAT

    model = oh.make_model(
        oh.make_graph(
            [
                oh.make_node("Mul", ["X", "Y"], ["xy"], name="n0"),
                oh.make_node("Sigmoid", ["xy"], ["sy"], name="n1"),
                oh.make_node("Add", ["sy", "one"], ["C"], name="n2"),
                oh.make_node("Cast", ["C"], ["X999"], to=999, name="failing"),
                oh.make_node("CastLike", ["X999", "Y"], ["Z"], name="n4"),
            ],
            "-nd-",
            [
                oh.make_tensor_value_info("X", TFLOAT, ["a", "b", "c"]),
                oh.make_tensor_value_info("Y", TFLOAT, ["a", "b", "c"]),
            ],
            [oh.make_tensor_value_info("Z", TFLOAT, ["a", "b", "c"])],
            [from_array_extended(np.array([1], dtype=np.float32), name="one")],
        ),
        opset_imports=[oh.make_opsetid("", 18)],
        ir_version=9,
    )








.. GENERATED FROM PYTHON SOURCE LINES 50-51

We check it is failing.

.. GENERATED FROM PYTHON SOURCE LINES 51-58

.. code-block:: Python


    try:
        onnxruntime.InferenceSession(model.SerializeToString(), providers=["CPUExecutionProvider"])
    except onnxruntime.capi.onnxruntime_pybind11_state.Fail as e:
        print(e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ONNXRuntimeError] : 1 : FAIL : Node (failing) Op (Cast) [TypeInferenceError] Attribute to does not specify a valid type in .




.. GENERATED FROM PYTHON SOURCE LINES 59-66

ExtendedReferenceEvaluator
++++++++++++++++++++++++++

This class extends :class:`onnx.reference.ReferenceEvaluator`
with operators outside the standard but defined by :epkg:`onnxruntime`.
`verbose=10` tells the class to print as much as possible,
`verbose=0` prints nothing. Intermediate values for more or less verbosity.

.. GENERATED FROM PYTHON SOURCE LINES 66-76

.. code-block:: Python


    ref = ExtendedReferenceEvaluator(model, verbose=10)
    feeds = dict(
        X=np.random.rand(3, 4).astype(np.float32), Y=np.random.rand(3, 4).astype(np.float32)
    )
    try:
        ref.run(None, feeds)
    except Exception as e:
        print("ERROR", type(e), e)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

     +C one: float32:(1,):[1.0]
     +I X: float32:(3, 4):0.47112393379211426,0.6567246317863464,0.5304625034332275,0.4142853617668152,0.17197850346565247...
     +I Y: float32:(3, 4):0.9015657901763916,0.5769331455230713,0.6068458557128906,0.5157960653305054,0.5341485738754272...
    Mul(X, Y) -> xy
     + xy: float32:(3, 4):0.4247492253780365,0.3788861930370331,0.32190898060798645,0.2136867642402649,0.09186207503080368...
    Sigmoid(xy) -> sy
     + sy: float32:(3, 4):0.6046191453933716,0.5936044454574585,0.579789400100708,0.5532193183898926,0.5229493975639343...
    Add(sy, one) -> C
     + C: float32:(3, 4):1.6046191453933716,1.5936044454574585,1.579789400100708,1.5532193183898926,1.522949457168579...
    Cast(C) -> X999
    ERROR <class 'KeyError'> 999




.. GENERATED FROM PYTHON SOURCE LINES 77-83

We can see it run until it reaches `Cast` and stops.
The error message is not always obvious to interpret.
It gets improved every time from time to time.
This runtime is useful when it fails for a numerical reason.
It is possible to insert prints in the python code to print
more information or debug if needed.

.. GENERATED FROM PYTHON SOURCE LINES 83-85

.. code-block:: Python


    doc.plot_legend("Python Runtime\nfor ONNX", "ExtendedReferenceEvalutor", "lightgrey")



.. image-sg:: /auto_examples/images/sphx_glr_plot_failing_reference_evaluator_001.png
   :alt: plot failing reference evaluator
   :srcset: /auto_examples/images/sphx_glr_plot_failing_reference_evaluator_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.126 seconds)


.. _sphx_glr_download_auto_examples_plot_failing_reference_evaluator.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_failing_reference_evaluator.ipynb <plot_failing_reference_evaluator.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_failing_reference_evaluator.py <plot_failing_reference_evaluator.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_failing_reference_evaluator.zip <plot_failing_reference_evaluator.zip>`


.. include:: plot_failing_reference_evaluator.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
